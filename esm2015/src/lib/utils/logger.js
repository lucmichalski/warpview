/*
 *  Copyright 2020  SenX S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/* tslint:disable:no-console */
export class Logger {
    constructor(className, isDebug = false) {
        this.isDebug = false;
        this.className = className.name;
        this.isDebug = isDebug;
    }
    setDebug(debug) {
        this.isDebug = debug;
    }
    log(level, methods, args) {
        let logChain = [];
        logChain.push(`[${new Date().toISOString()} - [${this.className}] ${methods.join(' - ')}`);
        logChain = logChain.concat(args);
        switch (level) {
            case LEVEL.DEBUG: {
                if (this.isDebug) {
                    console.debug(...logChain);
                }
                break;
            }
            case LEVEL.ERROR: {
                console.error(...logChain);
                break;
            }
            case LEVEL.INFO: {
                console.log(...logChain);
                break;
            }
            case LEVEL.WARN: {
                console.warn(...logChain);
                break;
            }
            default: {
                if (this.isDebug) {
                    console.log(...logChain);
                }
            }
        }
    }
    debug(methods, ...args) {
        this.log(LEVEL.DEBUG, methods, args);
    }
    error(methods, ...args) {
        this.log(LEVEL.ERROR, methods, args);
    }
    warn(methods, ...args) {
        this.log(LEVEL.WARN, methods, args);
    }
    info(methods, ...args) {
        this.log(LEVEL.INFO, methods, args);
    }
}
export var LEVEL;
(function (LEVEL) {
    LEVEL[LEVEL["DEBUG"] = 0] = "DEBUG";
    LEVEL[LEVEL["ERROR"] = 1] = "ERROR";
    LEVEL[LEVEL["WARN"] = 2] = "WARN";
    LEVEL[LEVEL["INFO"] = 3] = "INFO";
})(LEVEL || (LEVEL = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3hhdmllci93b3Jrc3BhY2Uvd2FycC12aWV3L3Byb2plY3RzL3dhcnB2aWV3LW5nLyIsInNvdXJjZXMiOlsic3JjL2xpYi91dGlscy9sb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsK0JBQStCO0FBRS9CLE1BQU0sT0FBTyxNQUFNO0lBS2pCLFlBQVksU0FBYyxFQUFFLFVBQW1CLEtBQUs7UUFGcEQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUdkLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWM7UUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELEdBQUcsQ0FBQyxLQUFZLEVBQUUsT0FBYyxFQUFFLElBQVc7UUFDM0MsSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDM0YsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7aUJBQzVCO2dCQUNELE1BQU07YUFDUDtZQUNELEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQzNCLE1BQU07YUFDUDtZQUNELEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDekIsTUFBTTthQUNQO1lBQ0QsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQixNQUFNO2FBQ1A7WUFDRCxPQUFPLENBQUMsQ0FBQztnQkFDUCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztpQkFDMUI7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFXO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFXO1FBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFXO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksQ0FBQyxPQUFjLEVBQUUsR0FBRyxJQUFXO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFOLElBQVksS0FFWDtBQUZELFdBQVksS0FBSztJQUNmLG1DQUFLLENBQUE7SUFBRSxtQ0FBSyxDQUFBO0lBQUUsaUNBQUksQ0FBQTtJQUFFLGlDQUFJLENBQUE7QUFDMUIsQ0FBQyxFQUZXLEtBQUssS0FBTCxLQUFLLFFBRWhCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBDb3B5cmlnaHQgMjAyMCAgU2VuWCBTLkEuUy5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlICovXG5cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuXG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICBpc0RlYnVnID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoY2xhc3NOYW1lOiBhbnksIGlzRGVidWc6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lLm5hbWU7XG4gICAgdGhpcy5pc0RlYnVnID0gaXNEZWJ1ZztcbiAgfVxuXG4gIHNldERlYnVnKGRlYnVnOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0RlYnVnID0gZGVidWc7XG4gIH1cblxuICBsb2cobGV2ZWw6IExFVkVMLCBtZXRob2RzOiBhbnlbXSwgYXJnczogYW55W10pIHtcbiAgICBsZXQgbG9nQ2hhaW4gPSBbXTtcbiAgICBsb2dDaGFpbi5wdXNoKGBbJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9IC0gWyR7dGhpcy5jbGFzc05hbWV9XSAke21ldGhvZHMuam9pbignIC0gJyl9YCk7XG4gICAgbG9nQ2hhaW4gPSBsb2dDaGFpbi5jb25jYXQoYXJncyk7XG4gICAgc3dpdGNoIChsZXZlbCkge1xuICAgICAgY2FzZSBMRVZFTC5ERUJVRzoge1xuICAgICAgICBpZiAodGhpcy5pc0RlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZyguLi5sb2dDaGFpbik7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIExFVkVMLkVSUk9SOiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoLi4ubG9nQ2hhaW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgTEVWRUwuSU5GTzoge1xuICAgICAgICBjb25zb2xlLmxvZyguLi5sb2dDaGFpbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBMRVZFTC5XQVJOOiB7XG4gICAgICAgIGNvbnNvbGUud2FybiguLi5sb2dDaGFpbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5pc0RlYnVnKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coLi4ubG9nQ2hhaW4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVidWcobWV0aG9kczogYW55W10sIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coTEVWRUwuREVCVUcsIG1ldGhvZHMsIGFyZ3MpO1xuICB9XG5cbiAgZXJyb3IobWV0aG9kczogYW55W10sIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coTEVWRUwuRVJST1IsIG1ldGhvZHMsIGFyZ3MpO1xuICB9XG5cbiAgd2FybihtZXRob2RzOiBhbnlbXSwgLi4uYXJnczogYW55W10pIHtcbiAgICB0aGlzLmxvZyhMRVZFTC5XQVJOLCBtZXRob2RzLCBhcmdzKTtcbiAgfVxuXG4gIGluZm8obWV0aG9kczogYW55W10sIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coTEVWRUwuSU5GTywgbWV0aG9kcywgYXJncyk7XG4gIH1cbn1cblxuZXhwb3J0IGVudW0gTEVWRUwge1xuICBERUJVRywgRVJST1IsIFdBUk4sIElORk9cbn1cbiJdfQ==