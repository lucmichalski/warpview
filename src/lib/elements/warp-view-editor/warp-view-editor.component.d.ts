import { editor } from 'monaco-editor';
import ResizeObserver from 'resize-observer-polyfill';
import { Config } from '../../model/config';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import IEditorOptions = editor.IEditorOptions;
export declare class WarpViewEditorComponent implements OnInit, OnDestroy, AfterViewInit {
    private el;
    private http;
    url: string;
    lang: 'warpscript' | 'flows';
    set debug(debug: boolean | string);
    get debug(): boolean | string;
    set theme(newValue: string);
    get theme(): string;
    set warpscript(newValue: string);
    get warpscript(): string;
    get showDataviz(): boolean;
    set showDataviz(value: boolean);
    private _showExecute;
    get showExecute(): boolean;
    set showExecute(value: boolean);
    get showResult(): boolean;
    set showResult(value: boolean);
    set config(config: Config | string);
    get config(): Config | string;
    get displayMessages(): boolean;
    set displayMessages(value: boolean);
    get widthPx(): number;
    set widthPx(value: number);
    get heightLine(): number;
    set heightLine(value: number);
    get heightPx(): number;
    set heightPx(value: number);
    get imageTab(): boolean;
    set imageTab(value: boolean);
    get initialSize(): {
        w?: number;
        h?: number;
        name?: string;
        p?: number;
    } | string;
    set initialSize(value: {
        w?: number;
        h?: number;
        name?: string;
        p?: number;
    } | string);
    warpViewEditorStatusEvent: EventEmitter<any>;
    warpViewEditorErrorEvent: EventEmitter<any>;
    warpViewEditorWarpscriptChanged: EventEmitter<any>;
    warpViewEditorWarpscriptResult: EventEmitter<any>;
    warpViewEditorLoaded: EventEmitter<any>;
    warpViewEditorSize: EventEmitter<any>;
    warpViewEditorBreakPoint: EventEmitter<any>;
    warpViewEditorCtrlClick: EventEmitter<any>;
    warpViewEditorDatavizRequested: EventEmitter<any>;
    wrapper: ElementRef<HTMLDivElement>;
    editor: ElementRef<HTMLDivElement>;
    buttons: ElementRef<HTMLDivElement>;
    contentWrapper: ElementRef<HTMLDivElement>;
    result: string;
    status: {
        message: string;
        ops: number;
        elapsed: number;
        fetched: number;
    };
    error: string;
    loading: boolean;
    selectedResultTab: number;
    lastKnownWS: string;
    headers: any[];
    innerConfig: Config;
    ro: ResizeObserver;
    _theme: string;
    _warpscript: string;
    _debug: boolean;
    _displayMessages: boolean;
    _showDataviz: boolean;
    private _heightPx;
    private _heightLine;
    private _showResult;
    private _imageTab;
    private _widthPx;
    private _initialSize;
    private static MIN_HEIGHT;
    private LOG;
    private ed;
    private monacoTheme;
    private innerCode;
    private breakpoints;
    private decoration;
    private previousParentHeight;
    private previousParentWidth;
    private request;
    private resizeWatcherInt;
    constructor(el: ElementRef, http: HttpClient);
    ngOnInit(): void;
    resizeWatcher(): void;
    setOptions(): IEditorOptions;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    abort(session?: string): void;
    highlight(line: number): void;
    private toggleBreakPoint;
    private handleError;
    execute(session?: any): void;
    requestDataviz(): void;
    onResized($event: any): void;
    isMac(): boolean;
    onKeyDown($event: any): void;
    onKeyUp($event: any): void;
    resize(initial: boolean): void;
    getItems(): any[];
    responsiveStyle(): {
        height: string;
        width: string;
        overflow: string;
    };
    private sendError;
    private sendStatus;
    private static getLabel;
}
