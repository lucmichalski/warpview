/*
 *  Copyright 2020 SenX S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import { languages } from 'monaco-editor';
var CompletionItemKind = languages.CompletionItemKind;
export class W10CompletionItemProvider {
    constructor(languageId) {
        this.languageId = languageId;
    }
    _provideCompletionItems(model, position, _context, token, source, snippets) {
        const defs = {
            suggestions: [],
        };
        source.forEach(f => {
            const item = {
                label: this.transformKeyWord(f.name),
                insertText: this.transformKeyWord(f.name),
                range: undefined,
                kind: W10CompletionItemProvider.getType(f.tags, f.name)
            };
            defs.suggestions.push(item);
        });
        Object.keys(snippets).forEach(s => {
            const snippet = snippets[s];
            defs.suggestions.push({
                label: s,
                kind: languages.CompletionItemKind.Snippet,
                insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,
                documentation: snippet.prefix,
                insertText: snippet.body.join('\n')
            });
        });
        return Promise.resolve(defs);
    }
    static getType(tags, name) {
        const t = tags.join(' ');
        if (t.indexOf('constant') > -1) {
            return CompletionItemKind.Enum;
        }
        else if (t.indexOf('reducer') > -1 && name !== 'REDUCE') {
            return CompletionItemKind.Interface;
        }
        else if (t.indexOf('mapper') > -1 && name !== 'MAP') {
            return CompletionItemKind.Interface;
        }
        else if (t.indexOf('bucketize') > -1 && name !== 'BUCKETIZE') {
            return CompletionItemKind.Interface;
        }
        else if (t.indexOf('filter') > -1 && name !== 'FILTER') {
            return CompletionItemKind.Interface;
        }
        else if (t.indexOf('control') > -1) {
            return CompletionItemKind.Keyword;
        }
        else if (t.indexOf('operators') > -1) {
            return CompletionItemKind.Method;
        }
        else if (t.indexOf('stack') > -1) {
            return CompletionItemKind.Module;
        }
        else {
            return CompletionItemKind.Function;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVzEwQ29tcGxldGlvbkl0ZW1Qcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIvaG9tZS94YXZpZXIvd29ya3NwYWNlL3dhcnB2aWV3LWVkaXRvci9wcm9qZWN0cy93YXJwdmlldy1lZGl0b3ItbmcvIiwic291cmNlcyI6WyJzcmMvbGliL2VsZW1lbnRzL3dhcnAtdmlldy1lZGl0b3IvcHJvdmlkZXJzL1cxMENvbXBsZXRpb25JdGVtUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCxPQUFPLEVBQTRCLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFFdkYsSUFBTyxrQkFBa0IsR0FBRyxTQUFTLENBQUMsa0JBQWtCLENBQUM7QUFNekQsTUFBTSxPQUFnQix5QkFBeUI7SUFHN0MsWUFBc0IsVUFBa0I7UUFDdEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDL0IsQ0FBQztJQU1TLHVCQUF1QixDQUFDLEtBQTRCLEVBQUUsUUFBa0IsRUFBRSxRQUFxQyxFQUFFLEtBQXdCLEVBQUUsTUFBVyxFQUFFLFFBQWE7UUFDN0ssTUFBTSxJQUFJLEdBQW1CO1lBQzNCLFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUM7UUFDRixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxHQUFtQjtnQkFDM0IsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUNwQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pDLEtBQUssRUFBRSxTQUFTO2dCQUNoQixJQUFJLEVBQUUseUJBQXlCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7UUFDSCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoQyxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7Z0JBQ3BCLEtBQUssRUFBRSxDQUFDO2dCQUNSLElBQUksRUFBRSxTQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTztnQkFDMUMsZUFBZSxFQUFFLFNBQVMsQ0FBQyw0QkFBNEIsQ0FBQyxlQUFlO2dCQUN2RSxhQUFhLEVBQUUsT0FBTyxDQUFDLE1BQU07Z0JBQzdCLFVBQVUsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDbEIsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQWMsRUFBRSxJQUFZO1FBQ2pELE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQzlCLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxDQUFDO1NBQ2hDO2FBQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDekQsT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLENBQUM7U0FDckM7YUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtZQUNyRCxPQUFPLGtCQUFrQixDQUFDLFNBQVMsQ0FBQztTQUNyQzthQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssV0FBVyxFQUFFO1lBQzlELE9BQU8sa0JBQWtCLENBQUMsU0FBUyxDQUFDO1NBQ3JDO2FBQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDeEQsT0FBTyxrQkFBa0IsQ0FBQyxTQUFTLENBQUM7U0FDckM7YUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDcEMsT0FBTyxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7U0FDbkM7YUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDdEMsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7U0FDbEM7YUFBTSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7U0FDbEM7YUFBTTtZQUNMLE9BQU8sa0JBQWtCLENBQUMsUUFBUSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqICBDb3B5cmlnaHQgMjAyMCBTZW5YIFMuQS5TLlxuICpcbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IHtDYW5jZWxsYXRpb25Ub2tlbiwgZWRpdG9yLCBsYW5ndWFnZXMsIFBvc2l0aW9uLCBUaGVuYWJsZX0gZnJvbSAnbW9uYWNvLWVkaXRvcic7XG5pbXBvcnQgQ29tcGxldGlvbkxpc3QgPSBsYW5ndWFnZXMuQ29tcGxldGlvbkxpc3Q7XG5pbXBvcnQgQ29tcGxldGlvbkl0ZW1LaW5kID0gbGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZDtcbmltcG9ydCBDb21wbGV0aW9uSXRlbVByb3ZpZGVyID0gbGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtUHJvdmlkZXI7XG5pbXBvcnQgSVJlYWRPbmx5TW9kZWwgPSBlZGl0b3IuSVJlYWRPbmx5TW9kZWw7XG5pbXBvcnQgQ29tcGxldGlvbkNvbnRleHQgPSBsYW5ndWFnZXMuQ29tcGxldGlvbkNvbnRleHQ7XG5pbXBvcnQgQ29tcGxldGlvbkl0ZW0gPSBsYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW07XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBXMTBDb21wbGV0aW9uSXRlbVByb3ZpZGVyIGltcGxlbWVudHMgQ29tcGxldGlvbkl0ZW1Qcm92aWRlciB7XG4gIGxhbmd1YWdlSWQ6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IobGFuZ3VhZ2VJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcbiAgfVxuXG4gIGFic3RyYWN0IHByb3ZpZGVDb21wbGV0aW9uSXRlbXMobW9kZWw6IElSZWFkT25seU1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIF9jb250ZXh0OiBDb21wbGV0aW9uQ29udGV4dCwgdG9rZW46IENhbmNlbGxhdGlvblRva2VuKTogVGhlbmFibGU8Q29tcGxldGlvbkxpc3Q+O1xuXG4gIGFic3RyYWN0IHRyYW5zZm9ybUtleVdvcmQoa2V5d29yZDogc3RyaW5nKTogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBfcHJvdmlkZUNvbXBsZXRpb25JdGVtcyhtb2RlbDogZWRpdG9yLklSZWFkT25seU1vZGVsLCBwb3NpdGlvbjogUG9zaXRpb24sIF9jb250ZXh0OiBsYW5ndWFnZXMuQ29tcGxldGlvbkNvbnRleHQsIHRva2VuOiBDYW5jZWxsYXRpb25Ub2tlbiwgc291cmNlOiBhbnksIHNuaXBwZXRzOiBhbnkpOiBUaGVuYWJsZTxsYW5ndWFnZXMuQ29tcGxldGlvbkxpc3Q+IHtcbiAgICBjb25zdCBkZWZzOiBDb21wbGV0aW9uTGlzdCA9IHtcbiAgICAgIHN1Z2dlc3Rpb25zOiBbXSxcbiAgICB9O1xuICAgIHNvdXJjZS5mb3JFYWNoKGYgPT4ge1xuICAgICAgY29uc3QgaXRlbTogQ29tcGxldGlvbkl0ZW0gPSB7XG4gICAgICAgIGxhYmVsOiB0aGlzLnRyYW5zZm9ybUtleVdvcmQoZi5uYW1lKSxcbiAgICAgICAgaW5zZXJ0VGV4dDogdGhpcy50cmFuc2Zvcm1LZXlXb3JkKGYubmFtZSksXG4gICAgICAgIHJhbmdlOiB1bmRlZmluZWQsXG4gICAgICAgIGtpbmQ6IFcxMENvbXBsZXRpb25JdGVtUHJvdmlkZXIuZ2V0VHlwZShmLnRhZ3MsIGYubmFtZSlcbiAgICAgIH07XG4gICAgICBkZWZzLnN1Z2dlc3Rpb25zLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gICAgT2JqZWN0LmtleXMoc25pcHBldHMpLmZvckVhY2gocyA9PiB7XG4gICAgICBjb25zdCBzbmlwcGV0ID0gc25pcHBldHNbc107XG4gICAgICBkZWZzLnN1Z2dlc3Rpb25zLnB1c2goe1xuICAgICAgICBsYWJlbDogcyxcbiAgICAgICAga2luZDogbGFuZ3VhZ2VzLkNvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0LFxuICAgICAgICBpbnNlcnRUZXh0UnVsZXM6IGxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUluc2VydFRleHRSdWxlLkluc2VydEFzU25pcHBldCxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogc25pcHBldC5wcmVmaXgsXG4gICAgICAgIGluc2VydFRleHQ6IHNuaXBwZXQuYm9keS5qb2luKCdcXG4nKVxuICAgICAgfSBhcyBDb21wbGV0aW9uSXRlbSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGRlZnMpO1xuICB9XG5cbiAgcHJpdmF0ZSBzdGF0aWMgZ2V0VHlwZSh0YWdzOiBzdHJpbmdbXSwgbmFtZTogc3RyaW5nKTogQ29tcGxldGlvbkl0ZW1LaW5kIHtcbiAgICBjb25zdCB0ID0gdGFncy5qb2luKCcgJyk7XG4gICAgaWYgKHQuaW5kZXhPZignY29uc3RhbnQnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gQ29tcGxldGlvbkl0ZW1LaW5kLkVudW07XG4gICAgfSBlbHNlIGlmICh0LmluZGV4T2YoJ3JlZHVjZXInKSA+IC0xICYmIG5hbWUgIT09ICdSRURVQ0UnKSB7XG4gICAgICByZXR1cm4gQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICB9IGVsc2UgaWYgKHQuaW5kZXhPZignbWFwcGVyJykgPiAtMSAmJiBuYW1lICE9PSAnTUFQJykge1xuICAgICAgcmV0dXJuIENvbXBsZXRpb25JdGVtS2luZC5JbnRlcmZhY2U7XG4gICAgfSBlbHNlIGlmICh0LmluZGV4T2YoJ2J1Y2tldGl6ZScpID4gLTEgJiYgbmFtZSAhPT0gJ0JVQ0tFVElaRScpIHtcbiAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgIH0gZWxzZSBpZiAodC5pbmRleE9mKCdmaWx0ZXInKSA+IC0xICYmIG5hbWUgIT09ICdGSUxURVInKSB7XG4gICAgICByZXR1cm4gQ29tcGxldGlvbkl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICB9IGVsc2UgaWYgKHQuaW5kZXhPZignY29udHJvbCcpID4gLTEpIHtcbiAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDtcbiAgICB9IGVsc2UgaWYgKHQuaW5kZXhPZignb3BlcmF0b3JzJykgPiAtMSkge1xuICAgICAgcmV0dXJuIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2Q7XG4gICAgfSBlbHNlIGlmICh0LmluZGV4T2YoJ3N0YWNrJykgPiAtMSkge1xuICAgICAgcmV0dXJuIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgfVxuICB9XG59XG4iXX0=