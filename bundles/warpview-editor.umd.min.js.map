{"version":3,"sources":["../../../projects/warpview-editor-ng/src/lib/model/utils.ts","../../../projects/warpview-editor-ng/src/lib/model/config.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/warpview-editor-ng/src/lib/model/logger.ts","../../../projects/warpview-editor-ng/src/lib/model/bubblingEvent.ts","../../../projects/warpview-editor-ng/src/lib/model/warpScriptParser.ts","../../../projects/warpview-editor-ng/src/lib/model/ref.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/W10CompletionItemProvider.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/editorUtils.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/SnippetsWarpScript.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/WSCompletionItemProvider.ts","../../../projects/warpview-editor-ng/src/lib/model/monarch.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/WSLanguageConfiguration.ts","../../../projects/warpview-editor-ng/src/lib/model/wsGlobals.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/W10HoverProvider.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/WSHoverProvider.ts","../../../projects/warpview-editor-ng/src/lib/model/refFLows.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/SnippetsFlows.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/FLoWSCompletionItemProvider.ts","../../../projects/warpview-editor-ng/src/lib/model/flowsGlobals.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/FLoWSHoverProvider.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/FLoWSLanguageConfiguration.ts","../../../projects/warpview-editor-ng/src/lib/model/monarchFlows.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/providers/ProviderRegistrar.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-editor/warp-view-editor.component.ts","../../../projects/warpview-editor-ng/src/lib/model/gts.lib.ts","../../../projects/warpview-editor-ng/src/lib/model/jsonLib.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-image-result/warp-view-image-result.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-result/warp-view-result.ts","../../../projects/warpview-editor-ng/src/lib/model/editorConfig.ts","../../../projects/warpview-editor-ng/src/lib/elements/warp-view-raw-result/warp-view-raw-result.component.ts","../../../projects/warpview-editor-ng/src/lib/warp-view-editor-angular.module.ts","../../../projects/warpview-editor-ng/src/lib/model/buttonConfig.ts"],"names":["Utils","mergeDeep","sources","_i","arguments","length","extended","deep","i","obj","merge","prop","hasOwnProperty","Object","prototype","toString","call","toArray","arr","keys","forEach","k","push","this","buttons","class","execButton","label","datavizButton","hover","readOnly","messageClass","errorClass","editor","quickSuggestionsDelay","quickSuggestions","tabSize","minLineNumber","enableDebug","rawResultsReadOnly","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","__extends","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","ar","next","done","value","error","__spread","concat","LEVEL","Logger","className","isDebug","name","setDebug","debug","log","level","methods","args","logChain","join","DEBUG","console","apply","ERROR","INFO","WARN","warn","info","BubblingEvents","emitBubblingEvent","el","eventname","eventdetail","nativeElement","dispatchEvent","CustomEvent","bubbles","detail","composed","WarpScriptParser","parseWarpScriptStatements","ws","result","charAt","lines","substring","split","lc","trim","start","extractSpecialComments","executedWarpScript","warpscriptLines","l","currentLine","startsWith","lineOnMatch","re","RegExp","exec","replace","parameterName","parameterValue","endpoint","localMacroSubstitution","toLowerCase","indexOf","timeUnit","substr","displayPreviewOpt","WarpScript","reference","documentation","tags","since","OPB64name","CompletionItemKind","languages","W10CompletionItemProvider","languageId","_provideCompletionItems","model","position","_context","token","source","snippets","_this","defs","suggestions","f","item","transformKeyWord","insertText","range","undefined","kind","getType","s","snippet","Snippet","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","prefix","body","Promise","resolve","t","Enum","Interface","Keyword","Method","Module","Function","EditorUtils","formatElapsedTime","elapsed","toFixed","WARPSCRIPT_LANGUAGE","FLOWS_LANGUAGE","SnippetsWarpScript","macro","description","macro(empty)","fetch","bucketize","filter","map","reduce","ift","ifte","switch","try","while","until","for","foreach","forstep","shm","WSCompletionItemProvider","_super","keyword","provideCompletionItems","Monarch","rules","keywords","constants","functions","control","operators","escapes","tokenizer","root","cases","@constants","@keywords","@functions","@control","@default","include","whitespace","comment","string","string2","string3","IndentAction","WSLanguageConfiguration","getConfiguration","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","onEnterRules","beforeText","afterText","action","indentAction","IndentOutdent","appendText","None","removeText","globalfunctions","!","signature","!=","%","&","&&","(","()",")","*","**","+","+!","-","->B64","->B64URL","->BIN","->BYTES","->DOUBLEBITS","->ENCODER","->ENCODERS","->FLOATBITS","->GEOCELL","->GEOHASH","->GEOJSON","->GEOSHAPE","->GTS","->GTSHHCODE","->GTSHHCODELONG","->HEX","->HHCODE","->HHCODELONG","->JSON","->LIST","->LONGBYTES","->MAP","->MAT","->MVSTRING","->OPB64","->PICKLE","->Q","->SET","->TSELEMENTS","->V","->VARINT","->VEC","->WKB","->WKT","->Z","/","<","<<","<=","==",">",">=",">>",">>>","ABS","ACCEL.CACHE","ACCEL.NOCACHE","ACCEL.NOPERSIST","ACCEL.PERSIST","ACCEL.REPORT","ACOS","ADDDAYS","ADDDURATION","ADDEXACT","ADDMONTHS","ADDVALUE","ADDYEARS","AESUNWRAP","AESWRAP","AGO","AND","APPEND","APPLY","ASENCODERS","ASIN","ASREGS","ASSERT","ASSERTMSG","ATAN","ATAN2","ATBUCKET","ATINDEX","ATTICK","ATTRIBUTES","AUTHENTICATE","B64->","B64TOHEX","B64URL->","BBOX","BIN->","BINTOHEX","BITCOUNT","BITGET","BITSTOBYTES","BOOTSTRAP","BREAK","BUCKETCOUNT","BUCKETIZE","BUCKETIZE.CALENDAR","BUCKETSPAN","BYTES->","BYTESTOBITS","CALL","CBRT","CEIL","CEVAL","CHECKMACRO","CHECKSHAPE","CHRONOEND","CHRONOSTART","CHRONOSTATS","CHUNK","CHUNKENCODER","CLEAR","CLEARDEFS","CLEARREGS","CLEARSYMBOLS","CLEARTOMARK","CLIP","CLONE","CLONEEMPTY","CLONEREVERSE","COMMONTICKS","COMPACT","CONTAINS","CONTAINSKEY","CONTAINSVALUE","CONTINUE","COPYGEO","COPYSIGN","CORRELATE","COS","COSH","COUNTER","COUNTERDELTA","COUNTERSET","COUNTERVALUE","COUNTTOMARK","CPOPR","CPROB","CROP","CSTORE","CUDF","DEBUGOFF","DEBUGON","DECREMENTEXACT","DEDUP","DEF","DEFINED","DEFINEDMACRO","DEFLATE","DELETE","DELETEOFF","DELETEON","DEPTH","DEREF","DET","DIFFERENCE","DISCORDS","DOC","DOCMODE","DOUBLEBITS->","DOUBLEEXPONENTIALSMOOTHING","DROP","DROPN","DTW","DUP","DUPN","DURATION","DWTSPLIT","E","ECGEN","ECHOOFF","ECHOON","ECPRIVATE","ECPUBLIC","ECSIGN","ECVERIFY","ELAPSED","ELEVATIONS","EMPTY","ENCODER->","ESDTEST","EVAL","EVALSECURE","EVERY","EXP","EXPM1","EXPORT","EXTLOADED","F","FAIL","FDWT","FETCH","FETCHBOOLEAN","FETCHDOUBLE","FETCHLONG","FETCHSTRING","FFT","FFTAP","FFTWINDOW","FILL","FILLNEXT","FILLPREVIOUS","FILLTICKS","FILLVALUE","FILTER","FILTERBY","FIND","FINDSETS","FINDSTATS","FIRSTTICK","FLATTEN","FLOATBITS->","FLOOR","FLOORDIV","FLOORMOD","FOR","FOREACH","FORGET","FORSTEP","FROMBIN","FROMBITS","FROMHEX","FUNCTIONS","FUSE","GEO.BUFFER","GEO.COVER","GEO.COVER.RL","GEO.DIFFERENCE","GEO.INTERSECTION","GEO.INTERSECTS","GEO.JSON","GEO.JSON.UNIFORM","GEO.NORMALIZE","GEO.OPTIMIZE","GEO.REGEXP","GEO.UNION","GEO.WITHIN","GEO.WKB","GEO.WKB.UNIFORM","GEO.WKT","GEO.WKT.UNIFORM","GEOCELL->","GEOHASH->","GEOPACK","GEOSHAPE->","GEOSHIFT","GEOSPLIT","GEOUNPACK","GET","GETEXPONENT","GETHOOK","GETSECTION","GOLDWRAP","GROUPBY","GRUBBSTEST","GTSHHCODE->","GZIP","HASH","HAVERSINE","HEADER","HEX->","HEXTOB64","HEXTOBIN","HHCODE->","HHCODE.BBOX","HHCODE.CENTER","HHCODE.EAST","HHCODE.NORTH","HHCODE.NORTH.EAST","HHCODE.NORTH.WEST","HHCODE.SOUTH","HHCODE.SOUTH.EAST","HHCODE.SOUTH.WEST","HHCODE.WEST","HIDE","HLOCATE","HULLSHAPE","HUMANDURATION","HYBRIDTEST","HYBRIDTEST2","HYPOT","IDENT","IDWT","IEEEREMAINDER","IFFT","IFT","IFTE","IMMUTABLE","IMPORT","INCREMENTEXACT","INFLATE","INFOMODE","INTEGRATE","INTERPOLATE","INTERSECTION","INV","ISAUTHENTICATED","ISNULL","ISNaN","ISO8601","ISODURATION","ISONORMALIZE","JOIN","JSON->","JSONLOOSE","JSONSTACK","JSONSTRICT","KEYLIST","KURTOSIS","LABELS","LASTACTIVITY","LASTBUCKET","LASTSORT","LASTTICK","LBOUNDS","LFLATMAP","LIMIT","LINEOFF","LINEON","LIST->","LMAP","LOAD","LOCATIONOFFSET","LOCATIONS","LOCSTRINGS","LOG","LOG10","LOG1P","LOGEVENT->","LOGMSG","LOWESS","LR","LSORT","LTTB","MACROBUCKETIZER","MACROCONFIG","MACROCONFIGDEFAULT","MACROCONFIGSECRET","MACROFILLER","MACROFILTER","MACROMAPPER","MACROREDUCER","MACROTTL","MAKEGTS","MAN","MAP","MAP->","MAPID","MARK","MAT->","MATCH","MATCHER","MAX","MAXBUCKETS","MAXDEPTH","MAXGEOCELLS","MAXGTS","MAXJSON","MAXLONG","MAXLOOP","MAXOPS","MAXPIXELS","MAXRECURSION","MAXSYMBOLS","MAXURLFETCHCOUNT","MAXURLFETCHSIZE","MD5","MERGE","META","METADIFF","METAOFF","METAON","METASET","METASORT","MIN","MINLONG","MINREV","MMAP","MODE","MONOTONIC","MOTIONSPLIT","MSGFAIL","MSORT","MSTU","MULTIPLYEXACT","MUSIGMA","MUTEX","MVELEVATIONS","MVHHCODES","MVINDEXSPLIT","MVLOCATIONS","MVTICKS","MVTICKSPLIT","MVVALUES","NAME","NBOUNDS","NDEBUGON","NEGATEEXACT","NEWENCODER","NEWGTS","NEXTAFTER","NEXTDOWN","NEXTUP","NOLOG","NONEMPTY","NONNULL","NOOP","NORMALIZE","NOT","NOTAFTER","NOTBEFORE","NOTIMINGS","NOW","NPDF","NPEEK","NRETURN","NSUMSUMSQ","NULL","NaN","ONLYBUCKETS","OPB64->","OPB64TOHEX","OPS","OPTDTW","OPTIMIZE","OR","PACK","PAPPLY","PARSE","PARSESELECTOR","PARSEVALUE","PARTITION","PATTERNDETECTION","PATTERNS","PEEK","PEEKN","PERMUTE","PFILTER","PGraphics","PI","PICK","PICKLE->","PIGSCHEMA","PIVOT","PIVOTSTRICT","POPR","PREDUCE","PRNG","PROB","PROBABILITY","PSTACK","PUSHR","PUT","Palpha","Parc","Pbackground","PbeginContour","PbeginShape","Pbezier","PbezierDetail","PbezierPoint","PbezierTangent","PbezierVertex","Pblend","PblendMode","Pblue","Pbox","Pbrightness","Pclear","Pclip","Pcolor","PcolorMode","Pconstrain","Pcopy","PcreateFont","Pcurve","PcurveDetail","PcurvePoint","PcurveTangent","PcurveTightness","PcurveVertex","Pdecode","Pdist","Pellipse","PellipseMode","Pencode","PendContour","PendShape","Pfill","Pfilter","Pget","Pgreen","Phue","Pimage","PimageMode","Plerp","PlerpColor","Pline","PloadShape","Pmag","Pmap","Pmask","PnoClip","PnoFill","PnoStroke","PnoTint","Pnorm","Ppixels","Ppoint","PpopMatrix","PpopStyle","PpushMatrix","PpushStyle","Pquad","PquadraticVertex","Prect","PrectMode","Pred","PresetMatrix","Protate","Psaturation","Pscale","Pset","Pshape","PshapeMode","PshearX","PshearY","Psize","Psphere","PsphereDetail","Pstroke","PstrokeCap","PstrokeJoin","PstrokeWeight","Ptext","PtextAlign","PtextAscent","PtextDescent","PtextFont","PtextLeading","PtextMode","PtextSize","PtextWidth","Ptint","PtoImage","Ptranslate","Ptriangle","PupdatePixels","Pvertex","Q->","QCONJUGATE","QDIVIDE","QMULTIPLY","QROTATE","QROTATION","QUANTIZE","RAND","RANDOM","RANDPDF","RANGE","RANGECOMPACT","RAWDTW","REDEFS","REDUCE","RELABEL","REMOVE","REMOVETICK","RENAME","REOPTALT","REPLACE","REPLACEALL","REPORT","RESET","RESETS","RESHAPE","RESTORE","RETHROW","RETURN","REV","REVBITS","REVERSE","REXEC","REXECZ","RINT","RLOWESS","ROLL","ROLLD","ROT","ROTATIONQ","ROUND","RSADECRYPT","RSAENCRYPT","RSAGEN","RSAPRIVATE","RSAPUBLIC","RSASIGN","RSAVERIFY","RSORT","RTFM","RUN","RUNNERNONCE","RUNR","RVALUESORT","SAVE","SCALB","SECTION","SECURE","SECUREKEY","SENSISION.DUMP","SENSISION.DUMPEVENTS","SENSISION.EVENT","SENSISION.GET","SENSISION.SET","SENSISION.UPDATE","SET","SET->","SETATTRIBUTES","SETMACROCONFIG","SETVALUE","SHA1","SHA1HMAC","SHA256","SHA256HMAC","SHAPE","SHMLOAD","SHMSTORE","SHOW","SHRINK","SHUFFLE","SIGNUM","SIN","SINGLEEXPONENTIALSMOOTHING","SINH","SIZE","SKEWNESS","SMARTPARSE","SNAPSHOT","SNAPSHOTALL","SNAPSHOTALLTOMARK","SNAPSHOTCOPY","SNAPSHOTCOPYALL","SNAPSHOTCOPYALLTOMARK","SNAPSHOTCOPYN","SNAPSHOTCOPYTOMARK","SNAPSHOTN","SNAPSHOTTOMARK","SORT","SORTBY","SORTWITH","SPLIT","SQRT","SRAND","SRANDPDF","STACKATTRIBUTE","STACKPSSECRET","STACKTOLIST","STANDARDIZE","STDERR","STDOUT","STL","STLESDTEST","STOP","STORE","STRICTMAPPER","STRICTPARTITION","STRICTREDUCER","STRINGFORMAT","STU","SUBLIST","SUBMAP","SUBSTRING","SUBTRACTEXACT","SWAP","SWITCH","SYMBOLS","SYNC","T","TAN","TANH","TDESCRIBE","TEMPLATE","THRESHOLDTEST","TICKINDEX","TICKLIST","TICKS","TIMEBOX","TIMECLIP","TIMED","TIMEMODULO","TIMEOFF","TIMEON","TIMESCALE","TIMESHIFT","TIMESPLIT","TIMINGS","TLTTB","TOBIN","TOBITS","TOBOOLEAN","TODEGREES","TODOUBLE","TOHEX","TOINTEXACT","TOKENDUMP","TOKENGEN","TOKENINFO","TOKENSECRET","TOLONG","TOLOWER","TORADIANS","TOSELECTOR","TOSTRING","TOTIMESTAMP","TOUPPER","TR","TRANSPOSE","TRIM","TRY","TSELEMENTS","TSELEMENTS->","TYPEOF","UDF","ULP","UNBUCKETIZE","UNBUCKETIZE.CALENDAR","UNGZIP","UNION","UNIQUE","UNLIST","UNMAP","UNPACK","UNSECURE","UNSET","UNTIL","UNWRAP","UNWRAPEMPTY","UNWRAPENCODER","UNWRAPSIZE","UPDATE","UPDATEOFF","UPDATEON","URLDECODE","URLENCODE","URLFETCH","UUID","V->","VALUEDEDUP","VALUEHISTOGRAM","VALUELIST","VALUES","VALUESORT","VALUESPLIT","VARINT->","VARS","VEC->","WEBCALL","WF.ADDREPO","WF.GETREPOS","WF.SETREPOS","WFOFF","WFON","WHILE","WRAP","WRAPFAST","WRAPMV","WRAPMV!","WRAPOPT","WRAPRAW","WRAPRAWOPT","WSINFO","WSKILL","WSKILLSESSION","WSNAME","WSPS","WSSESSION","WSSTACK","WSSTOP","WSSTOPSESSION","Z->","ZDISCORDS","ZDTW","ZIP","ZPATTERNDETECTION","ZPATTERNS","ZSCORE","ZSCORETEST","[","[[","[[]]","[]","]","]]","^","bucketizer.and","bucketizer.count","bucketizer.count.exclude-nulls","bucketizer.count.include-nulls","bucketizer.count.nonnull","bucketizer.first","bucketizer.join","bucketizer.join.forbid-nulls","bucketizer.last","bucketizer.mad","bucketizer.max","bucketizer.max.forbid-nulls","bucketizer.mean","bucketizer.mean.circular","bucketizer.mean.circular.exclude-nulls","bucketizer.mean.exclude-nulls","bucketizer.median","bucketizer.median.forbid-nulls","bucketizer.min","bucketizer.min.forbid-nulls","bucketizer.or","bucketizer.percentile","bucketizer.rms","bucketizer.sd","bucketizer.sd.forbid-nulls","bucketizer.sum","bucketizer.sum.forbid-nulls","filler.interpolate","filler.next","filler.previous","filler.trend","filter.all.eq","filter.all.ge","filter.all.gt","filter.all.le","filter.all.lt","filter.all.ne","filter.any.eq","filter.any.ge","filter.any.gt","filter.any.le","filter.any.lt","filter.any.ne","filter.byattr","filter.byclass","filter.bylabels","filter.bylabelsattr","filter.bymetadata","filter.byselector","filter.bysize","filter.last.eq","filter.last.ge","filter.last.gt","filter.last.le","filter.last.lt","filter.last.ne","filter.latencies","h","mapper.abs","mapper.add","mapper.and","mapper.ceil","mapper.count","mapper.count.exclude-nulls","mapper.count.include-nulls","mapper.count.nonnull","mapper.day","mapper.delta","mapper.dotproduct","mapper.dotproduct.positive","mapper.dotproduct.sigmoid","mapper.dotproduct.tanh","mapper.eq","mapper.eq.elev","mapper.eq.hhcode","mapper.eq.lat","mapper.eq.lon","mapper.eq.tick","mapper.exp","mapper.finite","mapper.first","mapper.floor","mapper.ge","mapper.ge.elev","mapper.ge.hhcode","mapper.ge.lat","mapper.ge.lon","mapper.ge.tick","mapper.geo.approximate","mapper.geo.clear","mapper.geo.fence","mapper.geo.outside","mapper.geo.within","mapper.gt","mapper.gt.elev","mapper.gt.hhcode","mapper.gt.lat","mapper.gt.lon","mapper.gt.tick","mapper.hdist","mapper.highest","mapper.hour","mapper.hspeed","mapper.join","mapper.join.forbid-nulls","mapper.kernel.cosine","mapper.kernel.epanechnikov","mapper.kernel.gaussian","mapper.kernel.logistic","mapper.kernel.quartic","mapper.kernel.silverman","mapper.kernel.triangular","mapper.kernel.tricube","mapper.kernel.triweight","mapper.kernel.uniform","mapper.last","mapper.le","mapper.le.elev","mapper.le.hhcode","mapper.le.lat","mapper.le.lon","mapper.le.tick","mapper.log","mapper.lowest","mapper.lt","mapper.lt.elev","mapper.lt.hhcode","mapper.lt.lat","mapper.lt.lon","mapper.lt.tick","mapper.mad","mapper.max","mapper.max.forbid-nulls","mapper.max.x","mapper.mean","mapper.mean.circular","mapper.mean.circular.exclude-nulls","mapper.mean.exclude-nulls","mapper.median","mapper.median.forbid-nulls","mapper.min","mapper.min.forbid-nulls","mapper.min.x","mapper.minute","mapper.mod","mapper.month","mapper.mul","mapper.ne","mapper.ne.elev","mapper.ne.hhcode","mapper.ne.lat","mapper.ne.lon","mapper.ne.tick","mapper.npdf","mapper.or","mapper.parsedouble","mapper.percentile","mapper.pow","mapper.product","mapper.rate","mapper.replace","mapper.rms","mapper.round","mapper.sd","mapper.sd.forbid-nulls","mapper.second","mapper.sigmoid","mapper.sqrt","mapper.sum","mapper.sum.forbid-nulls","mapper.tanh","mapper.tick","mapper.toboolean","mapper.todouble","mapper.tolong","mapper.tostring","mapper.truecourse","mapper.var","mapper.var.forbid-nulls","mapper.vdist","mapper.vspeed","mapper.weekday","mapper.year","max.tick.sliding.window","max.time.sliding.window","ms","ns","op.add","op.add.ignore-nulls","op.and","op.and.ignore-nulls","op.div","op.eq","op.ge","op.gt","op.le","op.lt","op.mask","op.mul","op.mul.ignore-nulls","op.ne","op.negmask","op.or","op.or.ignore-nulls","op.sub","pi","ps","reducer.and","reducer.and.exclude-nulls","reducer.argmax","reducer.argmin","reducer.count","reducer.count.exclude-nulls","reducer.count.include-nulls","reducer.count.nonnull","reducer.join","reducer.join.forbid-nulls","reducer.join.nonnull","reducer.join.urlencoded","reducer.mad","reducer.max","reducer.max.forbid-nulls","reducer.max.nonnull","reducer.mean","reducer.mean.circular","reducer.mean.circular.exclude-nulls","reducer.mean.exclude-nulls","reducer.median","reducer.median.forbid-nulls","reducer.min","reducer.min.forbid-nulls","reducer.min.nonnull","reducer.or","reducer.or.exclude-nulls","reducer.percentile","reducer.product","reducer.rms","reducer.rms.exclude-nulls","reducer.sd","reducer.sd.forbid-nulls","reducer.shannonentropy.0","reducer.shannonentropy.1","reducer.sum","reducer.sum.forbid-nulls","reducer.sum.nonnull","reducer.var","reducer.var.forbid-nulls","us","w","{","{}","|","||","}","~","~=","W10HoverProvider","_provideHover","provider","word","getWordAtPosition","Range","lineNumber","startColumn","endColumn","entry","contents","x","toMarkedStringArray","isArray","toMarkdownString","WSHoverProvider","provideHover","wsGlobals","Flows","SnippetsFlows","FLoWSCompletionItemProvider","FLoWSHoverProvider","flowsGlobals","FLoWSLanguageConfiguration","autoCloseBefore","indentationRules","increaseIndentPattern","decreaseIndentPattern","MonarchFlows","registerCompletionItemProvider","setMonarchTokensProvider","getLanguages","register","setLanguageConfiguration","registerHoverProvider","ProviderRegistrar","find","id","WarpViewEditorComponent","http","url","lang","_showExecute","warpViewEditorStatusEvent","EventEmitter","warpViewEditorErrorEvent","warpViewEditorWarpscriptChanged","warpViewEditorWarpscriptResult","warpViewEditorLoaded","warpViewEditorSize","warpViewEditorBreakPoint","warpViewEditorCtrlClick","warpViewEditorDatavizRequested","loading","selectedResultTab","headers","getItems","innerConfig","Config","_theme","_debug","_displayMessages","_showDataviz","_showResult","_imageTab","monacoTheme","breakpoints","decoration","previousParentHeight","previousParentWidth","defineProperty","newValue","setTheme","_warpscript","ed","setValue","config","conf","JSON","parse","updateOptions","setOptions","_widthPx","parseInt","_heightLine","_heightPx","_initialSize","ngOnInit","self","MonacoEnvironment","getWorkerUrl","URL","createObjectURL","Blob","type","resizeWatcher","editorParentWidth","parentElement","clientWidth","editorParentHeight","clientHeight","window","getComputedStyle","getPropertyValue","warpviewParentHeight","Math","max","MIN_HEIGHT","abs","wrapper","style","height","editorH","floor","editorW","layout","width","overflow","suggestOnTriggerCharacters","automaticLayout","enabled","fixedOverflowWidgets","folding","glyphMargin","ngAfterViewInit","resize","resizeWatcherInt","setInterval","bind","innerCode","contentWrapper","textContent","firstIndex","edOpts","lastKnownWS","setModelLanguage","getModel","onMouseDown","event","leftButton","target","toggleBreakPoint","emit","onDidChangeContent","getValue","isMac","ctrlKey","metaKey","getStartPosition","specialHeaders","repos_1","statements_1","st","previousStatement","endsWith","docParams","macroName","wfRepos","ngOnDestroy","clearInterval","dispose","ro","disconnect","request","unsubscribe","abort","session","executionUrl_1","post","observe","responseType","Accept","pipe","catchError","handleError","subscribe","res","sendError","sendStatus","message","getLabel","ops","get","fetched","highlight","line","currentKey","options","isWholeLine","deltaDecorations","glyphMarginClassName","status","statusText","of","execute","executionUrl","Content-Type","code","at","text","requestDataviz","onResized","$event","navigator","platform","toUpperCase","onKeyDown","from","getElementsByClassName","classList","add","onKeyUp","remove","initial","setTimeout","size","responsiveStyle","assign","Component","selector","template","encapsulation","ViewEncapsulation","Emulated","ElementRef","HttpClient","Input","Output","ViewChild","static","HostListener","GTSLib","color","getColor","unique","u","a","hexToRgb","hex","transparentize","alpha","splice","propertyIsEnumerable","isEmbeddedImage","test","isEmbeddedImageObject","image","caption","gtsFromJSON","json","gts","c","v","gtsFromJSONList","jsonList","prefixId","gtsList","isGts","content","flatDeep","arr1","acc","val","isObject","Injectable","JsonLib","escapee","\"","\\","ch","check","number","Infinity","testBigInt","str","BigNumber","uffff","isFinite","String","fromCharCode","white","array","object","key","reviver","walk","holder","","WarpViewImageResult","gtsLib","imageList","_res","_result","WarpViewResult","theme","_resultStr","lstr","stringify","WarpViewRawResultComponent","_config","EditorConfig","LINE_HEIGHT","CONTAINER_GUTTER","buildEditor","resEd","adjustHeight","el_1","codeContainer_1","containerHeight","offsetHeight","prevLineCount_1","childElementCount","language","minimap","scrollBeyondLastLine","lineNumbers","wordWrap","NgModule","declarations","imports","CommonModule","BrowserModule","HttpClientModule","FormsModule","exports","providers","schemas","CUSTOM_ELEMENTS_SCHEMA","entryComponents"],"mappings":"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AM,CACJ,IACA,oCACA,YACA,OACA,iEACA,OACA,qFACA,eACA,sCACA,6CACA,gDACA,kDACA,2DACA,MACA,iBACA,SACA,yDACA,mCACA,oCACA,SACA,MACA,iBACA,GACA,KACA,kBACA,yBACA,OACA,kCACA,4BACA,yBACA,mBACA,SACA,OACA,8BACA,cACA,OACA,uCACA,yBACA,WACA,KACA,gBACA,GACA,gBACA,oCACA,mBACA,mBACA,+BACA,gCACA,GACA,YAEFkB,YAAa,SAEfC,eAAgB,CACdpB,OAAQ,gBACRC,KAAM,CACJ,IACA,oBACA,YACA,OACA,SACA,OACA,2CACA,eACA,sCACA,MACA,iBACA,SACA,GACA,SACA,MACA,iBACA,GACA,KACA,kBACA,yBACA,OACA,kCACA,cACA,OACA,8BACA,cACA,OACA,uCACA,yBACA,WACA,KACA,gBACA,GACA,gBACA,GACA,YAEFkB,YAAa,SAEfE,MAAO,CACLrB,OAAQ,QACRC,KAAM,CACJ,4FAGJqB,UAAW,CACTtB,OAAQ,YACRC,KAAM,CACJ,sjBAGJsB,OAAQ,CACNvB,OAAQ,SACRC,KAAM,CACJ,sPAGJuB,IAAK,CACHxB,OAAQ,MACRC,KAAM,CACJ,+kDAGJwB,OAAQ,CACNzB,OAAQ,SACRC,KAAM,CACJ,uuBAGJnF,MAAO,CACLkF,OAAQ,QACRC,KAAM,CACJ,4NAEFkB,YAAa,mBAEfO,IAAK,CACH1B,OAAQ,MACRC,KAAM,CACJ,uBACA,4BACA,OAEFkB,YAAa,gBAEfQ,KAAM,CACJ3B,OAAQ,OACRC,KAAM,CACJ,uBACA,4BACA,6BACA,QAEFkB,YAAa,0BAEfS,OAAU,CACR5B,OAAQ,SACRC,KAAM,CACJ,wCACA,wCACA,wCACA,qBACA,uBACA,UAEFkB,YAAa,oBAEfU,IAAO,CACL7B,OAAQ,MACRC,KAAM,CACJ,iBACA,mBACA,qBACA,OAEFkB,YAAa,uBAEfW,MAAS,CACP9B,OAAQ,QACRC,KAAM,CACJ,uBACA,+BACA,SAEFkB,YAAa,cAEfY,MAAO,CACL/B,OAAQ,QACRC,KAAM,CACJ,+BACA,uBACA,SAEFkB,YAAa,cAEfa,IAAO,CACLhC,OAAQ,MACRC,KAAM,CACJ,sCACA,oBACA,OAEFkB,YAAa,YAEfc,QAAS,CACPjC,OAAQ,UACRC,KAAM,CACJ,cACA,MACA,iDACA,4CACA,gBACA,KACA,WAEFkB,YAAa,gBAEfe,QAAS,CACPlC,OAAQ,UACRC,KAAM,CACJ,qDACA,oBACA,WAEFkB,YAAa,gBAEfgB,IAAK,CACHnC,OAAQ,MACRC,KAAM,CACJ,KACA,OACA,4CACA,6BACA,OACA,OACA,0CACA,4EACA,OACA,OACA,2DACA,wCACA,WACA,GACA,8BACA,oBACA,GACA,GACA,GACA,4EAEFkB,YAAa,oECnPnB,IAAAiB,EAAA,SAAAC,GAEE,SAAAD,WACEC,EAAAxL,KAAAO,KAAMuJ,EAAYI,sBAAoB3J,YAHIwB,EAAAwJ,EAAAC,GAM5CD,EAAAzL,UAAAyI,iBAAA,SAAiBkD,GACf,OAAOA,GAITF,EAAAzL,UAAA4L,uBAAA,SAAuB9D,EAAuBC,EAAoBC,EAA6BC,GAC7F,OAAOyD,EAAA1L,UAAM6H,wBAAuB3H,KAAAO,KAACqH,EAAOC,EAAUC,EAAUC,EAAOd,EAAWC,UAAWkD,EAAmBnC,aAZpH,CAA8CR,GCzB9CkE,EAAA,aACsBA,EAAAC,MAAa,CAC/BC,SAAY,CACR,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,QACA,WACA,QACA,UACA,eACA,YACA,aACA,cACA,YACA,YACA,YACA,aACA,QACA,cACA,kBACA,QACA,WACA,eACA,SACA,SACA,cACA,QACA,QACA,aACA,UACA,WACA,MACA,QACA,eACA,MACA,WACA,QACA,QACA,QACA,MACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,MACA,MACA,cACA,gBACA,kBACA,gBACA,eACA,OACA,UACA,cACA,WACA,YACA,WACA,WACA,YACA,UACA,MACA,MACA,SACA,QACA,aACA,OACA,SACA,SACA,YACA,OACA,QACA,WACA,UACA,SACA,aACA,eACA,QACA,WACA,WACA,OACA,QACA,WACA,WACA,SACA,cACA,YACA,QACA,cACA,YACA,qBACA,aACA,UACA,cACA,OACA,OACA,OACA,QACA,aACA,aACA,YACA,cACA,cACA,QACA,eACA,QACA,YACA,YACA,eACA,cACA,OACA,QACA,aACA,eACA,cACA,UACA,WACA,cACA,gBACA,WACA,UACA,WACA,YACA,MACA,OACA,UACA,eACA,aACA,eACA,cACA,QACA,QACA,OACA,SACA,WACA,UACA,iBACA,QACA,MACA,UACA,eACA,UACA,SACA,YACA,WACA,QACA,QACA,MACA,aACA,WACA,MACA,UACA,eACA,6BACA,OACA,QACA,MACA,MACA,OACA,WACA,WACA,IACA,QACA,UACA,SACA,YACA,WACA,SACA,WACA,UACA,aACA,QACA,YACA,QACA,UACA,aACA,QACA,MACA,QACA,SACA,YACA,IACA,OACA,QACA,eACA,cACA,YACA,cACA,MACA,QACA,YACA,OACA,WACA,eACA,YACA,YACA,SACA,WACA,OACA,WACA,YACA,YACA,UACA,cACA,QACA,WACA,WACA,SACA,UACA,WACA,UACA,YACA,OACA,aACA,YACA,eACA,iBACA,mBACA,iBACA,WACA,mBACA,gBACA,eACA,aACA,YACA,aACA,UACA,kBACA,UACA,kBACA,YACA,YACA,UACA,aACA,WACA,WACA,YACA,MACA,cACA,UACA,aACA,WACA,UACA,aACA,cACA,OACA,OACA,YACA,SACA,QACA,WACA,WACA,WACA,cACA,gBACA,cACA,eACA,oBACA,oBACA,eACA,oBACA,oBACA,cACA,OACA,UACA,YACA,gBACA,aACA,cACA,QACA,QACA,OACA,gBACA,OACA,YACA,SACA,iBACA,UACA,OACA,WACA,YACA,cACA,eACA,MACA,kBACA,SACA,QACA,UACA,cACA,eACA,OACA,SACA,YACA,YACA,aACA,UACA,WACA,SACA,eACA,aACA,WACA,WACA,UACA,WACA,QACA,UACA,SACA,SACA,OACA,OACA,iBACA,YACA,aACA,MACA,QACA,QACA,aACA,SACA,SACA,KACA,QACA,OACA,kBACA,cACA,qBACA,oBACA,cACA,WACA,UACA,MACA,MACA,QACA,QACA,OACA,QACA,QACA,UACA,MACA,aACA,WACA,cACA,SACA,UACA,UACA,UACA,SACA,YACA,eACA,aACA,mBACA,kBACA,MACA,QACA,OACA,WACA,UACA,SACA,UACA,WACA,MACA,UACA,SACA,OACA,OACA,YACA,cACA,QACA,OACA,gBACA,UACA,QACA,eACA,YACA,eACA,cACA,UACA,cACA,WACA,OACA,UACA,WACA,cACA,aACA,SACA,YACA,WACA,SACA,QACA,WACA,UACA,OACA,YACA,MACA,WACA,YACA,YACA,MACA,OACA,QACA,YACA,cACA,UACA,aACA,MACA,SACA,WACA,KACA,OACA,SACA,QACA,gBACA,aACA,YACA,mBACA,WACA,OACA,QACA,UACA,UACA,YACA,KACA,OACA,WACA,YACA,QACA,cACA,OACA,UACA,OACA,OACA,cACA,SACA,QACA,MACA,SACA,OACA,cACA,gBACA,cACA,UACA,gBACA,eACA,iBACA,gBACA,SACA,aACA,QACA,OACA,cACA,SACA,QACA,SACA,aACA,aACA,QACA,cACA,SACA,eACA,cACA,gBACA,kBACA,eACA,UACA,QACA,WACA,eACA,UACA,cACA,YACA,QACA,UACA,OACA,SACA,OACA,SACA,aACA,QACA,aACA,QACA,aACA,OACA,OACA,QACA,UACA,UACA,YACA,UACA,QACA,UACA,SACA,aACA,YACA,cACA,aACA,QACA,mBACA,QACA,YACA,OACA,eACA,UACA,cACA,SACA,OACA,SACA,aACA,UACA,UACA,QACA,UACA,gBACA,UACA,aACA,cACA,gBACA,QACA,aACA,cACA,eACA,YACA,eACA,YACA,YACA,aACA,QACA,WACA,aACA,YACA,gBACA,UACA,MACA,aACA,UACA,YACA,UACA,YACA,WACA,OACA,SACA,UACA,QACA,eACA,SACA,SACA,SACA,UACA,SACA,aACA,SACA,WACA,UACA,aACA,SACA,QACA,SACA,UACA,UACA,MACA,UACA,UACA,QACA,SACA,OACA,UACA,OACA,QACA,MACA,YACA,QACA,aACA,aACA,SACA,aACA,YACA,UACA,YACA,QACA,OACA,MACA,cACA,OACA,aACA,OACA,QACA,UACA,SACA,YACA,iBACA,uBACA,kBACA,gBACA,gBACA,mBACA,MACA,QACA,gBACA,iBACA,WACA,OACA,WACA,SACA,aACA,QACA,UACA,WACA,OACA,SACA,UACA,SACA,MACA,6BACA,OACA,OACA,WACA,aACA,WACA,cACA,oBACA,eACA,kBACA,wBACA,gBACA,qBACA,YACA,iBACA,OACA,SACA,WACA,QACA,OACA,QACA,WACA,iBACA,gBACA,cACA,cACA,SACA,SACA,MACA,aACA,OACA,QACA,kBACA,eACA,MACA,UACA,SACA,YACA,gBACA,OACA,UACA,OACA,IACA,MACA,OACA,YACA,WACA,gBACA,YACA,WACA,QACA,UACA,WACA,QACA,aACA,UACA,SACA,YACA,YACA,YACA,UACA,QACA,QACA,SACA,YACA,YACA,WACA,QACA,aACA,YACA,WACA,YACA,cACA,SACA,UACA,YACA,aACA,WACA,cACA,UACA,KACA,YACA,OACA,aACA,eACA,SACA,MACA,cACA,uBACA,SACA,QACA,SACA,SACA,QACA,SACA,WACA,QACA,SACA,cACA,gBACA,aACA,SACA,YACA,WACA,YACA,YACA,WACA,OACA,MACA,aACA,iBACA,YACA,SACA,YACA,aACA,WACA,OACA,QACA,UACA,aACA,cACA,cACA,QACA,OACA,OACA,WACA,SACA,UACA,UACA,UACA,aACA,SACA,SACA,gBACA,SACA,OACA,YACA,UACA,SACA,gBACA,MACA,YACA,OACA,MACA,oBACA,YACA,SACA,aACA,IACA,KACA,OACA,KACA,IACA,KACA,IACA,iBACA,gBACA,IACA,IACA,qBACA,cACA,kBACA,eACA,mBACA,IACA,IACA,aACA,gBACA,yBACA,mBACA,mBACA,qBACA,oBACA,eACA,gBACA,6BACA,aACA,cACA,YACA,oBACA,oBACA,0BACA,0BACA,KACA,KACA,SACA,sBACA,SACA,sBACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,sBACA,QACA,aACA,QACA,qBACA,SACA,KACA,KACA,cACA,4BACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,MAEJC,UAAa,CACT,IACA,IACA,UACA,UACA,OACA,MACA,KACA,IACA,IACA,MAEJC,UAAa,CACT,YACA,qBACA,SACA,kBACA,cACA,cACA,eACA,MACA,UACA,UACA,SACA,eACA,gBACA,uBACA,iBACA,mBACA,iCACA,iCACA,2BACA,mBACA,kBACA,+BACA,kBACA,iBACA,iBACA,8BACA,kBACA,2BACA,yCACA,gCACA,oBACA,iCACA,iBACA,8BACA,gBACA,wBACA,iBACA,gBACA,6BACA,iBACA,8BACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,kBACA,sBACA,oBACA,oBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,aACA,aACA,aACA,cACA,eACA,6BACA,6BACA,uBACA,aACA,eACA,oBACA,6BACA,4BACA,yBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,gBACA,eACA,eACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,yBACA,mBACA,mBACA,qBACA,oBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,eACA,iBACA,cACA,gBACA,cACA,2BACA,uBACA,6BACA,yBACA,yBACA,wBACA,0BACA,2BACA,wBACA,0BACA,wBACA,cACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,gBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,aACA,0BACA,eACA,cACA,uBACA,qCACA,4BACA,gBACA,6BACA,aACA,0BACA,eACA,gBACA,aACA,eACA,aACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,cACA,YACA,qBACA,oBACA,aACA,iBACA,cACA,iBACA,aACA,eACA,YACA,yBACA,gBACA,iBACA,cACA,aACA,0BACA,cACA,cACA,mBACA,kBACA,gBACA,kBACA,oBACA,aACA,0BACA,eACA,gBACA,iBACA,cACA,0BACA,0BACA,cACA,4BACA,iBACA,iBACA,gBACA,8BACA,8BACA,wBACA,eACA,4BACA,uBACA,0BACA,cACA,cACA,2BACA,sBACA,eACA,wBACA,sCACA,6BACA,iBACA,8BACA,cACA,2BACA,sBACA,aACA,2BACA,qBACA,kBACA,cACA,4BACA,aACA,0BACA,2BACA,2BACA,cACA,2BACA,sBACA,cACA,4BAEJC,QAAW,CACP,QACA,aACA,WACA,OACA,UACA,eACA,OACA,OACA,MACA,UACA,UACA,MACA,OACA,UACA,UACA,UACA,SACA,SACA,MACA,MACA,QACA,SAEJC,UAAa,CACT,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,MACA,MACA,MACA,KACA,IACA,IACA,KACA,IACA,MAEJC,QAAW,2EACXC,UAAa,CACTC,KAAQ,CACJ,CACI,uBACA,YAEJ,CACI,uBACA,YAEJ,CACI,aACA,UAEJ,CACI,oBACA,CACIC,MAAS,CACLC,aAAc,SACdC,YAAa,UACbC,aAAc,OACdC,WAAY,UACZC,WAAY,gBAIxB,CACI,aACA,aAEJ,CACI,qCACA,gBAEJ,CACI,qCACA,cAEJ,CACI,qBACA,gBAEJ,CACI,yBACA,iBAEJ,CACI,YACA,UAEJ,CACIC,QAAW,eAEf,CACI,sBACA,kBAEJ,CACI,IACA,SACA,WAEJ,CACI,sBACA,kBAEJ,CACI,IACA,SACA,YAEJ,CACI,KACA,SACA,aAGRC,WAAc,CACV,CACI,gBACA,SAEJ,CACI,SACA,UACA,YAEJ,CACI,YACA,YAGRC,QAAW,CACP,CACI,WACA,WAEJ,CACI,SACA,mBAEJ,CACI,OACA,UACA,QAEJ,CACI,SACA,YAGR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AAM,KAAOC,MAAO,IAAMC,MAAO,CAAC,SAAU,YAC7C,CAACF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,WAChC,CAACF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC1C,CAACF,KAAM,MAAOC,MAAO,MAAOC,MAAO,CAAC,YAEtCmkC,gBAAiB,iBACjBlkC,iBAAkB,CAChB,CAACH,KAAM,IAAKC,MAAO,KACnB,CAACD,KAAM,IAAKC,MAAO,KACnB,CAACD,KAAM,IAAKC,MAAO,KACnB,CAACD,KAAM,KAAMC,MAAO,MACpB,CAACD,KAAM,IAAMC,MAAO,KACpB,CAACD,KAAM,IAAKC,MAAO,KACnB,CAACD,KAAM,IAAKC,MAAO,MAErBqkC,iBAAkB,CAChBC,sBAAuB,0BACvBC,sBAAuB,2BAEzBpkC,aAAc,CACZ,CAEEC,WAAY,oCACZC,UAAW,YACXC,OAAQ,CAACC,aAAcjB,EAAakB,cAAeC,WAAY,QAEjE,CAEEL,WAAY,oCACZE,OAAQ,CAACC,aAAcjB,EAAaoB,KAAMD,WAAY,QAExD,CAEEL,WAAY,wCACZE,OAAQ,CAACC,aAAcjB,EAAaoB,KAAMD,WAAY,OAExD,CAEEL,WAAY,yBACZE,OAAQ,CAACC,aAAcjB,EAAaoB,KAAMC,WAAY,SA3DhE,GCpBA6jC,EAAA,aACsBA,EAAAvmC,MAAa,CAC/BC,SAAY,CACR,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,QACA,WACA,QACA,UACA,eACA,YACA,aACA,cACA,YACA,YACA,YACA,aACA,QACA,cACA,kBACA,QACA,WACA,eACA,SACA,SACA,cACA,QACA,QACA,aACA,UACA,WACA,MACA,QACA,eACA,MACA,WACA,QACA,QACA,QACA,MACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,MACA,MACA,cACA,gBACA,kBACA,gBACA,eACA,OACA,UACA,cACA,WACA,YACA,WACA,WACA,YACA,UACA,MACA,MACA,SACA,QACA,aACA,OACA,SACA,SACA,YACA,OACA,QACA,WACA,UACA,SACA,aACA,eACA,QACA,WACA,WACA,OACA,QACA,WACA,WACA,SACA,cACA,YACA,QACA,cACA,YACA,qBACA,aACA,UACA,cACA,OACA,OACA,OACA,QACA,aACA,aACA,YACA,cACA,cACA,QACA,eACA,QACA,YACA,YACA,eACA,cACA,OACA,QACA,aACA,eACA,cACA,UACA,WACA,cACA,gBACA,WACA,UACA,WACA,YACA,MACA,OACA,UACA,eACA,aACA,eACA,cACA,QACA,QACA,OACA,SACA,WACA,UACA,iBACA,QACA,MACA,UACA,eACA,UACA,SACA,YACA,WACA,QACA,QACA,MACA,aACA,WACA,MACA,UACA,eACA,6BACA,OACA,QACA,MACA,MACA,OACA,WACA,WACA,IACA,QACA,UACA,SACA,YACA,WACA,SACA,WACA,UACA,aACA,QACA,YACA,QACA,UACA,aACA,QACA,MACA,QACA,SACA,YACA,IACA,OACA,QACA,eACA,cACA,YACA,cACA,MACA,QACA,YACA,OACA,WACA,eACA,YACA,YACA,SACA,WACA,OACA,WACA,YACA,YACA,UACA,cACA,QACA,WACA,WACA,SACA,UACA,WACA,UACA,YACA,OACA,aACA,YACA,eACA,iBACA,mBACA,iBACA,WACA,mBACA,gBACA,eACA,aACA,YACA,aACA,UACA,kBACA,UACA,kBACA,YACA,YACA,UACA,aACA,WACA,WACA,YACA,MACA,cACA,UACA,aACA,WACA,UACA,aACA,cACA,OACA,OACA,YACA,SACA,QACA,WACA,WACA,WACA,cACA,gBACA,cACA,eACA,oBACA,oBACA,eACA,oBACA,oBACA,cACA,OACA,UACA,YACA,gBACA,aACA,cACA,QACA,QACA,OACA,gBACA,OACA,YACA,SACA,iBACA,UACA,OACA,WACA,YACA,cACA,eACA,MACA,kBACA,SACA,QACA,UACA,cACA,eACA,OACA,SACA,YACA,YACA,aACA,UACA,WACA,SACA,eACA,aACA,WACA,WACA,UACA,WACA,QACA,UACA,SACA,SACA,OACA,OACA,iBACA,YACA,aACA,MACA,QACA,QACA,aACA,SACA,SACA,KACA,QACA,OACA,kBACA,cACA,qBACA,oBACA,cACA,WACA,UACA,MACA,MACA,QACA,QACA,OACA,QACA,QACA,UACA,MACA,aACA,WACA,cACA,SACA,UACA,UACA,UACA,SACA,YACA,eACA,aACA,mBACA,kBACA,MACA,QACA,OACA,WACA,UACA,SACA,UACA,WACA,MACA,UACA,SACA,OACA,OACA,YACA,cACA,QACA,OACA,gBACA,UACA,QACA,eACA,YACA,eACA,cACA,UACA,cACA,WACA,OACA,UACA,WACA,cACA,aACA,SACA,YACA,WACA,SACA,QACA,WACA,UACA,OACA,YACA,MACA,WACA,YACA,YACA,MACA,OACA,QACA,YACA,cACA,UACA,aACA,MACA,SACA,WACA,KACA,OACA,SACA,QACA,gBACA,aACA,YACA,mBACA,WACA,OACA,QACA,UACA,UACA,YACA,KACA,OACA,WACA,YACA,QACA,cACA,OACA,UACA,OACA,OACA,cACA,SACA,QACA,MACA,SACA,OACA,cACA,gBACA,cACA,UACA,gBACA,eACA,iBACA,gBACA,SACA,aACA,QACA,OACA,cACA,SACA,QACA,SACA,aACA,aACA,QACA,cACA,SACA,eACA,cACA,gBACA,kBACA,eACA,UACA,QACA,WACA,eACA,UACA,cACA,YACA,QACA,UACA,OACA,SACA,OACA,SACA,aACA,QACA,aACA,QACA,aACA,OACA,OACA,QACA,UACA,UACA,YACA,UACA,QACA,UACA,SACA,aACA,YACA,cACA,aACA,QACA,mBACA,QACA,YACA,OACA,eACA,UACA,cACA,SACA,OACA,SACA,aACA,UACA,UACA,QACA,UACA,gBACA,UACA,aACA,cACA,gBACA,QACA,aACA,cACA,eACA,YACA,eACA,YACA,YACA,aACA,QACA,WACA,aACA,YACA,gBACA,UACA,MACA,aACA,UACA,YACA,UACA,YACA,WACA,OACA,SACA,UACA,QACA,eACA,SACA,SACA,SACA,UACA,SACA,aACA,SACA,WACA,UACA,aACA,SACA,QACA,SACA,UACA,UACA,MACA,UACA,UACA,QACA,SACA,OACA,UACA,OACA,QACA,MACA,YACA,QACA,aACA,aACA,SACA,aACA,YACA,UACA,YACA,QACA,OACA,MACA,cACA,OACA,aACA,OACA,QACA,UACA,SACA,YACA,iBACA,uBACA,kBACA,gBACA,gBACA,mBACA,MACA,QACA,gBACA,iBACA,WACA,OACA,WACA,SACA,aACA,QACA,UACA,WACA,OACA,SACA,UACA,SACA,MACA,6BACA,OACA,OACA,WACA,aACA,WACA,cACA,oBACA,eACA,kBACA,wBACA,gBACA,qBACA,YACA,iBACA,OACA,SACA,WACA,QACA,OACA,QACA,WACA,iBACA,gBACA,cACA,cACA,SACA,SACA,MACA,aACA,OACA,QACA,kBACA,eACA,MACA,UACA,SACA,YACA,gBACA,OACA,UACA,OACA,IACA,MACA,OACA,YACA,WACA,gBACA,YACA,WACA,QACA,UACA,WACA,QACA,aACA,UACA,SACA,YACA,YACA,YACA,UACA,QACA,QACA,SACA,YACA,YACA,WACA,QACA,aACA,YACA,WACA,YACA,cACA,SACA,UACA,YACA,aACA,WACA,cACA,UACA,KACA,YACA,OACA,aACA,eACA,SACA,MACA,cACA,uBACA,SACA,QACA,SACA,SACA,QACA,SACA,WACA,QACA,SACA,cACA,gBACA,aACA,SACA,YACA,WACA,YACA,YACA,WACA,OACA,MACA,aACA,iBACA,YACA,SACA,YACA,aACA,WACA,OACA,QACA,UACA,aACA,cACA,cACA,QACA,OACA,OACA,WACA,SACA,UACA,UACA,UACA,aACA,SACA,SACA,gBACA,SACA,OACA,YACA,UACA,SACA,gBACA,MACA,YACA,OACA,MACA,oBACA,YACA,SACA,aACA,IACA,KACA,OACA,KACA,IACA,KACA,IACA,iBACA,gBACA,IACA,IACA,qBACA,cACA,kBACA,eACA,mBACA,IACA,IACA,aACA,gBACA,yBACA,mBACA,mBACA,qBACA,oBACA,eACA,gBACA,6BACA,aACA,cACA,YACA,oBACA,oBACA,0BACA,0BACA,KACA,KACA,SACA,sBACA,SACA,sBACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,sBACA,QACA,aACA,QACA,qBACA,SACA,KACA,KACA,cACA,4BACA,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,IACA,MAEJC,UAAa,CACT,IACA,IACA,UACA,UACA,OACA,MACA,KACA,IACA,IACA,MAEJC,UAAa,CACT,YACA,qBACA,SACA,kBACA,cACA,cACA,eACA,MACA,UACA,UACA,SACA,eACA,gBACA,uBACA,iBACA,mBACA,iCACA,iCACA,2BACA,mBACA,kBACA,+BACA,kBACA,iBACA,iBACA,8BACA,kBACA,2BACA,yCACA,gCACA,oBACA,iCACA,iBACA,8BACA,gBACA,wBACA,iBACA,gBACA,6BACA,iBACA,8BACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,kBACA,sBACA,oBACA,oBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,aACA,aACA,aACA,cACA,eACA,6BACA,6BACA,uBACA,aACA,eACA,oBACA,6BACA,4BACA,yBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,gBACA,eACA,eACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,yBACA,mBACA,mBACA,qBACA,oBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,eACA,iBACA,cACA,gBACA,cACA,2BACA,uBACA,6BACA,yBACA,yBACA,wBACA,0BACA,2BACA,wBACA,0BACA,wBACA,cACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,gBACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,aACA,aACA,0BACA,eACA,cACA,uBACA,qCACA,4BACA,gBACA,6BACA,aACA,0BACA,eACA,gBACA,aACA,eACA,aACA,YACA,iBACA,mBACA,gBACA,gBACA,iBACA,cACA,YACA,qBACA,oBACA,aACA,iBACA,cACA,iBACA,aACA,eACA,YACA,yBACA,gBACA,iBACA,cACA,aACA,0BACA,cACA,cACA,mBACA,kBACA,gBACA,kBACA,oBACA,aACA,0BACA,eACA,gBACA,iBACA,cACA,0BACA,0BACA,cACA,4BACA,iBACA,iBACA,gBACA,8BACA,8BACA,wBACA,eACA,4BACA,uBACA,0BACA,cACA,cACA,2BACA,sBACA,eACA,wBACA,sCACA,6BACA,iBACA,8BACA,cACA,2BACA,sBACA,aACA,2BACA,qBACA,kBACA,cACA,4BACA,aACA,0BACA,2BACA,2BACA,cACA,2BACA,sBACA,cACA,4BAEJC,QAAW,CACP,QACA,aACA,WACA,OACA,UACA,eACA,OACA,OACA,MACA,UACA,UACA,MACA,OACA,UACA,UACA,UACA,SACA,SACA,MACA,MACA,QACA,SAEJC,UAAa,CACT,IACA,KACA,IACA,IACA,KACA,IACA,KACA,IACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,MACA,MACA,MACA,KACA,IACA,IACA,KACA,IACA,MAEJC,QAAW,2EACXC,UAAa,CACTC,KAAQ,CACJ,CACI,uBACA,YAEJ,CACI,uBACA,YAEJ,CACI,aACA,UAEJ,CACI,oBACA,CACIC,MAAS,CACLC,aAAc,SACdC,YAAa,UACbC,aAAc,OACdC,WAAY,UACZC,WAAY,gBAIxB,CACI,aACA,aAEJ,CACI,qCACA,gBAEJ,CACI,qCACA,cAEJ,CACI,qBACA,gBAEJ,CACI,yBACA,iBAEJ,CACI,YACA,UAEJ,CACIC,QAAW,eAEf,CACI,sBACA,kBAEJ,CACI,IACA,SACA,WAEJ,CACI,sBACA,kBAEJ,CACI,IACA,SACA,YAEJ,CACI,KACA,SACA,aAGRC,WAAc,CACV,CACI,gBACA,SAEJ,CACI,SACA,UACA,YAEJ,CACI,YACA,YAGRC,QAAW,CACP,CACI,WACA,WAEJ,CACI,SACA,m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","sourcesContent":["/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class Utils {\n\n  static mergeDeep(...sources: any[]): any {\n    // Variables\n    const extended = {};\n    const deep = true;\n    let i = 0;\n    // Merge the object into the extended object\n    // Loop through each object and conduct a merge\n    for (; i < sources.length; i++) {\n      const obj = sources[i];\n      Utils.merge(obj, extended, deep);\n    }\n\n    return extended;\n  }\n\n  static merge(obj: any, extended: any, deep: boolean) {\n    for (const prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        // If property is an object, merge properties\n        if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n          extended[prop] = Utils.mergeDeep(extended[prop], obj[prop]);\n        } else {\n          extended[prop] = obj[prop];\n        }\n      }\n    }\n  }\n\n  static toArray(obj: any): any[] {\n    const arr = [];\n    Object.keys(obj).forEach(k => arr.push(obj[k]));\n    return arr;\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {ButtonConfig} from './buttonConfig';\nimport {EditorConfig} from './editorConfig';\n\nexport class Config {\n  buttons?: ButtonConfig = {\n    class: ''\n  };\n  execButton?: ButtonConfig = {\n    class: '',\n    label: 'Execute'\n  };\n  datavizButton?: ButtonConfig = {\n    class: '',\n    label: 'Visualize'\n  };\n  hover? = true;\n  readOnly? = false;\n  messageClass? = '';\n  errorClass? = '';\n  editor: EditorConfig = {\n    quickSuggestionsDelay: 10,\n    quickSuggestions: true,\n    tabSize: 2,\n    minLineNumber: 10,\n    enableDebug: false,\n    rawResultsReadOnly: true\n  };\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class Logger {\n\n  className: string;\n  isDebug = false;\n\n  constructor(className: any, isDebug: boolean = false) {\n    this.className = className.name;\n    this.isDebug = isDebug;\n  }\n\n  setDebug(debug: boolean) {\n    this.isDebug = debug;\n  }\n\n  log(level: LEVEL, methods: any[], args: any[]) {\n    let logChain = [];\n    logChain.push(`[${this.className}] ${methods.join(' - ')}`);\n    logChain = logChain.concat(args);\n    switch (level) {\n      case LEVEL.DEBUG: {\n        if (this.isDebug) {\n          // tslint:disable-next-line:no-console\n          console.debug(...logChain);\n        }\n        break;\n      }\n      case LEVEL.ERROR: {\n        console.error(...logChain);\n        break;\n      }\n      case LEVEL.INFO: {\n        console.log(...logChain);\n        break;\n      }\n      case LEVEL.WARN: {\n        console.warn(...logChain);\n        break;\n      }\n      default: {\n        if (this.isDebug) {\n          console.log(...logChain);\n        }\n      }\n    }\n  }\n\n  debug(methods: any[], ...args: any[]) {\n    this.log(LEVEL.DEBUG, methods, args);\n  }\n\n  error(methods: any[], ...args: any[]) {\n    this.log(LEVEL.ERROR, methods, args);\n  }\n\n  warn(methods: any[], ...args: any[]) {\n    this.log(LEVEL.WARN, methods, args);\n  }\n\n  info(methods: any[], ...args: any[]) {\n    this.log(LEVEL.INFO, methods, args);\n  }\n}\n\n/**\n *\n */\nexport enum LEVEL {\n  DEBUG, ERROR, WARN, INFO\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {ElementRef} from '@angular/core';\n\n\nexport class BubblingEvents {\n\n  /**\n   * Angular provides support for custom events via Output properties and the EventEmitter. Unlike DOM events Angular custom events do not bubble.\n   * see : http://blog.davidjs.com/2018/02/angular-custom-event-bubbling/\n   * This class allow to create events that can bubble up outside angular element webcomponents\n   */\n  static emitBubblingEvent(el: ElementRef, eventname: string, eventdetail?: any) {\n    el.nativeElement.dispatchEvent(new CustomEvent(eventname, { bubbles: true, detail: eventdetail, composed: true }));\n  }\n\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\n/**\n * Parsing result of // @command parameter  in the beginning of the WarpScript\n */\nexport interface SpecialCommentCommands {\n  endpoint?: string;\n  timeUnit?: string;\n  localMacroSubstitution?: boolean;\n  displayPreviewOpt?: string;\n}\n\nexport interface DocGenerationParams {\n  macroName: string;\n  wfRepos: string[];\n  endpoint: string;\n}\n\n/**\n * This is a simplified warpScriptParser, from the one used is VSCode WarpScript extension.\n *\n */\nexport default class WarpScriptParser {\n\n\n  /**\n   * Unlike parseWarpScriptMacros, this function return a very simple list of statements (as strings), ignoring comments.\n   * [ '\"HELLO\"' '\"WORLD\"' '+' '2' '2' '*' ]\n   */\n  public static parseWarpScriptStatements(ws: string): string[] {\n\n    let i = 0;\n    const result: string[] = [];\n\n    while (i < ws.length - 1) { // often test 2 characters\n      if (ws.charAt(i) === '<' && ws.charAt(i + 1) === '\\'') { // start of a multiline, look for end\n        // console.log(i, 'start of multiline');\n        const lines: string[] = ws.substring(i, ws.length).split('\\n');\n        let lc = 0;\n        while (lc < lines.length && lines[lc].trim() !== '\\'>') {\n          i += lines[lc].length + 1;\n          lc++;\n        }\n        i += lines[lc].length + 1;\n        // console.log(i, 'end of multiline');\n      }\n      if (ws.charAt(i) === '/' && ws.charAt(i + 1) === '*') { // start one multiline comment, seek for end of comment\n        // console.log(i, 'start of multiline comment');\n        i++;\n        while (i < ws.length - 1 && !(ws.charAt(i) === '*' && ws.charAt(i + 1) === '/')) {\n          i++;\n        }\n        i += 2;\n        // console.log(i, 'end of multiline comment');\n      }\n      if (ws.charAt(i) === '/' && ws.charAt(i + 1) === '/') { // start single line comment, seek for end of line\n        // console.log(i, 'start of a comment');\n        i++;\n        while (i < ws.length - 1 && (ws.charAt(i) !== '\\n')) {\n          i++;\n        }\n        // console.log(i, 'end of a comment');\n      }\n\n      if (ws.charAt(i) === '\\'') { // start of string, seek for end\n        // console.log(i, 'start of string');\n        const start = i;\n        i++;\n        while (i < ws.length && ws.charAt(i) !== '\\'' && ws.charAt(i) !== '\\n') {\n          i++;\n        }\n        i++;\n        result.push(ws.substring(start, i));\n        // console.log(i, 'end of string');\n      }\n      // start of string, seek for end\n      if (ws.charAt(i) === '\"') {\n        // console.log(i, 'start of string');\n        const start = i;\n        i++;\n        while (i < ws.length && ws.charAt(i) !== '\"' && ws.charAt(i) !== '\\n') {\n          i++;\n        }\n        // console.log(i, 'end of string');\n        i++;\n        result.push(ws.substring(start, i));\n      }\n\n      if (ws.charAt(i) === '<' && ws.charAt(i + 1) === '%') { // start of a macro.\n        // console.log(i, 'start of macro');\n        result.push('<%');\n        i += 2;\n      }\n\n      if (ws.charAt(i) === '%' && ws.charAt(i + 1) === '>') { // end of a macro.\n        // console.log(i, 'end of macro');\n        result.push('%>');\n        i += 2;\n      }\n\n      if (ws.charAt(i) !== ' ' && ws.charAt(i) !== '\\n') {\n        const start = i;\n        while (i < ws.length && ws.charAt(i) !== ' ' && ws.charAt(i) !== '\\n') {\n          i++;\n        }\n        result.push(ws.substring(start, i));\n      }\n      i++;\n    }\n\n    return result;\n  }\n\n\n  public static extractSpecialComments(executedWarpScript: string): SpecialCommentCommands {\n    const result: SpecialCommentCommands = {};\n    const warpscriptLines = executedWarpScript.split('\\n');\n    for (let l = 0; l < warpscriptLines.length; l++) {\n      const currentLine = warpscriptLines[l];\n      if (currentLine.startsWith('//')) {\n        // find and extract // @paramname parameters\n        const extraParamsPattern = /\\/\\/\\s*@(\\w*)\\s*(.*)$/g;\n        let lineOnMatch: RegExpMatchArray | null;\n        const re = RegExp(extraParamsPattern);\n        // think about windows... \\r\\n in mc2 files !\n        // noinspection JSAssignmentUsedAsCondition\n        while (lineOnMatch = re.exec(currentLine.replace('\\r', ''))) {\n          const parameterName = lineOnMatch[1];\n          const parameterValue = lineOnMatch[2];\n          switch (parameterName) {\n            case 'endpoint':        //      // @endpoint http://mywarp10server/api/v0/exec\n              result.endpoint = parameterValue;   // overrides the Warp10URL configuration\n              break;\n            case 'localmacrosubstitution':\n              result.localMacroSubstitution = ('true' === parameterValue.toLowerCase());   // overrides the substitutionWithLocalMacros\n              break;\n            case 'timeunit':\n              if (['us', 'ms', 'ns'].indexOf(parameterValue.trim()) > -1) {\n                result.timeUnit = parameterValue.trim();\n              }\n              break;\n            case 'preview':\n              switch (parameterValue.toLowerCase().substr(0, 4)) {\n                case 'none':\n                  result.displayPreviewOpt = 'X';\n                  break;\n                case 'gts':\n                  result.displayPreviewOpt = 'G';\n                  break;\n                case 'imag':\n                  result.displayPreviewOpt = 'I';\n                  break;\n                default:\n                  result.displayPreviewOpt = '';\n                  break;\n              }\n              break;\n            default:\n              break;\n          }\n        }\n      } else {\n        if (l > 0) {\n          break;\n        }\n        // no more comments at the beginning of the file. two first lines could be empty\n      }\n    }\n    return result;\n  }\n}\n","export class WarpScript {\n  static reference:any[] = [{\"name\":\"!\",\"detail\":\"input<BOOLEAN>  !  result<BOOLEAN>\\ngtsinput<GTS>  !  gtsresult<GTS>\",\"documentation\":\"Negates a boolean.\\n\\nThe `!` function is synonymous for [`NOT`](/doc/NOT). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nSince Warp 10™ 2.1, `!` can be applied on a boolean GTS to flip all values.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gtsinput` Since 2.1, a GTS with boolean value.\\n\\n@param `gtsresult` Since 2.1, a GTS with negated boolean value. GTS is not sorted by the operation. Metadata are kept.\\n\\n\",\"tags\":[\"logic\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7F\"},{\"name\":\"!=\",\"detail\":\"p1<ANY> p2<ANY>  !=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  !=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  !=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  !=  outputgts<GTS>\",\"documentation\":\"Tests if both parameters are different.\\n\\nThe `!=` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are different, false otherwise.\\n\\nThe two parameters must be homogeneous of numeric, boolean or string types.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `!=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 !=` is strictly equivalent of a `42 mapper.ne` MAP operation, with a simplified syntax.\\n\\n@param `p1` First parameter to compare, anything except a GTS.\\n\\n@param `p2` Second parameter to compare, anything except a GTS.\\n\\n@param `result` True if p1 and p2 are different, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values different from constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is different from gts2 value.\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7Io\"},{\"name\":\"%\",\"detail\":\"divisor<LONG> dividend<LONG>  %  modulo<LONG>\\ndivisor<DOUBLE> dividend<LONG>  %  modulo<DOUBLE>\\ndivisor<LONG> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<DOUBLE> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<COUNTER> dividend<COUNTER>  %  modulo<LONG>\\ndivisor<DOUBLE> dividend<COUNTER>  %  modulo<DOUBLE>\\ndivisor<COUNTER> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<LONG> dividend<COUNTER>  %  modulo<LONG>\\ndivisor<COUNTER> dividend<LONG>  %  modulo<LONG>\",\"documentation\":\"The `%` operator consumes two parameters from the top of the stack and pushes back the remainder of the Euclidean division of the first one by the second one.\\n\\nThe two parameters must be of numeric types.\\n\\n@param `dividend` Number divided by divisor\\n\\n@param `divisor` Number used to divide dividend\\n\\n@param `modulo` Modulo of the two given parameters\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8F\"},{\"name\":\"&\",\"detail\":\"p1<LONG> p2<LONG>  &  result<LONG>\\ninputgts<GTS> mask<LONG>  &  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  &  outputgts<GTS>\",\"documentation\":\"Performs a bitwise **AND** operation.\\n\\nThe `&` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **AND**.\\n\\nSince Warp 10™ 2.1, `&` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be AND to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with AND between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts AND with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8V\"},{\"name\":\"&&\",\"detail\":\"p1<BOOLEAN> p2<BOOLEAN>  &&  result<BOOLEAN>\\nl<LIST>  &&  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  &&  gtsresult<GTS>\",\"documentation\":\"The `&&` operator is a synonymous for [`AND`](/doc/AND).\\n\\nIt performs a logical **&&** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `&&` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical && applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with && between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"8XN\"},{\"name\":\"(\",\"detail\":\" (  mark<MARK>\",\"documentation\":\"Starts a set creation.\\n\\nThe `(` function creates a set by pushing a mark onto the stack. This is a syntactic help to better present set constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9.\"},{\"name\":\"()\",\"detail\":\"content<ANY>  ()  newset<SET>\",\"documentation\":\"The `()` function creates an empty SET on the top of the stack.\\nA Set is a collection that cannot contain duplicate elements.\\n\\nThis is an implementation of java [HashSet](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html). NULL object is permitted. It makes no guarantees as to the iteration order of the set.\\n\\nThe SET object could not be represented on the stack.\\nIt has to be converted in a list to be displayed.\\n\\nStoring GTS into sets do not guarantee uniqueness. each GTS has a hidden id. see example.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newset` set instance, initialized with content.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"91Z\"},{\"name\":\")\",\"detail\":\"mark<MARK> v1<ANY> vN<ANY>  )  set<SET>\",\"documentation\":\"Closes a currently open set and pushes it onto the stack.\\n\\nThe `)` function pops from the stack the elements of the set up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `set` The built set\\n\\n@param `mark` The mark indicating the deepest level to consider when building the set\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9F\"},{\"name\":\"*\",\"detail\":\"p1<NUMBER> p2<NUMBER>  *  result<NUMBER>\\np1<VECTOR> p2<NUMBER>  *  result<VECTOR>\\np1<NUMBER> p2<VECTOR>  *  result<VECTOR>\\np1<MATRIX> p2<NUMBER>  *  result<MATRIX>\\np1<NUMBER> p2<MATRIX>  *  result<MATRIX>\\np1<MATRIX> p2<VECTOR>  *  result<VECTOR>\\np1<VECTOR> p2<MATRIX>  *  result<VECTOR>\\np1<MATRIX> p2<MATRIX>  *  result<VECTOR>\\np2<GTS> p1<GTS>  *  result<GTS>\\np2<GTS> p1<NUMBER>  *  result<GTS>\\np2<NUMBER> p1<GTS>  *  result<GTS>\",\"documentation\":\"The `*` operator consumes two parameters from the top of the stack and pushes back the result of multiplying both of them.\\n\\nIf you want to multiply two matrices together, they have to be of the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Multiplication result\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9V\"},{\"name\":\"**\",\"detail\":\"b<LONG> n<LONG>  **  result<LONG>\\nb<DOUBLE> n<LONG>  **  result<DOUBLE>\\nb<LONG> n<DOUBLE>  **  result<DOUBLE>\\nb<DOUBLE> n<DOUBLE>  **  result<DOUBLE>\\nb<COUNTER> n<COUNTER>  **  result<LONG>\\nb<DOUBLE> n<COUNTER>  **  result<DOUBLE>\\nb<COUNTER> n<DOUBLE>  **  result<DOUBLE>\\nb<COUNTER> n<LONG>  **  result<LONG>\\nb<LONG> n<COUNTER>  **  result<LONG>\",\"documentation\":\"Returns the value of the first argument raised to the power of the second argument.\\n\\nThe `**` operator consumes two parameters from the top of the stack (a base **b** and an exponent **n**) and pushes back the result raising b to the power of n,\\ni.e. b<sup>n</sup>. For special cases see [pow()](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double- \\\"javadoc\\\").\\n\\nThe two parameters must be of numeric types.\\n\\n@param `b` First parameter, the base\\n\\n@param `n` Second parameter, the exponent\\n\\n@param `result` The result of b<sup>n</sup>\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9Xc\"},{\"name\":\"+\",\"detail\":\"param1<STRING> param2<STRING>  +  result<STRING>\\nparam1<LONG> param2<LONG>  +  result<LONG>\\nparam1<DOUBLE> param2<LONG>  +  result<DOUBLE>\\nparam1<COUNTER> param2<LONG>  +  result<LONG>\\nparam1<LONG> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<DOUBLE> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<COUNTER> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<COUNTER> param2<COUNTER>  +  result<LONG>\\nparam1<DOUBLE> param2<COUNTER>  +  result<DOUBLE>\\nparam1<LONG> param2<COUNTER>  +  result<LONG>\\nparam1<LIST> param2<ANY>  +  result<LIST>\\nparam1<SET> param2<ANY>  +  result<SET>\\nparam1<VECTOR> param2<NUMBER>  +  result<VECTOR>\\nparam1<NUMBER> param2<VECTOR>  +  result<VECTOR>\\nparam1<VECTOR> param2<VECTOR>  +  result<VECTOR>\\nparam1<MACRO> param2<MACRO>  +  result<MACRO>\\nparam1<MATRIX> param2<NUMBER>  +  result<MATRIX>\\nparam1<NUMBER> param2<MATRIX>  +  result<MATRIX>\\nparam1<MATRIX> param2<MATRIX>  +  result<MATRIX>\\nparam2<GTS> param1<GTS>  +  result<GTS>\\nparam2<GTS> param1<DOUBLE>  +  result<GTS>\\nparam2<GTS> param1<LONG>  +  result<GTS>\\nparam2<GTS> param1<STRING>  +  result<GTS>\\nparam2<DOUBLE> param1<GTS>  +  result<GTS>\\nparam2<LONG> param1<GTS>  +  result<GTS>\\nparam2<STRING> param1<GTS>  +  result<GTS>\\nparam1<BYTES> param2<BYTES>  +  result<BYTES>\",\"documentation\":\"The `+` operator consumes two parameters from the top of the stack and pushes back the result of adding them.\\n\\nThe meaning of adding depends on the type of parameter:\\n\\n- If both parameters are numbers, the result is the sum of both numbers.\\n\\n- If both parameters are strings, the result is the concatenation of both strings.\\n- If both parameters are byte arrays, the result is the concatenation of both byte arrays (version 2.1+).\\n\\n- If the first parameter is a list, the + operator clones the list and appends the second parameter to the cloned list.\\n\\n- If the first parameter is a set, the + operator clones the set and appends the second parameter to the cloned set.\\n\\n- If both parameters are macros, the result is a macro concatenating the two others in any other case + with throw an exception.\\n\\n- If the first parameter is a vector, the + operator adds the second numeric parameter to each element of the vector.\\n- If the second parameter is a vector, the + operator adds the first numeric parameter to each element of the vector.\\n- If both parameters are vectors, the + operator adds each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If the first parameter is a matrix, the + operator adds the second numeric parameter to each element of the matrix.\\n- If the second parameter is a matrix, the + operator adds the first numeric parameter to each element of the matrix.\\n- If both parameters are matrices, the + operator adds each element of matrices which are on the same index. Matrices must be the same size.\\n- If one of the parameters is a Geo Time Series™, the result will be a Geo Time Series™ of type DOUBLE.\\n\\n@param `param1` First parameter\\n\\n@param `param2` Second parameter\\n\\n@param `result` Result of the addition\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9k\"},{\"name\":\"+!\",\"detail\":\"input<LIST> item<ANY>  +!  output<LIST>\\ninput<SET> item<ANY>  +!  output<SET>\",\"documentation\":\"The +! operator adds the element on top of the stack to the set or list below it. \\nThe element is added to the existing collection. \\n\\n\\n@param `input` reference to the list or set to be modified\\n\\n@param `output` copy of input list or set reference.\\n\\n@param `item` the item to append to inputlist. Depending on list content, could be any type.\\n\\n\",\"tags\":[\"lists\",\"operators\"],\"since\":\"1.2.0\",\"OPB64name\":\"9m3\"},{\"name\":\"-\",\"detail\":\"p1<LONG> p2<LONG>  -  result<LONG>\\np1<LONG> p2<DOUBLE>  -  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  -  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  -  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  -  result<LONG>\\np1<COUNTER> p2<DOUBLE>  -  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  -  result<DOUBLE>\\np1<LONG> p2<COUNTER>  -  result<LONG>\\np1<COUNTER> p2<LONG>  -  result<LONG>\\np1<MATRIX> p2<MATRIX>  -  result<MATRIX>\\np1<VECTOR> p2<VECTOR>  -  result<VECTOR>\\np2<GTS> p1<GTS>  -  result<GTS>\\np2<GTS> p1<NUMBER>  -  result<GTS>\\np2<NUMBER> p1<GTS>  -  result<GTS>\",\"documentation\":\"Subtracts two parameters.\\n\\nThe `-` operator consumes two parameters from the top of the stack and pushes back the result of subtracting the second one from the first one.\\n\\n- If both parameters are numbers, the result is the subtraction of both numbers.\\n\\n- If both parameters are vectors, the - operator subtracts each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If both parameters are matrices, the - operator subtracts each element of matrices which are on the same index. Matrices must be the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Subtraction result\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"AF\"},{\"name\":\"->B64\",\"detail\":\"input<STRING>  ->B64  result<STRING>\\ninput<BYTES>  ->B64  result<STRING>\",\"documentation\":\"Encodes the string on top of the stack in [base64](https://en.wikipedia.org/wiki/Base64).\\n\\n@param `input` String or byte array to encode\\n\\n@param `result` Base64 encoded string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYF\"},{\"name\":\"->B64URL\",\"detail\":\"input<STRING>  ->B64URL  result<STRING>\\nbytes<BYTES>  ->B64URL  result<STRING>\",\"documentation\":\"Encodes the string on top of the stack in [base64url](https://en.wikipedia.org/wiki/Base64#Variants_summary_table).\\n\\n@param `input` String to encode\\n\\n@param `bytes` Byte array to encode\\n\\n@param `result` Base64url encoded string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYGKJZk\"},{\"name\":\"->BIN\",\"detail\":\"input<STRING>  ->BIN  output<STRING>\\ninput<BYTES>  ->BIN  output<STRING>\",\"documentation\":\"The ->BIN function converts the byte array or the string on top of the stack \\nto its binary representation.\\n\\nApplied on a string, `->BIN` replaces ` 'utf-8' ->BYTES ->BIN `\\n\\nIf the encoded content is not a \\nvalid UTF-8 representation, the resulting string will reflect that. \\n\\n@param `input` Any string or byte array.\\n\\n@param `output` Binary representation of the input.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1HJs\"},{\"name\":\"->BYTES\",\"detail\":\"input<STRING> charset<STRING>  ->BYTES  output<BYTES>\",\"documentation\":\"->BYTES function converts a string into a bytes array given a charset\\nand put the result on top of the stack.\\n\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\nBytes array cannot be represented on the stack.\\n\\n\\n@param `input` String input.\\n\\n@param `charset` Charset to use.\\n\\n@param `output` Byte array representation of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1LKG4Jk\"},{\"name\":\"->DOUBLEBITS\",\"detail\":\"number<NUMBER>  ->DOUBLEBITS  bits<LONG>\\ngts<GTS>  ->DOUBLEBITS  longgts<GTS>\",\"documentation\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"tags\":[\"math\",\"gts\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt3IpK1I3K1HKGI\"},{\"name\":\"->ENCODER\",\"detail\":\"elements<LIST>  ->ENCODER  output<GTSENCODER>\\nlgts<LIST<GTS>>  ->ENCODER  output<GTSENCODER>\\nlwrappedgts<LIST<STRING>>  ->ENCODER  output<GTSENCODER>\\nlrawwrappedgts<LIST<BYTES>>  ->ENCODER  output<GTSENCODER>\",\"documentation\":\"The `->ENCODER` function takes a list of points and encode them in a single encoder. Each point is a list of ( timestamp, latitude, longitude, elevation, value ). Since 2.1.1, a point can also be a Geo Time Series™ or a wrapped one. In that case all the points of the Geo Time Series™ are added to the encoder.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `elements` List of list of ( timestamp, latitude, longitude, elevation, value ). See example to see which element(s) can be omitted.\\n\\n@param `lgts` A list of Geo Time Series™ instances.\\n\\n@param `lwrappedgts` A list of wrapped Geo Time Series™ instances, such as produced by [`WRAP`](/doc/WRAP).\\n\\n@param `lrawwrappedgts` A list of raw wrapped Geo Time Series™ instances, such as produced by [`WRAPRAW`](/doc/WRAPRAW).\\n\\n@param `output` Encoder\\n\\n\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt4IZCEG3KH\"},{\"name\":\"->ENCODERS\",\"detail\":\"encoder<GTSENCODER>  ->ENCODERS  output<MAP>\\nwrappedencoder<STRING>  ->ENCODERS  output<MAP>\\nrawwrappedencoder<BYTES>  ->ENCODERS  output<MAP>\",\"documentation\":\"The `->ENCODERS` function converts an encoder into one encoder per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content, when a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AIt4IZCEG3KHJk\"},{\"name\":\"->FLOATBITS\",\"detail\":\"input<NUMBER>  ->FLOATBITS  result<LONG>\",\"documentation\":\"Converts a numeric value to a **FLOAT** then to a **LONG** value of the raw bits of its representation.\\n\\nOnly the lower 32 bits of the **LONG** value are significant.\\n\\n@param `input` Double to convert\\n\\n@param `result` Raw bits representation\\n\\n\",\"tags\":[\"math\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt5I3x0K388K4B\"},{\"name\":\"->GEOCELL\",\"detail\":\"hhPrefixS<STRING>  ->GEOCELL  geocell<LONG>\\nhhPrefixB<BYTES>  ->GEOCELL  geocell<LONG>\",\"documentation\":\"The `->GEOCELL` function converts a **STRING** or a **BYTES** HHCode prefix to a **LONG** geocell. The length of the input implicitly specifies the resolution of the cell.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `hhPrefixS` A HHCode prefix representing a cell. Resolution is twice the length of the **STRING**.\\n\\n@param `hhPrefixB` A HHCode prefix representing a cell. Resolution is four times the length of the **BYTES**.\\n\\n@param `geocell` The geocell representation.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJx2GJlB\"},{\"name\":\"->GEOHASH\",\"detail\":\"lat<DOUBLE> lon<DOUBLE>  ->GEOHASH  geohash<STRING>\\nhhcode<LONG>  ->GEOHASH  geohash<STRING>\\nshape<GEOSHAPE>  ->GEOHASH  geohashes<LIST<STRING>>\",\"documentation\":\"The `->GEOHASH` function packs a latitude and a longitude into a STRING [Geohash](https://en.wikipedia.org/wiki/Geohash), converts a [HHCode](https://en.wikipedia.org/wiki/HHCode) into its Geohash counterpart, or converts a `GEOSHAPE` into a list of Geohashes covering the same geographical area.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `geohash` Geohash string packing the specified latitude and longitude.\\n\\n@param `hhcode` HHCode to transform.\\n\\n@param `shape` `GEOSHAPE` to convert.\\n\\n@param `geohashes` List of Geohashes covering the same area as `shape`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt6GJx7FKC7\"},{\"name\":\"->GEOJSON\",\"detail\":\"shape<GEOSHAPE>  ->GEOJSON  geojson<STRING>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->GEOJSON  geojson<STRING>\\nwkt<STRING>  ->GEOJSON  geojson<STRING>\\nwkb<BYTES>  ->GEOJSON  geojson<STRING>\",\"documentation\":\"The `->GEOJSON` function translate the given GeoShape into a GeoJSON.\\n\\nThe resulting GeoJSON is a string representing a MultiPolygon geometry. By default, it defines the boundaries of the covered areas and any holes it these areas, if any.\\n\\nIt is also possible for this function to return a GeoJSON representing all the cells in the GeoShape.\\n\\n GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` The resulting GeoJSON.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` WKB bytes\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.1\",\"OPB64name\":\"AIt6GJx9JoxD\"},{\"name\":\"->GEOSHAPE\",\"detail\":\"geocells<LIST<LONG>>  ->GEOSHAPE  geoshape<GEOSHAPE>\\nhhPrefixesS<LIST<STRING>>  ->GEOSHAPE  geoshape<GEOSHAPE>\\nhhPrefixesB<LIST<BYTES>>  ->GEOSHAPE  geoshape<GEOSHAPE>\",\"documentation\":\"The `->GEOSHAPE` function converts a list of **LONG** geocells or HHCode prefixes (**STRING** or **BYTES**) to a **GEOSHAPE**.\\n\\n@param `geocells` List of geocells, as **LONGs**.\\n\\n@param `hhPrefixesS` List of HHCode prefixes, as **STRINGs**.\\n\\n@param `hhPrefixesB` List of HHCode prefixes, as **BYTESs**.\\n\\n@param `geoshape` The resulting **GEOSHAPE**.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJxIH34FGF\"},{\"name\":\"->GTS\",\"detail\":\"encoder<GTSENCODER>  ->GTS  output<MAP>\\nwrappedencoder<STRING>  ->GTS  output<MAP>\\nrawwrappedencoder<BYTES>  ->GTS  output<MAP>\\nlencoder<LIST<GTSENCODER>>  ->GTS  loutput<MAP>\\nlwrappedencoder<LIST<STRING>>  ->GTS  loutput<MAP>\\nlrawwrappedencoder<LIST<BYTES>>  ->GTS  loutput<MAP>\\nencoder<GTSENCODER> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nwrappedencoder<STRING> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nrawwrappedencoder<BYTES> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nlencoder<LIST<GTSENCODER>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\\nlwrappedencoder<LIST<STRING>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\\nlrawwrappedencoder<LIST<BYTES>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\",\"documentation\":\"The `->GTS` function converts an encoder into one GTS per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\n###### Since 2.4.0:\\n- `->GTS` function can also take a conversion MAP input. Using this conversion MAP, the output is always a list of GTS.\\n- The conversion map can also take a list of selectors for each output type.\\n- The conversion map can be empty: In this case, the GTS type is enforced by the type of the first element in the encoder input.\\n- The first selector match stops the research. It means key order matters. See Examples.\\n- A new '.type' label is added to each output GTS. This could be overriden with the 'label.type' parameter of the conversion MAP.\\n- `->GTS` function can handle encoders, or list of encoders.\\n\\n###### What is an encoder ?\\nA Geo Time Series™ is limited to the type of the first value stored.\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content.\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder. Values are GTS.\\n\\n@param `lencoder` List of encoders input (supported since 2.4.0).\\n\\n@param `lwrappedencoder` List of encoders after WRAP (supported since 2.4.0).\\n\\n@param `lrawwrappedencoder` List of encoders after WRAPRAW (supported since 2.4.0).\\n\\n@param `loutput` Map with a key/value per type encountered in the input encoder. Values are a list of GTS.\\n\\n@param `conversionmap` Map with type as keys, selectors or list of selectors as values. The special key `label` allow to change the default `.type` label. Set label to NULL to avoid any new label. The conversion map could be empty.\\n\\n@param `conversionoutput` A GTS, or a list of GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt6K4B\"},{\"name\":\"->GTSHHCODE\",\"detail\":\"lat<NUMBER> lon<NUMBER>  ->GTSHHCODE  hhcode<STRING>\",\"documentation\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3J\"},{\"name\":\"->GTSHHCODELONG\",\"detail\":\"lat<NUMBER> lon<NUMBER>  ->GTSHHCODELONG  hhcode<STRING>\",\"documentation\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3KBIot6\"},{\"name\":\"->HEX\",\"detail\":\"input<STRING>  ->HEX  output<STRING>\\ninput<BYTES>  ->HEX  output<STRING>\",\"documentation\":\"Decodes an hex encoded string or a byte array.\\nFor different encodings, use bytes array conversion [`BYTES->`](/doc/F__JGKBhEV).\\n\\n\\nApplied on a string, `->HEX` replaces ` 'utf-8' ->BYTES ->HEX `\\n\\nIf the encoded content is not a\\nvalid UTF-8 representation, the resulting string will reflect that.\\n\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Decoded string of input, assuming utf-8 encoding of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt7GKV\"},{\"name\":\"->HHCODE\",\"detail\":\"lat<NUMBER> lon<NUMBER>  ->HHCODE  hhcode<STRING>\",\"documentation\":\"The `->HHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt7H3CEG3J\"},{\"name\":\"->HHCODELONG\",\"detail\":\"lat<NUMBER> lon<NUMBER>  ->HHCODELONG  hhcode<LONG>\",\"documentation\":\"The `->HHCODELONG` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.5\",\"OPB64name\":\"AIt7H3CEG3KBIot6\"},{\"name\":\"->JSON\",\"detail\":\"object<ANY>  ->JSON  output<STRING>\",\"documentation\":\"The `->JSON` functions serialize structures containing numbers, strings, booleans, lists, vlists and maps which do not reference the same list/map multiple times.\\n\\n@param `object` Object to serialize\\n\\n@param `output` JSON formatted string\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt9JoxD\"},{\"name\":\"->LIST\",\"detail\":\"content<ANY*> N<LONG>  ->LIST  newlist<LIST>\",\"documentation\":\"The `->LIST` function create a list from N elements on the stack.\\nN and the N next elements on the stack are consumed.\\n\\nIf N is greater than current stack depth, the function raises an error.\\n\\n@param `N` The number of elements to take on the top of the stack to build the list.\\n\\n@param `newlist` The list of N elements. [deepest in stack ... TOP-1 ]\\n\\n@param `content` 0 to n elements\\n\\n\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItBHKCJ\"},{\"name\":\"->LONGBYTES\",\"detail\":\"number<LONG> nbbytes<LONG>  ->LONGBYTES  output<BYTES>\\nnumberList<LIST<LONG>> nbbytes<LONG>  ->LONGBYTES  output<BYTES>\",\"documentation\":\"`->LONGBYTES` converts a LONG to a byte array. It expects a number of bytes on the top of the stack.\\n\\nSince Warp 10™ 2.1, `->LONGBYTES` can also convert a list of LONG.\\n\\n@param `nbbytes` Number of bytes for number conversion: nbbytes could be 1 to 8. If less than 8, most significant bytes will be truncated.\\n\\n@param `number` must be a LONG\\n\\n@param `output` byte array, from 1 to 8 bytes per number\\n\\n@param `numberList` Since Warp 10 2.1, a list of LONG\\n\\n\",\"tags\":[\"binary\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItBIot6F__JGKB\"},{\"name\":\"->MAP\",\"detail\":\"N<LONG> content<ANY*> content<ANY*>  ->MAP  newmap<MAP>\",\"documentation\":\"The ->MAP function creates a MAP from an even number N of elements on the stack. \\nN is consumed off the top of the stack. For each pair, the deepest element is the key, the shallowest is the value.\\n\\n\\n@param `content` 0 to n pairs of key-value elements. Keys must be different.\\n\\n@param `N` Number of content elements to consume on the stack. It must be even.\\n\\n@param `newmap` map instance, initialized with content.\\n\\n\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItCFK.\"},{\"name\":\"->MAT\",\"detail\":\"[ input<LIST> ]  ->MAT  result<MATRIX>\",\"documentation\":\"The `->MAT` function converts nested lists of numbers (2D array with same number of columns) into a Matrix.\\n\\nMATRIX objects cannot be represented on the stack. \\n\\nMatrix entries must be numbers.\\n\\n\\n@param `input` List of lists of values\\n\\n@param `result` A MATRIX object\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItCFKF\"},{\"name\":\"->MVSTRING\",\"detail\":\"input<STRING>  ->MVSTRING  mvstring<STRING>\\ninput<BYTES>  ->MVSTRING  mvstring<STRING>\\ninput<GTS>  ->MVSTRING  mvstring<STRING>\\ninput<GTSENCODER>  ->MVSTRING  mvstring<STRING>\",\"documentation\":\"The `->MVSTRING` function generates a STRING representation of an ENCODER in the format expected by the `/update` endpoint for multi values.\\n\\nWhen encountering a binary element, the function attempts to interpret it as a wrapped encoder, if that fails then it will output the element as a binary (`b64:...`) value.\\n\\n@param `input` Wrapped or unwrapped Geo Time Series™ or ENCODER.\\n\\n@param `mvstring` MultiValue format representation of the wrapped encoder/GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItCK_CJJZ_DGk\"},{\"name\":\"->OPB64\",\"detail\":\"input<STRING>  ->OPB64  output<STRING>\\ninput<BYTES>  ->OPB64  output<STRING>\",\"documentation\":\"Encode a String in order preserving base64. OPB64 is a Base64 like encoding which preserves the lexicographic order of\\nthe original byte arrays in the encoded ones. This is useful to compare encoded byte arrays without having to first decode them.\\n\\n@param `input` Could be a string or a byte array.\\n\\n@param `output` OPB64 of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItEJ37qC.\"},{\"name\":\"->PICKLE\",\"detail\":\"input<ANY>  ->PICKLE  output<BYTES>\",\"documentation\":\"The `->PICKLE` function converts the object on top of the stack to a Python object and serializes it using Pickle protocol version 2.\\nThe conversion table used is as follow:\\n\\n| WarpScript | Python |\\n|------------|--------|\\n| NULL | None |\\n| BOOLEAN | bool |\\n| BYTES | bytearray |\\n| STRING | str/unicode |\\n| DOUBLE | float |\\n| LONG | int |\\n| LIST | list |\\n| MAP | dict |\\n| SET | set |\\n| GTS | dict |\\n| ENCODER | dict |\\n\\nOther types are unsupported.\\n\\nPython example with `->PICKLE ->HEX` output:\\n```python\\n>>> s=\\\"80025d71002858060000005049434b4c4571015806000000535452494e4771025d7103284b0547400921fb54442d1865652e\\\"\\n>>> import pickle\\n>>> pickle.loads(s.decode(\\\"hex\\\"))\\n[u'PICKLE', u'STRING', [5, 3.141592653589793]]\\n```\\n\\n@param `input` A serializable object\\n\\n@param `output` Pickle encoded content\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"AItFHJCAI3J\"},{\"name\":\"->Q\",\"detail\":\"w<DOUBLE> x<DOUBLE> y<DOUBLE> z<DOUBLE>  ->Q  result<LONG>\",\"documentation\":\"The `->Q` function consumes on the stack 4 doubles (w, x, y, z, with z being on top) representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion)\\nand push back quaternion representation into a **LONG**.\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `result` Quaternion representation\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItG\"},{\"name\":\"->SET\",\"detail\":\"input<LIST>  ->SET  newset<SET>\",\"documentation\":\"The -`>SET` function converts a **LIST** on top of the stack into a **SET**.\\n\\nSETs are not viewable, null will be return if it remains on the stack.\\n\\nThe order in the SET is not garanteed, see [`()`](/doc/91Z).\\n\\n\\n@param `input` The input list\\n\\n@param `newset` The new set reference. SETs are not viewable, null remains on the stack.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItIGKF\"},{\"name\":\"->TSELEMENTS\",\"detail\":\"timestamp<LONG>  ->TSELEMENTS  dateAndTimeElements<LIST<LONG>>\\ntimestamp<LONG> timezone<STRING>  ->TSELEMENTS  dateAndTimeElements<LIST<LONG>>\",\"documentation\":\"The `->TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"AItJJoKBGJp4I_GI\"},{\"name\":\"->V\",\"detail\":\"list<LIST>  ->V  result<VLIST>\\nset<SET>  ->V  result<VLIST>\",\"documentation\":\"The `->V` function converts a list of objects into a Pig Vector (VLIST).\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `list` Input list\\n\\n@param `set` Input set\\n\\n@param `result` Result list\\n\\n\",\"tags\":[\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"AItL\"},{\"name\":\"->VARINT\",\"detail\":\"number<LONG>  ->VARINT  encoded<BYTES>\\nnumbers<LIST<LONG>>  ->VARINT  encoded<BYTES>\",\"documentation\":\"The `->VARINT` function encodes a `LONG` or a list of `LONG`s using [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoding. The result is a byte array containing the concatenation of the encoded numbers.\\n\\nThe `->VARINT` function is optimized for encoding unsigned `LONG`s, this means that negative numbers (with the most significant bit set to 1) will be encoded on 10 bytes. In order to reduce this footprint you can pre-process the numbers to encode so they are encoded unsing [ZigZag VarInt](https://developers.google.com/protocol-buffers/docs/encoding#types) encoding. The simple trick is to compute\\n\\n```\\n$value 1 << $value 63 >> ^\\n```\\n\\nthis will have the effect of alternatively encoding positive and negative numbers thus leading to a more efficient footprint for negative numbers.\\n\\nAt decoding time using `VARINT->`, simply undo the *Zig-Zag* trick:\\n\\n```\\n$unsigned 63 << 63 >> $unsigned ^ 1 >>\\n// Flip the top bit\\n$unsigned 1 63 << & ^\\n```\\n\\n@param `number` Single number to encode.\\n\\n@param `numbers` List of numbers to encode.\\n\\n@param `encoded` Byte array containing the encoded number(s).\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"AItLFK88I_F\"},{\"name\":\"->VEC\",\"detail\":\"list<LIST>  ->VEC  result<VECTOR>\\nmatrix<MATRIX>  ->VEC  result<VECTOR>\",\"documentation\":\"The `->VEC` function converts a list of numbers into a Vector.\\n\\nVectors objects cannot be represented on the stack. \\n\\nVectors entries must be numbers.\\n\\n@param `list` List to convert\\n\\n@param `matrix` Matrix with a single column\\n\\n@param `result` Vector\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItLGJB\"},{\"name\":\"->WKB\",\"detail\":\"shape<GEOSHAPE>  ->WKB  wkb<BYTES>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->WKB  wkb<BYTES>\\nwkt<STRING>  ->WKB  wkb<BYTES>\\ngeojson<STRING>  ->WKB  wkb<BYTES>\",\"documentation\":\"The `->WKB` function converts a GeoJSON **STRING**, a WKT **STRING** or a **SHAPE** to WKB **BYTES**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` The resulting WKB.\\n\\n\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHo7\"},{\"name\":\"->WKT\",\"detail\":\"shape<GEOSHAPE>  ->WKT  wkt<STRING>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->WKT  wkt<STRING>\\ngeojson<STRING>  ->WKT  wkt<STRING>\\nwkb<BYTES>  ->WKT  wkt<STRING>\",\"documentation\":\"The `->WKT` function converts a GeoJSON **STRING**, a WKB **BYTES** or a **SHAPE** to WKT **STRING**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` The resulting  WKT.\\n\\n@param `wkb` WKB bytes.\\n\\n\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHpF\"},{\"name\":\"->Z\",\"detail\":\"longs<LIST<LONG>> bitwidth<LONG>  ->Z  z<BYTES>\",\"documentation\":\"The `->Z` function packs multiple **LONG** arguments into a byte array by interleaving the bits of the arguments. This produces a \\n[Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) value encoding the original arguments. The value might be right padded with bits set to 0 to reach a multiple of 8 bits.\\n\\n@param `bitwidth` Number of bits to consider for each LONG in 'longs', from 1 to 63.\\n\\n@param `longs` List of LONGs to pack. Each LONG *MUST* be positive, i.e. with bit 63 set to 0.\\n\\n@param `z` Byte array containing the packed values.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItP\"},{\"name\":\"/\",\"detail\":\"long<LONG> long<LONG>  /  long-result<LONG>\\ndouble<DOUBLE> long<LONG>  /  double-result<DOUBLE>\\nlong<LONG> double<DOUBLE>  /  double-result<DOUBLE>\\ndouble<DOUBLE> double<DOUBLE>  /  double-result<DOUBLE>\\ncounter<COUNTER> counter<COUNTER>  /  long-result<LONG>\\ndouble<DOUBLE> counter<COUNTER>  /  long-result<DOUBLE>\\ncounter<COUNTER> double<DOUBLE>  /  long-result<DOUBLE>\\ncounter<COUNTER> long<LONG>  /  long-result<LONG>\\nlong<LONG> counter<COUNTER>  /  long-result<LONG>\\ndouble<VECTOR> double<NUMBER>  /  double-result<VECTOR>\\nparam2<GTS> param1<GTS>  /  result<GTS>\\nparam2<GTS> param1<NUMBER>  /  result<GTS>\\nparam2<NUMBER> param1<GTS>  /  result<GTS>\",\"documentation\":\"The `/` operator consumes two parameters from the top of the stack and pushes back the result of dividing the first one by the second one.\\n\\nYou can't devide by zero.\\n\\nThe two parameters must be of numeric types, or Geo Time Series™, or a mix of the two.\\n\\n@param `long` Numeric integer\\n\\n@param `long-result` Numeric floor-rounded integer\\n\\n@param `double` Numeric floating point number\\n\\n@param `double-result` Numeric floating point number\\n\\n@param `counter` Numeric counter\\n\\n@param `param1` First parameter of the division.\\n\\n@param `param2` Second parameter of the division.\\n\\n@param `result` Resulting GTS, of type DOUBLE.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ak\"},{\"name\":\"<\",\"detail\":\"p1<NUMBER> p2<NUMBER>  <  result<BOOLEAN>\\np1<STRING> p2<STRING>  <  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  <  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  <  outgts<GTS>\\ngts1<GTS> gts2<GTS>  <  outputgts<GTS>\",\"documentation\":\"The `<` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 < p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <` is strictly equivalent of a `42 mapper.lt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 < p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E.\"},{\"name\":\"<<\",\"detail\":\"number<LONG> shift<LONG>  <<  result<LONG>\\ninputgts<GTS> number<LONG>  <<  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  <<  outputgts<GTS>\",\"documentation\":\"Shifts the bits of a long by a number of positions to the left. The least significant bit is filled with 0 after each shift.\\n\\nSince Warp 10™ 2.1, `<<` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2k\"},{\"name\":\"<=\",\"detail\":\"p1<NUMBER> p2<NUMBER>  <=  result<BOOLEAN>\\np1<STRING> p2<STRING>  <=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  <=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  <=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  <=  outputgts<GTS>\",\"documentation\":\"The `<=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 <= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <=` is strictly equivalent of a `42 mapper.le` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 <= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less or equal than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2o\"},{\"name\":\"==\",\"detail\":\"p1<ANY> p2<ANY>  ==  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  ==  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  ==  outgts<GTS>\\ngts1<GTS> gts2<GTS>  ==  outputgts<GTS>\",\"documentation\":\"Tests if both parameters are equal.\\n\\nThe `==` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are equal, false otherwise.\\n\\nThe two parameters must be of numeric, boolean, vector, matrix or string types.\\nFor vector or matrix, the parameters must be the same size.\\n\\nSince 2.1.0, as every other comparison operators, `==` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 ==` is strictly equivalent of a `42 mapper.eq` MAP operation, with a simplified syntax.\\n\\nSince 2.1.1, `==` can be use to check equality between Lists, Maps and Sets. For for details about how this is defined, check the [java documentation](https://docs.oracle.com/en/java/javase/index.html).\\n\\n@param `p1` First parameter to compare\\n\\n@param `p2` Second parameter to compare\\n\\n@param `result` True if p1 and p2 are equal, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values equal to constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value equals gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EIo\"},{\"name\":\">\",\"detail\":\"p1<NUMBER> p2<NUMBER>  >  result<BOOLEAN>\\np1<STRING> p2<STRING>  >  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  >  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  >  outgts<GTS>\\ngts1<GTS> gts2<GTS>  >  outputgts<GTS>\",\"documentation\":\"The `>` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 > p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >` is strictly equivalent of a `42 mapper.gt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 > p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EV\"},{\"name\":\">=\",\"detail\":\"p1<NUMBER> p2<NUMBER>  >=  result<BOOLEAN>\\np1<STRING> p2<STRING>  >=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  >=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  >=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  >=  outputgts<GTS>\",\"documentation\":\"The `>=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 >= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >=` is strictly equivalent of a `42 mapper.ge` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 >= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater or equal than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYo\"},{\"name\":\">>\",\"detail\":\"number<LONG> shift<LONG>  >>  result<LONG>\\ninputgts<GTS> number<LONG>  >>  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  >>  outputgts<GTS>\",\"documentation\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after shifting depends on the sign of the unshifted long.\\n\\nSince Warp 10™ 2.1, `>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYs\"},{\"name\":\">>>\",\"detail\":\"number<LONG> shift<LONG>  >>>  result<LONG>\\ninputgts<GTS> number<LONG>  >>>  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  >>>  outputgts<GTS>\",\"documentation\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after each shift is set to 0, regardless of the sign of \\nthe unshifted long.\\n\\nSince Warp 10™ 2.1, `>>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYsy\"},{\"name\":\"ABS\",\"detail\":\"value<LONG>  ABS  result<LONG>\\nvalue<COUNTER>  ABS  result<LONG>\\nvalue<DOUBLE>  ABS  result<DOUBLE>\\nlvalue<LIST<LONG>>  ABS  lresult<LIST<LONG>>\\nlvalue<LIST<COUNTER>>  ABS  lresult<LIST<LONG>>\\nlvalue<LIST<DOUBLE>>  ABS  lresult<LIST<DOUBLE>>\",\"documentation\":\"Computes the absolute value of a number value.\\n\\nThe `ABS` function consumes a numeric value from the top of the stack and pushes back its absolute value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` A numeric value\\n\\n@param `result` The absolute value of the given numeric value.\\n\\n@param `lvalue` A list of numeric values\\n\\n@param `lresult` A list of the absolute values of the given values.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ABS\"},{\"name\":\"ACCEL.CACHE\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.CACHE` function will enable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.CACHE\"},{\"name\":\"ACCEL.NOCACHE\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOCACHE` function will disable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOCACHE\"},{\"name\":\"ACCEL.NOPERSIST\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOPERSIST` function will disable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOPERSIST\"},{\"name\":\"ACCEL.PERSIST\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.PERSIST` function will enable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.PERSIST\"},{\"name\":\"ACCEL.REPORT\",\"detail\":\" ACCEL.REPORT  report<MAP>\",\"documentation\":\"The `ACCEL.REPORT` function will produce a map containing informations related to the Warp 10 Accelerator. The following table describes the various keys present in this map:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `accelerated` | Boolean indicating whether or not the last [`FETCH`](/doc/FETCH) accessed the in-memory data managed by the Warp 10 Accelerator. |\\n| `status` | Boolean indicating whether or not the Warp 10 Accelerator is enabled. |\\n| `cache` | Boolean indicating if the in-memory data will be considered for update, fetch and delete operations. |\\n| `persist` | Boolean indicating if the persistent data will be considered for update, fetch and delete operations. |\\n| `chunkcount` | Number of chunks managed by the accelerator for its in-memory data. |\\n| `chunkspan` | Length of each chunk expressed in platform time units. |\\n\\n@param `report` Map containing informations related to the Warp 10 Accelerator\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.REPORT\"},{\"name\":\"ACOS\",\"detail\":\"value<NUMBER>  ACOS  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ACOS  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `ACOS` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arccosine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arccosine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arccosine in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ACOS\"},{\"name\":\"ADDDAYS\",\"detail\":\"timestamp<LONG> timezone<STRING> days<LONG>  ADDDAYS  result<LONG>\\ntimestamp<LONG> days<LONG>  ADDDAYS  result<LONG>\\ntselements<LIST<LONG>> days<LONG>  ADDDAYS  tselementsresult<LIST<LONG>>\",\"documentation\":\"Adds days to a timestamp or a tselements.\\n\\nThe `ADDDAYS` function consumes from the top of the stack a number (positive or negative) of days, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the days and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `days` The number of days to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDDAYS\"},{\"name\":\"ADDDURATION\",\"detail\":\"timestamp<LONG> timezone<STRING> duration<STRING>  ADDDURATION  result<LONG>\\ntimestamp<LONG> timezone<STRING> duration<STRING> factor<LONG>  ADDDURATION  result<LONG>\\ntimestamp<LONG> duration<STRING>  ADDDURATION  result<LONG>\\ntimestamp<LONG> duration<STRING> factor<LONG>  ADDDURATION  result<LONG>\\ntselements<LIST<LONG>> duration<STRING>  ADDDURATION  tselementsresult<LIST<LONG>>\\ntselements<LIST<LONG>> duration<STRING> factor<LONG>  ADDDURATION  tselementsresult<LIST<LONG>>\",\"documentation\":\"Adds an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) to a timestamp or a tselements.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `duration` The duration\\n\\n@param `factor` The number of durations to add. Can be negative. Default to 1 if not set.\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"2.4.0\",\"OPB64name\":\"ADDDURATION\"},{\"name\":\"ADDEXACT\",\"detail\":\"x<NUMBER> y<NUMBER>  ADDEXACT  sum<LONG>\\nlist<LIST<NUMBER>>  ADDEXACT  ssum<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  ADDEXACT  lsum<LIST<LONG>>\",\"documentation\":\"The `ADDEXACT` function consumes two LONGs from the top of the stack and puts back the sum. If the sum overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `sum` The sum of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `ssum` The sum of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lsum` List of **LONG** where each value is the sum of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"ADDEXACT\"},{\"name\":\"ADDMONTHS\",\"detail\":\"timestamp<LONG> timezone<STRING> months<LONG>  ADDMONTHS  result<LONG>\\ntimestamp<LONG> months<LONG>  ADDMONTHS  result<LONG>\\ntselements<LIST<LONG>> months<LONG>  ADDMONTHS  tselementsresult<LIST<LONG>>\",\"documentation\":\"Adds months to a timestamp or a tselements.\\n\\nThe `ADDMONTHS` function consumes from the top of the stack a number (positive or negative) of months, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the months and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `months` The number of months to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDMONTHS\"},{\"name\":\"ADDVALUE\",\"detail\":\"gts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<STRING>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BYTES>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BOOLEAN>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<DOUBLE>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<LONG>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<GTSENCODER>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<GTS>  ADDVALUE  result<GTS>\",\"documentation\":\"The `ADDVALUE` function adds a value to a GTS, without checking for tick duplicates. The added data point is appended to the GTS.\\nThe [`SETVALUE`](/doc/SETVALUE) overrides an existing value.\\n\\nThe `ADDVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `ADDVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, for example by using [`GET`](/doc/GET)\\nwith value 0 as parameter.\\n\\nIf latitude or longitude are NaN (not a number), value has only timestamp, elevation, value.\\nIf elevation is NaN (not a number), value has only timestamp, latitude, longitude, value.\\nIf elevation is NaN and longitude or latitude are NaN, value has only timestamp, value.\\n\\nWhen adding a Geo Time Series™ or GTS Encoder value, the value will be wrapped (as when using `WRAPRAW`) and added as a binary value.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Series™\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `result` The Geo Time Series™ with the new datapoint added\\n\\n@param `elevation` Elevation or NaN\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ADDVALUE\"},{\"name\":\"ADDYEARS\",\"detail\":\"timestamp<LONG> timezone<STRING> years<LONG>  ADDYEARS  result<LONG>\\ntimestamp<LONG> years<LONG>  ADDYEARS  result<LONG>\\ntselements<LIST<LONG>> years<LONG>  ADDYEARS  tselementsresult<LIST<LONG>>\",\"documentation\":\"Adds years to a timestamp or a tselements.\\n\\nThe `ADDYEARS` function consumes from the top of the stack a number (positive or negative) of years, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the years and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `years` The number of years to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDYEARS\"},{\"name\":\"AESUNWRAP\",\"detail\":\"key<BYTES> data<BYTES>  AESUNWRAP  decoded<BYTES>\",\"documentation\":\"Unwraps a byte array with the [AES WRAP](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") and pushes back the decrypted data into an bytes array.\\n\\n`AESUNWRAP` removes the a 64bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) added by [`AESWRAP`](/doc/AESWRAP) WarpScript function\\n\\n@param `data` Encoded Byte array.\\n\\n@param `key` Byte array, 128, 192 or 256 bits key.\\n\\n@param `decoded` Decoded Byte array.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESUNWRAP\"},{\"name\":\"AESWRAP\",\"detail\":\"string<STRING> key<BYTES>  AESWRAP  encrypted<BYTES>\\nbytes<BYTES> key<BYTES>  AESWRAP  encrypted<BYTES>\",\"documentation\":\"Wraps a byte array or String with the [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt) algorithm and pushes a byte array containing the encrypted data onto the stack.\\n\\n`AESWRAP` adds a 64 bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) prefix to the input in order to protect the encrypted data against AES block determinism as [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") uses a fixed Initialization Vector.\\n\\n@param `key` 128, 192 or 256 bits key to use for encryption.\\n\\n@param `string` String data to encrypt.\\n\\n@param `bytes` Byte array to encrypt.\\n\\n@param `encrypted` Encrypted result.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESWRAP\"},{\"name\":\"AGO\",\"detail\":\"offset<NUMBER>  AGO  timestamp<LONG>\",\"documentation\":\"The `AGO` function is a shortcut which enables you to compute timestamps by specifying an offset from the current time.\\n\\n@param `offset` The numbers of ticks in platform time unit to subtract, truncated if floating-point.\\n\\n@param `timestamp` The computed timestamp\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"AGO\"},{\"name\":\"AND\",\"detail\":\"p1<BOOLEAN> p2<BOOLEAN>  AND  result<BOOLEAN>\\nl<LIST>  AND  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  AND  gtsresult<GTS>\",\"documentation\":\"The `AND` operator is a synonymous for [`&&`](/doc/8XN).\\n\\nIt performs a logical **AND** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `AND` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical AND applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with AND between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"AND\"},{\"name\":\"APPEND\",\"detail\":\"inputlist<LIST> newitems<LIST>  APPEND  outputlist<LIST>\\ninputmap<MAP> newitems<MAP>  APPEND  outputmap<MAP>\\ninputGTS<GTS> newitems<GTS>  APPEND  outputGTS<MAP>\",\"documentation\":\"The `APPEND` function consumes two paramters from the top of the stack and appends the LIST, MAP or GTS on top of the stack to the one just below.\\nThe augmented LIST, MAP or GTS is then pushed back on the stack.\\n\\n@param `newitems` items to append to input.\\n\\n@param `inputlist` LIST to be modified.\\n\\n@param `outputlist` The LIST that has been modified\\n\\n@param `inputmap` MAP to be modified.\\n\\n@param `outputmap` The AP that has been modified \\n\\n@param `inputGTS` GTS to be modified.\\n\\n@param `outputGTS` The GTS that has been modified\\n\\n\",\"tags\":[\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPEND\"},{\"name\":\"APPLY\",\"detail\":\"[ gts<LIST<GTS>+> labels<LIST> op<OPERATOR> ]  APPLY  result<LIST<GTS>>\",\"documentation\":\"The `APPLY` framework provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can do. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` List of resulting GTS, one per equivalence class.\\n\\n@param `op` Operation to perform.\\n\\n\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPLY\"},{\"name\":\"ASENCODERS\",\"detail\":\"gts<GTS>  ASENCODERS  encoder<GTSENCODER>\\nlgts<LIST<GTS>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nwrappedgts<STRING>  ASENCODERS  encoder<GTSENCODER>\\nlwrappedgts<LIST<STRING>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nrawwrappedgts<BYTES>  ASENCODERS  encoder<GTSENCODER>\\nlrawwrappedgts<LIST<BYTES>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nencoder<GTSENCODER>  ASENCODERS  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\",\"documentation\":\"The `ASENCODERS` function consumes a Geo Time Series™, a wrap or a raw wrap, or a list thereof and convert each one into an encoder.\\n\\n@param `gts` Geo Time Series™ to be converted.\\n\\n@param `lgts` List of Geo Time Series™ to be converted.\\n\\n@param `wrappedgts` Wrapped Geo Time Series™ to be converted.\\n\\n@param `lwrappedgts` List of wrapped Geo Time Series™ to be converted.\\n\\n@param `rawwrappedgts` Raw wrapped Geo Time Series™ to be converted.\\n\\n@param `lrawwrappedgts` List of raw wrapped Geo Time Series™ to be converted.\\n\\n@param `encoder` Encoder of the given Geo Time Series™.\\n\\n@param `lencoder` List of encoder, one for each given Geo Time Series™.\\n\\n\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"2.2.0\",\"OPB64name\":\"ASENCODERS\"},{\"name\":\"ASIN\",\"detail\":\"value<NUMBER>  ASIN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ASIN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `ASIN` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arcsine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arcsine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arcsine in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASIN\"},{\"name\":\"ASREGS\",\"detail\":\"macro<MACRO> vars<LIST<STRING>>  ASREGS  macro<MACRO>\\nmacro<MACRO>  ASREGS  macro<MACRO>\",\"documentation\":\"Replaces in a macro the uses of the given symbols by the use of registers.\\n\\nIf there are not enough registers available, replace each of the symbols from the start of the list until all registers are used.\\n\\nSince 2.6.0, the list of symbols is optional. In that case, `ASREGS` first recursively extracts all the symbols from given the macro and uses that list to do the replacement.\\n\\n@param `macro` Macro to transform.\\n\\n@param `vars` List of symbols.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ASREGS\"},{\"name\":\"ASSERT\",\"detail\":\"condition<BOOLEAN>  ASSERT \",\"documentation\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise.\\n\\nThe `ASSERT` function consumes a **BOOLEAN** parameter from the top of the stack. If the boolean is **true** the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception.\\n\\n`ASSERT` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASSERT\"},{\"name\":\"ASSERTMSG\",\"detail\":\"condition<BOOLEAN> message<STRING>  ASSERTMSG \",\"documentation\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise and displays a message.\\n\\nThe `ASSERTMSG` function consumes a **BOOLEAN** parameter and a **STRING** parameter from the top of the stack. If the boolean is **true**, the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception with a message displaying the **STRING** parameter.\\n\\n`ASSERTMSG` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n@param `message` The exception message to display if the test fails\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.2.13\",\"OPB64name\":\"ASSERTMSG\"},{\"name\":\"ATAN\",\"detail\":\"value<NUMBER>  ATAN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ATAN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `ATAN` function consumes a floating point number between -1 et 1 from the top of the stack and pushes back its arctangent in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arctangent in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arctangent in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATAN\"},{\"name\":\"ATAN2\",\"detail\":\"y<NUMBER> x<NUMBER>  ATAN2  result<DOUBLE>\\ny<NUMBER> lx<LIST<NUMBER>>  ATAN2  lresult<LIST<DOUBLE>>\\nly<LIST<NUMBER>> x<NUMBER>  ATAN2  lresult<LIST<DOUBLE>>\",\"documentation\":\"ATAN2 function returns the polar angle theta (azimut) from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of `] -pi  pi ]`.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `result` theta in polar coordinates\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `lresult` List of thetas in polar coordinates\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.2.13\",\"OPB64name\":\"ATAN2\"},{\"name\":\"ATBUCKET\",\"detail\":\"gts<GTS> index<LONG>  ATBUCKET  result<LIST>\",\"documentation\":\"The `ATBUCKET` function consumes a bucketized GTS from the stack, looks at its `index`-th bucket and puts on the stack a\\nlist with the timestamp, latitude, longitude, elevation and value for this bucket.\\n\\n@param `gts` Bucketized Geo Time Series™\\n\\n@param `index` Index of the bucket\\n\\n@param `result` List with the timestamp, latitude, longitude, elevation and value for the index-th bucket of the GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATBUCKET\"},{\"name\":\"ATINDEX\",\"detail\":\"gts<GTS> index<NUMBER>  ATINDEX  data<LIST>\\nlgts<LIST<GTS>> index<NUMBER>  ATINDEX  ldata<LIST<LIST>>\",\"documentation\":\"The `ATINDEX` function consumes a Geo Time Series™ or a list thereof from the stack, looks at its index-th point and put on the stack a list with the timestamp, longitude, \\nlatitude, elevation and value for the `index`-th point of the GTS.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the GTS.\\n\\n@param `index` Index of the tick, truncated if floating-point.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATINDEX\"},{\"name\":\"ATTICK\",\"detail\":\"gts<GTS> timestamp<LONG>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<LONG>  ATTICK  ldata<LIST<LIST>>\\ngts<GTS> timestamp<COUNTER>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<COUNTER>  ATTICK  ldata<LIST<LIST>>\\ngts<GTS> timestamp<DOUBLE>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<DOUBLE>  ATTICK  ldata<LIST<LIST>>\",\"documentation\":\"The `ATTICK` function consumes a Geo Time Series™ from the stack, looks at its tick-th tick (the data point with a timestamp tick) and put on the \\nstack a list with the timestamp, latitude, longitude, elevation and value for that data point.\\n\\nIf there is no data point with tick timestamp, it return a list with timestamp, latitude, longitude and elevation at **NaN** and value at **null**.\\n\\n@param `timestamp` Timestamp at which to take the data, if it is a floating-point value, it is truncated.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTICK\"},{\"name\":\"ATTRIBUTES\",\"detail\":\"gts<GTS>  ATTRIBUTES  return<MAP>\\nencoder<GTSENCODER>  ATTRIBUTES  return<MAP>\",\"documentation\":\"Retrieves the attributes of a Geo Time Series™.\\n\\nThe `ATTRIBUTES` function takes a **GTS** on top of the stack and push back a **MAP** including all its attributes.\\n\\nAn attribute corresponds to a tag for a specific series.\\nThe attribute system allows the user to add some information that can change in a series.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `encoder` The input Geo Time Series™ Encoder\\n\\n@param `return` The attributes MAP of the input Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTRIBUTES\"},{\"name\":\"AUTHENTICATE\",\"detail\":\"token<STRING>  AUTHENTICATE \",\"documentation\":\"The `AUTHENTICATE` function authenticates the current stack with the **read token** on top of the stack. This function removes the token from the stack.\\n\\nInside a WarpScript, the stack could be authenticated only once. An exception is thrown when the stack is already authenticated.\\n\\n@param `token` Read token\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"AUTHENTICATE\"},{\"name\":\"B64->\",\"detail\":\"content<STRING>  B64->  result<BYTES>\",\"documentation\":\"Decodes the [base64](http://tools.ietf.org/html/rfc4648#section-4) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoAIs\"},{\"name\":\"B64TOHEX\",\"detail\":\"content<STRING>  B64TOHEX  result<STRING>\",\"documentation\":\"Decodes the  [base64](http://tools.ietf.org/html/rfc4648#section-4) content on top of the stack and immediately re-encode it in hexadecimal.\\nThis enables you to convert encoded content which would not be valid UTF-8 encoding from base64 to hexadecimal. \\nAs the string are URL encoded, the symbol `+` have to be replaced by `%2B`, otherwise a space will replace the `+` in the string.\\n\\n@param `content` String to convert\\n\\n@param `result` Hexadecimal converted string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"B64TOHEX\"},{\"name\":\"B64URL->\",\"detail\":\"content<STRING>  B64URL->  result<BYTES>\",\"documentation\":\"Decodes the [base64url](http://tools.ietf.org/html/rfc4648#section-5) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoKK8BAIs\"},{\"name\":\"BBOX\",\"detail\":\"gts<GTS>  BBOX  [  minlat<DOUBLE>  minlon<DOUBLE>  maxlat<DOUBLE>  maxlon<DOUBLE>  ]\\nlgts<LIST<GTS>>  BBOX  extremas<LIST<LIST<DOUBLE>>>\",\"documentation\":\"The `BBOX` function computes the bounding box of a Geo Time Series™ or a list thereof. It returns a list with extremas, or a list of list of extremas.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `minlat` Latitude of lower left of bounding box.\\n\\n@param `minlon` Longitude of lower left of bounding box.\\n\\n@param `maxlat` Latitude of upper right of bounding box.\\n\\n@param `maxlon` Longitude of upper right of bounding box.\\n\\n@param `extremas` List of list containing minlat, minlon, maxlat, maxlon, for every GTS in lgts.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BBOX\"},{\"name\":\"BIN->\",\"detail\":\"binary<STRING>  BIN->  result<BYTES>\",\"documentation\":\"The `->BIN` function decodes a binary string representation into a bytes array.\\n\\n@param `binary` The binary string representation\\n\\n@param `result` The bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"FZ_DAIs\"},{\"name\":\"BINTOHEX\",\"detail\":\"content<STRING>  BINTOHEX  result<STRING>\",\"documentation\":\"Converts a string representing a binary number into a string representing a hexadecimal number.\\n\\nThe `BINTOHEX` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from binary to hexadecimal.\\n\\n@param `content` The string representing a binary number\\n\\n@param `result` The string representing a hexadecimal number\\n\\n\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"BINTOHEX\"},{\"name\":\"BITCOUNT\",\"detail\":\"bitset<BITSET>  BITCOUNT  cardinality<LONG> length<LONG>\",\"documentation\":\"Returns the logical size and the cardinality of a [BitSet](https://docs.oracle.com/javase/8/docs/api/java/util/BitSet.html).\\n\\nThe `BITCOUNT` function consumes a bitset on the top of the stack and push back its logical size and its cardinality.\\n  * The logical size is the index of the highest bit set to true plus one.\\n  * The cardinality is the number of bit set to true.\\n\\n@param `bitset` The BitSet to count\\n\\n@param `length` The logical size of the BitSet\\n\\n@param `cardinality` The number of bits set to true\\n\\n\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITCOUNT\"},{\"name\":\"BITGET\",\"detail\":\"bitset<BITSET> index<LONG>  BITGET  return<BOOLEAN>\",\"documentation\":\"Returns the value of the bit with the specified index.\\n\\nThe `BITGET` function consumes a bitset and a long on the top of the stack. It returns the value of the bit with the specified index. The bit index starts at 0 from the right.\\n\\n@param `index` The bit index\\n\\n@param `bitset` The bitset\\n\\n@param `return` The value of the bit with the specified index\\n\\n\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.5\",\"OPB64name\":\"BITGET\"},{\"name\":\"BITSTOBYTES\",\"detail\":\"bitset<BITSET>  BITSTOBYTES  result<BYTES>\",\"documentation\":\"Converts a bitset into a bytes array.\\n\\n@param `bitset` Bitset\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"bitset\",\"binary\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITSTOBYTES\"},{\"name\":\"BOOTSTRAP\",\"detail\":\"\",\"documentation\":\"This function is executed systematically before the WarpScript stack is available for anything else. By default this function does nothing, it is equivalent \\nto [`NOOP`](/doc/NOOP).\\n\\nIf bootstrap code was specified in the Warp 10 platform configuration, for either or all of `egress`, `mobius` or `runner`, the `BOOTSTRAP` function might\\nhave been redefined and actual code could be executed.\\n\\nThis function is not meant to be used in user provided scripts.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"BOOTSTRAP\"},{\"name\":\"BREAK\",\"detail\":\"\",\"documentation\":\"The `BREAK` function breaks out of the current loop. It takes no argument.\\n\\n> If used outside a loop, an error is thown\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"BREAK\"},{\"name\":\"BUCKETCOUNT\",\"detail\":\"gts<GTS>  BUCKETCOUNT  result<LONG>\",\"documentation\":\"The function `BUCKETCOUNT` consumes a GTS off the stack and pushes its bucketcount onto the stack.\\n\\n> Note: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Number of buckets\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETCOUNT\"},{\"name\":\"BUCKETIZE\",\"detail\":\"[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> macro<MACRO> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\",\"documentation\":\"The Geo Time Series™ kept in the Warp 10 platform grow over time as more measurements are added. Some series have very regular measurements,\\nothers more sporadic ones. But when it comes to manipulating the data, it might be handy to be able to impose some kind of regularity to measurements.\\nThis is exactly what the [`BUCKETIZE`](/doc/BUCKETIZE) framework does, it provides the tooling for putting the data of a Geo Time Series™ into regularly spaced\\n**buckets**.\\n\\nA **bucket** is a time interval which spans a certain number of time units called the **bucketspan**, ending at a tick called the **lastbucket**.\\n\\nAs an example, the bucket spanning 10 time units and ending at time units 20 will contain all measurements taken at the following times:\\n\\n20, 19, 18, 17, 16, 15, 14, 13, 12, 11\\n\\nthe previous bucket with the same bucketspan ends at 10 and covers ticks 10 down to 1. The next bucket ends at 30 and covers ticks 21 to 30.\\n\\nA bucketized Geo Time Series™ is characterized by its **bucketspan**, its **bucketcount** and the **lastbucket**.\\nA bucketized Geo Time Series™ has at most one measurement per bucket, there might be buckets with no measurements.\\n\\nThe `BUCKETIZE` framework is used to convert a non bucketized Geo Time Series™ into a bucketized one. The bucketization process collects\\nthe measurements of the original geo time series which fall in each bucket and apply a bucketizer function on those data, thus leading to at most a\\nsingle measurement for each bucket.\\n\\nThe `BUCKETIZE` framework comes with a number of bucketizer which implement very common aggregation functions such as SUM, MIN, MAX, MEAN, etc.\\n\\nA macro can be used instead of the bucketizer argument. In that case, in each bucket the measurements are collected as a sub Geo Time Series™ which is taken as parameter by the macro.\\nThis macro must then push onto the stack its result (see description in signature description below).\\n\\nIf the bucketizer argument is NULL, then BUCKETIZE do not create any new Geo Time Series™ but instead sets the lastbucket, bucketspan and bucketcount of its inputs without processing their data.\\n\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so the first value of the geo time series is at the beginning of the first bucket.\\n\\n@param `bucketspan` Width in time units of each bucket. If `bucketspan` is 0 but `bucketcount` is set, WarpScript will compute `bucketspan` so `bucketcount` buckets cover the complete set of values from firsttick to lasttick. If this value is set to -1, the number of buckets is computed so the first tick is towards the end of the first bucket.\\n\\n@param `lastbucket` Specifies the timestamp in time units since the Unix Epoch of the end of the most recent bucket. If you set this value to 0, this timestamp will be computed automatically so it covers the most recent value of the geo time series and falls on a `bucketspan` boundary.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETIZE\"},{\"name\":\"BUCKETIZE.CALENDAR\",\"detail\":\"[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> timezone<STRING> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> timezone<STRING> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\",\"documentation\":\"Creates bucketized Geo Time Series with buckets that span a calendar duration that can be irregular (e.g. taking into account leap years and daylight saving time).\\n\\nInstead of using a bucketspan like the BUCKETIZE framework, it uses a bucketduration: a STRING in [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) format, as `PyYmMwWdDThHmMsS` similarly to that of ADDDURATION function. However, complex bucketdurations that can be non-positive from some ticks are not allowed.\\n\\nIn the result, the tick of each bucket is its index, which is equal to the number of buckets that are ended since Unix Epoch. In particular, the tick of the bucket that contains Unix Epoch is always 0. The resulting GTS is considered bucketized for further operations. Then, the function UNBUCKETIZE.CALENDAR can be used to replace bucket indices with their timestamp end boundaries.\\n\\nThis function answers the limitation of BUCKETIZE to regular buckets. For instance, BUCKETIZE.CALENDAR can be used with a duration of one month (`P1M`) or one year (`P1Y`).\\n\\nThe delta between Unix Epoch and the first timestamp of bucket 0th is called the bucketoffset. The bucketoffset, bucketduration and buckettimezone are stored in the attributes.\\n\\n@param `timezone` The timezone to consider. Default to UTC\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so every value of the GTS falls in a bucket.\\n\\n@param `bucketduration` Width in ISO 8601 duration format of each bucket.\\n\\n@param `lastbucket` Specifies the timestamp in platform time units of the end boundary of the most recent bucket. For coherency with BUCKETIZE, this value can not be set to 0.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS in the new time referential\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"BUCKETIZE.CALENDAR\"},{\"name\":\"BUCKETSPAN\",\"detail\":\"gts<GTS>  BUCKETSPAN  result<LONG>\",\"documentation\":\"The function `BUCKETSPAN` consumes a GTS off the stack and pushes its bucketspan onto the stack.\\n\\n> when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Bucketspan\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETSPAN\"},{\"name\":\"BYTES->\",\"detail\":\"bytes<BYTES> charset<STRING>  BYTES->  result<STRING>\",\"documentation\":\"Converts a bytes array into a string with given a charset and put the string on top of the stack.\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\n\\n@param `charset` Charset to use\\n\\n@param `bytes` Bytes array to convert\\n\\n@param `result` String converted byte array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"F__JGKBhEV\"},{\"name\":\"BYTESTOBITS\",\"detail\":\"bytesarray<BYTES>  BYTESTOBITS  result<BITSET>\",\"documentation\":\"Converts a byte array into a bitset.\\n\\n@param `bytesarray` Bytes array\\n\\n@param `result` Bitset\\n\\n\",\"tags\":[\"bitset\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BYTESTOBITS\"},{\"name\":\"CALL\",\"detail\":\"params<STRING> program<STRING>  CALL  result<STRING>\",\"documentation\":\"The `CALL` function invokes the external program whose path (relative to the `warpscript.call.directory` directory) is on top of the stack. The calling convention will pass to the external\\nprogram the **STRING** object below the path on a line by itself on standard input after having URL encoded the **STRING**. The invoked\\nprogram is expected to return a URL encoded **STRING** object if invocation was successful, or a string starting with a space and followed by a URL encoded error message if an error was encoutered.\\n\\nIf you need to pass complex structures to the invoked program, you can use functions such as [`->JSON`](/doc/AIt9JoxD), [`->PICKLE`](/doc/AItFHJCAI3J)\\nand [`->B64`](/doc/AIt1CYF) to encode the input prior to the invocation.\\n\\nExamples of callable programs are provided in [shell](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/sh/callable.sh)\\nand [python](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/python/callable.py).\\n\\nThe program must be stored in the directory described by the `warpscript.call.directory` configuration parameter.\\n\\nThe program must first output on the stdout the number of concurrent thread allowed.\\n\\nExample:\\n\\n```bash\\n#!/bin/bash\\necho 5 # 5 threads allowed\\nurldecode() {\\n  # urldecode <string>\\n  local url_encoded=\\\"${1//+/ }\\\"\\n  printf '%b' \\\"${url_encoded//%/\\\\\\\\x}\\\"\\n}\\nwhile true\\n\\ndo\\n  read line\\n  line=`urldecode \\\"${line}\\\"` # read the params given by the WarpScript\\n  echo $line # Will be pushed on the stack\\ndone\\n```\\n\\n@param `program` Program path\\n\\n@param `params` URL encoded input\\n\\n@param `result` URL encoded output\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"CALL\"},{\"name\":\"CBRT\",\"detail\":\"value<NUMBER>  CBRT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  CBRT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `CBRT` function consumes a numeric parameter from the top of the stack and pushes back its cubic root.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Cubic root of the given value.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of cubic root of each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CBRT\"},{\"name\":\"CEIL\",\"detail\":\"value<NUMBER>  CEIL  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  CEIL  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `CEIL` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number bigger than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-up value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-up values, for each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEIL\"},{\"name\":\"CEVAL\",\"detail\":\"macros<LIST> poolSize<LONG>  CEVAL  result<LIST>\",\"documentation\":\"The `CEVAL` function allows you to execute macros in a concurrent way on a pool of threads.\\n\\nAll macros will be executed with the maximum parallelism level specified. Each macro is executed on its own stack. The context of the global stack is\\nreplicated to each of those stacks so each macro will have access to the existing symbols and the redefined functions. Any modification to the symbol\\ntable or redifined functions done in a concurrent macro will not be reflected in the global stack afterwards.\\n\\nEach macro is invoked with its index in the list on top of the stack.\\n\\nUpon termination of each macro, the content of their respective stacks is put into a list, with the top of the stack at index 0, and those lists are\\nmerged into a global list which is then pushed onto the stack. The resulting list for each macro appears at the index of the macro in the original macro list.\\n\\nBeware that no synchronization is implicitely performed between the concurrent macros. If you require synchronization between macros, for example because\\nyou are modifying a list accessible by all macros via a symbol, you must use the [`SYNC`](/doc/SYNC) function.\\n\\nIf one of the macros fail, an attempt to interrupt the other running macros will be done and the failure will be propagated to the other macros. For the\\ntime being, a call to [`STOP`](/doc/STOP) or [`RETURN`](/doc/RETURN) in one of the macros will stop all of them.\\n\\nUse of `CEVAL` is not available from within a macro currently executing in a `CEVAL` call.\\n\\nThe `CEVAL` function is part of the `io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```properties\\n// Enable CEVAL and SYNC functions\\nwarpscript.extension.concurrent = io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension\\n```\\n\\n@param `poolSize` Parallelism level\\n\\n@param `macros` List of macros\\n\\n@param `result` Result list\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEVAL\"},{\"name\":\"CHECKMACRO\",\"detail\":\"name<STRING>  CHECKMACRO \",\"documentation\":\"The `CHECKMACRO` function checks if a macro is defined and aborts the execution when it encounters an undefined macro.\\n\\n@param `name` The macro name\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKMACRO\"},{\"name\":\"CHECKSHAPE\",\"detail\":\"list<LIST>  CHECKSHAPE  result<LIST>\\n{ list<LIST>  } CHECKSHAPE  result<LIST>\",\"documentation\":\"Return a BOOLEAN indicating whether an input list and its nested lists sizes are coherent together to form a tensor (or multidimensional array).\\n\\n@param `list` The input list.\\n\\n@param `result` true or false.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKSHAPE\"},{\"name\":\"CHRONOEND\",\"detail\":\"name<STRING>  CHRONOEND \",\"documentation\":\"The `CHRONOEND` function ends a stopwatch with the given name previously started with [`CHRONOSTART`](/doc/CHRONOSTART). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\nIt is a good practice to put `CHRONOEND` in the finally clause of a [`TRY`](/doc/TRY) for the timing to work even if exceptions are thrown.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOEND\"},{\"name\":\"CHRONOSTART\",\"detail\":\"name<STRING>  CHRONOSTART \",\"documentation\":\"The `CHRONOSTART` function starts a stopwatch with the given name. To stop the stopwatch, call [`CHRONOEND`](/doc/CHRONOEND). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTART\"},{\"name\":\"CHRONOSTATS\",\"detail\":\" CHRONOSTATS  stats<MAP>\",\"documentation\":\"The `CHRONOSTATS` function \\n\\n@param `stats` A map with stopwatches names as keys and maps as values. These maps have two keys, `total_calls` and `total_time`. The former gives the number of calls to [`CHRONOSTART`](/doc/CHRONOSTART) and the latter gives the cumulative time between [`CHRONOSTART`](/doc/CHRONOSTART) and [`CHRONOEND`](/doc/CHRONOEND) in **nanoseconds**.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTATS\"},{\"name\":\"CHUNK\",\"detail\":\"gts<GTS> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  result<LIST<GTS>>\\ngtsList<LIST<GTS>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  result<LIST<GTS>>\\nencoder<GTSENCODER> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  resultEncoders<LIST<GTSENCODER>>\\nlEncoder<LIST<GTSENCODER>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  resultEncoders<LIST<GTSENCODER>>\",\"documentation\":\"The `CHUNK` is used to split a Geo Time Series™ into partial GTS. The split operation is controlled by multiple parameters.\\nThe series will be splitted in chunks, each chunks will form a new GTS, with a label value corresponding to its first tick.\\n\\n@param `keepempty` If true empty chunks are kept\\n\\n@param `chunklabel` The label name of the label added by the split operation (with a value corresponding to the first tick of the chunk).\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` An overlap duration (in time units) between chunks, this is useful when chunking a GTS to apply an algorithm which operates on a sliding window.\\n\\n@param `chunkwidth` The width in time units of each chunk.\\n\\n@param `lastchunkend` The end timestamp of the most recent split to consider.\\n\\n@param `gts` A single GTS instance.\\n\\n@param `gtsList` A GTS list to split, each GTS will be splitted individually.\\n\\n@param `encoder` A single GTS Encoder instance.\\n\\n@param `lEncoder` A GTS Encoder list to split, each GTS Encoder will be splitted individually.\\n\\n@param `result` GTS Chunks, a list formed with its partial GTS.\\n\\n@param `resultEncoders` GTS Encoders Chunks, a list formed with its partial GTS Encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CHUNK\"},{\"name\":\"CHUNKENCODER\",\"detail\":\"GTSEncoder<GTSENCODER> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNKENCODER  result<LIST<GTSENCODER>>\\nGTSEncoderList<LIST<GTSENCODER>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNKENCODER  result<LIST<LIST<GTSENCODER>>>\",\"documentation\":\"The `CHUNKENCODER` function is used to split a [GTSEncoder](/doc/NEWENCODER) into partial GTSEncoder. The user defines some parameters that will \\nbe applied to the split operation. The series will be splitted in chunks, each chunks will form a new GTSEncoder, with a label value \\ncorresponding to its first tick.\\n\\nDeprecated since 2.1, use CHUNK instead which behaves the same.\\n\\n@param `keepempty` If true empty chunk are kept\\n\\n@param `chunklabel` The label name of the label added by this split operation (add a value corresponding to the first tick of the chunk). Could be a regular expression.\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` A time overlap for each chunks in time units.\\n\\n@param `chunkwidth` The width in time unit of each chunks in time units.\\n\\n@param `lastchunkend` The split operation end when it encounters this timestamp.\\n\\n@param `GTSEncoder` A single GTSEncoder \\n\\n@param `GTSEncoderList` A GTSEncoder list to split, each GTSEncoder will be splitted individually.\\n\\n@param `result` GTSEncoder Chunks, a list formed with its partial GTSEncoder\\n\\n\",\"tags\":[\"encoder\"],\"since\":\"1.2.9\",\"OPB64name\":\"CHUNKENCODER\"},{\"name\":\"CLEAR\",\"detail\":\"input<ANY*>  CLEAR \",\"documentation\":\"The `CLEAR` function empties the stack.\\n\\n@param `input` all the input on the stack will be erased from the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEAR\"},{\"name\":\"CLEARDEFS\",\"detail\":\"\",\"documentation\":\"The `CLEARDEFS` function allows you to clear all [redefined WarpScript functions](/doc/DEF).\\n\\nBy default, all redefined WarpScript function, will not be available anymore. Set the `warpscript.def.unshadow` \\nconfiguration property to change this behaviour.\\n\\nThis configuration parameter determines if undefining a function (via NULL 'XXX' DEF) will unshadow the original statement \\nthus making it available again or if it will replace it with a function that will fail with a message saying the function is undefined.\\nThe safest behavior is to leave this undefined or set to **false**.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARDEFS\"},{\"name\":\"CLEARREGS\",\"detail\":\" CLEARREGS  value<ANY>\",\"documentation\":\"Clears all registers, setting their current value to `NULL`.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CLEARREGS\"},{\"name\":\"CLEARSYMBOLS\",\"detail\":\"\",\"documentation\":\"The `CLEARSYMBOLS` function clears all symbols defined with the function [`STORE`](/doc/STORE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARSYMBOLS\"},{\"name\":\"CLEARTOMARK\",\"detail\":\"mark<MARK> inputs<ANY*>  CLEARTOMARK \",\"documentation\":\"Removes elements from the stack up to and including the first mark encountered.\\n\\n@param `inputs` all the inputs references on the stack will be erased\\n\\n@param `mark` the mark will also be erased\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARTOMARK\"},{\"name\":\"CLIP\",\"detail\":\"gts<GTS> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<GTS>>\\nlgts<LIST<GTS>> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<LIST<GTS>>>\\nencoder<GTSENCODER> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<GTSENCODER>>\\nlencoder<LIST<GTSENCODER>> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<LIST<GTS>>>\",\"documentation\":\"The `CLIP` function clips a Geo Time Series™, encoders or list thereof according to a series of limits. The limits are lists of pair containing the lower and upper \\ntimestamps used to clip. Each pair will generate a clipped GTS or encoder for each instance.\\n\\n@param `bounds` List of timestamp pairs. Each pair is a list of LONG.\\n\\n@param `gts` GTS to clip\\n\\n@param `lgts` List of GTSs to clip\\n\\n@param `encoder` Emcoder to clip\\n\\n@param `lencoder` List of encoders to clip\\n\\n@param `result` List of clipped GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.0\",\"OPB64name\":\"CLIP\"},{\"name\":\"CLONE\",\"detail\":\"gts<GTS>  CLONE  original<GTS> clone<GTS>\\nlist<LIST>  CLONE  original<LIST> clone<LIST>\\nmap<MAP>  CLONE  original<MAP> clone<MAP>\\nset<SET>  CLONE  original<SET> clone<SET>\\nvector<VECTOR>  CLONE  original<VECTOR> clone<VECTOR>\\nencoder<GTSENCODER>  CLONE  original<GTSENCODER> clone<GTSENCODER>\",\"documentation\":\"The `CLONE` function does a shallow copy of a given Geo Time Series™, List, Map or Vector. Since 2.1.1 it can also clone Encoders.\\n\\nAs it makes a shallow copy, be careful when using CLONE on a List of Geo Time Series™ like those generated by the use of [`FETCH`](/doc/FETCH). Modifying a Geo Time Series™ in any of those list will alter the matching Geo Time Series™ in the other List.\\nIf you want to use `CLONE` after a [`FETCH`](/doc/FETCH), you will need to extract the Geo Time Series™ from the list, for example by using [`LIST->`](/doc/I3_IK1oy), [`GET`](/doc/GET) or [`LMAP`](/doc/LMAP).\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `list` The List to clone\\n\\n@param `map` The Map to clone\\n\\n@param `set` The Set to clone\\n\\n@param `vector` The Vector to clone\\n\\n@param `encoder` The Encoder to clone\\n\\n@param `clone` The cloned Geo Time Series™, List, Map, Vector or Encoder\\n\\n@param `original` The original Geo Time Series™, List, Map, Vector or Encoder\\n\\n\",\"tags\":[\"gts\",\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONE\"},{\"name\":\"CLONEEMPTY\",\"detail\":\"gts<GTS>  CLONEEMPTY  result<GTS>\\ngtsList<LIST<GTS>>  CLONEEMPTY  resultList<LIST<GTS>>\\nencoder<GTSENCODER>  CLONEEMPTY  encoderResult<GTSENCODER>\\nencoderList<LIST<GTSENCODER>>  CLONEEMPTY  encoderResultList<LIST<GTSENCODER>>\",\"documentation\":\"Clones a Geo Time Series™, an Encoder or all the instances in a list of Geo Time Series™ or an Encoder, keeping only the metadata and not the values.\\n\\nThe `CLONEEMPTY` function takes as parameter a Geo Time Series™, an Encoder or a list thereof. It creates an empty clone of the input with only his metadata. The cloned metadata are:\\n * Classname\\n * Labels\\n * Attributes\\n * Lastbucket, for Geo Time Series™ only\\n * Bucketspan, for Geo Time Series™ only\\n * Bucketcount, for Geo Time Series™ only\\n * Base timestamp, for Encoders only\\n * Wrapping key, for Encoders only\\n\\nThe input parameter is consumed and the clone or list of clones is left on the stack.\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `gtsList` The list of Geo Time Series™ to clone\\n\\n@param `result` The cloned Geo Time Series™\\n\\n@param `resultList` The cloned list of Geo Time Series™\\n\\n@param `encoder` The encoder to clone\\n\\n@param `encoderList` The list of encoder to clone\\n\\n@param `encoderResult` The cloned encoder\\n\\n@param `encoderResultList` The cloned list of encoders\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEEMPTY\"},{\"name\":\"CLONEREVERSE\",\"detail\":\"input<LIST>  CLONEREVERSE  output<LIST>\\ninput<STRING>  CLONEREVERSE  output<STRING>\\ninput<BYTES>  CLONEREVERSE  output<BYTES>\",\"documentation\":\"The function CLONEREVERSE clone the input and reverses the order of the elements. \\nOutput is a reference to a new object.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n@param `input` reference of the list or string to reverse.\\n\\n@param `output` reference to a new reversed list or string or byte array.\\n\\n\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEREVERSE\"},{\"name\":\"COMMONTICKS\",\"detail\":\"gtsList<LIST<GTS>>  COMMONTICKS  result<LIST<GTS>>\",\"documentation\":\"Take a list of Geo Time Series™ and output A GTS list with only the set of ticks they have in common compared by timestamp.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with common ticks\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMMONTICKS\"},{\"name\":\"COMPACT\",\"detail\":\"gts<GTS>  COMPACT  result<GTS>\\ngtsList<LIST<GTS>>  COMPACT  resultList<LIST<GTS>>\",\"documentation\":\"The `COMPACT` function expects a Geo Time Series™ or a **LIST** of GTS on top of the stack. For each GTS instance it reads, it will \\nproduce a GTS whith fewer values, by removing measurements which have the same value, location and elevation as the previous one. The first tick will be the kept, then ticks with value or position change will be kept. The last tick from the original gts will be copied, in order to keep the same LASTTICK.\\n\\n@param `gts` A GTS to compact\\n\\n@param `gtsList` A GTS list to compact\\n\\n@param `result` A compacted GTS\\n\\n@param `resultList` A compacted GTS list\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMPACT\"},{\"name\":\"CONTAINS\",\"detail\":\"list<LIST> item<ANY>  CONTAINS  list<LIST> presence<BOOLEAN>\\nset<SET> item<ANY>  CONTAINS  set<LIST> presence<BOOLEAN>\\nstr<STRING> substr<STRING>  CONTAINS  presence<BOOLEAN>\",\"documentation\":\"The `CONTAINS` function checks if the element on top of the stack is contained by the list on second position. A boolean is pushed on the stack.\\n\\nIf the parameters are two STRINGs, `CONTAINS` checks if the second STRING is contained in the first one, leaving a boolean on the stack. This latter usage is available since revision 2.1.0.\\n\\n@param `item` Depending on list construction, could be a number, a string, a boolean, NULL, a GTS...\\n\\n@param `presence` true if inputlist contains the item. false otherwise or if inputlist is empty.\\n\\n@param `list` reference to the LIST to search.\\n\\n@param `set` reference to the SET to search.\\n\\n@param `str` STRING in which to find `substr`.\\n\\n@param `substr` STRING to find in `str`.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINS\"},{\"name\":\"CONTAINSKEY\",\"detail\":\"inputmap<MAP> key<ANY>  CONTAINSKEY  outputmap<MAP> presence<BOOLEAN>\",\"documentation\":\"The `CONTAINSKEY` function checks if the key element on top of the stack is a key \\nof the map on second position. \\n\\nThe key is consumed, and a boolean is pushed on the stack.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this key. Do not trust presence if key is NULL.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSKEY\"},{\"name\":\"CONTAINSVALUE\",\"detail\":\"inputmap<MAP> value<ANY>  CONTAINSVALUE  outputmap<MAP> presence<BOOLEAN>\",\"documentation\":\"The `CONTAINSVALUE` function checks if the value element on top of the stack is a value \\nof the map on second position. \\n\\nThe value is consumed, and a boolean is pushed on the stack.\\n\\n@param `value` Depending on map construction, could be a number, a string, a boolean, NULL.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this value in at least one pair of its key-value.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSVALUE\"},{\"name\":\"CONTINUE\",\"detail\":\"\",\"documentation\":\"Immediately stop executing the current iteration of an ongoing loop and start the next one.\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTINUE\"},{\"name\":\"COPYGEO\",\"detail\":\"gts<GTS> geogts<GTS>  COPYGEO  result<GTS>\\ngtsList<LIST<GTS>> geogts<GTS>  COPYGEO  resultList<LIST<GTS>>\",\"documentation\":\"The `COPYGEO` function forces the location elements of a GTS onto others. `COPYGEO` expects two parameters on the stack.\\nFirst input is GTS or a gts list: those series(s) will have their location overwritten by the one of the second GTS parameter. Geo information will be copied only if they are present in the second paramaters on the same tick otherwise it keep the existing location. See [`COMMONTICKS`](/doc/COMMONTICKS) to keep only commonticks before calling `COPYGEO`.\\n\\n@param `gts` A GTS\\n\\n@param `gtsList` A list of GTS\\n\\n@param `geogts` A GTS with the geo information you want to copy to other (list of) gts.\\n\\n@param `result` A GTS with the geo information of the geogts input\\n\\n@param `resultList` A list of GTS with the geo information of the geogts input\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYGEO\"},{\"name\":\"COPYSIGN\",\"detail\":\"p1<NUMBER> p2<NUMBER>  COPYSIGN  result<DOUBLE>\\np1<NUMBER> list2<LIST<NUMBER>>  COPYSIGN  lresult<LIST<DOUBLE>>\\nlist1<LIST<NUMBER>> p2<NUMBER>  COPYSIGN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `COPYSIGN` function copies the sign of a number on another one and pushes back the value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` Numeric parameter on which sign is applied\\n\\n@param `p2` Numeric parameter on which sign is extracted\\n\\n@param `list1` List of numeric parameter on wich sign is applied\\n\\n@param `list2` List of numeric parameter on wich sign is extracted\\n\\n@param `result` Value of p1 with the sign of p2 s a DOUBLE\\n\\n@param `lresult` List of results\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYSIGN\"},{\"name\":\"CORRELATE\",\"detail\":\"baseGTS<GTS> gtsList<LIST> timeOffsets<LIST>  CORRELATE  result<LIST<GTS>>\",\"documentation\":\"The `CORRELATE` function allows you to compute correlation between one base Geo Time Series™ and a set of others. \\nBy putting the base GTS in the set of others, cross correlation can be computed.\\n\\n@param `baseGTS` The base Geo Time Series\\n\\n@param `gtsList` A list of Geo Time Series against which to compute the correlation\\n\\n@param `timeOffsets` A list of time offsets for which the correlation will be computed (expressed in time units of the Warp instance)\\n\\n@param `result` A list of synthetic Geo Time Series™ whose timestamps are the offsets from the initial offset list and the values are the computed correlations. There is one GTS per GTS in the list at TOP-1.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CORRELATE\"},{\"name\":\"COS\",\"detail\":\"value<NUMBER>  COS  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  COS  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `COS` function consumes a floating point number from the top of the stack and pushes back its cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Cosine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of cosine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COS\"},{\"name\":\"COSH\",\"detail\":\"value<NUMBER>  COSH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  COSH  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `COSH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic cosine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic cosine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COSH\"},{\"name\":\"COUNTER\",\"detail\":\" COUNTER  counter<COUNTER>\",\"documentation\":\"The `COUNTER` function pushes a counter (AtomicLong) initialized with the value 0 onto the stack.\\n\\nThis atomic counter can be safely shared in multiple concurrent macros (see [`CEVAL`](/doc/CEVAL)).\\n\\n@param `counter` Counter instance.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTER\"},{\"name\":\"COUNTERDELTA\",\"detail\":\"counter<COUNTER> increment<LONG>  COUNTERDELTA  counter<COUNTER>\",\"documentation\":\"The `COUNTERDELTA` function increments a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `increment` Counter increment.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERDELTA\"},{\"name\":\"COUNTERSET\",\"detail\":\"counter<COUNTER> value<LONG>  COUNTERSET  counter<COUNTER>\",\"documentation\":\"The `COUNTERSET` function set the value of a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `value` Counter value.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.2.22\",\"OPB64name\":\"COUNTERSET\"},{\"name\":\"COUNTERVALUE\",\"detail\":\"counter<COUNTER>  COUNTERVALUE  value<LONG>\",\"documentation\":\"The `COUNTERVALUE` function pushes the counter value onto the stack.\\n\\n@param `counter` The counter instance.\\n\\n@param `value` The value of the counter.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERVALUE\"},{\"name\":\"COUNTTOMARK\",\"detail\":\" COUNTTOMARK  result<LONG>\",\"documentation\":\"Counts the number of elements on the stack up to but excluding the first mark encountered. Neither the mark nor the\\nelements on top of it are removed from the stack.\\n\\n@param `result` Stack depth until `MARK`\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTTOMARK\"},{\"name\":\"CPOPR\",\"detail\":\"value<ANY>  CPOPR \",\"documentation\":\"Pops a value from the top of the stack and stores it into the designated register if the register is empty (*i.e.* has `NULL` as its current value).\\n\\nThe `CPOPR` function is really a family of functions named `CPOPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CPOPR\"},{\"name\":\"CPROB\",\"detail\":\"gts<GTS> separator<STRING>  CPROB  result<GTS>\\nlgts<LIST<GTS>> separator<STRING>  CPROB  lresult<LIST<GTS>>\",\"documentation\":\"The function `CPROB` generates a new Geo Time Series™ from an input Geo Time Series™ by computing a conditional probability.\\n\\nThe function expects a **STRING** separator on top of the stack and expects the input Geo Time Series™ to have \\nvalues of the form given1< SEP >given2< SEP >....< SEP >event. It will then emit P(event|given1,given2,...).\\n\\nIf the separator is **NULL**, `CPROB` behaves like [`PROB`](/doc/PROB).\\n\\n@param `separator` Value separator\\n\\n@param `gts` Geo Time Series™\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `lresult` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.6\",\"OPB64name\":\"CPROB\"},{\"name\":\"CROP\",\"detail\":\"gts<GTS>  CROP  result<GTS>\\ngtsList<LIST<GTS>>  CROP  resultList<LIST<GTS>>\",\"documentation\":\"The `CROP` function works on bucketized Geo Time Series™ instances, if transforms a GTS into another one whose bucketcount, last bucket parameters span the smallest interval with actual values. Bucket span remains the same.\\n\\nWhen called on a non bucketized GTS instance, `CROP` simply clones it.\\n\\nThis function expects a list of GTS instances on the top of the stack.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` ropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `resultList` A list of cropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"CROP\"},{\"name\":\"CSTORE\",\"detail\":\"value<ANY> symbol<STRING>  CSTORE \\nvalue<ANY> register<LONG>  CSTORE \",\"documentation\":\"The `CSTORE` function stores a value in a symbol or a register only if that symbol or register is not yet defined. The name of this function stands for Conditional STORE.\\n\\n@param `symbol` Name of symbol under which to store `value`.\\n\\n@param `register` Number of the register under which to store `value`.\\n\\n@param `value` Value to store unde `symbol`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CSTORE\"},{\"name\":\"CUDF\",\"detail\":\"class<STRING>  CUDF \",\"documentation\":\"The `CUDF` function invokes a User Defined Function from a Jar as [`UDF`](/doc/UDF) but reuses a cached instance of the function.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CUDF\"},{\"name\":\"DEBUGOFF\",\"detail\":\"\",\"documentation\":\"Turns off stack debugging which was turned on by [`DEBUGON`](/doc/DEBUGON) or [`NDEBUGON`](/doc/NDEBUGON).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGOFF\"},{\"name\":\"DEBUGON\",\"detail\":\"\",\"documentation\":\"Turns on stack debugging which returns the stack content in case of error. Stack debugging is off by default.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGON\"},{\"name\":\"DECREMENTEXACT\",\"detail\":\"value<NUMBER>  DECREMENTEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  DECREMENTEXACT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `DECREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value decremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be decremented by one\\n\\n@param `result` The decremented value\\n\\n@param `lvalue` List of values to be decremented by one\\n\\n@param `lresult` List of decremented values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"DECREMENTEXACT\"},{\"name\":\"DEDUP\",\"detail\":\"gts<GTS>  DEDUP  result<GTS>\\ngts<GTS> mapper<AGGREGATOR>  DEDUP  lresult<GTS>\\ngts<GTS> macro<MACRO>  DEDUP  lresult<GTS>\\nlgts<LIST<GTS>>  DEDUP  lresult<LIST<GTS>>\\nlgts<LIST<GTS>> mapper<AGGREGATOR>  DEDUP  lresult<LIST<GTS>>\\nlgts<LIST<GTS>> macro<MACRO>  DEDUP  lresult<LIST<GTS>>\",\"documentation\":\"Removes duplicate ticks.\\n\\nThe `DEDUP` function consumes a Geo Time Series™ or a **LIST** thereof from the top of the stack and pushes back the Geo Time Series™ with deduplicated ticks.\\n\\nSince the 2.7.0 version, this function can be given an optional mapper or macro to combine the duplicate data points.\\n\\n@param `gts` The Geo Time Series™ to deduplicate\\n\\n@param `result` The Geo Time Series™ with deduplicated ticks\\n\\n@param `lgts` The list of Geo Time Series™ to deduplicate\\n\\n@param `lresult` The list of Geo Time Series™ with deduplicated ticks\\n\\n@param `mapper` Mapper used to aggregate duplicate values\\n\\n@param `macro` Macro used to aggregate duplicate values given as a GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEDUP\"},{\"name\":\"DEF\",\"detail\":\"newDef<MACRO> name<STRING>  DEF \",\"documentation\":\"The `DEF` function allows you to define new WarpScript functions or redefine existing ones for the duration of your script execution.\\n\\nThe function expects on the stack a macro which will be used as the content of the newly defined function, and a name under which to define the new function.\\n\\nWhen redefining a function, if the function being redefined is used within the macro, the code which will be executed is the current one, \\nas the binding of function to code is done at the time when the macro is defined and not when it is executed.\\n\\nYou may therefore add limits to the use of an existing function by rewrapping it in a macro which will be associated with the original function name.\\n\\nTo remove redefined functions see [`CLEARDEFS`](/doc/CLEARDEFS).\\n\\n@param `name` New function name\\n\\n@param `newDef` Macro which will be used as the content of the newly defined function\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEF\"},{\"name\":\"DEFINED\",\"detail\":\"name<STRING>  DEFINED  result<BOOLEAN>\",\"documentation\":\"The `DEFINED` function checks whether or not a symbol is defined.\\n\\n@param `name` Symbol name\\n\\n@param `result` Whether or not the symbol is defined\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEFINED\"},{\"name\":\"DEFINEDMACRO\",\"detail\":\"name<STRING>  DEFINEDMACRO  result<BOOLEAN>\",\"documentation\":\"The `DEFINEDMACRO` function checks if a macro is defined and pushes true or false on the stack accordingly.\\n\\n@param `name` The macro name\\n\\n@param `result` True if the macro is defined, false otherwise\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.16\",\"OPB64name\":\"DEFINEDMACRO\"},{\"name\":\"DEFLATE\",\"detail\":\"string<STRING>  DEFLATE  compressed<BYTES>\\nbytes<BYTES>  DEFLATE  compressed<BYTES>\",\"documentation\":\"The `DEFLATE` function compresses a STRING or a byte array using the [Zlib](https://en.wikipedia.org/wiki/Zlib) library. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"DEFLATE\"},{\"name\":\"DELETE\",\"detail\":\"writeToken<STRING> gts_selector<STRING> start_timestamp<LONG> end_timestamp<LONG> count<LONG>  DELETE  result<LONG>\",\"documentation\":\"The `DELETE` function is used to delete a set of GTS from a Warp 10 platform. A delete endpoint must be set on the Warp 10 configuration.\\n\\nDelete expects 5 parameters on top of the stack: the write token of the Warp 10 application, a string corresponding to a gts selector, a start \\nand a end timestamp and finally the number of GTS expected to be deleted.\\n\\nFor safety reasons `DELETE` will first perform a dryrun call to the /delete endpoint to retrieve the number of GTS which would be deleted by the call. \\nIf this number is above the expected number provided by the user the actual delete will not be performed and instead an error will be raised.\\n\\nDelete will push as a result the number of GTS really deleted.\\n\\nIf both end_timestamp and start_timestamp are NULL, Warp 10 will perform a delete all. FETCH won't find anything after a delete all.\\n\\n```flow\\n// Write token\\n'TOKEN'\\n\\n// Gts selector\\n'gts.to.delete{}'\\n\\n// Start Timestamp\\n1479372838011043\\n\\n// End timestamp\\nNOW\\n\\n// DELETE expects a count number (if nb GTS > count, DELETE is stopped)\\n1\\n\\nDELETE \\n```\\n\\n@param `count` Number of GTS expected to be deleted\\n\\n@param `end_timestamp` End timestamp or NULL\\n\\n@param `start_timestamp` Start timestamp or NULL\\n\\n@param `gts_selector` GTS selector\\n\\n@param `writeToken` Write token\\n\\n@param `result` Actual deleted GTS count\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.5\",\"OPB64name\":\"DELETE\"},{\"name\":\"DELETEOFF\",\"detail\":\"message<STRING> secret<STRING>  DELETEOFF \",\"documentation\":\"Disables delete operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a delete operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEOFF\"},{\"name\":\"DELETEON\",\"detail\":\"secret<STRING>  DELETEON \",\"documentation\":\"Enables delete operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEON\"},{\"name\":\"DEPTH\",\"detail\":\" DEPTH  result<LONG>\",\"documentation\":\"The `DEPTH` function pushes on top of the stack the depth (i.e. number of levels) of the stack prior to the call.\\n\\n@param `result` Stack depth\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEPTH\"},{\"name\":\"DEREF\",\"detail\":\"macro<MACRO> values<MAP>  DEREF  macro<MACRO>\",\"documentation\":\"Replaces in a Macro the occurrences of symbol dereferencing (`$x`) or calls to `LOAD` with a `STRING` argument or calls to `PUSHRx` by the values associated with either the symbol name or register number in a parameter map.\\n\\nValues are used verbatim except for Macros which are inserted as functions, *i.e.* they are inserted followed by a call to `EVAL` so they are executed in the target macro instead of ending up on the stack. If you wish to replace a symbol dereference by a Macro, you need to write the macro inside of another Macro.\\n\\n\\n@param `macro` Macro to transform.\\n\\n@param `values` Map of symbol name or register number to replacement value.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.3.0\",\"OPB64name\":\"DEREF\"},{\"name\":\"DET\",\"detail\":\"matrix<MATRIX>  DET  det<DOUBLE>\",\"documentation\":\"Computes the [determinant](https://en.wikipedia.org/wiki/Determinant) of a matrix.\\n\\n@param `matrix` The matrix for which to compute the determinant.\\n\\n@param `det` The computed determinant.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"DET\"},{\"name\":\"DIFFERENCE\",\"detail\":\"setA<SET> setB<SET>  DIFFERENCE  output<SET>\",\"documentation\":\"Computes the difference between two sets.\\n\\nThe `DIFFERENCE` function consumes two sets from the top of the stack and pushes back its mathematical difference (ie: the elements in *A* but not in *B*).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* - *B*, the set of elements in *A* but not in *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"DIFFERENCE\"},{\"name\":\"DISCORDS\",\"detail\":\"lgts<LIST<GTS>> wsize<LONG> length<LONG> scale<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  DISCORDS  lresult<LIST<GTS>>\\ngts<GTS> wsize<LONG> length<LONG> scale<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  DISCORDS  result<GTS>\",\"documentation\":\"The `DISCORDS` function detects discords in a Geo Time Series™. The discord detection algorithm is based on identifying outlier patterns in\\nthe Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `DISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0\\n\\n@param `overlapping` Flag indicating whether or not the `DISCORDS` function should report overlapping discords\\n\\n@param `maximum` The maximum number of discords to identify\\n\\n@param `lresult` The list of Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `result` The Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"DISCORDS\"},{\"name\":\"DOC\",\"detail\":\"string<STRING>  DOC  string<STRING>\",\"documentation\":\"Consumes the String on the stack or leave it there and stop the script if the stack is currently in documentation mode ([`DOCMODE`](/doc/DOCMODE)) \\n\\nYou can use it to document macros.\\n\\n@param `string` Text to display in [`DOCMODE`](/doc/DOCMODE)\\n\\n\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOC\"},{\"name\":\"DOCMODE\",\"detail\":\"\",\"documentation\":\"Toggle the 'documentation mode' of the stack\\n\\n\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOCMODE\"},{\"name\":\"DOUBLEBITS->\",\"detail\":\"input<LONG>  DOUBLEBITS->  result<DOUBLE>\",\"documentation\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the **LONG** value as the raw bits of the **DOUBLE**\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"G3xKFZl4FZ_JJmoy\"},{\"name\":\"DOUBLEEXPONENTIALSMOOTHING\",\"detail\":\"gts<GTS> alpha<DOUBLE> beta<DOUBLE>  DOUBLEEXPONENTIALSMOOTHING  result<LIST<GTS>>\",\"documentation\":\"The `DOUBLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Double Exponential Smoothing aka Holt's linear trend method](https://www.otexts.org/fpp/7/2) formula.\\n\\nIt consumes three parameters from the top of the stack:\\n * A trend smoothing factor beta (a numeric parameter between 0 < beta < 1)\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** and levels are pushed onto the stack (in this order in the **LIST**).\\n\\n@param `beta` The trend smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The list within the smoothed Geo Time Series™ and its levels\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOUBLEEXPONENTIALSMOOTHING\"},{\"name\":\"DROP\",\"detail\":\"input<ANY>  DROP \",\"documentation\":\"The `DROP` function removes the element at the top of the stack.\\n\\n@param `input` object reference to drop from the top of the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROP\"},{\"name\":\"DROPN\",\"detail\":\"number<NUMBER>  DROPN \",\"documentation\":\"The `DROPN` function removes the top N elements of the stack after having consumed N which was on the top of the stack prior to calling `DROPN`.\\n\\n@param `number` The number of elements to drop\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROPN\"},{\"name\":\"DTW\",\"detail\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  DTW  dtw<DOUBLE>\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"DTW\"},{\"name\":\"DUP\",\"detail\":\"input<ANY>  DUP  input<ANY> out<ANY>\",\"documentation\":\"The `DUP` function duplicates the element on the top of the stack, it doesn’t copy the content. If you apply DUP to a GTS you will\\nhave two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `input` any parameter on top of the stack\\n\\n@param `out` a reference copy of input on top of the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUP\"},{\"name\":\"DUPN\",\"detail\":\"number<NUMBER>  DUPN \",\"documentation\":\"The `DUPN` function duplicates the top N elements of the stack after having consumed N which is on the top of the stack when calling `DUPN`.\\n\\nAs the [`DUP`](/doc/DUP) function, `DUPN` duplicates the references of the N elements on the top of the stack, it doesn’t copy the elements.\\nIf you apply `DUPN` to a GTS you will have two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `number` The number of elements to duplicate\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUPN\"},{\"name\":\"DURATION\",\"detail\":\"isoDuration<STRING>  DURATION  duration<LONG>\",\"documentation\":\"The `DURATION` function consumes a **STRING** representing an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) and pushes back a **LONG** duration in platform time unit.\\n\\nThe ISO 8601 duration can be expessed as `PwWdDThHmMsS` with:\\n- `w` weeks\\n- `d` days\\n- `h` hours\\n- `m` minutes\\n- `s` or `s.ssssss...` seconds\\nEach of these values can be either positive or negative. Each value/unit couple can be omitted if the value is zero but at least one value/couple should be defined.\\n\\nIf the consumed ISO 8601 duration has precision under platform time unit, superfluous digits will be ignored. Prior to revision 2.4, precision below milliseconds were always ignored, independently of platform time unit.\\n\\n@param `isoDuration` A representation of a ISO 8601 duration with some limitations, see the description.\\n\\n@param `duration` Number of platform time unit corresponding to the duration.\\n\\n\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"DURATION\"},{\"name\":\"DWTSPLIT\",\"detail\":\"gts<GTS> label-name<STRING>  DWTSPLIT  result<GTS>\\nlgts<LIST<GTS>> label-name<STRING>  DWTSPLIT  lresult<LIST<GTS>>\",\"documentation\":\"The `DWTSPLIT` function splits a Geo Time Series™ produced by [`FDWT`](/doc/FDWT) into multiple series, one per resolution level of the Wavelet transform.\\n\\n\\n@param `label-name` Label name used in the generated series to indicate the level of each Geo Time Series™\\n\\n@param `gts` GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `lgts` List of GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `result` Splited GTS\\n\\n@param `lresult` List of splited GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DWTSPLIT\"},{\"name\":\"E\",\"detail\":\" E  eValue<DOUBLE>\",\"documentation\":\"Alias of [e](/doc/OF).\\n\\nThe `E` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"GF\"},{\"name\":\"ECGEN\",\"detail\":\"curve<STRING>  ECGEN  private<MAP> public<MAP>\",\"documentation\":\"The `ECGEN` function generates a public/private key pair parameters suitable for performing [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography).\\n\\nThe resulting parameters can serve as input to [`ECPRIVATE`](/doc/ECPRIVATE) and [`ECPUBLIC`](/doc/ECPUBLIC) to generate the actual private and public keys.\\n\\nThe following curves are supported:\\n\\n`c2pnb272w1`, `c2tnb191v3`, `c2pnb208w1`, `c2tnb191v2`, `c2tnb191v1`, `prime192v3`, `c2tnb359v1`, `prime192v2`, `prime192v1`, `c2tnb239v3`, `c2pnb163v3`, `c2tnb239v2`, `c2pnb163v2`, `c2tnb239v1`, `c2pnb163v1`, `c2pnb176w1`, `prime256v1`, `c2pnb304w1`, `c2pnb368w1`, `c2tnb431r1`, `prime239v3`, `prime239v2`, `prime239v1`, `sect233r1`, `secp112r2`, `secp112r1`, `secp256k1`, `sect113r2`, `secp521r1`, `sect113r1`, `sect409r1`, `secp192r1`, `sect193r2`, `sect131r2`, `sect193r1`, `sect131r1`, `secp160k1`, `sect571r1`, `sect283k1`, `secp384r1`, `sect163k1`, `secp256r1`, `secp128r2`, `secp128r1`, `secp224k1`, `sect233k1`, `secp160r2`, `secp160r1`, `sect409k1`, `sect283r1`, `sect163r2`, `sect163r1`, `secp192k1`, `secp224r1`, `sect239k1`, `sect571k1`, `B-163`, `P-521`, `P-256`, `B-233`, `P-224`, `B-409`, `P-384`, `B-283`, `B-571`, `P-192`, `brainpoolp512r1`, `brainpoolp384t1`, `brainpoolp256r1`, `brainpoolp192r1`, `brainpoolp512t1`, `brainpoolp256t1`, `brainpoolp224r1`, `brainpoolp320r1`, `brainpoolp192t1`, `brainpoolp160r1`, `brainpoolp224t1`, `brainpoolp384r1`, `brainpoolp320t1`, `brainpoolp160t1`\\n\\n@param `curve` Name of the elliptic curve to use.\\n\\n@param `public` Map containing the public key parameters.\\n\\n@param `private` Map containing the private key parameters.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECGEN\"},{\"name\":\"ECHOOFF\",\"detail\":\" ECHOOFF \",\"documentation\":\"Turns off the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOOFF\"},{\"name\":\"ECHOON\",\"detail\":\"levels<NUMBER>  ECHOON \",\"documentation\":\"Turns on the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of topmost stack levels to display after each WarpScript™ line, truncated if floating-point.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOON\"},{\"name\":\"ECPRIVATE\",\"detail\":\"private<MAP>  ECPRIVATE  key<KEY>\",\"documentation\":\"The `ECPRIVATE` function generates a private key from private key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `private` Map containing ECC private key parameters.\\n\\n@param `key` ECC private key.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPRIVATE\"},{\"name\":\"ECPUBLIC\",\"detail\":\"public<MAP>  ECPUBLIC  key<KEY>\",\"documentation\":\"The `ECPUBLIC` function generates a public key from public key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `public` Map containing ECC public key parameters.\\n\\n@param `key` ECC public key.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPUBLIC\"},{\"name\":\"ECSIGN\",\"detail\":\"data<BYTES> alg<STRING> private<KEY>  ECSIGN  signature<BYTES>\",\"documentation\":\"The `ECSIGN` function generates a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) private key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Content to sign.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `private` Private key to use for signining.\\n\\n@param `signature` Resulting signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECSIGN\"},{\"name\":\"ECVERIFY\",\"detail\":\"data<BYTES> signature<BYTES> alg<STRING> public<KEY>  ECVERIFY  result<BOOLEAN>\",\"documentation\":\"The `ECVERIFY` function verifies a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) public key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Signed data.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `public` Public key to use for verification.\\n\\n@param `signature` Signature to verify.\\n\\n@param `result` Validity of the signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECVERIFY\"},{\"name\":\"ELAPSED\",\"detail\":\" ELAPSED  result<LIST<LONG>>\",\"documentation\":\"The `ELAPSED` function pushes onto the stack a list containing timing informations. The first element of the list is the timestamp at which \\nthe script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution \\nof the associated script line.\\n\\nTiming informations are only collected after a call to [`TIMINGS`](/doc/TIMINGS) (its line included) and before a call to [`NOTIMINGS`](/doc/NOTIMINGS)\\n (its line excluded).\\n\\n@param `result` The first element of the list is the timestamp at which the script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution of the associated script line.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELAPSED\"},{\"name\":\"ELEVATIONS\",\"detail\":\"gts<GTS>  ELEVATIONS  elevations<LIST<LONG>>\\nlgts<LIST<GTS>>  ELEVATIONS  lelevations<LIST<LIST<LONG>>>\",\"documentation\":\"The `ELEVATIONS` function consumes a Geo Time Series™ or a list thereof from the stack, extracts its elevations, puts them in a list and pushes the list onto the stack.      \\n\\n@param `gts` The Geo Time Series™ from which to extract the elevations\\n\\n@param `lgts` The list of Geo Time Series™ from which to extract the elevations\\n\\n@param `elevations` The elevations of the given Geo Time Series™\\n\\n@param `lelevations` The list of elevations of the given Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELEVATIONS\"},{\"name\":\"EMPTY\",\"detail\":\"gtsList<LIST<GTS>>  EMPTY  result<LIST<GTS>>\",\"documentation\":\"Reject GTS instances with values.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with empty values\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"EMPTY\"},{\"name\":\"ENCODER->\",\"detail\":\"encoder<GTSENCODER>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\\nwrappedinput<STRING>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\\nrawwrappedinput<BYTES>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\",\"documentation\":\"The `ENCODER->` functions convert an encoder into a list of ( timestamp, latitude, longitude, elevation, value ) list. It also pushes attributes, labels and name on the stack.\\nFunction also accepts wrapped or raw-wrapped encoders or gts.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedinput` Encoder or GTS after WRAP. \\n\\n@param `rawwrappedinput` Encoder or GTS after WRAPRAW.\\n\\n@param `output` List of list of ( timestamp, latitude, longitude, elevation, value ). Missing values in the encoder or GTS are replaced by NaN.\\n\\n@param `name` Name of encoder or GTS. If no name was defined, will be NULL.\\n\\n@param `attributes` Attributes of encoder or GTS input. If none defined, will be an empty map.\\n\\n@param `labels` Labels of encoder or GTS input. If none defined, will be an empty map.\\n\\n\",\"tags\":[\"encoder\",\"conversion\",\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"GJt2IoG4JXoy\"},{\"name\":\"ERROR\",\"detail\":\" ERROR  error<LIST<MAP>>\",\"documentation\":\"Pushes onto the stack a list containing the current error (as caught by a [`TRY`](/doc/TRY)) and its causes. Each error is a map with the following fields:\\n\\n| Field | Description |\\n| --- | --- |\\n| type | Type of the error, the Java class of the underlying exception |\\n| message | The message associated with the error |\\n| stacktrace | A list of lists, each containing `filename`, `line number`, `class name`, `method name` |      \\n\\nThe current error is the first element of the list.\\n\\nIf there is no current error, the returned list will be empty.\\n\\n@param `error` List of maps describing the current error and its causes.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ERROR\"},{\"name\":\"ESDTEST\",\"detail\":\"gts<GTS> k<LONG> mad<BOOLEAN> alpha<DOUBLE>  ESDTEST  result<LIST<LONG>>\\ngts<GTS> k<LONG> mad<BOOLEAN>  ESDTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> k<LONG> mad<BOOLEAN> alpha<DOUBLE>  ESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> k<LONG> mad<BOOLEAN>  ESDTEST  resultList<LIST<LIST<LONG>>>\",\"documentation\":\"The `ESDTEST` function detects outliers in a GTS (or a **LIST** of GTS), by applying a [generalized extreme studentized deviate test](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm).\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nA [Grubbs’](/doc/GRUBBSTEST)test is done for one candidate at a time. Then, the candidate is removed from the set and another [Grubbs’](/doc/GRUBBSTEST)test\\nis performed. This process is iterated a given number of times. The detected outliers are the removed values and the current candidate of the last successful\\ntest.\\n\\nA **LIST** of ticks (or a **LIST** of **LIST** of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ESDTEST\"},{\"name\":\"EVAL\",\"detail\":\"macro<MACRO>  EVAL \\nstring<STRING>  EVAL \",\"documentation\":\"The `EVAL` function evaluates the statements contained in the string at the top of the stack as if they had been entered individually or runs the macro at the top os the stack.\\n\\n@param `string` String to evaluate\\n\\n@param `macro` Macro to run\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVAL\"},{\"name\":\"EVALSECURE\",\"detail\":\"secure<STRING>  EVALSECURE  return<ANY>\",\"documentation\":\"The `EVALSECURE` function executes a secure script. The script must have been created on a platform with the same secure script cryptographic key as the current platform (note that this is not the *secret* set using [`SECUREKEY`](doc/SECUREKEY)).\\n\\n@param `secure` String containing the secure script to execute.\\n\\n@param `return` The return values depend on the actual code of the secure script.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVALSECURE\"},{\"name\":\"EVERY\",\"detail\":\"macro<MACRO> repeat<LONG>  EVERY \",\"documentation\":\"When called via the `/mobius` endpoint, the `EVERY` function sets the repeat interval for the preceding macro.\\n\\nWhen called outside of `/mobius`, the `EVERY` function simply executes the macro.\\n\\n@param `repeat` The repeat interval to enforce, in milliseconds.\\n\\n@param `macro` The macro to execute.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVERY\"},{\"name\":\"EXP\",\"detail\":\"value<NUMBER>  EXP  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  EXP  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a floating point value x consumed from the top of the stack,\\n i.e. e<sup>x</sup>.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List where each value is e<sup>x</sup>\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXP\"},{\"name\":\"EXPM1\",\"detail\":\"value<NUMBER>  EXPM1  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  EXPM1  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a DOUBLE value x consumed from the top of the stack then subtracts one, i.e. e<sup>x</sup>-1.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>-1\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List of e<sup>x</sup>-1\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXPM1\"},{\"name\":\"EXPORT\",\"detail\":\"symbol<STRING>  EXPORT \\nsymbols<LIST>  EXPORT \",\"documentation\":\"The `EXPORT` function allows you to set or update a list of symbols which will be dumped upon script termination. This proves handy when \\ndebugging a script as you can visualize, even in the case of errors, the value of specific symbols.\\n\\nThe function expects either a symbol name (a **STRING**) which will be added to the current list of exported symbols, a list of symbol \\nname which will replace the current list of exported symbols, an empty list to disable symbol export altogether, or a list with a single\\n**NULL** element to instruct the WarpScript engine to export all existing symbols.\\n\\nWhen symbols should be exported, the debug mode is implied (see [`DEBUGON`](/doc/DEBUGON)).\\n\\n@param `symbol` Symbol name\\n\\n@param `symbols` List of symbols\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.2\",\"OPB64name\":\"EXPORT\"},{\"name\":\"EXTLOADED\",\"detail\":\"ext<STRING>  EXTLOADED  loaded<BOOLEAN>\",\"documentation\":\"Checks if a WarpScript extension is loaded or not and therefore available.      \\n\\n@param `ext` Name of extension to check.\\n\\n@param `loaded` Boolean indicating whether or not the specified extension is loaded in the WarpScript environment.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"EXTLOADED\"},{\"name\":\"F\",\"detail\":\" F  b<BOOLEAN>\",\"documentation\":\"`F` stand for `false`. It is a boolean constant.\\n\\n\\n@param `b` false\\n\\n\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"F\"},{\"name\":\"FAIL\",\"detail\":\"\",\"documentation\":\"The `FAIL` function stops the execution of the WarpScript scripts by throwing an exception.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FAIL\"},{\"name\":\"FDWT\",\"detail\":\"gts<GTS> wavelet<STRING>  FDWT  fdwt<GTS>\\nlgts<LIST<GTS>> wavelet<STRING>  FDWT  lfdwt<LIST<GTS>>\",\"documentation\":\"The `FDWT` function performs a [Forward Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Fast_wavelet_transform#Forward_DWT) on a Geo Time Series™.\\n\\nA number of different [Wavelets](https://en.wikipedia.org/wiki/Wavelet) are available, the list is inspired by that available on \\nthe [Wavelet Browser](http://wavelets.pybytes.com/).\\n\\nThe list of Wavelets which can be used is the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\nThe FDWT can only be applied to Geo Time Series™ with a number of values which is a power of 2.\\n\\nAssuming the input GTS has 2<sup>n</sup> values, the result of the FDWT transformation is a GTS with 2<sup>n</sup> values (the wavelet coefficients) with timestamps from 0 to 2<sup>n</sup>-1.\\n\\nThe ticks of the `n` levels are contiguous, with the first tick being for level `n`, the next 2 for level `n-1`, the next 4 for level `n-2`, up to the last 2<sup>n-1</sup> for level 1.\\n\\nLevel 1 has the finest time resolution but the coarsest frequency resolution. Each level has half (coarser) the time resolution and double (finer) the frequency resolution as the previous level.\\n\\n@param `wavelet` Name of wavelet to use for the transformation.\\n\\n@param `gts` Geo Time Series™ instance on which to perform the FDWT.\\n\\n@param `lgts` List of Geo Time Series™ on which to apply the FDWT.\\n\\n@param `fdwt` Transformed Geo Time Series™.\\n\\n@param `lfdwt` List of transformed Geo Time Series™.\\n\\n\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FDWT\"},{\"name\":\"FETCH\",\"detail\":\"[ token<STRING> class<STRING> labels<MAP> end<LONG> timespan<LONG> ]  FETCH  data<LIST<GTS>>\\n[ token<STRING> class<STRING> labels<MAP> start<STRING> end<STRING> ]  FETCH  data<LIST<GTS>>\\n{ token<STRING> class<STRING> labels<MAP> end<LONG> start<STRING> timespan<LONG> count<LONG> selector<STRING> selectors<LIST<STRING>> metaset<STRING> type<STRING> typeattr<STRING> extra<LIST<STRING>> active.after<LONG> quiet.after<LONG> gts<LIST<GTS>> boundary.post<LONG> boundary.pre<LONG> boundary<LONG> skip.count<LONG> sampling.ratio<DOUBLE>  } FETCH  data<LIST<GTS>>\",\"documentation\":\"The `FETCH` function interacts with the Warp 10 Storage Engine to retrieve data according to given criteria.\\n\\n`FETCH` either accepts a list of 5 parameters or a map with the parameters. Those are defining the **read access rights**, the **concerned Geo Time Series** and the **time window**. Other parameters in the map input are optional. \\n\\nThe list input is here to keep backward compatibility with old WarpScripts. The map input allows a great flexibility, as described below.\\n\\n### Access rights\\nA valid read token is needed to read data with fetch. If you use a [metaset](/doc/METASET) and also specify a token, the token included in the metaset will be ignored.\\n\\n### Concerned Geo Time Series\\n`FETCH` selects Geo Time Series according to:\\n+ The `selectors` parameter, which is a list of selector.\\n+ If `selectors` is not found, `FETCH` uses the `selector` parameter which is a single selector.\\n+ If `selector` is not found, `FETCH`  uses both `class` and `labels` parameters.  \\n\\n### Time window\\n`FETCH`  begins from the newest value and stop when the oldest value is collected. Thus, `end` must be defined in your request and defines the newest included value in your time window. If `end` is anterior to your oldest value, the result will be empty (no Geo Time Series). The span of the time window ending at `end` is then defined according to:\\n+ The `timespan` parameter.\\n+ If `timespan` is not defined, `FETCH` collects a maximum of `count` point.\\n+ If `count` is not defined, `FETCH` determines `timespan` with `start`. If `start` is more recent than `end`, `end` and `start` are permuted internally. Be careful, this means `end` is included but  **`start` is excluded from the time window**.\\n\\n### Boundaries\\nSince version 2.3.0, you can define *boundaries* around the requested data. When fetching data based on a time range, both a *pre* and *post* boundaries can be specified. When fetching by count, only a *pre* boundary can be requested.\\nBoundaries are a number of datapoints which are either before (*pre* boundary) or after (*post* boundary) the fetched data. Fetching boundaries is very useful when storing only the changes of values as they enable you to always fetch datapoints even if the requested time range does not contain any. They can also be used to fetch the first `N` datapoints after a given timestamp.\\nNote that fetching *post* boundaries is less efficient than fetching the requested range or a *pre* boundary as the data has to be scanned in reverse order which has an impact on I/Os and ultimately on performance.\\n\\n### Sampling options\\n+ Since version 2.3.0, you can randomly sample points with the `sample` parameter. If `sample` equals 0.1, `FETCH` will randomly return one point out of ten. This implementation is the fastest way to resample data.\\n+ Since version 2.3.0, you can `skip` the N newest datapoints in the time window specified.\\n\\n### Query without looking into directory\\nThe fetch time to read one gts among millions of gts recorded with the same classname, the same application and the same owner can take time. Use the `gts` parameter to select if you exactly know the classname and all the labels.\\n\\nIf you want to read only Geo Time Series attributes or labels, using [FIND](/doc/FIND) is more efficient than fetching the last value.\\n\\n@param `token` Read token to use to fetch the data.\\n\\n@param `class` Selector for the GTS classes. Can either be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `labels` Map of labels selectors. The key is the label name, the value a selector which can be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `start` Oldest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `end` Newest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n@param `metaset` A set of Geo Time Series™ produced by the [`METASET`](/doc/METASET) function.\\n\\n@param `type` Name of type to force for the GTS, either LONG, DOUBLE, BOOLEAN or STRING.\\n\\n@param `typeattr` Name of label to use for storing the GTS type. This option is incompatible with 'type', when set values of different types are ventilated in separate GTS with the same set of class and labels and an additional *type* label of the given name.\\n\\n@param `timespan` Depth to consider when fetching the datapoints. If the value is positive then it is interpreted as a duration in time units, if it is negative then as the maximum number of datapoints to fetch. If negative, incompatible with 'count'.\\n\\n@param `count` Maximum number of datapoints to fetch for each GTS. Incompatible with negative 'timespan'.\\n\\n@param `extra` List of extraneous classes to fetch. For each GTS matching the selection criteria, GTS with those extra class names will be fetched too (with the *exact* same set of labels).\\n\\n@param `active.after` Timestamp after which a GTS must have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `quiet.after` Timestamp after which a GTS must not have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `gts` Explicit list of Geo Time Series™ to fetch. The class and labels will be used as is and not serve as selectors.\\n\\n@param `boundary` Number of datapoints to include in both *pre* and *post* boundaries.\\n\\n@param `boundary.pre` Number of datapoints in the *pre* boundary.\\n\\n@param `boundary.post` Number of datapoints in the *post* boundary.\\n\\n@param `sampling.ratio` A probability between 0 (excluded, no datapoints returned) and 1.0 (all datapoints returned). The random sampling is done by the storage layer, which is the most efficient.\\n\\n@param `skip.count` Set fetch to ignore the N newest points in the time window you specified.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCH\"},{\"name\":\"FETCHBOOLEAN\",\"detail\":\"linput<LIST>  FETCHBOOLEAN  data<LIST<GTS>>\\nminput<MAP>  FETCHBOOLEAN  data<LIST<GTS>>\",\"documentation\":\"The `FETCHBOOLEAN` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type BOOLEAN.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHBOOLEAN\"},{\"name\":\"FETCHDOUBLE\",\"detail\":\"linput<LIST>  FETCHDOUBLE  data<LIST<GTS>>\\nminput<MAP>  FETCHDOUBLE  data<LIST<GTS>>\",\"documentation\":\"The `FETCHDOUBLE` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type DOUBLE.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHDOUBLE\"},{\"name\":\"FETCHLONG\",\"detail\":\"linput<LIST>  FETCHLONG  data<LIST<GTS>>\\nminput<MAP>  FETCHLONG  data<LIST<GTS>>\",\"documentation\":\"The `FETCHLONG` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type LONG.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHLONG\"},{\"name\":\"FETCHSTRING\",\"detail\":\"linput<LIST>  FETCHSTRING  data<LIST<GTS>>\\nminput<MAP>  FETCHSTRING  data<LIST<GTS>>\",\"documentation\":\"The `FETCHSTRING` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type STRING.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHSTRING\"},{\"name\":\"FFT\",\"detail\":\"gts<GTS>  FFT  result<LIST<GTS>>\\ngtsList<LIST<GTS>>  FFT  result<LIST<LIST<GTS>>>\",\"documentation\":\"The `FFT` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFT` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe real parts of the `FFT` coefficients, the second the imaginary parts. The scale factor is equal to X/(n * bucketspan) where n is the number\\nof elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the number\\nof values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFT` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the real parts of the `FFT` coefficients, the second the imaginary parts.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFT\"},{\"name\":\"FFTAP\",\"detail\":\"gts<GTS>  FFTAP  result<LIST<GTS>>\\ngtsList<LIST<GTS>>  FFTAP  result<LIST<LIST<GTS>>>\",\"documentation\":\"The `FFTAP` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFTAP` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe amplitude of the coefficient at that frequency and the second the associated phase. The scale factor is equal to X/(n * bucketspan) where n is\\nthe number of elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the\\nnumber of values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFTAP` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the amplitude of the coefficient at that frequency and the second the associated phase.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFTAP\"},{\"name\":\"FFTWINDOW\",\"detail\":\"gts<GTS> window<STRING>  FFTWINDOW  windowed<GTS>\\nlgts<LIST<GTS>> window<STRING>  FFTWINDOW  lwindowed<LIST<GTS>>\",\"documentation\":\"The `FFTWINDOW` transforms Geo Time Series™ by applying a [window function](https://en.wikipedia.org/wiki/Window_function) to its values. The function supports the following windows:\\n\\n| Name | Window |\\n| --- | --- |\\n| `triangular` | [Triangular](https://en.wikipedia.org/wiki/Window_function#Triangular_window) |\\n| `parzen` | [Parzen](https://en.wikipedia.org/wiki/Window_function#Parzen_window) |\\n| `welch` | [Welch](https://en.wikipedia.org/wiki/Window_function#Welch_window) |\\n| `sine` | [Sine](https://en.wikipedia.org/wiki/Window_function#Sine_window) |\\n| `hann` | [Hann](https://en.wikipedia.org/wiki/Window_function#Hann_window) |\\n| `hamming` | [Hamming](https://en.wikipedia.org/wiki/Window_function#Hamming_window) |\\n| `blackman` | [Blackman](https://en.wikipedia.org/wiki/Window_function#Blackman_window) |\\n| `nuttall` | [Nuttall](https://en.wikipedia.org/wiki/Window_function#Nuttall_window,_continuous_first_derivative) | \\n| `blackman-nuttall` | [Blackman-Nuttall](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Nuttall_window) |\\n| `blackman-harris` | [Blackman-Harris](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Harris_window) |\\n| `flattop` | [Flat top](https://en.wikipedia.org/wiki/Window_function#Flat_top_window) |\\n| `rectangular` | [Rectangular](https://en.wikipedia.org/wiki/Window_function#Rectangular_window) |\\n\\n@param `window` Name of the window function to apply.\\n\\n@param `gts` Single Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `windowed` Tranformed Geo Time Series™.\\n\\n@param `lwindowed` List of transformed Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"FFTWINDOW\"},{\"name\":\"FILL\",\"detail\":\"gtsa<GTS> gtsb<GTS> filler<FILLER>  FILL  gtsa<GTS> gtsb<GTS>\",\"documentation\":\"The `FILL` function fills missing values in two Geo Time Series™ so they end up with identical ticks.\\n\\nThe filling is done using a *filler* function which applies a given strategy. Filler functions can be created using macros via the [`MACROFILLER`](/doc/MACROFILLER) function.\\n\\n@param `gtsa` First Geo Time Series™ to fill.\\n\\n@param `gtsb` Second Geo Time Series™ to fill.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"FILL\"},{\"name\":\"FILLNEXT\",\"detail\":\"gts<GTS>  FILLNEXT  result<GTS>\\ngtsList<LIST<GTS>>  FILLNEXT  resultList<LIST<GTS>>\",\"documentation\":\"The `FILLNEXT` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation of the \\nnext non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLNEXT\"},{\"name\":\"FILLPREVIOUS\",\"detail\":\"gts<GTS>  FILLPREVIOUS  result<GTS>\\ngtsList<LIST<GTS>>  FILLPREVIOUS  resultList<LIST<GTS>>\",\"documentation\":\"The `FILLPREVIOUS` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation \\nof the previous non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLPREVIOUS\"},{\"name\":\"FILLTICKS\",\"detail\":\"gts<GTS> data<LIST>  FILLTICKS  result<GTS>\\ngtsList<LIST<GTS>> data<LIST>  FILLTICKS  resultList<LIST<GTS>>\",\"documentation\":\"The `FILLTICKS` function add values to a Geo Time Series™ instance or a list thereof for ticks in the given **LIST**.\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n@param `data` List of (latitude, longitude, elevation, ticks) where ticks is a list of ticks.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLTICKS\"},{\"name\":\"FILLVALUE\",\"detail\":\"gts<GTS> data<LIST>  FILLVALUE  result<GTS>\\ngtsList<LIST<GTS>> data<LIST>  FILLVALUE  resultList<LIST<GTS>>\",\"documentation\":\"The `FILLVALUE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with a fixed value/location/elevation.\\n\\nIt expects a GTS or a list thereof on the top of the stack after having consumed a list of parameters (latitude, longitude, elevation, value)\\nsitting on top of the stack prior to the call.\\n\\nLocation must be floating point numbers (e.g. 0.0 not 0). Elevation must be an integer. If no location or elevation should be set, **NaN** can\\nbe used instead of specific value.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n\\n\\nThe value is cast to the type of the GTS value\\n\\n@param `gts` The Geo Time Series™ to fill\\n\\n@param `gtsList` The list of Geo Time Series™ to fill\\n\\n@param `result` The filled Geo Time Series™\\n\\n@param `resultList` The list of filled Geo Time Series™\\n\\n@param `data` The list of parameters (latitude, longitude, elevation, value)\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLVALUE\"},{\"name\":\"FILTER\",\"detail\":\"[ gtsList<LIST<GTS>> labels<LIST<STRING>> filter<FILTER> ]  FILTER  result<LIST<GTS>>\",\"documentation\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `FILTER` framework allows for advanced filtering using N-ary functions\\n(functions which accept N parameters).\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A single list containing only the selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `FILTER`.\\n\\n\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILTER\"},{\"name\":\"FILTERBY\",\"detail\":\"list<LIST> macro<MACRO>  FILTERBY  sublist<LIST>\",\"documentation\":\"The `FILTERBY` function selects elements of a list based on the boolean return value of a macro evaluated for each element.\\n\\n@param `macro` Macro used for filtering. This macro should consume the element of the list pushed on top of the stack and leave a boolean on the stack. If this boolean is `true`, the element will be retained.\\n\\n@param `list` List of elements to filter.\\n\\n@param `sublist` List with the selected elements from `list`.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"FILTERBY\"},{\"name\":\"FIND\",\"detail\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FIND  data<LIST<GTS>>\\n[ uuidattribute<BOOLEAN> token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FIND  data<LIST<GTS>>\\n{ token<STRING> classSelector<STRING> labelsSelector<MAP>  } FIND  data<LIST<GTS>>\\n{ token<STRING> selector<STRING>  } FIND  data<LIST<GTS>>\\n{ token<STRING> selectors<LIST<STRING>>  } FIND  data<LIST<GTS>>\",\"documentation\":\"The `FIND` function finds Geo Time Series™ labels and attributes of GTS, not their values. It is the fastest way to read attributes of GTS. `FIND` ask only `directory` component of Warp&nbsp;10™, while [FETCH](/doc/FETCH) first ask `directory`, then ask `store` to read GTS values. \\n\\nSyntax is close to [FETCH](/doc/FETCH), without time boundaries or data point count.\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `data` List of fetched Geo Time Series™. These GTS does not contain any value.\\n\\n@param `uuidattribute` Setting this to true add `.uuid` attribute in the output data. This UUID is a hash of class and label.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIND\"},{\"name\":\"FINDSETS\",\"detail\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FINDSETS  classes<LIST<STRING>> labels<MAP> attributes<MAP>\",\"documentation\":\"The `FINDSETS` function returns sets of values for the classes, labels and attributes of the Geo Time Series™ which matched the selection criteria.\\n\\nThose results can be used for example to update a UI with lists of possible values for labels when exploring a corpus of GTS.\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label names to exact match or regular expression (if the value starts with a *~*) for matching labels and attributes.\\n\\n@param `attributes` Map of attribute names to value list.\\n\\n@param `labels` Map of label names to value list.\\n\\n@param `classes` List of class names.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSETS\"},{\"name\":\"FINDSTATS\",\"detail\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FINDSTATS  result<MAP>\",\"documentation\":\"The `FINDSTATS` function computes statistics on matching Geo Time Series™. The estimations are based on the use of [HyperLogLogPlus](https://en.wikipedia.org/wiki/HyperLogLog) estimators.\\n\\nThe function returns a map containing information about the matching Geo Time Series. The fields of the map are the following:\\n\\n| Key | Value |\\n|-----|-------|\\n| `gts.estimate` | Estimation of the number of matching Geo Time Series™ |\\n| `classes.estimate` | Estimation of the number of distinct class names |\\n| `labelnames.estimate` | Estimation of the number of distinct label names |\\n| `labelvalues.estimate` | Estimation of the number of distinct label values |\\n| `per.class.estimate` | If the number of matching classes is below the `directory.stats.class.maxcardinality`, this key will be associated with a map containing per class estimate of number of GTS |\\n| `per.label.value.estimate` | If the number of label names in the matching GTS is below `directory.stats.labels.maxcardinality`, this key will be associated with a map containing an estimation of distinct label values per label name |\\n| `error.rate` | This is the error rate of the estimators used for computing the estimations |\\n| `partial.results` | When accessing a sharded Directory, this will be set to `true` if only partial results were collected |\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `result` Map containing stats such as error rate or whether estimates on classes, gts, or labels.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSTATS\"},{\"name\":\"FIRSTTICK\",\"detail\":\"gts<GTS>  FIRSTTICK  result<LONG>\\nlgts<LIST<GTS>>  FIRSTTICK  result<LONG>\",\"documentation\":\"The `FIRSTTICK` function pushes on the stack the timestamp of the first tick of the Geo Time Series™ on top of the stack.\\n\\nWhen applied to a list of GTS, `FIRSTTICK` will return the lowest first tick found across all Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` Timestamp. If the GTS does not have values, **Long.MAX_VALUE** is pushed.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIRSTTICK\"},{\"name\":\"FLATTEN\",\"detail\":\"input<LIST>  FLATTEN  output<LIST>\\nnotAList<ANY>  FLATTEN  notAList<ANY>\",\"documentation\":\"The function `FLATTEN` inspects the top of the stack.\\n\\nIf it is a LIST of values,\\nit inspects each value and replaces each value which was a LIST with its content.\\n`FLATTEN` proceed recursively until all LISTs have been flattened.\\n\\nIf it is not a LIST, the function exits and let the stack in the same state.\\n\\n@param `input` Input is a list who may contains lists\\n\\n@param `notAList` An object which is not a list\\n\\n@param `output` Output list do not contains anymore nested lists\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLATTEN\"},{\"name\":\"FLOATBITS->\",\"detail\":\"input<LONG>  FLOATBITS->  result<DOUBLE>\",\"documentation\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the 32 lower bits of the **LONG** value as the raw bits of a **FLOAT**.\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"GZlEFKG1HKGIAIs\"},{\"name\":\"FLOOR\",\"detail\":\"value<NUMBER>  FLOOR  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  FLOOR  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `FLOOR` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number smaller than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-down value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-down values, for each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLOOR\"},{\"name\":\"FLOORDIV\",\"detail\":\"dividend<NUMBER> divisor<NUMBER>  FLOORDIV  fDiv<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  FLOORDIV  lfDiv<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  FLOORDIV  lfDiv<LIST<LONG>>\",\"documentation\":\"The `FLOORDIV` function consumes two NUMBER values, convert them to LONGs and pushes back largest LONG value that is less than or equal to the algebraic quotient.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fDiv` The largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfDiv` List of largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORDIV\"},{\"name\":\"FLOORMOD\",\"detail\":\"dividend<NUMBER> divisor<NUMBER>  FLOORMOD  fMod<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  FLOORMOD  lfMod<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  FLOORMOD  lfMod<LIST<LONG>>\",\"documentation\":\"The `FLOORMOD` function consumes two NUMBER values, convert them to LONGs and pushes back the floor modulus which is x - (floorDiv(x, y) * y).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fMod` The floor modulus x - (floorDiv(x, y) * y)\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfMod` List of floor modulus x - (floorDiv(x, y) * y)\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORMOD\"},{\"name\":\"FOR\",\"detail\":\"initial<NUMBER> final<NUMBER> macro<MACRO>  FOR \\ninitial<NUMBER> final<NUMBER> macro<MACRO> index<BOOLEAN>  FOR \",\"documentation\":\"The `FOR` function implements a for loop. It takes three arguments from the stack: the initial and the final values of the loop index and a macro to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOR\"},{\"name\":\"FOREACH\",\"detail\":\"list<LIST> exec<MACRO>  FOREACH \\nmap<MAP> exec<MACRO>  FOREACH \\nset<SET> exec<MACRO>  FOREACH \\nvector<VLIST> exec<MACRO>  FOREACH \\nstring<STRING> exec<MACRO>  FOREACH \\ngts<GTS> exec<MACRO>  FOREACH \\nencoder<GTSENCODER> exec<MACRO>  FOREACH \\nlist<LIST> exec<MACRO> index<BOOLEAN>  FOREACH \\nmap<MAP> exec<MACRO> index<BOOLEAN>  FOREACH \\nset<SET> exec<MACRO> index<BOOLEAN>  FOREACH \\nvector<VLIST> exec<MACRO> index<BOOLEAN>  FOREACH \\nstring<STRING> exec<MACRO> index<BOOLEAN>  FOREACH \\ngts<GTS> exec<MACRO> index<BOOLEAN>  FOREACH \\nencoder<GTSENCODER> exec<MACRO> index<BOOLEAN>  FOREACH \",\"documentation\":\"The `FOREACH` function implements a for loop on a list or map.\\n\\nFor each iteration i on a list, the i-th element on the list is put on top of the stack, and the exec macro is then called.\\n\\nFor each iteration i on a map, the exec macro is called with the i-th value on top of the stack, and the i-th key just below on the stack.\\nYou can start your macro with `'value' STORE 'key' STORE`.\\n\\nSince release 2.1, `FOREACH` has the ability to iterate over Geo Time Series™ and GTS Encoders. When iterating over a GTS or Encoder, the macro is fed with a list of the form `[ tick lat lon elev value ]` where `lat`, `lon` and `elev` may be `NaN` if unset. In the case of an Encoder, `value` can be a byte array or a `BigDecimal` on top of `LONG`, `DOUBLE`, `STRING` or `BOOLEAN`.\\n\\nSince release 2.4.0, you can force FOREACH to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `exec` Macro to apply\\n\\n@param `list` List to iterate on\\n\\n@param `map` Map to iterate on\\n\\n@param `set` Set to iterate on\\n\\n@param `vector` Vector to iterate on\\n\\n@param `gts` GTS to iterate on\\n\\n@param `string` String to iterate on\\n\\n@param `encoder` GTSEncoder to iterate on\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOREACH\"},{\"name\":\"FORGET\",\"detail\":\"symbol<STRING>  FORGET \",\"documentation\":\"Removes a symbol from the symbol table.      \\n\\n@param `symbol` Name of the symbol to remove.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORGET\"},{\"name\":\"FORSTEP\",\"detail\":\"initial<NUMBER> final<NUMBER> step<MACRO> macro<MACRO>  FORSTEP \\ninitial<NUMBER> final<NUMBER> step<MACRO> macro<MACRO> index<BOOLEAN>  FORSTEP \",\"documentation\":\"The `FORSTEP` function implements for loop with an index step. It takes four arguments from the stack: the initial and the final values of the loop index,\\na macro step to evaluate after each iteration and an other one to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `step` Macro step to evaluate after each iteration, typically to compute index\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORSTEP\"},{\"name\":\"FROMBIN\",\"detail\":\"input<STRING>  FROMBIN  output<LONG>\",\"documentation\":\"Converts the binary representation on top of the stack into the corresponding long.\\n\\n@param `input` Binary representation of a signed long, 64 characters max.\\n\\n@param `output` Signed long of input.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBIN\"},{\"name\":\"FROMBITS\",\"detail\":\"input<LONG>  FROMBITS  result<DOUBLE>\",\"documentation\":\"**This function is deprecated. Replace it in your code by the [`DOUBLEBITS->`](/doc/G3xKFZl4FZ_JJmoy) function.**\\n\\nConverts the **LONG** on top of the stack into a **DOUBLE** by considering it a raw bit representation.\\n\\n@param `input` Raw bit representation to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBITS\"},{\"name\":\"FROMHEX\",\"detail\":\"input<STRING>  FROMHEX  output<LONG>\",\"documentation\":\"Converts an hexadecimal representation into a signed long. 64bits max.\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Signed long\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMHEX\"},{\"name\":\"FUNCTIONS\",\"detail\":\" FUNCTIONS  functions<LIST<STRING>>\",\"documentation\":\"FUNCTIONS returns a list of every functions available in your Warp 10 environnment, including native and extension functions.\\n\\nIt could be useful when coding your own extension to check your new functions are correctly registered.\\n\\n\\nFUNCTIONS allow anyone to discover new extensions you created on the platform, so it is deactivated by default.\\n\\nYou must add `warpscript.extension.inventory=io.warp10.script.ext.inventory.InventoryWarpScriptExtension` in your configuration file for this function to be available.\\n\\n@param `functions` List of Warp 10 functions available on this instance\\n\\n\",\"tags\":[\"platform\",\"extensions\"],\"since\":\"1.2.16\",\"OPB64name\":\"FUNCTIONS\"},{\"name\":\"FUSE\",\"detail\":\"chunks<LIST<GTS>>  FUSE  gts<GTS>\",\"documentation\":\"Fuses Geo Time Series™ chunks. The fusion process attempts to keep the bucketization parameters if all chunks are bucketized with compatible `bucketspan` and `lastbucket` values.\\n\\nAll chunks must be of the same type.\\n\\nThe fused GTS will have the common class name of the chunks or no class name if some chunks have a different class name. The labels will be those common to all chunks, so when fusing chunks created with [`CHUNK`](/doc/CHUNK), the chunk id will be dropped.\\n\\n@param `chunks` List of Geo Time Series™ to fuse.\\n\\n@param `gts` Geo Time Series™ resulting from the fusion of `chunk`.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FUSE\"},{\"name\":\"GEO.BUFFER\",\"detail\":\"params<MAP>  GEO.BUFFER  wkb<BYTES>\\nparams<MAP>  GEO.BUFFER  area<STRING>\\nparams<MAP>  GEO.BUFFER \",\"documentation\":\"The `GEO.BUFFER` function allows to create [*buffer*](https://en.wikipedia.org/wiki/Buffer_(GIS)) **GEOSHAPE** objects. The function takes a `MAP` instance as input. This map can contain the following entries:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `dist` | Distance of the buffer, as a central angle expressed in degrees. |\\n| `mdist` | Distance of the buffer expressed in meters. This key is only taken into account if `dist` is not specified. |\\n| `cap` | The end cap style to consider, use `SQUARE`, `FLAT` or `ROUND` (default). |\\n| `join` | The join style to use, use `BEVEL`, `MITRE` or `ROUND` (default). |\\n| `limit` | The mitre limit to use. Defaults to 5.0. |\\n| `segments` | Number of segments to use per quadrant, defaults to 8. |\\n| `singlesided` | Set to `true` to compute a single sided buffer. If `true`, positive distance will indicate left-hand side and negative distance right-hand side. End cap is ignored for single sided buffers. |\\n| `wkb` | Byte array containing a [WKB](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary) definition of a geographic area. |\\n| `wkt` | String containing a [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) definition of a geographic area. |\\n| `geojson` | String containing a [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) definition of a geographic area. |\\n\\nIf a geographic area is defined, only one of `wkb`, `wkt` or `geojson` may be specified. The output of the function is a new definition of a geographic area with the buffer added to the original definition.\\n\\nIf no geographic area is defined, `GEO.BUFFER` will define a buffer which will be used by the next call to either [`GEO.WKT`](/doc/GEO.WKT), [`GEO.WKB`](/doc/GEO.WKB) or [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `params` Parameter map containing keys as defined above.\\n\\n@param `wkb` Area definition with the buffer added, if `params` had a value for key `wkb`.\\n\\n@param `area` Area definition with the buffer added, in WKT or GeoJSON depending on the presence of key `wkt` or `geojson` in `params`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.7.0\",\"OPB64name\":\"GEO.BUFFER\"},{\"name\":\"GEO.COVER\",\"detail\":\"gts<GTS> resolution<LONG>  GEO.COVER  geoshape<GEOSHAPE>\\nencoder<GTSENCODER> resolution<LONG>  GEO.COVER  geoshape<GEOSHAPE>\\nlist<LIST> resolution<LONG>  GEO.COVER  geoshapes<LIST<GEOSHAPE>>\",\"documentation\":\"The `GEO.COVER` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* in which the input Geo Time Series™ or GTS Encoder had datapoints.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER\"},{\"name\":\"GEO.COVER.RL\",\"detail\":\"gts<GTS> resolution<LONG>  GEO.COVER.RL  geoshape<GEOSHAPE>\\nencoder<GTSENCODER> resolution<LONG>  GEO.COVER.RL  geoshape<GEOSHAPE>\\nlist<LIST> resolution<LONG>  GEO.COVER.RL  geoshapes<LIST<GEOSHAPE>>\",\"documentation\":\"The `GEO.COVER.RL` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* which cover the path of an input Geo Time Series™ or GTS Encoder. The path is considered to follow [rhumb lines](https://en.wikipedia.org/wiki/Rhumb_line), hence the function suffix `.RL`.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER.RL\"},{\"name\":\"GEO.DIFFERENCE\",\"detail\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.DIFFERENCE  shape<GEOSHAPE>\",\"documentation\":\"The `GEO.DIFFERENCE` function computes the difference between two GEOSHAPE. The resulting GEOSHAPE instance contains cells which cover the part of the first GEOSHAPE which is not in the second. If you need to have cells up to a certain resolution, you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the result.\\n\\n@param `shapeA` GEOSHAPE instance from which to subtract the second shape.\\n\\n@param `shapeB` GEOSHAPE to subtract from 'shapeA'.\\n\\n@param `shape` GEOSHAPE containing 'shapeA' minus 'shapeB'.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.DIFFERENCE\"},{\"name\":\"GEO.INTERSECTION\",\"detail\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.INTERSECTION  shape<GEOSHAPE>\\nshapes<LIST<GEOSHAPE>>  GEO.INTERSECTION  shape<GEOSHAPE>\",\"documentation\":\"The `GEO.INTERSECTION` function computes the intersection of two GEOSHAPE instances. The intersection process will produce a GEOSHAPE whose cells are common to the two initial shapes. The common cells will be of various resolutions, depending on the resolutions of the cells from the initial shapes. If you need the resulting shape to contain cells up to a specific resolution, you can call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) either on the result or on the initial shapes.\\n\\n@param `shapeA` First GEOSHAPE instance.\\n\\n@param `shapeB` Second GEOSHAPE instance.\\n\\n@param `shapes` GEOSHAPE instances.\\n\\n@param `shape` Geographical area (GEOSHAPE) resulting from the intersection of the given shapes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTION\"},{\"name\":\"GEO.INTERSECTS\",\"detail\":\"gts<GTS> shape<GEOSHAPE>  GEO.INTERSECTS  result<BOOLEAN>\\nlgts<LIST<GTS>> shape<GEOSHAPE>  GEO.INTERSECTS  results<LIST<BOOLEAN>>\\nshapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.INTERSECTS  result<BOOLEAN>\",\"documentation\":\"The `GEO.INTERSECTS` function checks if a Geo Time Series or each GTS from a list has at least one data point with a position inside a given geographical area. Since `2.7.1`, the function can also check if two `GEOSHAPE` instances intersect.\\n\\n@param `shapeA` First `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shapeB` Second `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shape` Instance of GEOSHAPE containing the area which the Geo Time Series must intersect.\\n\\n@param `gts` Single instance of Geo Time Series.\\n\\n@param `lgts` List of Geo Time Series.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series had at least one datapoint in 'shape' or if the two shapes intersect.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had at least one datapoint in 'shape'.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTS\"},{\"name\":\"GEO.JSON\",\"detail\":\"GeoJSON<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.JSON  geoshape<GEOSHAPE>\\nGeoJSON<STRING> resolution<LONG> inside<BOOLEAN>  GEO.JSON  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.9\",\"OPB64name\":\"GEO.JSON\"},{\"name\":\"GEO.JSON.UNIFORM\",\"detail\":\"GeoJSON<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.JSON.UNIFORM  geoshape<GEOSHAPE>\\nGeoJSON<STRING> resolution<LONG> inside<BOOLEAN>  GEO.JSON.UNIFORM  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.JSON`](doc/GEO.JSON), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.JSON.UNIFORM\"},{\"name\":\"GEO.NORMALIZE\",\"detail\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.NORMALIZE  normalizedA<GEOSHAPE> normalizedB<GEOSHAPE>\",\"documentation\":\"The `GEO.NORMALIZE` function ensures that the intersection of two **GEOSHAPE**s is present in both as an identical set of cells.\\n\\n@param `shapeA` The first GEOSHAPE to normalize.\\n\\n@param `shapeB` The second GEOSHAPE to normalize.\\n\\n@param `normalizedA` A normalized copy of the first GEOSHAPE.\\n\\n@param `normalizedB` A normalized copy of the second GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEO.NORMALIZE\"},{\"name\":\"GEO.OPTIMIZE\",\"detail\":\"shape<GEOSHAPE> resolution<LONG>  GEO.OPTIMIZE  optimized<GEOSHAPE>\",\"documentation\":\"The `GEO.OPTIMIZE` function optimizes a GEOSHAPE instance by modifying its cells to either limit the finest resolution present in the shape or reduce the number of cells by merging cells which cover a whole cell at the coarser resolution.\\n\\n@param `shape` GEOSHAPE instance to optimize.\\n\\n@param `resolution` Finest resolution acceptable (even number from 2 to 32) or 0 to reduce the number of cells.\\n\\n@param `optimized` Optimized GEOSHAPE instance\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.OPTIMIZE\"},{\"name\":\"GEO.REGEXP\",\"detail\":\"shape<GEOSHAPE>  GEO.REGEXP  regexp<STRING>\",\"documentation\":\"The `GEO.REGEXP` function converts a GEOSHAPE into a regular expression to select hexadecimal [HHCode](https://en.wikipedia.org/wiki/HHCode) STRINGs which are included in the GEOSHAPE.\\n\\n@param `shape` An instance of GEOSHAPE.\\n\\n@param `regexp` A regular expression for matching HHCodes covered by 'shape'.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GEO.REGEXP\"},{\"name\":\"GEO.UNION\",\"detail\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.UNION  shape<GEOSHAPE>\\nshapes<LIST<GEOSHAPE>>  GEO.UNION  shape<GEOSHAPE>\",\"documentation\":\"The `GEO.UNION` function computes a GEOSHAPE which is the union of two other shapes. The resulting shape will have cells covering the two original shapes. If you need to have cells up to a certain resolution you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the resulting shape.\\n\\n@param `shapeA` First GEOSHAPE instance to merge.\\n\\n@param `shapeB` Second GEOSHAPE instance to merge.\\n\\n@param `shapes` GEOSHAPE instances to merge.\\n\\n@param `shape` Resulting GEOSHAPE which is the union of the given shapes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.UNION\"},{\"name\":\"GEO.WITHIN\",\"detail\":\"gts<GTS> shape<GEOSHAPE>  GEO.WITHIN  result<BOOLEAN>\\nlgts<LIST<GTS>> shape<GEOSHAPE>  GEO.WITHIN  results<LIST<BOOLEAN>>\",\"documentation\":\"The `GEO.WITHIN` function checks whether a Geo Time Series™ or each GTS from a list have all its datapoints with a location inside a given geographical area.\\n\\n@param `shape` Instance of GEOSHAPE containing the area inside which the Geo Time Series™ must be contained.\\n\\n@param `gts` Single instance of Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series™ had all its datapoints with a location inside 'shape'.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had all its datapoints with a location inside 'shape'.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WITHIN\"},{\"name\":\"GEO.WKB\",\"detail\":\"WKB<BYTES> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKB  geoshape<GEOSHAPE>\\nWKB<BYTES> resolution<LONG> inside<BOOLEAN>  GEO.WKB  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.WKB` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB\"},{\"name\":\"GEO.WKB.UNIFORM\",\"detail\":\"WKB<BYTES> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKB.UNIFORM  geoshape<GEOSHAPE>\\nWKB<BYTES> resolution<LONG> inside<BOOLEAN>  GEO.WKB.UNIFORM  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.WKB.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKB`](doc/GEO.WKB), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB.UNIFORM\"},{\"name\":\"GEO.WKT\",\"detail\":\"WKT<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKT  geoshape<GEOSHAPE>\\nWKT<STRING> resolution<LONG> inside<BOOLEAN>  GEO.WKT  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.WKT` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WKT\"},{\"name\":\"GEO.WKT.UNIFORM\",\"detail\":\"WKT<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKT.UNIFORM  geoshape<GEOSHAPE>\\nWKT<STRING> resolution<LONG> inside<BOOLEAN>  GEO.WKT.UNIFORM  geoshape<GEOSHAPE>\",\"documentation\":\"The `GEO.WKT.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKT`](doc/GEO.WKT), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.11\",\"OPB64name\":\"GEO.WKT.UNIFORM\"},{\"name\":\"GEOCELL->\",\"detail\":\"geocell<LONG>  GEOCELL->  hhPrefix<STRING>\",\"documentation\":\"The `GEOCELL->` function converts a **LONG** geocell to a **STRING** HHCode prefix. The resulting string length is half the resolution of the geocell.\\n\\nThis function cannot convert to **BYTES** because this representation is limited to resolutions multiple of 4.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `geocell` A geocell.\\n\\n@param `hhPrefix` A HHCode prefix representing the given cell.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEFoKBI1oy\"},{\"name\":\"GEOHASH->\",\"detail\":\"geohash<STRING>  GEOHASH->  lat<DOUBLE> lon<DOUBLE>\\ngeohash<STRING> toHHCodeString<BOOLEAN>  GEOHASH->  hhcode<ANY>\\ngeohashes<LIST<STRING>>  GEOHASH->  shape<GEOSHAPE>\",\"documentation\":\"The `GEOHASH->` converts a [Geohash](https://en.wikipedia.org/wiki/Geohash), exposing the latitude and longitude it contains, or transforms a list of Geohashes into a `GEOSHAPE`.\\n\\n@param `geohash` Geohash to unpack.\\n\\n@param `geohashes` List of Geohashes defining a geographical area.\\n\\n@param `lat` Unpacked latitude.\\n\\n@param `lon` Unpacked longitude.\\n\\n@param `toHHCodeString` Set to `true` to convert the GeoHash to a HHCode STRING or to `false` to convert it to a LONG HHCode instead of extracting its latitude and longitude.\\n\\n@param `hhcode` The HHCode for `geohash`, as a LONG or STRING.\\n\\n@param `shape` Warp 10 `GEOSHAPE` covering the same geographic area as the Geohashes in `geohashes`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GoKEH34IH1oy\"},{\"name\":\"GEOPACK\",\"detail\":\"shape<GEOSHAPE>  GEOPACK  packed<STRING>\",\"documentation\":\"The `GEOPACK` function takes a **GEOSHAPE** and packs it into a String.\\n\\n@param `shape` The GEOSHAPE instance to pack.\\n\\n@param `packed` The packed string representation of the GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOPACK\"},{\"name\":\"GEOSHAPE->\",\"detail\":\"geoshape<GEOSHAPE>  GEOSHAPE->  geocells<LIST<LONG>>\\ngeoshape<GEOSHAPE> toString<BOOLEAN>  GEOSHAPE->  geocellsOrHHPrefixes<LIST<ANY>>\",\"documentation\":\"The `GEOSHAPE->` function converts **GEOSHAPE** to a list of **LONG** geocells or **STRING** HHCode prefixes. Conversion to list of **BYTES** is not supported, because this representation only supports resolution multiple of 4.\\n\\n@param `geoshape` The geoshape to get the cells from.\\n\\n@param `toString` Whether to convert the cells to **STRING** HHCode prefix (true) or geocells (false).\\n\\n@param `geocells` List of geocells.\\n\\n@param `geocellsOrHHPrefixes` List of **LONG** geocells or **STRING** HHCode prefixes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEJoW0J3JhEV\"},{\"name\":\"GEOSHIFT\",\"detail\":\"shape<GEOSHAPE> lat<DOUBLE> lon<DOUBLE> precision<LONG>  GEOSHIFT  output<GEOSHAPE>\\nshape<GEOSHAPE> meridian<DOUBLE> lat<DOUBLE> lon<DOUBLE> precision<LONG>  GEOSHIFT  output<GEOSHAPE>\",\"documentation\":\"`GEOSHIFT` functions shifts a geoshape on the earth. It is able to safely overlap the poles or the 180th meridian.\\n- Longitude shift keeps distances.\\n- Latitude shift keeps angles, not distances.\\n- When doing latitude shift, you can specify a meridian to shift along this meridian. It means a positive shift became a negative shift behind this meridian +/- 90°.\\n\\nSet precision parameter to zero for safe shifting operation. See [`GEO.WKT`](/doc/GEO.WKT) for precision encoding.\\n\\nUse [`->GEOJSON`](/doc/AIt6GJx9JoxD) to visualize shapes and the results. GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `lon` degrees of longitude to shift (-360 to 360).\\n\\n@param `lat` degrees of latitude to shift (-180 to 180).\\n\\n@param `precision` even number from 0 to 30. Set to 0 for automatic resolution. Force to another value if you know the input resolution to be finer and you want a coarser resolution.\\n\\n@param `shape` The input geoshape.\\n\\n@param `output` The shifted geoshape.\\n\\n@param `meridian` When doing latitude shift, you can specify a meridian to shift along this meridian. (-180 to 180)\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSHIFT\"},{\"name\":\"GEOSPLIT\",\"detail\":\"shape<GEOSHAPE>  GEOSPLIT  subshapes<LIST<GEOSHAPE>>\",\"documentation\":\"The `GEOSPLIT` function splits a **GEOSHAPE** into a set of **GEOSHAPE**s which have no adjacent cells (each shape is a connected space).\\n\\nAdjacent cells share part of their side. Adjacency is not provided by corners and cells on each side of the international date line are not considered adjacent either.\\n\\n@param `shape` The GEOSHAPE instance to split.\\n\\n@param `subshapes` The shapes whose union form `shape` and which each form a connected space.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSPLIT\"},{\"name\":\"GEOUNPACK\",\"detail\":\"packed<STRING>  GEOUNPACK  shape<GEOSHAPE>\\npackedbytes<BYTES>  GEOUNPACK  shape<GEOSHAPE>\",\"documentation\":\"The `GEOUNPACK` function unpacks a GEOSHAPE previously packed using [`GEOPACK`](/doc/GEOPACK).\\n\\n@param `packed` A packed string representation of a GEOSHAPE.\\n\\n@param `packedbytes` A byte array representation of a GEOSHAPE.\\n\\n@param `shape` The decoded instance of GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOUNPACK\"},{\"name\":\"GET\",\"detail\":\"map<MAP> key<ANY>  GET  mapvalue<ANY>\\nlist<LIST> index<LONG>  GET  value<ANY>\\nlist<LIST> index<LIST>  GET  value<ANY>\\narray<BYTES> index<LONG>  GET  bytevalue<LONG>\",\"documentation\":\"Retreive a value in a **MAP** or a **list**.\\n\\nThe `GET` function consumes on the top of the stack a list, a byte array, or a map, and the index (or the key), \\nthen put the result on the stack. \\n\\nIf key is not found, it returns NULL on the stack.\\n\\nIf index is out of bound, `GET` raises an error.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, GET can operate recursively on nested lists. In this case, the index is a list.\\n\\n@param `map` The input MAP.\\n\\n@param `key` Depending on map construction, could be a number, a string, a list, another map, a GTS, a boolean.\\n\\n@param `mapvalue` The value for the requested key. If key do not exists in map, returns NULL\\n\\n@param `index` The index number in the list. Valid values in [-size; size-1]\\n\\n@param `list` The input LIST.\\n\\n@param `value` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `array` Byte array from which to read a byte.\\n\\n@param `bytevalue` The value of the byte, always unsigned (from 0 to 255).\\n\\n\",\"tags\":[\"lists\",\"maps\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"GET\"},{\"name\":\"GETEXPONENT\",\"detail\":\"n<NUMBER>  GETEXPONENT  exponent<LONG>\",\"documentation\":\"The `GETEXPONENT` function consumes a DOUBLE, a LONG casted as a DOUBLE or a COUNTER caster as DOUBLE and pushes back the unbiased exponent used in the representation of this DOUBLE.\\n\\n@param `n` The decimal value to get the exponent from, will be converted to DOUBLE if not already the case.\\n\\n@param `exponent` the unbiased exponent of the argument\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"GETEXPONENT\"},{\"name\":\"GETHOOK\",\"detail\":\"token<STRING> hook<STRING>  GETHOOK  secure<STRING>\",\"documentation\":\"Extracts the macro associated with a token hook and pushes it onto the stack wrapped as a secure script.\\n\\nIf the token does not contain the given hook, an empty macro will be wrapped.\\n\\n@param `hook` Name of the hook to extract from the token.\\n\\n@param `token` Read token from which to extract the hook.\\n\\n@param `secure` Hook macro wrapped in a secure script.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.8\",\"OPB64name\":\"GETHOOK\"},{\"name\":\"GETSECTION\",\"detail\":\" GETSECTION  section<STRING>\",\"documentation\":\"The `GETSECTION` function pushes onto the stack the name of the current section.\\n\\n@param `section` Name of the current section.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"GETSECTION\"},{\"name\":\"GOLDWRAP\",\"detail\":\"encoder<GTSENCODER>  GOLDWRAP  wrapped<BYTES>\\ngts<GTS>  GOLDWRAP  wrapped<BYTES>\\nwrap<BYTES>  GOLDWRAP  wrapped<BYTES>\\nlist<LIST<GTS>>  GOLDWRAP  lwrapped<LIST<BYTES>>\\nlist<LIST<GTSENCODER>>  GOLDWRAP  lwrapped<LIST<BYTES>>\\nlist<LIST<BYTES>>  GOLDWRAP  lwrapped<LIST<BYTES>>\",\"documentation\":\"The `GOLDWRAP` function wraps a Geo Time Series™ or a GTS Encoder in a deterministic way, by sorting on timestamps but also on values, locations and elevations.\\n\\nThis version of a `WRAP` like function is meant to create a *gold standard* blob from its input. In order to ensure reproducibility of the processs, attributes should be dropped prior to calling `GOLDWRAP`.\\n\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `wrap` Wrapped Geo Time Series™ instance to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders to wrap.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"GOLDWRAP\"},{\"name\":\"GROUPBY\",\"detail\":\"list<LIST> macro<MACRO>  GROUPBY  grouped<LIST>\",\"documentation\":\"The `GROUPBY` function groups the elements of a list according to the value returned by a macro.\\n\\n@param `macro` Macro used for grouping, consumes an element off the stack and produces a value on the stack.\\n\\n@param `list` List of elements to group.\\n\\n@param `grouped` List of groups, each group is a list whose first element is the group key and whose second element is the sublist of `list` for which `macro` produced the same value.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"GROUPBY\"},{\"name\":\"GRUBBSTEST\",\"detail\":\"gts<GTS> mad<BOOLEAN> alpha<DOUBLE>  GRUBBSTEST  result<LIST<LONG>>\\ngts<GTS> mad<BOOLEAN>  GRUBBSTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> mad<BOOLEAN> alpha<DOUBLE>  GRUBBSTEST  resultList<LIST>\\ngtsList<LIST<GTS>> mad<BOOLEAN>  GRUBBSTEST  resultList<LIST<LIST<LONG>>>\",\"documentation\":\"The `GRUBBSTEST` function detects an outlier in a GTS (or a LIST of GTS), by applying a \\n[Grubbs’](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h1.htm) test.\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nIt tests whether there is exactly a single outlier in a GTS or not. For an iterative version which can detect multiple outliers, use instead\\n[`ESDTEST`](/doc/ESDTEST).\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> ### Reference \\n> Grubbs, Frank (February 1969). “Procedures for Detecting Outlying Observations in Samples”. Technometrics (Technometrics, Vol. 11, No. 1).\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"GRUBBSTEST\"},{\"name\":\"GTSHHCODE->\",\"detail\":\"hhcode<LONG>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<STRING>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<BYTES>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\",\"documentation\":\"The `GTSHHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude. This function is very similar to [`HHCODE->`](/doc/H3W2IoG4AIs) except that when given the internal value used by Geo Time Series™ for a missing location it pushes back `NaN NaN`.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GpGIH3W2IoG4AIs\"},{\"name\":\"GZIP\",\"detail\":\"string<STRING>  GZIP  compressed<BYTES>\\nbytes<BYTES>  GZIP  compressed<BYTES>\",\"documentation\":\"The `GZIP` function compresses a STRING or a byte array using the [gzip](https://en.wikipedia.org/wiki/Gzip) algorithm. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"GZIP\"},{\"name\":\"HASH\",\"detail\":\"str<STRING>  HASH  result<LONG>\\nbytes<BYTES>  HASH  result<LONG>\",\"documentation\":\"Computes a 64 bits hash of the string or byte array on top of the stack.\\n\\n@param `str` String to hash\\n\\n@param `bytes` Bytes to hash\\n\\n@param `result` 64bit hash\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"HASH\"},{\"name\":\"HAVERSINE\",\"detail\":\"p1_latitude<NUMBER> p1_longitude<NUMBER> p2_latitude<NUMBER> p2_longitude<NUMBER>  HAVERSINE  haversineDistance<DOUBLE>\",\"documentation\":\"The `HAVERSINE` function consumes two coordinates and pushes back a **DOUBLE** [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance) in meters.\\n\\n@param `p2_longitude` Point 2 longitude.\\n\\n@param `p2_latitude` Point 2 latitude.\\n\\n@param `p1_longitude` Point 1 longitude.\\n\\n@param `p1_latitude` Point 1 latitude.\\n\\n@param `haversineDistance` Great circle distance using the haversine fonction.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"HAVERSINE\"},{\"name\":\"HEADER\",\"detail\":\"name<STRING> value<STRING>  HEADER \",\"documentation\":\"The `HEADER` function allows you to set custom headers which should be returned in the HTTP response. This obviously works only for the `/exec` Warp 10 endpoint.\\n\\n@param `name` Name of HTTP header to return, MUST start with `X-`, *i.e.* be a custom header.\\n\\n@param `value` Value to return for the `name` header. If `NULL`, the specified header is removed from the list of headers to return.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"HEADER\"},{\"name\":\"HEX->\",\"detail\":\"input<STRING>  HEX->  output<BYTES>\",\"documentation\":\"Converts a hexadecimal string representation into a bytes array.\\nBytes array cannot be represented on the stack.\\n\\n@param `input` A valid hexadecimal string.\\n\\n@param `output` Bytes Array from input. Seen as null on the stack.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H3KNAIs\"},{\"name\":\"HEXTOB64\",\"detail\":\"input<STRING>  HEXTOB64  output<STRING>\",\"documentation\":\"Decodes the hex encoded content on top of the stack and \\nimmediately re-encode it in base64. This enables you to \\nconvert encoded content which would not be valid UTF-8 encoding \\nfrom hexadecimal to base64.      \\n\\n@param `input` A valid hexadecimal string\\n\\n@param `output` Base64 representation of input\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOB64\"},{\"name\":\"HEXTOBIN\",\"detail\":\"input<STRING>  HEXTOBIN  output<STRING>\",\"documentation\":\"Converts a string representing a hexadecimal number into a string representing a binary number.\\n\\nThe `HEXTOBIN` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from hexadecimal to binary.\\n\\n@param `input` The string representing a hexadecimal number\\n\\n@param `output` The string representing a binary number\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOBIN\"},{\"name\":\"HHCODE->\",\"detail\":\"hhcode<LONG>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<STRING>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<BYTES>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\",\"documentation\":\"The `HHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"H3W2IoG4AIs\"},{\"name\":\"HHCODE.BBOX\",\"detail\":\"hhCode<STRING> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<LONG> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<BYTES> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<STRING>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<BYTES>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\",\"documentation\":\"The `HHCODE.BBOX` function returns the bounding box of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the bounding box representing the lat/lon of North-Easth and South-West corners of the bbox.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `latSW` Latitude of the south west corner of the bounding box\\n\\n@param `lonSW` Longitude of the south west corner of the bounding box\\n\\n@param `latNE` Latitude of the north east corner of the bounding box\\n\\n@param `lonNE` Longitude of the north east corner of the bounding box\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.BBOX\"},{\"name\":\"HHCODE.CENTER\",\"detail\":\"hhCode<STRING> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<LONG> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<BYTES> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<STRING>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<BYTES>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\",\"documentation\":\"The `HHCODE.CENTER` function returns the center of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the center and returns its lat/lon.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `lat` Latitude of the center of the given HHCode\\n\\n@param `lon` Longitude of the center of the given HHCode\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.CENTER\"},{\"name\":\"HHCODE.EAST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.EAST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.EAST` function returns the cell east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.EAST\"},{\"name\":\"HHCODE.NORTH\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.NORTH` function returns the cell north of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH\"},{\"name\":\"HHCODE.NORTH.EAST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH.EAST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.NORTH.EAST` function returns the cell north east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.EAST\"},{\"name\":\"HHCODE.NORTH.WEST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH.WEST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.NORTH.WEST` function returns the cell north west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.WEST\"},{\"name\":\"HHCODE.SOUTH\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.SOUTH` function returns the cell south of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH\"},{\"name\":\"HHCODE.SOUTH.EAST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH.EAST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.SOUTH.EAST.EAST` function returns the cell south east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.EAST\"},{\"name\":\"HHCODE.SOUTH.WEST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH.WEST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.SOUTH.WEST` function returns the cell south west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.WEST\"},{\"name\":\"HHCODE.WEST\",\"detail\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.WEST  outputHHCode<BYTES>\",\"documentation\":\"The `HHCODE.WEST` function returns the cell west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.WEST\"},{\"name\":\"HIDE\",\"detail\":\"levels<LONG>  HIDE  hidden<LONG>\",\"documentation\":\"The `HIDE` function hides some levels of the stack to the rest of the executing code. This allows a kind of protection for levels which should not be accessed by a macro call for example. Note that this is not a real protection since a call to [`SHOW`](/doc/SHOW) could reveal the hidden levels.\\n\\nThe hidden levels are always the deepest. Depending on the `levels` parameter to the call to `HIDE`, the hidden levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there remains at most a certain number ((*abs(`levels`)*) with `levels` < 0).\\n\\nWhen called with `NULL` as parameter, `HIDE` will hide all the visible levels.\\n\\nThe number of newly hidden levels is returned.\\n\\n@param `levels` Number of levels to hide or to remain visible, or `NULL` to hide them all.\\n\\n@param `hidden` Number of levels actually hidden.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"HIDE\"},{\"name\":\"HLOCATE\",\"detail\":\"gts<LIST<GTS>>  HLOCATE  result<LIST>\",\"documentation\":\"The `HLOCATE` function locates the HBase regions containing a list of Geo Time Series™.\\n\\nThis function only works with the distributed version of Warp 10™.\\n\\nIt outputs a list of lists containing a GTS selector, the host and port of the RegionServer currently serving the region and the region id of a region containing data for this GTS.\\n\\n@param `gts` List of Geo Time Series™ to locate.\\n\\n@param `result` List of GTS, RegionServer, region tuples.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.2.13\",\"OPB64name\":\"HLOCATE\"},{\"name\":\"HULLSHAPE\",\"detail\":\"list<LIST>  HULLSHAPE  shape<LIST>\\n{ list<LIST>  } HULLSHAPE  shape<LIST>\",\"documentation\":\"Return the shape of a tensor (or multidimensional array) that would be able to contain all the values of an input nested list. The size of the returned shape is equal to the deepest level of nesting plus one. Its i-th value is equal to the size of the largest list that is nested i levels deep.\\n\\n@param `list` The input list.\\n\\n@param `shape` The hull shape of the input list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"HULLSHAPE\"},{\"name\":\"HUMANDURATION\",\"detail\":\"duration<LONG>  HUMANDURATION  humanReadableDuration<STRING>\",\"documentation\":\"The `HUMANDURATION` function consumes a **LONG** duration and push back an easily readable **STRING** representation of this duration.\\n\\nThe format of the pushed back **STRING** is **[Dd][Hh][Mm]S.XXXXXXs** with D as days, H as hours, M as minutes, S as seconds and XXXXXX the number of ms (3 digits), us (6 digits) or ns (9 digits) depending on the platform configuration. If the duration is less than a day, Dd is omitted, sames goes with Hh and Mm.\\n\\n@param `duration` Duration expressed in the platform time unit.\\n\\n@param `humanReadableDuration`  A representation of the duration, easily readable for a human.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"HUMANDURATION\"},{\"name\":\"HYBRIDTEST\",\"detail\":\"gts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE> parameters<MAP>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG> parameters<MAP>  HYBRIDTEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE> parameters<MAP>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> parameters<MAP>  HYBRIDTEST  result<LIST<LIST<LONG>>>\",\"documentation\":\"The `HYBRIDTEST` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\nLike [`STLESDTEST`](/doc/STLESDTEST), `HYBRIDTEST` performs an [`ESDTEST`](/doc/ESDTEST) onto a GTS that have been relieved of its seasonal and trend part. \\nBut unlike the mentioned test, [`STL`](/doc/STL) and [`ESDTEST`](/doc/ESDTEST) are performed piecewise. Plus, the trend is approximated with the piecewise \\nmedian instead of the trend part of the [`STL`](/doc/STL) decomposition.\\n\\nA LIST of ticks (or a LIST of LIST of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis technique was first developped at [Twitter](https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series).\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ## References\\n> - Owen Vallis, Jordan Hochenbaum, Arun Kejariwal. “A Novel Technique for Long-Term Anomaly Detection in the Cloud”, Twitter Inc (2014).\\n> - Cleveland, Robert B., et al. “STL: A seasonal-trend decomposition procedure based on loess.” Journal of Official Statistics 6.1 (1990): 3-73.\\n> - Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n\\n@param `parameters` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `lgts` List of [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST\"},{\"name\":\"HYBRIDTEST2\",\"detail\":\"gts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST2  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST2  result<LIST<LONG>>\\ngtsList<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST2  result<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST2  result<LIST<LIST<LONG>>>\",\"documentation\":\"The `HYBRIDTEST2` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\n`HYBRIDTEST2` is almost the same procedure than [`HYBRIDTEST`](/doc/HYBRIDTEST) except that it does not use [`STL`](/doc/STL) decomposition for the \\nseasonal extract.\\n\\nThe seasonal part is approximated by pondering each value with the [entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29) of the \\n[modified Z-score](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm) of its seasonal subseries (series with only the values of the \\nsame season).\\n\\nThis test is usually preferred when it is meaningful to think in term of entropy, for example when the GTS represents counters of events. Also as it \\ndoes not use [`STL`](/doc/STL) decomposition, it is not prone to border effects, but at the cost of not detecting slight outliers.\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n@param `gtsList` List of GTS\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST2\"},{\"name\":\"HYPOT\",\"detail\":\"x<NUMBER> y<NUMBER>  HYPOT  result<DOUBLE>\\nx<NUMBER> ly<LIST<NUMBER>>  HYPOT  lresult<LIST<DOUBLE>>\\nlx<LIST<NUMBER>> y<NUMBER>  HYPOT  lresult<LIST<DOUBLE>>\",\"documentation\":\"HYPOT function returns the radius r from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta), r = sqrt(x²+y²).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `result` radius r in polar coordinates\\n\\n@param `lresult` List of radiuses r in polar coordinates\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYPOT\"},{\"name\":\"IDENT\",\"detail\":\" IDENT  ident<STRING>\",\"documentation\":\"The `IDENT` function pushes onto the stack the value of the system property `warp.ident`.\\n\\n@param `ident` The value of the `warp.ident` property.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDENT\"},{\"name\":\"IDWT\",\"detail\":\"gts<GTS> wavelet<STRING>  IDWT  result<GTS>\",\"documentation\":\"The `IDWT` function computes an Inverse [Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Discrete_wavelet_transform) on a Geo Time Series™.\\n\\nThe names of the available Wavelet are the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\n\\n@param `wavelet` Wavelet to consider\\n\\n@param `gts` Geo Time Series™ which contains the wavelet coefficients as is returned by [`FDWT`](/doc/FDWT).\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDWT\"},{\"name\":\"IEEEREMAINDER\",\"detail\":\"dividend<NUMBER> divisor<NUMBER>  IEEEREMAINDER  result<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  IEEEREMAINDER  lresult<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  IEEEREMAINDER  lresult<LIST<LONG>>\",\"documentation\":\"The `IEEEREMAINDER` function consumes two parameters, a dividend f1 and a divisor f2. This function push the remainder onto the stack as\\nprescribed by the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_754-1985).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` Dividend, converted as DOUBLE if not already the case.\\n\\n@param `divisor` Divisor, converted as DOUBLE if not already the case.\\n\\n@param `result` Remainder\\n\\n@param `ldividend` List of dividends, converted as DOUBLE if not already the case.\\n\\n@param `ldivisor` List of divisors, converted as DOUBLE if not already the case.\\n\\n@param `lresult` List of remainders\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"IEEEREMAINDER\"},{\"name\":\"IFFT\",\"detail\":\"real<GTS> im<GTS>  IFFT  result<GTS>\",\"documentation\":\"The `IFFT` function computes an Inverse [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) of two Geo Time Series™ \\nrepresenting real and imaginary parts of FFT coefficients.\\n\\nThe result is the reconstructed Geo Time Series™. The ticks of this reconstructed GTS are the coefficient indices. They must be multipled by the original \\nbucketspan to space the ticks according to the decomposed Geo Time Series™. The bucketspan is equal to `X / (n * factor)` where `X` is the number of time \\nunits in a second, `n` is the number of coefficients and `factor` is the scale factor returned by `FFT`.\\n\\n@param `im` GTS containing the imaginary part\\n\\n@param `real` GTS containing the real parts of the `FFT` coefficients\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFFT\"},{\"name\":\"IFT\",\"detail\":\"if<MACRO> then<MACRO>  IFT  result<ANY*>\\ncheck<BOOLEAN> then<MACRO>  IFT  result<ANY*>\",\"documentation\":\"The `IFT` function is a conditional construct which will run a macro only if a boolean condition is true. The condition can either be a boolean on the stack or the result of a macro run.\\n\\n@param `check` Boolean which will be checked as the conditional test.\\n\\n@param `if` Macro which will be executed to determine the conditional test. This macro must leave a boolean on the stack.\\n\\n@param `then` Macro which is executed if the conditional test is `true`.\\n\\n@param `result` State of the stack after the `then` macro is executed.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFT\"},{\"name\":\"IFTE\",\"detail\":\"if<MACRO> then<MACRO> else<MACRO>  IFTE  result<ANY*>\\ncondition<BOOLEAN> then<MACRO> else<MACRO>  IFTE  result<ANY*>\",\"documentation\":\"The `IFTE` function is a conditional construct which evaluates a condition and executes one of two macros depending on the condition (`true` or `false`). The condition can either be a BOOLEAN value on the stack or a macro which will be executed and must leave a BOOLEAN on the stack.\\n\\n@param `else` Macro executed if the condition is `false`.\\n\\n@param `then` Macro executed if the condition is `true`.\\n\\n@param `if` Macro executed to evaluate the condition. Must leave a BOOLEAN on top of the stack.\\n\\n@param `condition` Boolean value used as the condition.\\n\\n@param `result` Result of the execution of either the `then` or `else` macro.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFTE\"},{\"name\":\"IMMUTABLE\",\"detail\":\"list<LIST>  IMMUTABLE  immutableList<LIST>\\nmap<MAP>  IMMUTABLE  immutableMap<MAP>\\nset<SET>  IMMUTABLE  immutableSet<SET>\\nvector<VLIST>  IMMUTABLE  immutableVector<VLIST>\",\"documentation\":\"Transforms a collection (**LIST**, **MAP**, **VLIST**, **SET**) into an immutable one. Any attempt to modify the immutable collection will fail. The original collection is not modified.\\n\\n@param `list` List to wrap into an immutable wrapper.\\n\\n@param `map` Map to wrap into an immutable wrapper.\\n\\n@param `set` Set to wrap into an immutable wrapper.\\n\\n@param `vector` Vector to wrap into an immutable wrapper.\\n\\n@param `immutableList` Immutable version of 'list'.\\n\\n@param `immutableMap` Immutable version of 'map'.\\n\\n@param `immutableSet` Immutable version of 'set'.\\n\\n@param `immutableVector` Immutable version of 'vector'.\\n\\n\",\"tags\":[\"lists\",\"maps\",\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"IMMUTABLE\"},{\"name\":\"IMPORT\",\"detail\":\"prefix<STRING> as<STRING>  IMPORT \",\"documentation\":\"The `IMPORT` function allows to create aliases for macro name prefixes. This is handy when accessing macros from WarpFleet™ repositories which might have multiple versions and/or long group and artifact ids. When fetching a macro, the *imported* prefixes will be scanned and the longest matching one will be replaced by the associated alias.\\n\\n@param `prefix` Original prefix to *import*.\\n\\n@param `as` Name under which `prefix` will be imported.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"IMPORT\"},{\"name\":\"INCREMENTEXACT\",\"detail\":\"value<NUMBER>  INCREMENTEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  INCREMENTEXACT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `INCREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value incremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be incremented by one\\n\\n@param `result` The incremented value\\n\\n@param `lvalue` List of values to be incremented by one\\n\\n@param `lresult` List of incremented values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"INCREMENTEXACT\"},{\"name\":\"INFLATE\",\"detail\":\"compressed<BYTES>  INFLATE  uncompressed<BYTES>\",\"documentation\":\"Decompresses a byte array containing data compressed by [`DEFLATE`](doc/DEFLATE).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"INFLATE\"},{\"name\":\"INFO\",\"detail\":\"{ plugin<STRING> ext<STRING> name<STRING> since<STRING> deprecated<STRING> deleted<STRING> version<STRING> tags<LIST> desc<STRING> sig<LIST> params<MAP> related<LIST> examples<LIST> conf<LIST>  } INFO \",\"documentation\":\"Generate documentation of a function or a macro.\\n\\n@param `conf` String list of related configuration keys existing in the Warp 10 configuration.\\n\\n@param `examples` String list of WarpScript examples.\\n\\n@param `related` String list of related functions.\\n\\n@param `params` Map describing the parameters defined in `sig`.\\n\\n@param `sig` List of signatures. Each signature is a **LIST** with 2 lists (input and output) which contain parameter definitions: *eg* `param1:STRING` in stack order (top first)\\n\\n@param `desc` Description of the function or macro.\\n\\n@param `tags` String list tags (*eg* categories).\\n\\n@param `version` Version of the Warp 10 distribution on which this funcion is available (`standalone` | `distributed` | `all` | `pkg` | `ext` | `plugin`)\\n\\n@param `deleted` Version's number of Warp 10 where this function (or macro) was deleted.\\n\\n@param `deprecated` Version's number of Warp 10 where this function (or macro) was deprecated.\\n\\n@param `since` Version's number of Warp 10 where this function (or macro) was included.\\n\\n@param `name` Name of the function or macro.\\n\\n@param `ext` Fully qualified class name of the WarpScript Extension defining the function.\\n\\n@param `plugin` Fully qualified class name of the WarpScript Plugin defining the function.\\n\\n\",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFO\"},{\"name\":\"INFOMODE\",\"detail\":\" INFOMODE \",\"documentation\":\"Toggles the info mode ON or OFF depending on its current state. Default is OFF when the stack is created.\\n\\nWhen info mode is ON, the [`INFO`](/doc/INFO) function pushes its map parameter on the stack and stops the current execution as [`STOP`](/doc/STOP) would do.\\n\\n\",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFOMODE\"},{\"name\":\"INTEGRATE\",\"detail\":\"gts<GTS> initial<NUMBER>  INTEGRATE  result<GTS>\\nlgts<LIST<GTS>> initial<NUMBER>  INTEGRATE  lresult<LIST<GTS>>\",\"documentation\":\"The `INTEGRATE` function takes a GTS or a list thereof and integrates it/them, considering the value at each tick is a rate of change per second.\\n\\n@param `initial` Initial value\\n\\n@param `gts` GTS to integrate\\n\\n@param `lgts` List of GTS to integrate\\n\\n@param `result` Integrated GTS\\n\\n@param `lresult` List of integrated GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTEGRATE\"},{\"name\":\"INTERPOLATE\",\"detail\":\"gts<GTS>  INTERPOLATE  result<GTS>\\ngtsList<LIST<GTS>>  INTERPOLATE  resultList<LIST<GTS>>\",\"documentation\":\"The `INTERPOLATE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with by interpolating linearly. \\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled bucketized GTS\\n\\n@param `resultList` list of filled bucketized GTS\\n\\n\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERPOLATE\"},{\"name\":\"INTERSECTION\",\"detail\":\"setA<SET> setB<SET>  INTERSECTION  output<SET>\",\"documentation\":\"Computes the intersection &#x2229; of two sets.\\n\\nThe `INTERSECTION` function consumes two sets from the top of the stack and pushes back its mathematical intersection (ie: the elements in common).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x2229; *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERSECTION\"},{\"name\":\"INV\",\"detail\":\"matrix<MATRIX>  INV  inverse<MATRIX>\",\"documentation\":\"Inverts a matrix. The inversion is attempted using the [LU Decomposition](https://en.wikipedia.org/wiki/LU_decomposition) algorithm.\\n\\nIf the matrix is singular or not square an error will be raised.\\n\\n@param `matrix` Matrix to invert.\\n\\n@param `inverse` Inverse of the original matrix.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"INV\"},{\"name\":\"ISAUTHENTICATED\",\"detail\":\" ISAUTHENTICATED  result<BOOLEAN>\",\"documentation\":\"Returns true or false whether or not the stack is authenticated\\n\\n@param `result` True if the stack is authenticated, false otherwise\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ISAUTHENTICATED\"},{\"name\":\"ISNULL\",\"detail\":\"p<ANY>  ISNULL  result<BOOLEAN>\",\"documentation\":\"The `ISNULL` function consumes a parameter p from the top of the stack and pushes onto the stack true if p is null, else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p is null\\n\\n\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNULL\"},{\"name\":\"ISNaN\",\"detail\":\"p<ANY>  ISNaN  result<BOOLEAN>\",\"documentation\":\"The `ISNaN` function consumes a numeric parameter p from the top of the stack and pushes onto the stack true if p is Not a Number (NaN), else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p a Double and is NaN, false  otherwise\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNaN\"},{\"name\":\"ISO8601\",\"detail\":\"timestamp<LONG>  ISO8601  iso8601dateAndTime<STRING>\\ntimestamp<LONG> timezone<STRING>  ISO8601  iso8601dateAndTime<STRING>\",\"documentation\":\"The `ISO8601` function consumes an optional **STRING** timezone and a **LONG** UTC timestamp and pushes back a **STRING** representing the date and time according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\\n\\nDepending on the platform time unit, the part representing seconds can have 3, 6 or 9 significant figures respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time representation.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `iso8601dateAndTime` Representation of the date and time of the given timestamp for the givent timezone according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISO8601\"},{\"name\":\"ISODURATION\",\"detail\":\"duration<LONG>  ISODURATION  iso8601duration<STRING>\",\"documentation\":\"The `ISODURATION` function consumes a **LONG** duration in platform unit and pushes back a **STRING** reresenting an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Whatever the platform time unit is, the representation maximum resolution is milliseconds.\\n\\nThe format of the ISO 8601 representation is `PThHmMs.xS` with `h` as hours, `m` as minutes, `s` as seconds and `x` as milliseconds. If any of these value is zero, the value and unit are omitted. The only exception is for a duration of 0 which is represented as `PT0S`. If the duration is negative, `h`, `m` and `s`, if displayed, are negative numbers. \\n\\n@param `duration` A duration expressed in platform time unit.\\n\\n@param `iso8601duration` A representation of the consumed duration according to ISO 8601.\\n\\n\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISODURATION\"},{\"name\":\"ISONORMALIZE\",\"detail\":\"gts<GTS>  ISONORMALIZE  result<GTS>\\ngtsList<LIST<GTS>>  ISONORMALIZE  resultList<LIST<GTS>>\",\"documentation\":\"The `ISONORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between -1 and 1 (i.e. it replaces X by \\n(X - mean)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISONORMALIZE\"},{\"name\":\"JOIN\",\"detail\":\"string<STRING*> sep<STRING> n<LONG>  JOIN  result<STRING>\\nobjects<LIST> sep<STRING>  JOIN  result<STRING>\",\"documentation\":\"Join N strings with the given separator.\\n\\n@param `n` Number of elements to join that it needs to take from the top of the stack.\\n\\n@param `sep` Separator used to join the strings.\\n\\n@param `string` One or more string on the stack.\\n\\n@param `objects` List of objects whose string representations are to be joined.\\n\\n@param `result` Joined string.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"JOIN\"},{\"name\":\"JSON->\",\"detail\":\"json<STRING>  JSON->  resultMap<MAP>\\njson<STRING>  JSON->  resultList<LIST>\",\"documentation\":\"The `JSON->` function parses a string as [JSON](http://json.org/) from the top of the stack and pushes the result onto the stack.\\n\\n@param `json` String JSON representation\\n\\n@param `resultMap` Map JSON representation if it is a JSON object\\n\\n@param `resultList` List JSON representation if it is a JSON array\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H_CEIXoy\"},{\"name\":\"JSONLOOSE\",\"detail\":\"\",\"documentation\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONLOOSE` function configures the stack to send results in a loose [JSON](http://json.org/) format where `NaN` and `Infinite` are valid values.\\n\\nIf the [JSON](http://json.org/) parser you’re using is strict, you should either configurate the [`JSONSTRICT`](/doc/JSONSTRICT) mode or dealing with \\n`NaN` and `Infinite` values outside the parser.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONLOOSE\"},{\"name\":\"JSONSTACK\",\"detail\":\" JSONSTACK \",\"documentation\":\"Select the JSON format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"JSONSTACK\"},{\"name\":\"JSONSTRICT\",\"detail\":\"\",\"documentation\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONSTRICT` function configures the stack to send results in strict [JSON](http://json.org/) format.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONSTRICT\"},{\"name\":\"KEYLIST\",\"detail\":\"map<MAP>  KEYLIST  result<LIST>\",\"documentation\":\"Gets keys from a **MAP**.\\n\\nThe function `KEYLIST` extracts the keys of a map on the top of the stack and pushes on the stack a list with those keys. The map is consumed.      \\n\\n@param `map` Map from which you want to extract keys\\n\\n@param `result` List of keys\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"KEYLIST\"},{\"name\":\"KURTOSIS\",\"detail\":\"gts<GTS> bessel<BOOLEAN>  KURTOSIS  kurtosis<DOUBLE>\\nlgts<LIST<GTS>> bessel<BOOLEAN>  KURTOSIS  lkurtosis<LIST<DOUBLE>>\",\"documentation\":\"The `KURTOSIS` function computes the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a Geo Time Series™ or a list thereof.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the kurtosis.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `kurtosis` Computed kurtosis of the Geo Time Series™ instance.\\n\\n@param `lkurtosis` List of computed kurtosis of the Geo Time Series™ instances.\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.2.13\",\"OPB64name\":\"KURTOSIS\"},{\"name\":\"LABELS\",\"detail\":\"gts<GTS>  LABELS  return<MAP>\\nencoder<GTSENCODER>  LABELS  return<MAP>\",\"documentation\":\"The `LABELS` function consumes a GTS from the stack, extracts its labels, puts them in a map and pushes the map onto the stack.\\n\\n@param `gts` The Geo Time Series™ to get the labels from.\\n\\n@param `encoder` The Geo Time Series™ Encoder to get the labels from.\\n\\n@param `return` Labels MAP\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LABELS\"},{\"name\":\"LASTACTIVITY\",\"detail\":\"gts<GTS>  LASTACTIVITY  lastactivity<LONG>\\nencoder<GTSENCODER>  LASTACTIVITY  lastactivity<LONG>\\nlgts<LIST<GTS>>  LASTACTIVITY  llastactivity<LONG>\\nlencoder<LIST<GTSENCODER>>  LASTACTIVITY  llastactivity<LONG>\",\"documentation\":\"Extracts the timestamp of last activity recorded in the Geo Time Series™ metadata.\\n\\nThe timestamp is expressed as platform time units elapsed since the Unix Epoch.\\n\\n@param `gts` Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `encoder` Geo Time Series™ encoder from which to extract the last activity timestamp.\\n\\n@param `lgts` List of Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `lencoder` List of Geo Time Series™ encoders from which to extract the last activity timestamp.\\n\\n@param `lastactivity` Timestamp of last activity.\\n\\n@param `llastactivity` List of timestamps of last activity.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.0.0\",\"OPB64name\":\"LASTACTIVITY\"},{\"name\":\"LASTBUCKET\",\"detail\":\"gts<GTS>  LASTBUCKET  result<LONG>\",\"documentation\":\"The function `LASTBUCKET` consumes a GTS off the stack and pushes its lastbucket onto the stack.\\n\\nNote: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Last bucket timestamp\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTBUCKET\"},{\"name\":\"LASTSORT\",\"detail\":\"gtsList<LIST<GTS>>  LASTSORT  result<LIST<GTS>>\",\"documentation\":\"Sorts a list of Geo Time Series™ according to their most recent value. If most recent values are identical, ticks will be compared, the most recent \\nappearing first. If the ticks are also identical, then metadata (class and labels) will be compared.\\n\\nUse this function to compute Top N queries.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Sorted list of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTSORT\"},{\"name\":\"LASTTICK\",\"detail\":\"gts<GTS>  LASTTICK  result<LONG>\\nlgts<LIST<GTS>>  LASTTICK  result<LONG>\",\"documentation\":\"The `LASTTICK` function pushes on the stack the newest tick of the Geo Time Series™ on top of the stack or, if the GTS is bucketized, its last bucket.\\n\\nWhen applied to a list of GTS, `LASTTICK` will return the greatest last tick found across all Geo Time Series™.\\n\\nIf the GTS does not have values, `Long.MIN_VALUE` is pushed.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `result` Last tick value.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTTICK\"},{\"name\":\"LBOUNDS\",\"detail\":\"lower<DOUBLE> upper<DOUBLE> n<LONG>  LBOUNDS  bounds<LIST<DOUBLE>>\",\"documentation\":\"The `LBOUNDS` function computes bounds which divide a specified interval into `n` intervals of equal length.\\n\\nThe result of `LBOUNDS` is a list of `n+1` bounds, defining `n` intervals inside the specified range plus the two bounds of this range which define the intervals before and after the range.\\n\\n@param `n` Number of intervals to generate.\\n\\n@param `upper` Upper bound of the range to subdivide.\\n\\n@param `lower` Lower bound of the range to subdivide.\\n\\n@param `bounds` List of computed bounds.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LBOUNDS\"},{\"name\":\"LFLATMAP\",\"detail\":\"inputlist<LIST> macro<MACRO>  LFLATMAP  results<LIST>\\ninputlist<LIST> macro<MACRO> index<BOOLEAN>  LFLATMAP  results<LIST>\",\"documentation\":\"The `LFLATMAP` function applies a macro on each element of a list, producing a list \\nwith the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the list index on top and the element \\nat that particular index below it. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\nDifference with `LMAP`: if the macro returns a list, then LFLATMAP will produce a \\nlist with the elements of the macro output list (_i.e._ it will _flatten_ the list). \\n\\nDifference with `LMAP FLATTEN`: flatten will do the list flattening recursively. \\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count -1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LFLATMAP\"},{\"name\":\"LIMIT\",\"detail\":\"maxDataPoints<LONG>  LIMIT \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and \\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `LIMIT` function modifies the maximum number of datapoints which can be fetched during a script execution by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call `AUTHENTICATE` with a valid token.\\n\\n@param `maxDataPoints` Maximal data points retrieved from database in a single FETCH\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"LIMIT\"},{\"name\":\"LINEOFF\",\"detail\":\"\",\"documentation\":\"The `LINEOFF` function disables the automatic labelling of WarpScript code as enabled by `LINEON`.      \\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEOFF\"},{\"name\":\"LINEON\",\"detail\":\"\",\"documentation\":\"The `LINEON` function enables the automatic section labelling at the beginning of each line of the input WarpScript code. This handy feature greatly simplifies the debug process as the exact line number where an error happens will appear in the error message embedded as a section name of the form `[Line #xx]`.\\n\\nThis automatic labelling only works with the `/exec` endpoint of Warp 10.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEON\"},{\"name\":\"LIST->\",\"detail\":\"input<LIST>  LIST->  elements<ANY*> listlength<LONG>\",\"documentation\":\"The `LIST->` function extracts the elements of the **LIST** at the top of the stack\\nand pushes them onto the stack one by one. The function then pushes\\nonto the stack the number of elements that were in the **LIST**.\\n\\n@param `input` The input list, will be consumbed\\n\\n@param `listlength` The length N of input\\n\\n@param `elements` N elements pushed on the stack\\n\\n\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"I3_IK1oy\"},{\"name\":\"LMAP\",\"detail\":\"inputlist<LIST> macro<MACRO>  LMAP  results<LIST>\\ninputlist<LIST> macro<MACRO> index<BOOLEAN>  LMAP  results<LIST>\",\"documentation\":\"The `LMAP` function applies a macro on each element of a **LIST**, producing a **LIST** with the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **LIST** index on top and the element at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LMAP\"},{\"name\":\"LOAD\",\"detail\":\"name<STRING>  LOAD  value<ANY>\\nregister<LONG>  LOAD  value<ANY>\",\"documentation\":\"The `LOAD` function pushes onto the stack the value currently associated with a symbol name.      \\n\\nIf the symbol is not defined, an error will be raised.\\n\\n@param `name` Name of symbol whose value should be retrieved.\\n\\n@param `register` Register number whose value should be retrieved.\\n\\n@param `value` Retrieved value.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOAD\"},{\"name\":\"LOCATIONOFFSET\",\"detail\":\"gts<GTS> distance<NUMBER>  LOCATIONOFFSET  result<GTS>\\ngtsList<LIST<GTS>> distance<NUMBER>  LOCATIONOFFSET  resultList<LIST<GTS>>\",\"documentation\":\"The `LOCATIONOFFSET` function downsamples a Geo Time Series™ by retaining the first and last datapoints and only those datapoints which are \\nmore than a given distance away.\\n\\n@param `distance` Distance in meters\\n\\n@param `gts` Geo Time Series™ to downsample\\n\\n@param `gtsList` List of Geo Time Series™ to downsample\\n\\n@param `result` Downsampled Geo Time Series™\\n\\n@param `resultList` List of downsampled Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONOFFSET\"},{\"name\":\"LOCATIONS\",\"detail\":\"gts<GTS>  LOCATIONS  latitudes<LIST<DOUBLE>> longitudes<LIST<DOUBLE>>\",\"documentation\":\"The `LOCATIONS` function consumes a Geo Time Series™ from the stack, extracts the locations of a Geo Time Series™, puts them in two lists \\n(a list of latitudes and a list of longitudes) and pushes the two lists onto the stack.\\n\\n@param `gts` GTS\\n\\n@param `longitudes` List of longitudes\\n\\n@param `latitudes` List of latitudes\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONS\"},{\"name\":\"LOCSTRINGS\",\"detail\":\"gts<GTS>  LOCSTRINGS  result<LIST<STRING>>\",\"documentation\":\"The `LOCSTRINGS` function extract the locations from a Geo Time Series™ and builds a list of the 64 bits hexadecimal representation of their \\n[HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` List of [HHCode](https://en.wikipedia.org/wiki/HHCode)\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCSTRINGS\"},{\"name\":\"LOG\",\"detail\":\"value<NUMBER>  LOG  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `LOG` function consumes a floating point number x from the top of the stack and pushes back its natural logarithm, log<sub>e</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Natural logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of natural logarithms of the given values\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG\"},{\"name\":\"LOG10\",\"detail\":\"value<NUMBER>  LOG10  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG10  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `LOG10` function consumes a floating point number x from the top of the stack and pushes back its common logarithm, log<sub>10</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Common logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of common logarithms of the given values\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG10\"},{\"name\":\"LOG1P\",\"detail\":\"value<NUMBER>  LOG1P  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG1P  lresult<LIST<DOUBLE>>\",\"documentation\":\"Returns the natural logarithm of the sum of the argument and 1.\\n\\nThe `LOG1P` function consumes a number from the top of the stack and pushes back the natural logarithm for (arg + 1).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Logarithm of (value + 1)\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of logarithm of (value + 1)\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG1P\"},{\"name\":\"LOGEVENT->\",\"detail\":\"logline<STRING>  LOGEVENT->  decodedlog<STRING>\",\"documentation\":\"Warp&nbsp;10™ runner execution logs are encrypted. See [this documentation](/content/03_Documentation/06_Operations/05_Logs/).\\n\\nThe easiest way to read logs is to copy the log output and use this function.\\n\\n\\n@param `logline` The opb64 representation of the aes encrypted log line\\n\\n@param `decodedlog` The decoded logs.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"I3x6GKO4I_FhEV\"},{\"name\":\"LOGMSG\",\"detail\":\"msg<STRING>  LOGMSG \",\"documentation\":\"`LOGMSG` function prints millisecond timestamp and input text on the standard output.\\n\\nThe `LOGMSG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOGMSG\"},{\"name\":\"LOWESS\",\"detail\":\"gts<GTS> bandwidth<LONG>  LOWESS  result<GTS>\\ngtsList<LIST<GTS>> bandwidth<LONG>  LOWESS  lresult<LIST<GTS>>\",\"documentation\":\"The `LOWESS` function consumes a bandwidth (a **LONG**) from the top of the stack, then smooths a GTS or a **LIST** of GTS that are below by using \\nlocal regression.\\n\\nTo obtain a good smoothing, it is advised to choose an odd number of at least 5 as the bandwidth parameter.\\n\\n@param `bandwidth` The bandwitdth parameter is the number of nearest neighbours to consider when applying the local regression.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `gtsList` List of Geo Time Series™.\\n\\n@param `lresult` List of Geo Time Series™ result.\\n\\n@param `result` Geo Time Series™ result.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOWESS\"},{\"name\":\"LR\",\"detail\":\"gts<GTS>  LR  alpha<DOUBLE> beta<DOUBLE>\",\"documentation\":\"Compute the [simple linear regression](https://en.wikipedia.org/wiki/Linear_regression) parameters `alpha` (y-intercept) and `beta` (line slope) for the given numerical Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ on which to compute linear regression.\\n\\n@param `beta` The slope of the line fitted on the GTS values.\\n\\n@param `alpha` The y-intercept of the lined fitted on the GTS values.\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.13\",\"OPB64name\":\"LR\"},{\"name\":\"LSORT\",\"detail\":\"inputlist<LIST>  LSORT  sortedlist<LIST>\",\"documentation\":\"The `LSORT` function sorts the list on the top of the stack.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `inputlist` The reference of the list to sort\\n\\n@param `sortedlist` The original list sorted, this is not a new list object\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LSORT\"},{\"name\":\"LTTB\",\"detail\":\"gts<GTS> samples<LONG>  LTTB  downsampled<GTS>\\nlgts<LIST<GTS>> samples<LONG>  LTTB  ldownsampled<LIST<GTS>>\",\"documentation\":\"The `LTTB` function downsamples a Geo Time Series™ or list thereof using the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"LTTB\"},{\"name\":\"MACROBUCKETIZER\",\"detail\":\"macro<MACRO>  MACROBUCKETIZER  result<AGGREGATOR>\",\"documentation\":\"`MACROBUCKETIZER` converts a macro into a bucketizer which can be used with the [`BUCKETIZE`](/doc/BUCKETIZE) framework.\\n\\nFor each tick in the mapped GTS, the macro will be called with a list containing the following elements on the stack:\\n\\n```js\\n[tick_of_computation,[gts_classes],[label_bucketize],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n@param `macro` Macro used as a bucketizer\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketize\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROBUCKETIZER\"},{\"name\":\"MACROCONFIG\",\"detail\":\"key<STRING>  MACROCONFIG \",\"documentation\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration keys looked up are those built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIG`.\\n\\n`MACROCONFIG` will check if the keys exists, if not it will remove the part of the macro name after the last `/` and will try that new key. It will successively try all names up to the last part of the macro name.\\n\\nIf none of those keys existed, the call will end in error.\\n\\nSo for example, if `MACROCONFIG` is called from a macro `my/test/macro` to retrieve the value associated with `mykey`, it will look up the following keys in the configuration:\\n\\n```\\nmykey@my/test/macro\\nmykey@my/test\\nmykey@my\\n```\\n\\n@param `key` Configuration key to look up.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIG\"},{\"name\":\"MACROCONFIGDEFAULT\",\"detail\":\"key<STRING> default<STRING>  MACROCONFIGDEFAULT \",\"documentation\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration key looked is built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIGDEFAULT`.\\n\\n`MACROCONFIGDEFAULT` will check if the keys exists, if not it will push the provided default value onto the stack, or fail with an error if the default was `NULL`. If the key is found, the associated value is pushed on the stack.\\n\\n@param `key` Configuration key to look up.\\n\\n@param `default` Default value to use if the key was not found, or `NULL` to fail if the key is absent.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGDEFAULT\"},{\"name\":\"MACROCONFIGSECRET\",\"detail\":\"oldSecret<STRING> newSecret<STRING>  MACROCONFIGSECRET \",\"documentation\":\"The `MACROCONFIGSECRET` macro consumes 2 elements on the stack, the current and new secret to be set. If no secret has been set, the function will throw an error.\\n\\nThe secret set by this function is the secret used by [`SETMACROCONFIG`](/doc/SETMACROCONFIG).\\n\\n@param `newSecret` New secret to override the current one.\\n\\n@param `oldSecret` Currently set secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGSECRET\"},{\"name\":\"MACROFILLER\",\"detail\":\"macro<MACRO> prewindow<LONG> postwindow<LONG>  MACROFILLER  filler<FILLER>\",\"documentation\":\"`MACROFILLER` converts a macro into a *filler* which can be used with the [`FILL`](/doc/FILL) function.\\n\\nThe macro will find the following elements on the stack when it is called:\\n\\n```\\n6: Geo Time Series™ to fill. Both this GTS and the one above are only meant to expose the metadata\\n5: Geo Time Series™ of the *other* GTS with a value at the current tick\\n4: list of [ tick latitude longitude elevation value ] for the pre window\\n3: [ tick latitude longitude elevation value ] of the *other* Geo Time Series™\\n2: list of [ tick latitude longitude elevation value ] for the post window\\nTOP: tick which is being filled\\n```\\n\\nIt must leave on the stack a list containing the following elements, in this order:\\n\\n*tick*, *latitude* or `NaN`, *longitude* or `NaN`, *elevation* or `NaN`, *value*\\n\\n\\n@param `macro` Macro to wrap.\\n\\n@param `prewindow` Number of datapoints needed ahead of the missing datapoint.\\n\\n@param `postwindow` Number of datapoints needed after the missing datapoint.\\n\\n@param `filler` Filler instance.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"MACROFILLER\"},{\"name\":\"MACROFILTER\",\"detail\":\"macro<MACRO>  MACROFILTER  result<FILTER>\",\"documentation\":\"`MACROFILTER` converts a macro into a filter which can be used with the [`FILTER`](/doc/FILTER) framework\\n\\nFor each equivalence classes in the filter set of Geo Time Series™, the macro will be called with the following elements on the stack:\\n\\n```\\n[gts], {labels_equivalence_class}\\n```\\n\\nAfter each call the macro is expected to leave a list on the stack.\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROFILTER\"},{\"name\":\"MACROMAPPER\",\"detail\":\"macro<MACRO>  MACROMAPPER  result<AGGREGATOR>\",\"documentation\":\"`MACROMAPPER` converts a macro into a mapper which can be used with the [`MAP`](/doc/MAP) framework.\\n\\nFor each tick in the mapped Geo Time Series™, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROMAPPER` can also create a multivariate mapper, that is, a mapper that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate mapper with MAP, each input GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n\\n@param `macro` Macro to convert\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROMAPPER\"},{\"name\":\"MACROREDUCER\",\"detail\":\"macro<MACRO>  MACROREDUCER  result<AGGREGATOR>\",\"documentation\":\"`MACROREDUCER` converts a macro into a reducer which can be used with the [`REDUCE`](/doc/REDUCE) framework\\n\\nFor each tick in the Geo Time Series™ to reduce, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nEach list have a length of the number of GTSs in the partition. Each missing value are replaced by `null`, each missing tick by the minimum value of long and each missing latitude, longitude or elevation by NaN. The `label_maps` list as one more element at the end compared to the other lists: the common labels for the GTSs of the partition.\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROREDUCER` can also create a multivariate reducer, that is, a reducer that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate reducer with REDUCE, each input List of GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROREDUCER\"},{\"name\":\"MACROTTL\",\"detail\":\"ttl<LONG>  MACROTTL \",\"documentation\":\"In a file defining a server side macro, the `MACROTTL` function defines the time to live of the macro code. If the macro is accessed after this delay has expired and ondemand loading of macros is enabled, it will unconditionnaly be reloaded from disk.\\n\\nThis feature is very useful when you have macros generated dynamically on the server side which change frequently. Using `MACROTTL` you can ensure the newest code is loaded regardless of the rescan interval of the macro directory.\\n\\nIn a the file defining a server side macro, the call to `MACROTTL` should appear before or after the actual macro definition but not within.\\n\\nThe time after which the macro will no longer be valid is the time of the call to `MACROTTL` plus its parameter.\\n\\n@param `ttl` The time to live to apply to the macro, in ms.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MACROTTL\"},{\"name\":\"MAKEGTS\",\"detail\":\"timestamps<LIST> latitudes<LIST> longitudes<LIST> elevations<LIST> values<LIST>  MAKEGTS  result<GTS>\",\"documentation\":\"The `MAKEGTS` function builds a Geo Time Series™ from **LIST**s.\\n\\nThe timestamp and values lists must be of the exact same size.\\nHowever, as latitudes, longitudes and elevations are optional in a Geo Time Series™, these lists can be shorter than the timestamps lists or even empty. If there are missing latitudes, longitudes and elevations, use [`NaN`](/doc/NaN).\\n\\n@param `values` Values of the GTS\\n\\n@param `elevations` Elevations of the GTS\\n\\n@param `longitudes` Longitudes of the GTS\\n\\n@param `latitudes` Latitudes of the GTS\\n\\n@param `timestamps` Timestamps of the GTS\\n\\n@param `result` Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAKEGTS\"},{\"name\":\"MAN\",\"detail\":\"function<STRING>  MAN  url<STRING>\\nany<ANY>  MAN  url<STRING>\\n MAN  url<STRING>\",\"documentation\":\"The `MAN` function returns the help link for a function name.\\n\\nIf the function does not exists, it returns http://www.warp10.io/\\n\\n\\n@param `function` The function name\\n\\n@param `any` Anything except a function name\\n\\n@param `url` URL of the online help\\n\\n\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.2.18\",\"OPB64name\":\"MAN\"},{\"name\":\"MAP\",\"detail\":\"[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> ]  MAP  result<LIST<GTS>>\\n[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> ]  MAP  result<LIST<GTS>>\\n[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> ]  MAP  result<LIST<GTS>>\\ngts<GTS+> { mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> outputTicks<LIST<LONG>>  } MAP  result<LIST<GTS>>\\ngtsList<LIST<GTS>+> { mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> outputTicks<LIST<LONG>>  } MAP  result<LIST<GTS>>\",\"documentation\":\"The `MAP` framework applies a function on values of a Geo Time Series™ that fall into a sliding window.\\n\\nThe `MAP` framework is designed to use an existing MAPPER or a custom MACROMAPPER. It could also accept a macro: the current window is passed as a GTS to the macro. See examples below.\\n\\n@param `result` List of Geo Time Series™, one for each input, whose values are the results of the function application on each sliding window. If the input series is bucketized, the result series will be too unless outputTicks is non null.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `mapper` Mapper function to apply\\n\\n@param `pre` Width of the sliding window before the current tick. This parameter is interpreted as a number of ticks if its value is positive, and as a number of time units if its value is negative. A value of 0 means the sliding window does not cover the past. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the past. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `post` Width of the sliding window after the current tick. Values have the same semantics as for the `pre` parameter. A value of 0 means the sliding window does not cover the future. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the future. Defaults to 0.\\n\\n@param `occurrences` Limit the number of computations to that number. If the value is 0, compute a value for each tick of the input Geo Time Series™. If it is non-negative, compute that many values starting from the oldest to the most recent tick. In the other case, do that many computations in the reverse order. This is useful when you are interested in a single result, like the max or sum of all values. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `step` The step size in number of ticks. The mapper beggins at the oldest tick and goes to the tick `step` after the current one and so on. Defaults to 1.\\n\\n@param `overrideTick` If set to true, the tick value returned by the mapper is used to update the current tick, else it is ignored and the original tick is kept. Defaults to false.\\n\\n@param `outputTicks` If non null, it sets the list of ticks that is traversed to anchor the sliding windows (instead of the ticks of the input Geo Time Series™). In that case, a tick of the input Geo Time Series™ that would be equal to one of these anchor points is counted by a positive `post` if `occurences` is non-negative, or by a positive `pre` if `occurences` is negative.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAP\"},{\"name\":\"MAP->\",\"detail\":\"map<MAP>  MAP->  key<ANY*> value<ANY*> mapsize<LONG>\",\"documentation\":\"The `MAP->` function expands the **MAP** on top of the stack into pairs of elements followed by the number of elements extracted. If the **MAP** was \\ncreated by a call to `->MAP`, the order of the elements will be the same as prior to calling `->MAP`.\\n\\n@param `map` Map to expand\\n\\n@param `key` Key of the pair\\n\\n@param `value` Value of the pair\\n\\n@param `mapsize` The number of key value pushed on the stack.\\n\\n\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"IJ4FAIs\"},{\"name\":\"MAPID\",\"detail\":\"input<MAP>  MAPID  result<STRING>\",\"documentation\":\"Generates a fingerprint of a map.\\n\\n@param `input` Input map\\n\\n@param `result` Fingerprint of the map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAPID\"},{\"name\":\"MARK\",\"detail\":\" MARK  mark<MARK>\",\"documentation\":\"Pushes a mark onto the stack.\\n\\n@param `mark` A MARK instance.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MARK\"},{\"name\":\"MAT->\",\"detail\":\"input<MATRIX>  MAT->  [  result<LIST<LIST<DOUBLE>>>  ]\",\"documentation\":\"The `MAT->` function converts a Matrix into nested lists.\\n\\n\\n@param `input` Matrix to convert\\n\\n@param `result` Nested list of values\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"IJ4JAIs\"},{\"name\":\"MATCH\",\"detail\":\"string<STRING> regexp<STRING>  MATCH  result<LIST<STRING>>\\nstring<STRING> regexp<MATCHER>  MATCH  result<LIST<STRING>>\",\"documentation\":\"The `MATCH` function applies a regular expression (regexp) to a string.\\n\\nIt consumes two parameters from the top of the stack: the regexp pattern and the string to test matching with.\\n\\nIf the string doesn’t match the regexp, the function return an empty list. If it matches, the function will return a list of every matching group.\\n\\nInstead of using a regular expression **STRING**, you can also use the result of [`MATCHER`](/doc/MATCHER) for improved performance.\\n\\n@param `regexp` Regular expression to apply\\n\\n@param `string` String to evaluate\\n\\n@param `result` List of every matching group.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCH\"},{\"name\":\"MATCHER\",\"detail\":\"regexp<STRING>  MATCHER  result<MATCHER>\",\"documentation\":\"The `MATCHER` function will compile a regular expression into an efficient object which can be used by [`MATCH`](/doc/MATCH).\\n\\n@param `regexp` Regular expression to compile\\n\\n@param `result` Compiled regula expression\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCHER\"},{\"name\":\"MAX\",\"detail\":\"p1<LONG> p2<LONG>  MAX  result<LONG>\\np1<LONG> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  MAX  result<LONG>\\np1<COUNTER> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  MAX  result<DOUBLE>\\np1<COUNTER> p2<LONG>  MAX  result<DOUBLE>\\np1<LONG> p2<COUNTER>  MAX  result<DOUBLE>\\nllist<LIST<LONG>>  MAX  sresult<LONG>\\ndlist<LIST<DOUBLE>>  MAX  sresult<DOUBLE>\\nclist<LIST<COUNTER>>  MAX  sresult<LONG>\\nllist<LIST<LONG>> value<LONG>  MAX  lresult<LIST<LONG>>\\nclist<LIST<COUNTER>> value<COUNTER>  MAX  lresult<LIST<LONG>>\\ndlist<LIST<DOUBLE>> value<DOUBLE>  MAX  lresult<LIST<DOUBLE>>\",\"documentation\":\"Returns the greater of two numeric values.\\n\\nThe `MAX` function consumes two numeric parameters from the top of the stack and pushes back the greatest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The larger of p1 and p2.\\n\\n@param `sresult` The larger of the elements in the given list.\\n\\n@param `lresult` A list where each value is the max between the element in the list and the given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAX\"},{\"name\":\"MAXBUCKETS\",\"detail\":\"limit<LONG>  MAXBUCKETS \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXBUCKETS` function modifies the maximum number of buckets which can be created by a call to [`BUCKETIZE`](/doc/BUCKETIZE) by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXBUCKETS\"},{\"name\":\"MAXDEPTH\",\"detail\":\"limit<LONG>  MAXDEPTH \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXDEPTH` function modifies the maximum depth (number of levels) of the execution stack by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXDEPTH\"},{\"name\":\"MAXGEOCELLS\",\"detail\":\"maxcells<LONG>  MAXGEOCELLS \",\"documentation\":\"Modifies the maximum number of cells a **GEOSHAPE** created by [`GEO.WKT`](/doc/GEO.WKT) or [`GEO.JSON`](/doc/GEO.JSON) can have. The limit can be modified up to the configured value for `warpscript.maxgeocells.hard`.\\n\\n@param `maxcells` New limit to set.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.11\",\"OPB64name\":\"MAXGEOCELLS\"},{\"name\":\"MAXGTS\",\"detail\":\"limit<LONG>  MAXGTS \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard limit \\nwhich can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXGTS` function modifies the maximum number of Geo Time Series™ which can be fetched by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXGTS\"},{\"name\":\"MAXJSON\",\"detail\":\"limit<LONG>  MAXJSON \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to\\nthe hard limit value.\\n\\nThe `MAXJSON` function modifies the maximum number of characters in a json produced by [`->JSON`](/doc/AIt9JoxD).\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"MAXJSON\"},{\"name\":\"MAXLONG\",\"detail\":\" MAXLONG  result<LONG>\",\"documentation\":\"Pushes [Long.MAX_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MAX_VALUE) onto the stack.\\n\\n@param `result` Long.MAX_LONG\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLONG\"},{\"name\":\"MAXLOOP\",\"detail\":\"limit<LONG>  MAXLOOP \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard\\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe MAXLOOP function modifies the maximum number of milliseconds which can be spent in a loop setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLOOP\"},{\"name\":\"MAXOPS\",\"detail\":\"limit<LONG>  MAXOPS \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXOPS` function modifies the maximum number of operations which can be performed during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXOPS\"},{\"name\":\"MAXPIXELS\",\"detail\":\"pixels<LONG>  MAXPIXELS \",\"documentation\":\"Modifies the maximum size (in pixels) of images which can be created by [`PGraphics`](/doc/PGraphics). The limit can be modified up to the value configured in `warpscript.maxpixels.hard`.\\n\\n@param `pixels` Maximum size (in pixels).\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXPIXELS\"},{\"name\":\"MAXRECURSION\",\"detail\":\"depth<LONG>  MAXRECURSION \",\"documentation\":\"Modifies the maximum nesting depth of macro calls. The limit can be modified up to the value configured in `warpscript.maxrecursion.hard`.\\n\\n@param `depth` Maximum nesting depth.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MAXRECURSION\"},{\"name\":\"MAXSYMBOLS\",\"detail\":\"limit<LONG>  MAXSYMBOLS \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a \\nhard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXSYMBOLS` function modifies the maximum number of simultaneous symbols which can be defined on the stack during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXSYMBOLS\"},{\"name\":\"MAXURLFETCHCOUNT\",\"detail\":\"limit<LONG>  MAXURLFETCHCOUNT \",\"documentation\":\"The `MAXURLFETCHCOUNT` function modifies the maximum number of URLs which can be fetched with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.MAXURLFETCHCOUNT.limit.hard`.\\n\\n@param `limit` The maximum number of URLs which can be fetched.\\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHCOUNT\"},{\"name\":\"MAXURLFETCHSIZE\",\"detail\":\"limit<LONG>  MAXURLFETCHSIZE \",\"documentation\":\"The `MAXURLFETCHSIZE` function modifies the maximum cumulative size of fetched payloads with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.urlfetch.maxsize.hard` and is expressed as a number of bytes.\\n\\n@param `limit` The maximum cumulative size of fetched payloads.\\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHSIZE\"},{\"name\":\"MD5\",\"detail\":\"input<BYTES>  MD5  result<BYTES>\",\"documentation\":\"The `MD5` function digests a byte array on the stack with the cryptographic hash function [`MD5`](https://en.wikipedia.org/wiki/MD5).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"MD5\"},{\"name\":\"MERGE\",\"detail\":\"gtsList<LIST<GTS>>  MERGE  result<GTS>\",\"documentation\":\"Merge several Geo Time Series™ together.\\n\\nThe `MERGE` function expects a **LIST** of Geo Time Series™ on the top of the stack. It will consume these GTS and push onto the stack a single GTS instance\\nwith all measurements found in the GTS instances present in the **LIST**. The name and labels of the resulting GTS instance are those of the first one of the\\n**LIST**.\\n\\n`MERGE` do not override values on the same timestamp, they are appenned.\\n\\n@param `gtsList` The list of Geo Time Series™\\n\\n@param `result` The merged Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MERGE\"},{\"name\":\"META\",\"detail\":\"gtsList<LIST<GTS>> writeToken<STRING>  META \",\"documentation\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `META` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"META\"},{\"name\":\"METADIFF\",\"detail\":\"gtsList<LIST<GTS>> writeToken<STRING>  METADIFF \",\"documentation\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend in an incremental manner. New attributes are added and already existing attributes are updated or removed if their value is an empty string.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `METADIFF` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"METADIFF\"},{\"name\":\"METAOFF\",\"detail\":\"message<STRING> secret<STRING>  METAOFF \",\"documentation\":\"Disables meta operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a meta operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAOFF\"},{\"name\":\"METAON\",\"detail\":\"secret<STRING>  METAON \",\"documentation\":\"Enables meta operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAON\"},{\"name\":\"METASET\",\"detail\":\"[ token<STRING> class<STRING> labels<MAP> notbefore<LONG> notafter<LONG> maxduration<LONG> ttl<LONG> ]  METASET  metaset<STRING>\",\"documentation\":\"Performs a [`FIND`](/doc/FIND), retrieving a list of Geo Time Series™ and builds a *metaset* which can be distributed to allow access to those GTS without having to give away credentials.\\n\\nMetaset support is only available if a key has been set for `warp.aes.metasets`.\\n\\n@param `ttl` Time to live of the produces metaset. It will not be usable after that much time has elapsed since the current time. The ttl is specified in time units.\\n\\n@param `maxduration` The maximum span of data which can be retrieved using this metaset, in time units.\\n\\n@param `notafter` Most recent timestamp of the data this metaset can retrieve.\\n\\n@param `notbefore` Most ancient timestamp of the data this meataset can retrieve.\\n\\n@param `labels` Map of label selectors.\\n\\n@param `class` Geo Time Series™ class selector.\\n\\n@param `token` Read token to use for retrieving the GTS.\\n\\n@param `metaset` Encrypted metaset which can be used with a [`FETCH`](/doc/FETCH).\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"METASET\"},{\"name\":\"METASORT\",\"detail\":\"gts<LIST<GTS>> elements<LIST>  METASORT  sorted<LIST<GTS>>\",\"documentation\":\"Sorts a list of Geo Time Series™ according to elements of their metadata. The list of elements to consider for sorting can contain label names or NULL to consider the classname. Elements will be considered in the order in which they appear in the list.\\n\\n@param `gts` List of Geo Time Series™ to sort.\\n\\n@param `elements` Metadata elements to consider for sorting.\\n\\n@param `sorted` Sorted list of GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"METASORT\"},{\"name\":\"MIN\",\"detail\":\"p1<LONG> p2<LONG>  MIN  result<LONG>\\np1<LONG> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  MIN  result<LONG>\\np1<COUNTER> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  MIN  result<DOUBLE>\\np1<COUNTER> p2<LONG>  MIN  result<DOUBLE>\\np1<LONG> p2<COUNTER>  MIN  result<DOUBLE>\\nllist<LIST<LONG>>  MIN  sresult<LONG>\\ndlist<LIST<DOUBLE>>  MIN  sresult<DOUBLE>\\nclist<LIST<COUNTER>>  MIN  sresult<LONG>\\nllist<LIST<LONG>> value<LONG>  MIN  lresult<LIST<LONG>>\\nclist<LIST<COUNTER>> value<COUNTER>  MIN  lresult<LIST<LONG>>\\ndlist<LIST<DOUBLE>> value<DOUBLE>  MIN  lresult<LIST<DOUBLE>>\",\"documentation\":\"Returns the smaller of two numeric values.\\n\\nThe `MIN` function consumes two numeric parameters from the top of the stack and pushes back the smallest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The smaller of p1 and p2.\\n\\n@param `sresult` The smaller of the elements in the given list.\\n\\n@param `lresult` A list where each value is the min between the element in the list and the given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MIN\"},{\"name\":\"MINLONG\",\"detail\":\" MINLONG  result<LONG>\",\"documentation\":\"Pushes [Long.MIN_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MIN_VALUE) onto the stack.\\n\\n@param `result` Long.MIN_VALUE\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MINLONG\"},{\"name\":\"MINREV\",\"detail\":\"revision<STRING>  MINREV  newer<BOOLEAN>\",\"documentation\":\"The `MINREV` function consumes a string representing a revision on the stack and puts back a boolean indicating if the revision of the current Warp 10™ platform is newer or equal.\\n\\n@param `revision` A string representing a revision (semantic versioning). Given a version number MAJOR.MINOR.PATCH, .MINOR or .MINOR.PATCH can be omitted.\\n\\n@param `newer` A boolean indicating wether the revision of the current Warp 10™ platform is newer or equal to the given revision.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.23\",\"OPB64name\":\"MINREV\"},{\"name\":\"MMAP\",\"detail\":\"inputmap<MAP> macro<MACRO>  MMAP  results<MAP>\\ninputmap<MAP> macro<MACRO> index<BOOLEAN>  MMAP  results<MAP>\",\"documentation\":\"The `MMAP` function applies a macro on each key/value pair of a **MAP**, producing a **MAP** with the two elements on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **MAP** index on top and the key/value pair at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each entry in inputmap.\\n\\n@param `inputmap` Map to iterate on.\\n\\n@param `results` Map of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"MMAP\"},{\"name\":\"MODE\",\"detail\":\"gts<GTS>  MODE  result<LIST>\\ngtsList<LIST<GTS>>  MODE  [  result<LIST<LIST>>  ]\",\"documentation\":\"The `MODE` function computes the mode(s) for a given Geo Time Series™ or a GTS **LIST**. Foreach Geo Time Series™ pushes back on the stack a list containing \\ntheir mode(s).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Mode of the list (the items that occurs most often)\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"MODE\"},{\"name\":\"MONOTONIC\",\"detail\":\"gts<GTS> trend<BOOLEAN>  MONOTONIC  result<GTS>\\ngtsList<LIST<GTS>> trend<BOOLEAN>  MONOTONIC  resultList<LIST<GTS>>\",\"documentation\":\"Produces a new Geo Time Series™ from an input by modifying the value so the result is monotonous. This is technically applying a ratchet effect on values.\\n\\nThe `MONOTONIC` function expects a boolean on top of the stack and a Geo Time Series™ or list thereof below the boolean. The boolean indicates whether the\\nresult should be monotonically increasing (false) or decreasing (true).\\n\\n@param `trend` Whether the result should be monotonically increasing (false) or decreasing (true)\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` New Geo Time Series™\\n\\n@param `resultList` List of new Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MONOTONIC\"},{\"name\":\"MOTIONSPLIT\",\"detail\":\"gts<GTS> parameters<MAP>  MOTIONSPLIT  splits<LIST<GTS>>\\nlgts<LIST<GTS>> parameters<MAP>  MOTIONSPLIT  lsplits<LIST<LIST<GTS>>>\",\"documentation\":\"The `MOTIONSPLIT` function splits Geo Time Series™ instances based on several possible motion criteria. Split parameters can be combined to split on multiple criteria.\\n\\n`MOTIONSPLIT` can split on:\\n- stopped state detection\\n- moving to stopped transition\\n- time difference between two ticks (just as [`TIMESPLIT`](/doc/TIMESPLIT) does).\\n- maximal distance between two consecutive positions.\\n\\n`MOTIONSPLIT` parameters:\\n- **timesplit**: LONG value, time in platform time unit. Splits if the time difference between two consecutive ticks is strictly greater than this parameter. If defined, the split type label will be \\\"timesplit\\\".\\n- **distance.split**: DOUBLE value, distance in meter. Splits if the orthodromic distance between two consecutive locations is strictly greater than this parameter. If defined, the split type label will be \\\"distancesplit\\\".\\n- **stopped.min.time**: LONG value, time in platform time unit. This is the minimum time the consecutive locations should stay in the stopped zone radius to consider a stop state. If defined, the split type label will be \\\"stopped\\\".\\n- **stopped.max.radius**: DOUBLE value, distance in meter. As long as consecutive positions remains in the radius during stopped.min.time, `MOTIONSPLIT` detect a stopped state.\\n- **stopped.max.speed**: DOUBLE value, speed in m/s. If the speed is greater than this value while in stopped state, `MOTIONSPLIT` exits the stopped state.\\n- **stopped.max.mean.speed**: DOUBLE value, speed in m/s. Maximum mean speed in the proximity zone that prevent the split. `MOTIONSPLIT` will split only if there is a full stop during the given time and radius, and if the mean speed in the proximity zone is less than this parameter.\\n- **stopped.split**: BOOLEAN value. If true, `MOTIONSPLIT` also splits between stopped and moving sequences. If defined, the split type label will be \\\"stopped\\\" or \\\"moving\\\".\\n- **label.stopped.time**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the time in stopped state. If the split source is not a stop detection, this label won't be set.\\n- **label.split.number**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the split number, starting from 1.\\n- **label.split.type**: STRING value. If defined, `MOTIONSPLIT` will add an extra label that contains the split reason. It could be \\\"timesplit\\\", \\\"distancesplit\\\", \\\"end\\\", \\\"stopped\\\" or \\\"moving\\\".\\n\\n`MOTIONSPLIT` split type priorities:\\n- If stopped.min.time and stopped.max.radius are set, the stop detection has the first priority.\\n- If `MOTIONSPLIT` does not detect a stopped state, it looks for a distance split.\\n- If `MOTIONSPLIT` does not detect a stopped state or a distance split, it looks for a time split.\\n\\n\\n@param `parameters` List of splitting parameters. See the function description.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"MOTIONSPLIT\"},{\"name\":\"MSGFAIL\",\"detail\":\"message<STRING>  MSGFAIL \",\"documentation\":\"The `MSGFAIL` function stops the execution of WarpScript code by throwing an exception. \\n\\n@param `message` The exception message\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSGFAIL\"},{\"name\":\"MSORT\",\"detail\":\"map<MAP>  MSORT  result<MAP>\",\"documentation\":\"The function `MSORT` inspects the top of the stack. If it is a **MAP**, it sorts the **MAP** according to its keys. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\n@param `map` Map to sort\\n\\n@param `result` Sorted map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSORT\"},{\"name\":\"MSTU\",\"detail\":\" MSTU  numberTimeUnits<LONG>\",\"documentation\":\"The `MSTU` function pushes onto the stack the number of platform time units in one millisecond. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one millisecond.\\n\\n\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSTU\"},{\"name\":\"MULTIPLYEXACT\",\"detail\":\"x<NUMBER> y<NUMBER>  MULTIPLYEXACT  prod<LONG>\\nlist<LIST<NUMBER>>  MULTIPLYEXACT  sprod<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  MULTIPLYEXACT  lprod<LIST<LONG>>\",\"documentation\":\"The `MULTIPLYEXACT` function consumes two LONGs from the top of the stack and puts back the product. If the product overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `prod` The product of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sprod` The product of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lprod` List of **LONG** where each value is the product of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"MULTIPLYEXACT\"},{\"name\":\"MUSIGMA\",\"detail\":\"gts<GTS> bessel<BOOLEAN>  MUSIGMA  mu<DOUBLE> sigma<DOUBLE>\",\"documentation\":\"The `MUSIGMA` function calculates the mean and the standard deviation of a Geo Time Series. It consumes two parameters from the top of the stack: a boolean \\n(to choose if [Bessel's correction](https://en.wikipedia.org/wiki/Bessel%27s_correction) should be applied on the standard deviation) and a numeric GTS, and \\nit pushes onto the stack its mean (mu) and its standard deviation (sigma).\\n\\n@param `bessel` True if apply a [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `sigma` Standard deviation\\n\\n@param `mu` Mean\\n\\n@param `gts` A single Geo Time Series\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MUSIGMA\"},{\"name\":\"MUTEX\",\"detail\":\"macro<MACRO> mutex<STRING>  MUTEX \",\"documentation\":\"Attempts to hold a named lock, creating it if needed, and execute a macro while holding the lock. When the macro execution terminates, either normally or with an error, the lock is released.\\n\\n@param `mutex` Name of lock to hold.\\n\\n@param `macro` Macro to execute while holding the lock.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"MUTEX\"},{\"name\":\"MVELEVATIONS\",\"detail\":\"input<GTSENCODER>  MVELEVATIONS  output<LIST>\\ninput<GTS>  MVELEVATIONS  output<LIST>\\nlinput<LIST>  MVELEVATIONS  output<LIST>\",\"documentation\":\"The `MVELEVATIONS` function extracts elevations from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVELEVATIONS` function will emit a list with two elements (a pair), the first element will be the elevation associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the elevations of the Multivariate value itself.\\n\\nIf a tick has no associated elevation, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted elevations.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVELEVATIONS\"},{\"name\":\"MVHHCODES\",\"detail\":\"input<GTSENCODER>  MVHHCODES  output<LIST>\\ninput<GTS>  MVHHCODES  output<LIST>\\nlinput<LIST>  MVHHCODES  output<LIST>\",\"documentation\":\"The `MVHHCODES` function extracts [`HHCodes`](https://en.wikipedia.org/wiki/HHCode) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVHHCODES` function will emit a list with two elements (a pair), the first element will be the HHCode associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the HHCodes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted HHCodes.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVHHCODES\"},{\"name\":\"MVINDEXSPLIT\",\"detail\":\"input<GTSENCODER>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> indices<LIST>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> indices<LIST> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> indices<LIST>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> indices<LIST> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> indices<LIST>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> indices<LIST> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> indices<LIST>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> indices<LIST> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\",\"documentation\":\"The `MVINDEXSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVINDEXSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element index (first element being at index 0).\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:INDEX` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of indices or indices ranges can be specified to only produce encoders for the indices which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `indices` List of indices or indices ranges (list of two indices), used to restrict which indices to consider.\\n\\n@param `renaming` Map of index (LONG) to parameter to `RENAME`. If no entry is present for an index, `+:INDEX` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVINDEXSPLIT\"},{\"name\":\"MVLOCATIONS\",\"detail\":\"input<GTSENCODER>  MVLOCATIONS  output<LIST>\\ninput<GTS>  MVLOCATIONS  output<LIST>\\nlinput<LIST>  MVLOCATIONS  output<LIST>\",\"documentation\":\"The `MVLOCATIONS` function extracts location (latitude, longitude) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVLOCATIONS` function will emit a list with two elements (a pair), the first element will be the latitude and longitude (a list) associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the latitudes and longitudes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `[ NaN NaN ]` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted locations.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVLOCATIONS\"},{\"name\":\"MVTICKS\",\"detail\":\"input<GTSENCODER>  MVTICKS  output<LIST>\\ninput<GTS>  MVTICKS  output<LIST>\\nlinput<LIST>  MVTICKS  output<LIST>\",\"documentation\":\"The `MVTICKS` function extracts ticks from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVTICKS` function will emit a list with two elements (a pair), the first element will be the tick at which the Multivariate value was encountered, the second element will be a list containing the ticks of the Multivariate value itself.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted ticks.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKS\"},{\"name\":\"MVTICKSPLIT\",\"detail\":\"input<GTSENCODER>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> timestamps<LIST>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> timestamps<LIST>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> timestamps<LIST>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> timestamps<LIST>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\",\"documentation\":\"The `MVTICKSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVTICKSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element timestamp.\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:TIMESTAMP` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of timestamps or timestamp ranges can be specified to only produce encoders for the timestamps which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `timestamps` List of timestamps or timestamps ranges (list of two timestamps), used to restrict which timestamps to consider.\\n\\n@param `renaming` Map of timestamp (LONG) to parameter to `RENAME`. If no entry is present for a timestamp, `+:TIMESTAMP` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKSPLIT\"},{\"name\":\"MVVALUES\",\"detail\":\"input<GTSENCODER>  MVVALUES  output<LIST>\\ninput<GTS>  MVVALUES  output<LIST>\\nlinput<LIST>  MVVALUES  output<LIST>\",\"documentation\":\"The `MVVALUES` function extracts values from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted values.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVVALUES\"},{\"name\":\"NAME\",\"detail\":\"gts<GTS>  NAME  result<STRING>\\nencoder<GTSENCODER>  NAME  result<STRING>\",\"documentation\":\"The `NAME` function consumes a Geo Time Series™ from the stack, extracts its class name, and pushes it onto the stack.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `encoder` Geo Time Series™ Encoder\\n\\n@param `result` Class name\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NAME\"},{\"name\":\"NBOUNDS\",\"detail\":\"mu<NUMBER> sigma<NUMBER> n<LONG>  NBOUNDS  bounds<LIST<DOUBLE>>\",\"documentation\":\"The `NBOUNDS` function computes bounds defining a specified number of intervals which have the same area under the curve of a normal distribution with a given mean and standard deviation.\\n\\n@param `n` Number of desired intervals.\\n\\n@param `sigma` Positive standard deviation to use for the normal distribution.\\n\\n@param `mu` Mean to use for the normal distribution.\\n\\n@param `bounds` List of `n`-1 bounds defining the `n` intervals.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NBOUNDS\"},{\"name\":\"NDEBUGON\",\"detail\":\"n<NUMBER>  NDEBUGON \",\"documentation\":\"Turns on stack debugging so up to the given number of stack levels will be returned in case of error. Stack debugging is off by default.\\n\\n@param `n` Maximum number of stack levels to return in case of error.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NDEBUGON\"},{\"name\":\"NEGATEEXACT\",\"detail\":\"value<NUMBER>  NEGATEEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEGATEEXACT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `NEGATEEXACT` function consumes one LONG from the top of the stack and puts back the negated value. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be negated\\n\\n@param `result` The negated value\\n\\n@param `lvalue` List of values to be negated\\n\\n@param `lresult` List of negated values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEGATEEXACT\"},{\"name\":\"NEWENCODER\",\"detail\":\" NEWENCODER  encoder<GTSENCODER>\",\"documentation\":\"The `NEWENCODER` function creates an empty encoder and pushes it onto the stack. An encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` A newly created empty encoder instance.\\n\\n\",\"tags\":[\"encoder\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"NEWENCODER\"},{\"name\":\"NEWGTS\",\"detail\":\" NEWGTS  gts<GTS>\",\"documentation\":\"The `NEWGTS` function pushes onto the stack an empty Geo Time Series™ instance.\\n\\n@param `gts` A newly created empty GTS instance.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEWGTS\"},{\"name\":\"NEXTAFTER\",\"detail\":\"from<NUMBER> to<NUMBER>  NEXTAFTER  result<DOUBLE>\\nfrom<NUMBER> lto<LIST<NUMBER>>  NEXTAFTER  lresult<LIST<DOUBLE>>\\nlfrom<LIST<NUMBER>> to<NUMBER>  NEXTAFTER  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `NEXTAFTER` function consumes two numeric parameter from the top of the stack and pushes back the **DOUBLE** adjacent to the first argument in the direction of the second argument. In other words, the result is between *from* and *to* and adjacent to *from*.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `from` Starting value\\n\\n@param `to` Direction used to calculate the adjacent value\\n\\n@param `result` Next **DOUBLE** from *from* to *to*\\n\\n@param `lfrom` List of starting values\\n\\n@param `lto` List of directions used to calculate the adjacent value\\n\\n@param `lresult` List of next **DOUBLE** from *from* to *to*\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTAFTER\"},{\"name\":\"NEXTDOWN\",\"detail\":\"value<NUMBER>  NEXTDOWN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEXTDOWN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `NEXTDOWN` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of negative infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of negative infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of negative infinity\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEXTDOWN\"},{\"name\":\"NEXTUP\",\"detail\":\"value<NUMBER>  NEXTUP  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEXTUP  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `NEXTUP` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of positive infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of positive infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of positive infinity\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTUP\"},{\"name\":\"NOLOG\",\"detail\":\" NOLOG \",\"documentation\":\"The `NOLOG` function resets java.util.logging.LogManager.\\n\\nIt can be useful to do this during developments and tests of an extension.\\n\\nThe `NOLOG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.2.19\",\"OPB64name\":\"NOLOG\"},{\"name\":\"NONEMPTY\",\"detail\":\"gtsList<LIST<GTS>>  NONEMPTY  results<LIST<GTS>>\",\"documentation\":\"Filter a list of Geo Time Series™ in order to retain only those that have at least one value.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `results` Filtered list of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NONEMPTY\"},{\"name\":\"NONNULL\",\"detail\":\"list<LIST>  NONNULL  nonnulls<LIST>\",\"documentation\":\"The `NONNULL` function consumes a list and produces a list containing only the non NULL elements of the argument list.\\n\\n@param `list` The argument list to filter\\n\\n@param `nonnulls` A new list with only those elements from `list` which are not NULL\\n\\n\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.2.7\",\"OPB64name\":\"NONNULL\"},{\"name\":\"NOOP\",\"detail\":\"\",\"documentation\":\"It does nothing.\\n\\nWhile it does not have a usefulness of its own, it can be used when generating code from within WarpScript code prior to executing it with [`EVAL`](/doc/EVAL).\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOOP\"},{\"name\":\"NORMALIZE\",\"detail\":\"gts<GTS>  NORMALIZE  result<GTS>\\ngtsList<LIST<GTS>>  NORMALIZE  resultList<LIST<GTS>>\",\"documentation\":\"The `NORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between 0 and 1 (i.e. it replaces X by \\n(X - min)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NORMALIZE\"},{\"name\":\"NOT\",\"detail\":\"input<BOOLEAN>  NOT  result<BOOLEAN>\\ngts<GTS>  NOT  negatedgts<GTS>\",\"documentation\":\"Negates a boolean.\\n\\nThe `NOT` function is synonymous for [`!`](/doc/7F). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gts` A boolean Geo Time Series™\\n\\n@param `negatedgts` A boolean Geo Time Series™\\n\\n\",\"tags\":[\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOT\"},{\"name\":\"NOTAFTER\",\"detail\":\"timestamp<LONG>  NOTAFTER \\ndate<STRING>  NOTAFTER \",\"documentation\":\"Checks that the current time is not after the provided timestamp.\\n\\nThe `NOTAFTER` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not after the provided timestamp.\\nIf it is not after the WarpScript execution continues, otherwise it throws an exception.\\n\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTAFTER\"},{\"name\":\"NOTBEFORE\",\"detail\":\"timestamp<LONG>  NOTBEFORE \\ndate<STRING>  NOTBEFORE \",\"documentation\":\"Checks that the current time is not before the provided timestamp.\\n\\nThe `NOTBEFORE` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not before the provided timestamp.\\nIf it is not before the WarpScript execution continues, otherwise it throws an exception.\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTBEFORE\"},{\"name\":\"NOTIMINGS\",\"detail\":\"\",\"documentation\":\"Use of the `NOTIMINGS` function disables the collection of timing information for each line of the input script. Use [`TIMINGS`](/doc/TIMINGS) to enable it again.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTIMINGS\"},{\"name\":\"NOW\",\"detail\":\" NOW  timestamp<LONG>\",\"documentation\":\"The `NOW` function pushes onto the stack the current **LONG** timestamp expressed in the platform time unit. This timestamp is the number of platform time unit elapsed since 00:00:00 on 1 January 1970 UTC minus the number of leap seconds, see [Unix time](https://en.wikipedia.org/wiki/Unix_time).\\n\\nThis function is mostly linear with time but this property is violated when the OS resynchronises its clock (ie consecutive calls to `NOW` may 'jump' or 'go backward').\\n\\n@param `timestamp` The current timestamp in platform time unit.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOW\"},{\"name\":\"NPDF\",\"detail\":\"mu<NUMBER> sigma<NUMBER>  NPDF  npdf<FUNCTION>\",\"documentation\":\"The `NPDF` function builds a function which outputs the probability of occurrence of a given value under a specified normal distribution.\\n\\nThe normal distribution is defined by its mean and standard deviation. The result of the `NPDF` function is itself a function which can be invoked via [`EVAL`](doc/EVAL).\\n\\n*NPDF* stands for Normal (Gaussian) distribution Probability Density Function.\\n\\n@param `sigma` Standard deviation of the normal distribution to consider.\\n\\n@param `mu` Mean of the normal distribution to consider.\\n\\n@param `npdf` Function which given an input number outputs the probability of its occurence under the given normal distribution.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NPDF\"},{\"name\":\"NPEEK\",\"detail\":\"levels<NUMBER>  NPEEK \",\"documentation\":\"Displays a given number of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of stack levels to display.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"NPEEK\"},{\"name\":\"NRETURN\",\"detail\":\"levelnumber<LONG>  NRETURN \",\"documentation\":\"Immediately exit a certain number of macros being executed. The `NRETURN` function expects a number of levels on top of the stack.\\n\\n@param `levelnumber` Number of levels of macro to exit.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"NRETURN\"},{\"name\":\"NSUMSUMSQ\",\"detail\":\"gts<GTS>  NSUMSUMSQ  cardinality<LONG> sum<DOUBLE> square<DOUBLE>\",\"documentation\":\"Computes the cardinality, sum of values and sum of squared values of a Geo Time Series™. Pushes those results on the stack in the order they were mentioned.\\n\\nOnly numeric series are allowed.\\n\\n@param `square` Sum of squared values\\n\\n@param `sum` Sum of values\\n\\n@param `cardinality` Values count\\n\\n@param `gts` Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NSUMSUMSQ\"},{\"name\":\"NULL\",\"detail\":\" NULL  result<NULL>\",\"documentation\":\"The `NULL` function pushes the symbolic value *null* onto the stack.\\n\\n@param `result` Symbolic value *null*\\n\\n\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NULL\"},{\"name\":\"NaN\",\"detail\":\" NaN  result<DOUBLE>\",\"documentation\":\"Pushes the double value *NaN* (Not a Number) onto the stack.\\n\\n@param `result` Value *NaN*\\n\\n\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NaN\"},{\"name\":\"ONLYBUCKETS\",\"detail\":\"gts<GTS>  ONLYBUCKETS  result<GTS>\\nlgts<LIST<GTS>>  ONLYBUCKETS  lresult<LIST<GTS>>\",\"documentation\":\"Only retains ticks from Geo Time Series™ with timestamps which are bucket ends. If an input GTS is not bucketized, a clone of the GTS will be returned.\\n\\nThe `ONLYBUCKETS` function does not remove duplicate ticks, please consider using [`DEDUP`](/doc/DEDUP) for that purpose.\\n\\n@param `gts` Single instance of Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `result` Transformed GTS.\\n\\n@param `lresult` List of transformed GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ONLYBUCKETS\"},{\"name\":\"OPB64->\",\"detail\":\"input<STRING>  OPB64->  output<BYTES>\",\"documentation\":\"Decode a String in order preserving base64 into a byte array.\\n\\nBytes array cannot be represented on the stack.\\n\\n@param `input` Any valid opbbase64 string.\\n\\n@param `output` Byte array of the input decoded input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.7\",\"OPB64name\":\"Ip01CYFhEV\"},{\"name\":\"OPB64TOHEX\",\"detail\":\"input<STRING>  OPB64TOHEX  output<STRING>\",\"documentation\":\"The OPB64TOHEX function decodes the order preserving base64 string on top of the stack and immediately re-encode it in hex string.\\n\\n\\n@param `input` OPBase64 encoded string\\n\\n@param `output` hexadecimal representation\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.2\",\"OPB64name\":\"OPB64TOHEX\"},{\"name\":\"OPS\",\"detail\":\" OPS  ops<LONG>\",\"documentation\":\"Pushes onto the stack the current number of operations which were performed by the WarpScript code execution.\\n\\n@param `ops` number of operations\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPS\"},{\"name\":\"OPTDTW\",\"detail\":\"data<LIST> query<LIST> match<LONG>  OPTDTW  result<LIST>\",\"documentation\":\"The `OPTDTW` function finds the top subsequence matches in a sequence for a given query sequence. The function uses [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping)\\nto assess the subsequence similarity with the query.\\n\\n@param `match` Number of top matches. Use 0 as the number of matches to return to return them all.\\n\\n@param `query` Query numerical sequence, thr shortest\\n\\n@param `data` Data sequence in which to find matches\\n\\n@param `result` List of matches, each match being a pair of (index, distance).\\n\\n\",\"tags\":[\"math\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPTDTW\"},{\"name\":\"OPTIMIZE\",\"detail\":\"gts<GTS> ratio<NUMBER>  OPTIMIZE  gts<GTS>\\nencoder<GTSENCODER> ratio<NUMBER>  OPTIMIZE  optencoder<GTSENCODER>\\nlgts<LIST<GTS>> ratio<NUMBER>  OPTIMIZE  lgts<LIST<GTS>>\\nlencoder<LIST<GTSENCODER>> ratio<NUMBER>  OPTIMIZE  loptencoder<LIST<GTSENCODER>>\",\"documentation\":\"Optimizes the memory footprint of Geo Time Series™ and GTS Encoder instances.\\n\\n@param `ratio` Ratio of memory footprint to number of values, if this ratio is not exceeded, no optimization will take place. As a result, optimization is always done when ratio <= 1 or ratio is NaN.\\n\\n@param `gts` Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `encoder` Instance of GTS Encoder to optimize.\\n\\n@param `optencoder` Optimized version of the encoder, or the original instance if no optimization occurred.\\n\\n@param `lgts` List of Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `lencoder` List of instances of GTS Encoder to optimize.\\n\\n@param `loptencoder` List of optimized version of the encoders or the original instances if no optimization occurred.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"OPTIMIZE\"},{\"name\":\"OR\",\"detail\":\"p1<BOOLEAN> p2<BOOLEAN>  OR  result<BOOLEAN>\\nl<LIST>  OR  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  OR  gtsresult<GTS>\",\"documentation\":\"The `OR` operator is a synonymous for [`||`](/doc/U6k).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `OR` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"OR\"},{\"name\":\"PACK\",\"detail\":\"input<LIST> format<STRING>  PACK  result<BYTES>\",\"documentation\":\"The `PACK` function packs a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n@param `input` List to pack\\n\\n@param `format` Format used to pack\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"PACK\"},{\"name\":\"PAPPLY\",\"detail\":\"[ op<OPERATOR> labels<LIST> gts<LIST<GTS>+> ]  PAPPLY  result<MAP>\",\"documentation\":\"The `PAPPLY` function performs operations in a way identical to the [`APPLY`](/doc/APPLY) framework but produces a map of results keyed by the label map of each equivalence class.\\n\\nAs [`APPLY`](/doc/APPLY), `PAPPLY` provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can due. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` Map of resulting GTS, one per equivalence class, keyed with the equivalence class labels.\\n\\n@param `op` Operation to perform.\\n\\n\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"PAPPLY\"},{\"name\":\"PARSE\",\"detail\":\"data<STRING>  PARSE  result<LIST<GTS>>\",\"documentation\":\"The `PARSE` function parses an input **STRING** containing datapoints in the [Geo Time Series™ input format](/content/03_Documentation/03_Interacting_with_Warp_10/03_Ingesting_data/02_GTS_input_format) and pushes onto the stack the parsed Geo Time Series™.\\n\\n@param `data` Datapoints in the Geo Time Series™ input format\\n\\n@param `result` List of parsed Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.0.11\",\"OPB64name\":\"PARSE\"},{\"name\":\"PARSESELECTOR\",\"detail\":\"selector<STRING>  PARSESELECTOR  classselector<STRING> labelselector<MAP>\",\"documentation\":\"The `PARSESELECTOR` function parses a GTS Selector (STRING) returnss the class selector and labels selectors.\\n\\nIn order for `PARSESELECTOR` to parse correctly a selector, the following characters MUST appear percent-encoded in the `STRING` to parse, the equal sign (`=`, `%3D`), the comma (`,` `%2C`) and closing curly brace (`}` `%7D`). Due to the way WarpScript parses `STRING` constants, the `%` sign MUST be percent-encoded (`%25`) in the `STRING` if it appears in WarpScript code:\\n\\nThe `STRING` `class{label=comm%2Cequal%3Dsign}` must appear in WarpScript as:\\n\\n```\\n'class{label=comm%252Cequal%253Dsign'\\n```\\n\\nCombined with `TOSELECTOR`, it can be used to build a selector from a subset of GTS.\\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature'\\n  { 'sensorId' '=01' }\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\nFETCH\\n\\n```\\nThis can be used to simplify the syntax of a FETCH or FIND request. \\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature{sensorId=01}' PARSESELECTOR\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\n\\nFETCH\\n```\\n\\n\\n\\n@param `selector` String selector.\\n\\n@param `labelselector` MAP of label selectors.\\n\\n@param `classselector` Class name selector.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARSESELECTOR\"},{\"name\":\"PARSEVALUE\",\"detail\":\"input<STRING>  PARSEVALUE  value<ANY>\",\"documentation\":\"The `PARSEVALUE` function parses a STRING representing a valid value in the Geo Time Series™ input format.\\n\\nThe underlying implementation being the internal WarpScript function, some of the returned types might not be easily handled in the rest of the calling script. Most notably, some floating point representations might lead to BigDecimal instances being produced.\\n\\n@param `input` String representation of the value to parse.\\n\\n@param `value` Parsed value, could be a STRING, LONG, DOUBLE, BIGDECIMAL, BOOLEAN or BYTES elements.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.1.0\",\"OPB64name\":\"PARSEVALUE\"},{\"name\":\"PARTITION\",\"detail\":\"lgts<LIST<GTS>> labels<LIST<STRING>>  PARTITION  result<MAP>\",\"documentation\":\"The `PARTITION` function splits a Geo Time Series™ list in equivalence classes based on label values.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels` plus all labels with common values among the GTS in the equivalence class.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARTITION\"},{\"name\":\"PATTERNDETECTION\",\"detail\":\"gts<GTS> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNDETECTION  result<GTS>\\nlgts<LIST<GTS>> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNDETECTION  lresult<LIST<GTS>>\",\"documentation\":\"The `PATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNDETECTION\"},{\"name\":\"PATTERNS\",\"detail\":\"gts<GTS> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNS  result<GTS>\\nlgts<LIST<GTS>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNS  lresult<LIST<GTS>>\",\"documentation\":\"The `PATTERNS` function extracts symbolic patterns (or motifs) from a Geo Time Series™. Those patterns are similar to [iSAX](http://www.cs.ucr.edu/~eamonn/iSAX/iSAX.html) symbols.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNS` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNS\"},{\"name\":\"PEEK\",\"detail\":\" PEEK \",\"documentation\":\"Displays the top of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEK\"},{\"name\":\"PEEKN\",\"detail\":\"distance<NUMBER>  PEEKN \",\"documentation\":\"Displays the content of the level of the stack at the given distance from the top.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `distance` Distance (in stack levels) between the top of the stack and the level to display.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEKN\"},{\"name\":\"PERMUTE\",\"detail\":\"tensor<LIST> pattern<LIST>  PERMUTE  tensor<LIST>\\n{ tensor<LIST> pattern<LIST> fast<BOOLEAN>  } PERMUTE  tensor<LIST>\",\"documentation\":\"Permute the dimensions of a nested LIST as if it were a tensor or a multidimensional array.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent before operating. Default to false.\\n\\n@param `pattern` The permutation pattern (a LIST of LONG).\\n\\n@param `tensor` The resulting nested LIST.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"PERMUTE\"},{\"name\":\"PFILTER\",\"detail\":\"[ gtsList<LIST<GTS>> labels<LIST<STRING>> filter<FILTER> ]  PFILTER  result<MAP>\",\"documentation\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `PFILTER framework allows for advanced filtering using N-ary functions \\n(functions which accept N parameters). Returned GTS are grouped by equivalence classes.\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A map keyed by the label set of each equivalence class whose values are lists of selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `PFILTER`.\\n\\n\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"PFILTER\"},{\"name\":\"PGraphics\",\"detail\":\"width<LONG> height<LONG> imgtype<STRING>  PGraphics  pg<PGRAPHICS>\",\"documentation\":\"Warp 10 includes a large subset of the [Processing](http://www.processing.org) drawing library. You can create and manipulate images, then push a base64 encoded png onto the stack.\\n\\n+ Step 1: create a processing graphic object with `PGraphics` function.\\n+ Step 2: manipulate this object with Processing functions.\\n+ Step 3: render the processing graphic with `Pencode` function.\\n\\nDocumentation of every function has a link to original Processing website. Original website includes more examples for each function.\\n\\nProcessing functions offers a lot of different signatures for colors. The most efficient is to keep the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n\\nUp to Warp 10 1.2.18, antialiasing was not available. It is now available, by appending a digit to the **imgtype** string argument. The maximum anti-aliasing level is determined by the hardware of the machine that is running the software, so 2D4 and 2D8 mode will not work with every computer.\\n\\n+ \\\"2D\\\": no antialiasing\\n+ \\\"2D2\\\": bilinear smoothing\\n+ \\\"2D3\\\": bicubic smoothing\\n+ \\\"2D4\\\": 4x antialiasing\\n+ \\\"2D8\\\": 8x antialiasing\\n\\n\\nYou can adjust the maximal number of pixel allowed in Warp 10 configuration file.\\n\\n@param `imgtype` '2D', '3D', or '2Dx', where x is the level of anti aliasing (2, 3, 4, or 8).\\n\\n@param `width` Pixel width of the image.\\n\\n@param `height` Pixel height of the image.\\n\\n@param `pg` Processing graphic object.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PGraphics\"},{\"name\":\"PI\",\"detail\":\" PI  pi<DOUBLE>\",\"documentation\":\"Alias of [pi](/doc/R5Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"J3Z\"},{\"name\":\"PICK\",\"detail\":\"level<NUMBER>  PICK  result<ANY>\",\"documentation\":\"The `PICK` function copies on top of the stack the element at level N. Parameter N is consumed off the top of the stack when `PICK` is called.\\n\\n@param `level` Level of the stack\\n\\n@param `result` What is on stack at *level*\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"PICK\"},{\"name\":\"PICKLE->\",\"detail\":\"input<BYTES>  PICKLE->  output<ANY>\",\"documentation\":\"The `PICKLE->` function decodes some Pickle encoded content contained in a byte array.\\nThe conversion is done using [Pyrolite v4](https://github.com/irmen/pickle).\\n\\nIt can read all pickle protocol versions (0 to 4, so this includes\\nthe latest additions made in Python 3.4).\\n\\n```python\\n>>> myobject={ 'apple':3.5,'banana':18 }\\n>>> pickle.dumps(myobject).encode(\\\"hex\\\")\\n'286470300a53276170706c65270a70310a46332e350a73532762616e616e61270a70320a4931380a732e'\\n```\\n\\n@param `input` Byte array of a pickle encoded content\\n\\n@param `output` Warp 10 object\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"J3_2Hol4AIs\"},{\"name\":\"PIGSCHEMA\",\"detail\":\"elt<ANY*>  PIGSCHEMA  elt<ANY*> schema<STRING>\",\"documentation\":\"The `PIGSCHEMA` function produces on top of the stack a STRING representing the [Pig](https://en.wikipedia.org/wiki/Pig_(programming_tool)) schema definition for the current stack content.\\n\\n@param `elt` Stack content.\\n\\n@param `schema` Schema for the current stack, usable when working with WarpScript in Pig.\\n\\n\",\"tags\":[\"pig\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"PIGSCHEMA\"},{\"name\":\"PIVOT\",\"detail\":\"input<LIST<GTS>> pivot<LIST<GTS>>  PIVOT  result<LIST<GTS>>\",\"documentation\":\"The `PIVOT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick of GTS from the first list, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n1// C3{C1=C} 2\\n2// C4{C2=F} 30\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n4// C3{} 5\\n4// C4{} 50\\n```\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOT\"},{\"name\":\"PIVOTSTRICT\",\"detail\":\"input<LIST<GTS>> pivot<LIST<GTS>>  PIVOTSTRICT  result<LIST<GTS>>\",\"documentation\":\"The `PIVOTSTRICT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™ in a way similar to what [`PIVOT`](/doc/PIVOT) does.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick common to Geo Time Series™ of both lists, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOTSTRICT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n```\\n\\nOnly ticks 0 and 3 appear in the result as those are the only ticks present in both `C1` and `C2`.\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOTSTRICT\"},{\"name\":\"POPR\",\"detail\":\"value<ANY>  POPR \",\"documentation\":\"Pops a value from the top of the stack and stores it into the designated register.\\n\\nThe `POPR` function is really a family of functions named `POPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"POPR\"},{\"name\":\"PREDUCE\",\"detail\":\"[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> ]  PREDUCE  result<MAP>\",\"documentation\":\"Behaves as [`REDUCE`](/doc/REDUCE) but produces a map of results keyed by the label map of each equivalence class.\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` Map keyed by the label map of each equivalence class and whose values are the Geo Time Series™ produced for each class.\\n\\n\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.5\",\"OPB64name\":\"PREDUCE\"},{\"name\":\"PRNG\",\"detail\":\"seed<LONG>  PRNG \",\"documentation\":\"The `PRNG` function initializes the stack's seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator). This PRNG can later be used by the [`SRAND`](/doc/SRAND) function to produce random numbers in a deterministic way (!).\\n\\n@param `seed` The seed to use for initializing the PRNG.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"PRNG\"},{\"name\":\"PROB\",\"detail\":\"gts<GTS>  PROB  result<GTS>\\ngtslist<LIST<GTS>>  PROB  resultList<LIST<GTS>>\",\"documentation\":\"Computes probability for each value of the input Geo Time Series™.\\n\\nThe function `PROB` consumes a GTS or a list of the GTS from the top of the stack. It pushes back the probability for each value.\\n\\nThe probabilities are computed using the value histogram.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `gtslist` The input list of Geo Time Series™\\n\\n@param `result` The Geo Time Series™ wit probability for each value\\n\\n@param `resultList` The List of Geo Time Series™ with probability for each value\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.6\",\"OPB64name\":\"PROB\"},{\"name\":\"PROBABILITY\",\"detail\":\"valueHistogram<MAP>  PROBABILITY  result<STRING>\",\"documentation\":\"Pushes on the stack a function which computes probabilities according to a provided value histogram.\\n\\nTo use the function pushed by `PROBABILITY` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function expects a value on top of the stack and will output the probability of occurrence of this value.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"PROBABILITY\"},{\"name\":\"PSTACK\",\"detail\":\"\",\"documentation\":\"When in interactive (REPL) mode, prints the content of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PSTACK\"},{\"name\":\"PUSHR\",\"detail\":\" PUSHR  value<ANY>\",\"documentation\":\"Pushes onto the stack the value currently contained in the designated register.\\n\\nThe `PUSHR` function is really a family of functions named `PUSHRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PUSHR\"},{\"name\":\"PUT\",\"detail\":\"inputmap<MAP> newvalue<ANY> newkey<ANY>  PUT  outputmap<MAP>\",\"documentation\":\"The `PUT` function inserts a new key-value pair in a map.\\nIf the key already exists in the input MAP, the value is replaced by the new one.\\n\\n`PUT` function puts the reference of the MAP on top of the stack.\\n\\n@param `newkey` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `newvalue` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `inputmap` reference to the map to be modified\\n\\n@param `outputmap` copy of input map reference. Useful to chain other instructions on the same map.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"PUT\"},{\"name\":\"Palpha\",\"detail\":\"pg<PGRAPHICS> color<NUMBER>  Palpha  pg<PGRAPHICS> alpha<DOUBLE>\",\"documentation\":\"Extracts the alpha value from a color.\\n\\nThe `Palpha` function is easy to use and understand, but it is slower than bit shifting... \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/alpha_.html)\\n\\n@param `color` Any value of the color datatype\\n\\n@param `alpha` Alpha component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Palpha\"},{\"name\":\"Parc\",\"detail\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> start<DOUBLE> stop<DOUBLE>  Parc  pg<PGRAPHICS>\\npg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> start<DOUBLE> stop<DOUBLE> mode<STRING>  Parc  pg<PGRAPHICS>\",\"documentation\":\"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined by the **a**, **b**, **c**, and **d** parameters. The origin of the arc's ellipse may be changed with the [`PellipseMode`](/doc/PellipseMode) function. Use the **start** and **stop** parameters to specify the angles (in radians) at which to draw the arc.\\n\\n\\n\\nThere are three ways to draw an arc; the rendering technique used is defined by the optional seventh parameter. The three options, depicted in the examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with a PIE fill.\\n\\n\\n\\nIn some cases, the `Parc` function isn't accurate enough for smooth drawing. For example, the shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are rendered, you'll need to draw the arc yourself with [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) or a **PShape**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/arc_.html)\\n\\n@param `b` y-coordinate of the arc's ellipse\\n\\n@param `a` x-coordinate of the arc's ellipse\\n\\n@param `c` width of the arc's ellipse by default\\n\\n@param `d` height of the arc's ellipse by default\\n\\n@param `start` angle to start the arc, specified in radians\\n\\n@param `stop` angle to stop the arc, specified in radians\\n\\n@param `mode` closing mode. either PIE, OPEN, or CHORD\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Parc\"},{\"name\":\"Pbackground\",\"detail\":\"pg<PGRAPHICS> argb<LONG>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> image<PIMAGE>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> rgb<LONG> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\",\"documentation\":\"The `Pbackground` function sets the color used for the background of the processing graphics object. \\n\\nAn image object can also be used as the background for a sketch, although the image's width and height must match that of the processing object. Images used with `Pbackground` will ignore the current [`Ptint`](/doc/Ptint) setting. \\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pbackground` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/background_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `rgb` any rgb color value.\\n\\n@param `alpha` opacity of the background. 0 = transparent, 255 = opaque.\\n\\n@param `gray` a value between white (255) and black (0)\\n\\n@param `image` PImage to set as background (must be same size as pg)\\n\\n@param `v1` red or hue value (depending on the current color mode)\\n\\n@param `v2` green or saturation value (depending on the current color mode)\\n\\n@param `v3` blue or brightness value (depending on the current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbackground\"},{\"name\":\"PbeginContour\",\"detail\":\"pg<PGRAPHICS>  PbeginContour  pg<PGRAPHICS>\",\"documentation\":\"Use the `PbeginContour` and [`PendContour`](/doc/PendContour) function to create negative shapes within shapes such as the center of the letter 'O'. `PbeginContour` begins recording vertices for the shape and [`PendContour`](/doc/PendContour) stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\n\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a `PbeginContour`/[`PendContour`](/doc/PendContour) pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginContour\"},{\"name\":\"PbeginShape\",\"detail\":\"pg<PGRAPHICS> kind<STRING>  PbeginShape  pg<PGRAPHICS>\\npg<PGRAPHICS>  PbeginShape  pg<PGRAPHICS>\",\"documentation\":\"Using the `PbeginShape` and [`PendShape`](/doc/PendShape) functions allow creating more complex forms. `PbeginShape` begins recording vertices for a shape and [`PendShape`](/doc/PendShape) stops recording. \\n\\nThe value of the **kind** parameter tells it which types of shapes to create from the provided vertices. The parameters available for beginShape() are POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the `PbeginShape` function, a series of [`Pvertex`](/doc/Pvertex) commands must follow. To stop drawing the shape, call [`PendShape`](/doc/PendShape). The [`Pvertex`](/doc/Pvertex) function with two parameters specifies a position in 2D. Each shape will be outlined with the current stroke color and filled with the fill color. \\n\\n\\nTransformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within `PbeginShape`. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within `PbeginShape`. \\n\\n\\nThe P2D and P3D renderers allow [`Pstroke`](/doc/Pstroke) and [`Pfill`](/doc/Pfill) to be altered on a per-vertex group basis. Settings such as [`PstrokeWeight`](/doc/PstrokeWeight), [`PstrokeCap`](/doc/PstrokeCap), and [`PstrokeJoin`](/doc/PstrokeJoin) cannot be changed while inside a `PbeginShape`/[`PendShape`](/doc/PendShape) block with any renderer.\\n\\nUp to Warp 10 1.2.18, `PbeginShape` could be called without the **kind** parameter. It defaults to POLYGON.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginShape_.html)\\n\\n@param `kind` Either POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginShape\"},{\"name\":\"Pbezier\",\"detail\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pbezier  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE> x3<DOUBLE> y3<DOUBLE> z3<DOUBLE> x4<DOUBLE> y4<DOUBLE> z4<DOUBLE>  Pbezier  pg<PGRAPHICS>\",\"documentation\":\"Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezier_.html)\\n\\n@param `x1` coordinates for the first anchor point\\n\\n@param `y1` coordinates for the first anchor point\\n\\n@param `z1` coordinates for the first anchor point\\n\\n@param `x2` coordinates for the first control point\\n\\n@param `y2` coordinates for the first control point\\n\\n@param `z2` coordinates for the first control point\\n\\n@param `x3` coordinates for the second control point\\n\\n@param `y3` coordinates for the second control point\\n\\n@param `z3` coordinates for the second control point\\n\\n@param `x4` coordinates for the second anchor point\\n\\n@param `y4` coordinates for the second anchor point\\n\\n@param `z4` coordinates for the second anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbezier\"},{\"name\":\"PbezierDetail\",\"detail\":\"pg<PGRAPHICS> detail<NUMBER>  PbezierDetail  pg<PGRAPHICS>\",\"documentation\":\"Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the **P3D** renderer; the default **P2D** renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierDetail_.html)\\n\\n@param `detail` resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierDetail\"},{\"name\":\"PbezierPoint\",\"detail\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PbezierPoint  pg<PGRAPHICS> out<DOUBLE>\",\"documentation\":\"Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierPoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierPoint\"},{\"name\":\"PbezierTangent\",\"detail\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PbezierTangent  pg<PGRAPHICS> out<DOUBLE>\",\"documentation\":\"Calculates the tangent of a point on a Bezier curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierTangent\"},{\"name\":\"PbezierVertex\",\"detail\":\"pg<PGRAPHICS> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  PbezierVertex  pg<PGRAPHICS>\",\"documentation\":\"Specifies vertex coordinates for Bezier curves. Each call to `PbezierVertex` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PbezierVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only with POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierVertex_.html)\\n\\n@param `x2` The x-coordinate of the 1st control point\\n\\n@param `y2` The y-coordinate of the 1st control point\\n\\n@param `x3` The x-coordinate of the 2nd control point\\n\\n@param `y3` The y-coordinate of the 2nd control point\\n\\n@param `x4` The x-coordinate of the anchor point\\n\\n@param `y4` The y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierVertex\"},{\"name\":\"Pblend\",\"detail\":\"pg<PGRAPHICS> src<PIMAGE> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG> mode<STRING>  Pblend  pg<PGRAPHICS>\\npg<PGRAPHICS> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG> mode<STRING>  Pblend  pg<PGRAPHICS>\",\"documentation\":\"Blends a region of pixels from one image into another (or in itself again) with full alpha channel support.\\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels in the destination image (B):\\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - Multiply the colors, result will always be darker.\\n+ SCREEN - Opposite multiply, uses inverse values of the colors.\\n+ OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,and screens light values.\\n+ HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.\\n+ SOFT_LIGHT - Mix of DARKEST and LIGHTEST. Works like OVERLAY, but not as harsh.\\n+ DODGE - Lightens light tones and increases contrast, ignores darks.Called \\\"Color Dodge\\\" in Illustrator and Photoshop.\\n+ BURN - Darker areas are applied, increasing contrast, ignores lights.Called \\\"Color Burn\\\" in Illustrator and Photoshop.\\n\\nAll modes use the alpha information (highest byte) of source image pixels as the blending factor. If the source and destination regions are different sizes, the image will be automatically resized to match the destination size. If the **src** parameter is not used, the display window is used as the source image.\\n\\n[Link to original Processing doc](https://processing.org/reference/blend_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `mode` Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblend\"},{\"name\":\"PblendMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PblendMode  pg<PGRAPHICS>\",\"documentation\":\"Blends the pixels in the display window according to a defined mode. \\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels already in the display window (B). \\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B. This is the default blending mode.\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - multiply the colors, result will always be darker.\\n+ SCREEN - opposite multiply, uses inverse values of the colors.\\n+ REPLACE - the pixels entirely replace the others and don't utilize alpha (transparency) values\\n\\nA pixel's final color is the result of applying one of the above blend modes with each channel of (A) and (B) independently. For example, red is compared with red, green with green, and blue with blue.\\n\\nWe recommend using `PblendMode` and not the previous [`Pblend`](/doc/Pblend) function. However, unlike [`Pblend`](/doc/Pblend), the `PblendMode` function does not support the following: HARD_LIGHT, SOFT_LIGHT, OVERLAY, DODGE, BURN. On older hardware, the LIGHTEST, DARKEST, and DIFFERENCE modes might not be available as well. \\n\\n[Link to original Processing doc](https://processing.org/reference/blendMode_.html)\\n\\n@param `mode` The blending mode to use\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PblendMode\"},{\"name\":\"Pblue\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Pblue  pg<PGRAPHICS> blue<DOUBLE>\",\"documentation\":\"Extracts the blue value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pblue` function is easy to use and understand, but it is slower than bit masking. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/blue_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `blue` Blue component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblue\"},{\"name\":\"Pbox\",\"detail\":\"pg<PGRAPHICS> size<NUMBER>  Pbox  pg<PGRAPHICS>\\npg<PGRAPHICS> w<NUMBER> h<NUMBER> d<NUMBER>  Pbox  pg<PGRAPHICS>\",\"documentation\":\"A box is an extruded rectangle. A box with equal dimensions on all sides is a cube.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/box_.html)\\n\\n@param `size` dimension of the box in all dimensions (creates a cube)\\n\\n@param `w` dimension of the box in the x-dimension\\n\\n@param `h` dimension of the box in the y-dimension\\n\\n@param `d` dimension of the box in the z-dimension\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbox\"},{\"name\":\"Pbrightness\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Pbrightness  pg<PGRAPHICS> brightness<DOUBLE>\",\"documentation\":\"Extracts the brightness value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/brightness_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `brightness` Brightness component of input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbrightness\"},{\"name\":\"Pclear\",\"detail\":\"pg<PGRAPHICS>  Pclear  pg<PGRAPHICS>\",\"documentation\":\"Clears the pixels. This function clears everything in a **PGraphics** object to make all of the pixels 100% transparent.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clear_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclear\"},{\"name\":\"Pclip\",\"detail\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pclip  pg<PGRAPHICS>\",\"documentation\":\"Limits the rendering to the boundaries of a rectangle defined by the parameters. The boundaries are drawn based on the state of the [`PimageMode`](/doc/PimageMode) function, either CORNER, CORNERS, or CENTER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clip_.html)\\n\\n@param `a` x-coordinate of the rectangle, by default\\n\\n@param `b` y-coordinate of the rectangle, by default\\n\\n@param `c` width of the rectangle, by default\\n\\n@param `d` height of the rectangle, by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclip\"},{\"name\":\"Pcolor\",\"detail\":\"pg<PGRAPHICS> gray<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> gray<NUMBER> alpha<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\",\"documentation\":\"`Pcolor` creates colors for storing in ARGB LONG datatype.\\n\\n+ RGB: The most efficient is to skip Pcolor function, using the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n+ HSB: For Hue Saturation Brightness to RGB conversion, use [`PcolorMode`](/doc/PcolorMode) to specify HSB, then use Pcolor to convert to ARGB.\\n\\nThe parameters are interpreted as RGB or HSB values depending on the current [`PcolorMode`](/doc/PcolorMode). The default mode is RGB values from 0 to 255.\\n\\nNote that if only one value is provided to `Pcolor`, it will be interpreted as a grayscale value. Add a second value, and it will be used for alpha transparency. When three values are specified, they are interpreted as either RGB or HSB values. Adding a fourth value applies alpha transparency.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/color_.html)\\n\\n@param `gray` int: number specifying value between white and black\\n\\n@param `alpha` float, or int: relative to current color range\\n\\n@param `v1` float, or int: red or hue values relative to the current color range\\n\\n@param `v2` float, or int: green or saturation values relative to the current color range\\n\\n@param `v3` float, or int: blue or brightness values relative to the current color range\\n\\n@param `color` ARGB color.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcolor\"},{\"name\":\"PcolorMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max<DOUBLE>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max1<DOUBLE> max2<DOUBLE> max3<DOUBLE>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max1<DOUBLE> max2<DOUBLE> max3<DOUBLE> maxA<DOUBLE>  PcolorMode  pg<PGRAPHICS>\",\"documentation\":\"Changes the way Processing interprets color data. By default, the parameters for [`Pfill`](/doc/Pfill), [`Pstroke`](/doc/Pstroke), [`Pbackground`](/doc/Pbackground), and [`Pcolor`](/doc/Pcolor) are defined by values between 0 and 255 using the RGB color model. The `PcolorMode` function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling **colorMode(RGB, 1.0)** will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters **max**, **max1**, **max2**, **max3**, and **maxA**.\\n\\nWhen using max different from default values, do not work with grayscale.\\n\\nAfter changing the range of values for colors with code like **colorMode(HSB, 360, 100, 100)**, those ranges remain in use until they are explicitly changed again. For example, after running **colorMode(HSB, 360, 100, 100)** and then changing back to **colorMode(RGB)**, the range for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid this, be explicit about the ranges when changing the color mode. For instance, instead of **colorMode(RGB)**, write **colorMode(RGB, 255, 255, 255)**. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/colorMode_.html)\\n\\n@param `mode` Either 'RGB' or 'HSB', corresponding to Red/Green/Blue and Hue/Saturation/Brightness\\n\\n@param `max` range for all color elements\\n\\n@param `max1` range for the red or hue depending on the current color mode\\n\\n@param `max2` range for the green or saturation depending on the current color mode\\n\\n@param `max3` range for the blue or brightness depending on the current color mode\\n\\n@param `maxA` range for the alpha\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcolorMode\"},{\"name\":\"Pconstrain\",\"detail\":\"pg<PGRAPHICS> x<DOUBLE> low<DOUBLE> high<DOUBLE>  Pconstrain  pg<PGRAPHICS> clamped<DOUBLE>\",\"documentation\":\"Constrains a value to not exceed a maximum and minimum value. Also known as clamping a value. \\n\\nIt could be done with warpscript MIN MAX functions, see example.\\n\\n[Link to original Processing doc](https://processing.org/reference/constrain_.html)\\n\\n@param `x` The value to clamp.\\n\\n@param `low` Minimum limit.\\n\\n@param `high` Maximum limit.\\n\\n@param `clamped` Clamped value of x in [low high] range.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pconstrain\"},{\"name\":\"Pcopy\",\"detail\":\"pg<PGRAPHICS> src<PIMAGE> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG>  Pcopy  pg<PGRAPHICS>\\npg<PGRAPHICS> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG>  Pcopy  pg<PGRAPHICS>\\npg<PGRAPHICS>  Pcopy  pg<PGRAPHICS> img<PIMAGE>\",\"documentation\":\"Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the **src** parameter into the display window. If the source and destination regions are not the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/copy_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `img` PIMAGE object, copy of pg\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcopy\"},{\"name\":\"PcreateFont\",\"detail\":\"pg<PGRAPHICS> name<STRING>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER> smooth<BOOLEAN>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER> smooth<BOOLEAN> charset<STRING>  PcreateFont  pg<PGRAPHICS> font<PFONT>\",\"documentation\":\"Dynamically converts a font to the format used by Processing from a font that is installed on the computer.  Not all fonts can be used and some might work with one operating system and not others.\\n\\nThe **size** parameter states the font size you want to generate. The **smooth** parameter specifies if the font should be antialiased or not.\\n\\nSince the 2.5.0 version, the name of the font can be a URI to a OpenType or Type1 font which will be resolved by a macro defined by the `processing.font.resolver` configuration.\\n\\n[Link to original Processing doc](https://processing.org/reference/createFont_.html)\\n\\n@param `name` Name of the font to load or URI from where to load the font.\\n\\n@param `size` Point size of the font\\n\\n@param `smooth` True for an antialiased font, false for aliased\\n\\n@param `charset` subset of ascii characters to be generated.\\n\\n@param `font` Processing font object compatible with PtextFont.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcreateFont\"},{\"name\":\"Pcurve\",\"detail\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pcurve  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE> x3<DOUBLE> y3<DOUBLE> z3<DOUBLE> x4<DOUBLE> y4<DOUBLE> z4<DOUBLE>  Pcurve  pg<PGRAPHICS>\",\"documentation\":\"Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of `Pcurve` functions together or using [`PcurveVertex`](/doc/PcurveVertex). An additional function called [`PcurveTightness`](/doc/PcurveTightness) provides control for the visual quality of the curve. The `Pcurve` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n[Link to original Processing doc](https://processing.org/reference/curve_.html)\\n\\n@param `x1` float: coordinates for the beginning control point\\n\\n@param `y1` float: coordinates for the beginning control point\\n\\n@param `x2` float: coordinates for the first point\\n\\n@param `y2` float: coordinates for the first point\\n\\n@param `x3` float: coordinates for the second point\\n\\n@param `y3` float: coordinates for the second point\\n\\n@param `x4` float: coordinates for the ending control point\\n\\n@param `y4` float: coordinates for the ending control point\\n\\n@param `z1` float: coordinates for the beginning control point\\n\\n@param `z2` float: coordinates for the first point\\n\\n@param `z3` float: coordinates for the second point\\n\\n@param `z4` float: coordinates for the ending control point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcurve\"},{\"name\":\"PcurveDetail\",\"detail\":\"pg<PGRAPHICS> detail<NUMBER>  PcurveDetail  pg<PGRAPHICS>\",\"documentation\":\"Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D renderer as the default P2D renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveDetail_.html)\\n\\n@param `detail` Resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveDetail\"},{\"name\":\"PcurvePoint\",\"detail\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PcurvePoint  pg<PGRAPHICS> out<DOUBLE>\",\"documentation\":\"Evaluates the curve at point **t** for points **a**, **b**, **c**, **d**. The parameter **t** may range from 0 (the start of the curve) and 1 (the end of the curve). **a** and **d** are points on the curve, and **b** and **c** are the control points. This can be used once with the **x** coordinates and a second time with the **y** coordinates to get the location of a curve at **t**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curvePoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of second point on the curve\\n\\n@param `c` coordinate of third point on the curve\\n\\n@param `d` coordinate of fourth point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurvePoint\"},{\"name\":\"PcurveTangent\",\"detail\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PcurveTangent  pg<PGRAPHICS> out<DOUBLE>\",\"documentation\":\"Calculates the tangent of a point on a curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTangent\"},{\"name\":\"PcurveTightness\",\"detail\":\"pg<PGRAPHICS> tightness<NUMBER>  PcurveTightness  pg<PGRAPHICS>\",\"documentation\":\"Modifies the quality of forms created with [`Pcurve`](/doc/Pcurve) and [`PcurveVertex`](/doc/PcurveVertex). The parameter **tightness** determines how the curve fits to the vertex points. The value 0.0 is the default value for **tightness** (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTightness_.html)\\n\\n@param `tightness` Amount of deformation from the original vertices\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTightness\"},{\"name\":\"PcurveVertex\",\"detail\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  PcurveVertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  PcurveVertex  pg<PGRAPHICS>\",\"documentation\":\"Specifies vertex coordinates for curves. This function may only be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). The first and last points in a series of `PcurveVertex` lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with `PcurveVertex` will draw the curve between the second, third, and fourth points. The `PcurveVertex` function is an implementation of Catmull-Rom splines. \\n\\n[Link to original Processing doc](https://processing.org/reference/curveVertex_.html)\\n\\n@param `x` The x-coordinate of the vertex\\n\\n@param `y` The y-coordinate of the vertex\\n\\n@param `z` The z-coordinate of the vertex\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveVertex\"},{\"name\":\"Pdecode\",\"detail\":\"b64img<STRING>  Pdecode  img<PIMAGE>\\nrawimg<BYTES>  Pdecode  img<PIMAGE>\",\"documentation\":\"`Pdecode` takes the image representation on the stack and pushes a Pimage object on the stack. This object can only be used as an input for [`Pset`](/doc/Pset), [`Pimage`](/doc/Pimage), [`Pbackground`](/doc/Pbackground).\\n\\nInput string must start with the header `data:image/png;base64,`.\\n\\nSupported input types: PNG, GIF, JPG.\\n\\n@param `img` Processing Pimage object.\\n\\n@param `rawimg` Image bytes.\\n\\n@param `b64img` Base64 encoded image string\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdecode\"},{\"name\":\"Pdist\",\"detail\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE>  Pdist  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE>  Pdist  pg<PGRAPHICS>\",\"documentation\":\"Calculates the distance between two points, in 2D or 3D space.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/dist_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdist\"},{\"name\":\"Pellipse\",\"detail\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pellipse  pg<PGRAPHICS>\",\"documentation\":\"Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the [`PellipseMode`](/doc/PellipseMode) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipse_.html)\\n\\n@param `a` float: x-coordinate of the ellipse\\n\\n@param `b` float: y-coordinate of the ellipse\\n\\n@param `c` float: width of the ellipse by default\\n\\n@param `d` float: height of the ellipse by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pellipse\"},{\"name\":\"PellipseMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PellipseMode  pg<PGRAPHICS>\",\"documentation\":\"Modifies the location from which ellipses are drawn by changing the way in which parameters given to [`Pellipse`](/doc/Pellipse) are intepreted.\\n\\nThe default mode is **ellipseMode(CENTER)**, which interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(RADIUS)** also uses the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\n**ellipseMode(CORNER)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(CORNERS)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipseMode_.html)\\n\\n@param `mode` Either CENTER, RADIUS, CORNER, or CORNERS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PellipseMode\"},{\"name\":\"Pencode\",\"detail\":\"pg<PGRAPHICS>  Pencode  b64img<STRING>\\npg<PGRAPHICS> metadata<MAP>  Pencode  b64img<STRING>\",\"documentation\":\"`Pencode` function takes a processing graphic object on the top of the stack, render it to a png file, encode it in base64, prefix the result with the standard png header \\\"data:image/png;base64,\\\".\\n\\nThe resulting string is ready to use in an html document.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `b64img` Base64 encoded image string, ready to use in an html page.\\n\\n@param `metadata` Map of metadata to add to the PNG. Accepted keys are 'tEXt', 'zTXt' and 'iTXt', while values are lists of maps with 'keyword' and 'text' keys.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pencode\"},{\"name\":\"PendContour\",\"detail\":\"pg<PGRAPHICS>  PendContour  pg<PGRAPHICS>\",\"documentation\":\"Use the [`PbeginContour`](/doc/PbeginContour) and `PendContour` function to create negative shapes within shapes such as the center of the letter 'O'. [`PbeginContour`](/doc/PbeginContour) begins recording vertices for the shape and `PendContour` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a [`PbeginContour`](/doc/PbeginContour)/`PendContour` pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n[Link to original Processing doc](https://processing.org/reference/endContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendContour\"},{\"name\":\"PendShape\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PendShape  pg<PGRAPHICS>\\npg<PGRAPHICS>  PendShape  pg<PGRAPHICS>\",\"documentation\":\"The `PendShape` function is the companion to [`PbeginShape`](/doc/PbeginShape) and may only be called after [`PbeginShape`](/doc/PbeginShape). When `Pendshape` is called, all of image data defined since the previous call to [`PbeginShape`](/doc/PbeginShape) is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end). \\n\\nUp to Warp 10 1.2.18, `PendShape` could be called without the **mode** parameter. It defaults to OPEN.\\n\\n[Link to original Processing doc](https://processing.org/reference/endShape_.html)\\n\\n@param `mode` Use CLOSE to close the shape, OPEN otherwise.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendShape\"},{\"name\":\"Pfill\",\"detail\":\"pg<PGRAPHICS> argb<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<LONG> alpha<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<LONG> v2<LONG> v3<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<LONG> v2<LONG> v3<LONG> alpha<LONG>  Pfill  pg<PGRAPHICS>\",\"documentation\":\"Sets the color used to fill shapes. For example, if you run **fill(204, 102, 0)**, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current [`PcolorMode`](/doc/PcolorMode). The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\nThe value for the \\\"gray\\\" parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\nTo change the color of an image or a texture, use [`Ptint`](/doc/Ptint).\\n\\n[Link to original Processing doc](https://processing.org/reference/fill_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pfill\"},{\"name\":\"Pfilter\",\"detail\":\"pg<PGRAPHICS> kind<STRING>  Pfilter  pg<PGRAPHICS>\\npg<PGRAPHICS> kind<STRING> param<DOUBLE>  Pfilter  pg<PGRAPHICS>\",\"documentation\":\"Filters the display window using a preset filter or with a custom shader. Using a shader with `Pfilter` is much faster than without. Shaders require the P2D or P3D renderer in size().\\n\\n\\nThe presets options are:\\n\\n+ **THRESHOLD** Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n+ **GRAY** Converts any colors in the image to grayscale equivalents. No parameter is used.\\n+ **OPAQUE** Sets the alpha channel to entirely opaque. No parameter is used.\\n+ **INVERT** Sets each pixel to its inverse value. No parameter is used.\\n+ **POSTERIZE** Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.\\n+ **BLUR** Executes a Guassian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Guassian blur of radius 1. Larger values increase the blur.\\n+ **ERODE** Reduces the light areas. No parameter is used.\\n+ **DILATE** Increases the light areas. No parameter is used.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/filter_.html)\\n\\n@param `kind` Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, or DILATE\\n\\n@param `param` unique for each, see above\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.17\",\"OPB64name\":\"J5OdQ6G_RV\"},{\"name\":\"Pget\",\"detail\":\"pg<PGRAPHICS>  Pget  pg<PGRAPHICS> img<PIMAGE>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pget  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> w<NUMBER> h<NUMBER>  Pget  pg<PGRAPHICS> img<PIMAGE>\",\"documentation\":\"Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned (same as `Pcopy`). Use the **x** and **y** parameters to get the value of one pixel. Get a section of the display window by specifying additional **w** and **h** parameters. When getting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\nIf the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with **colorMode(HSB)**, the numbers returned will be in RGB format.\\n\\nGetting the color of a single pixel with **get(x, y)** is easy, but not as fast as grabbing the data directly from [`Ppixels`](/doc/Ppixels).\\n\\n[Link to original Processing doc](https://processing.org/reference/get_.html)\\n\\n@param `x` int: x-coordinate of the pixel\\n\\n@param `y` int: y-coordinate of the pixel\\n\\n@param `w` int: width of pixel rectangle to get\\n\\n@param `h` int: height of pixel rectangle to get\\n\\n@param `img` PIMAGE object\\n\\n@param `color` Color of the pixel, 32bits ARGB format.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pget\"},{\"name\":\"Pgreen\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Pgreen  pg<PGRAPHICS> green<DOUBLE>\",\"documentation\":\"Extracts the green value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pgreen` function is easy to use and understand, but it is slower than bit shifting. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/green_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `green` Green component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pgreen\"},{\"name\":\"Phue\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Phue  pg<PGRAPHICS> hue<DOUBLE>\",\"documentation\":\"Extracts the hue value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/hue_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `hue` Hue component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Phue\"},{\"name\":\"Pimage\",\"detail\":\"pg<PGRAPHICS> img<PIMAGE> a<NUMBER> b<NUMBER>  Pimage  pg<PGRAPHICS>\\npg<PGRAPHICS> img<PIMAGE> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pimage  pg<PGRAPHICS>\",\"documentation\":\"The `Pimage` function draws a Pimage (see [`Pdecode`](/doc/Pdecode)) on a PGraphic object.\\n\\nThe **img** parameter specifies the image to display and by default the **a** and **b** parameters define the location of its upper-left corner. The image is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PimageMode`](/doc/PimageMode) function can be used to change the way these parameters draw the image.\\n\\nThe color of an image may be modified with the [`Ptint`](/doc/Ptint) function. This function will maintain transparency for GIF and PNG images.\\n\\n[Link to original Processing doc](https://processing.org/reference/image_.html)\\n\\n@param `img` PImage: the image to display\\n\\n@param `a` float: x-coordinate of the image by default\\n\\n@param `b` float: y-coordinate of the image by default\\n\\n@param `c` float: width to display the image by default\\n\\n@param `d` float: height to display the image by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pimage\"},{\"name\":\"PimageMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PimageMode  pg<PGRAPHICS>\",\"documentation\":\"Modifies the location from which images are drawn by changing the way in which parameters given to [`Pimage`](/doc/Pimage) are intepreted.\\n\\nThe default mode is **imageMode(CORNER)**, which interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n**imageMode(CENTER)** interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/imageMode_.html)\\n\\n@param `mode` could be CORNER or CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PimageMode\"},{\"name\":\"Plerp\",\"detail\":\"pg<PGRAPHICS> start<NUMBER> stop<NUMBER> amt<NUMBER>  Plerp  pg<PGRAPHICS>\",\"documentation\":\"Calculates a number between two numbers at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines, or any linear interpolation.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerp_.html)\\n\\n@param `start` first value\\n\\n@param `stop` second value\\n\\n@param `amt` float between 0.0 and 1.0\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Plerp\"},{\"name\":\"PlerpColor\",\"detail\":\"pg<PGRAPHICS> c1<NUMBER> c2<NUMBER> amt<NUMBER>  PlerpColor  pg<PGRAPHICS> outcolor<LONG>\",\"documentation\":\"Calculates a color between two colors at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is halfway in between, etc. \\n\\nAn amount below 0 will be treated as 0. Likewise, amounts above 1 will be capped at 1. This is different from the behavior of `Plerp`, but necessary because otherwise numbers outside the range will produce strange and unexpected colors.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerpColor_.html)\\n\\n@param `c1` interpolate from this color\\n\\n@param `c2` interpolate to this color\\n\\n@param `amt` between 0.0 and 1.0\\n\\n@param `outcolor` the interpolated result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PlerpColor\"},{\"name\":\"Pline\",\"detail\":\"pg<PGRAPHICS> x1<NUMBER> y1<NUMBER> x2<NUMBER> y2<NUMBER>  Pline  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<NUMBER> y1<NUMBER> z1<NUMBER> x2<NUMBER> y2<NUMBER> z2<NUMBER>  Pline  pg<PGRAPHICS>\",\"documentation\":\"Draws a line (a direct path between two points) to the screen. The version of `Pline` with four parameters draws the line in 2D.  To color a line, use the [`Pstroke`](/doc/Pstroke) function. A line cannot be filled, therefore the [`Pfill`](/doc/Pfill) function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the [`PstrokeWeight`](/doc/PstrokeWeight) function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the **z** parameter requires the P3D parameter.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/line_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pline\"},{\"name\":\"PloadShape\",\"detail\":\"svg<STRING>  PloadShape  Pshape<PSHAPE>\",\"documentation\":\"`PloadShape` can load a [SVG image](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) and return a PSHAPE object. WarpScript does not support [OBJ files](https://en.wikipedia.org/wiki/Wavefront_.obj_file) yet. \\n\\nThis feature is experimental, some files may render empty. \\n\\n@param `svg` A one line or a multiline SVG string.\\n\\n@param `Pshape` A PSHAPE object which can be used with Pshape.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"PloadShape\"},{\"name\":\"Pmag\",\"detail\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER>  Pmag  pg<PGRAPHICS> mag<DOUBLE>\",\"documentation\":\"Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \\\"start\\\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, `Pmag` is a shortcut for writing **0 0 x y Pdist**. It is exactly the same as warpscript function [`HYPOT`](/doc/HYPOT).\\n\\n3D is not yet supported.\\n\\n[Link to original Processing doc](https://processing.org/reference/mag_.html)\\n\\n@param `a` first value\\n\\n@param `b` second value\\n\\n@param `mag` result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmag\"},{\"name\":\"Pmap\",\"detail\":\"pg<PGRAPHICS> value<DOUBLE> start1<DOUBLE> stop1<DOUBLE> start2<DOUBLE> stop2<DOUBLE>  Pmap  pg<PGRAPHICS> output<DOUBLE>\",\"documentation\":\"Re-maps a number from one range to another.\\n\\nIn the first example, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width).\\n\\n\\nAs shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/map_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start1` lower bound of the value's current range\\n\\n@param `stop1` upper bound of the value's current range\\n\\n@param `start2` lower bound of the value's target range\\n\\n@param `stop2` upper bound of the value's target range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmap\"},{\"name\":\"Pmask\",\"detail\":\"mask_image<PIMAGE> orginal_img<PIMAGE>  Pmask  masked_image<PIMAGE>\\nmask_image<PIMAGE> orginal_grp<PGRAPHICS>  Pmask  masked_grp<PGRAPHICS>\\nmask_grp<PGRAPHICS> orginal_img<PIMAGE>  Pmask  masked_image<PIMAGE>\\nmask_grp<PGRAPHICS> orginal_grp<PGRAPHICS>  Pmask  masked_grp<PGRAPHICS>\",\"documentation\":\"The `Pmask` function copies the blue channel of an image to the alpha channel of an other.\\n\\nAs **PGRAPHICS** intances are alse **PIMAGE** instances, you can use this fonction with **PGRAPHICS**.\\n\\n@param `orginal_img` PImage to be masked\\n\\n@param `mask_image` Pimage to serve as mask\\n\\n@param `masked_image` Masked Pimage\\n\\n@param `orginal_grp` PGraphics to be masked\\n\\n@param `mask_grp` PGraphics to serve as mask\\n\\n@param `masked_grp` Masked PGraphics\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.7.0\",\"OPB64name\":\"Pmask\"},{\"name\":\"PnoClip\",\"detail\":\"pg<PGRAPHICS>  PnoClip  pg<PGRAPHICS>\",\"documentation\":\"Disables the clipping previously started by the [`Pclip`](/doc/Pclip) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noClip_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoClip\"},{\"name\":\"PnoFill\",\"detail\":\"pg<PGRAPHICS>  PnoFill  pg<PGRAPHICS>\",\"documentation\":\"Disables filling geometry. If both [`PnoStroke`](/doc/PnoStroke) and `PnoFill` are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noFill_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoFill\"},{\"name\":\"PnoStroke\",\"detail\":\"pg<PGRAPHICS>  PnoStroke  pg<PGRAPHICS>\",\"documentation\":\"Disables drawing the stroke (outline). If both `PnoStroke` and [`PnoFill`](/doc/PnoFill) are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noStroke_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoStroke\"},{\"name\":\"PnoTint\",\"detail\":\"pg<PGRAPHICS>  PnoTint  pg<PGRAPHICS>\",\"documentation\":\"Removes the current fill value for displaying images and reverts to displaying images with their original hues.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noTint_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoTint\"},{\"name\":\"Pnorm\",\"detail\":\"pg<PGRAPHICS> value<NUMBER> start<NUMBER> stop<NUMBER>  Pnorm  pg<PGRAPHICS> output<DOUBLE>\",\"documentation\":\"Normalizes a number from another range into a value between 0 and 1. Identical to `value low high 0 1 Pmap`.\\n\\nNumbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/norm_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start` lower bound of the value's current range\\n\\n@param `stop` upper bound of the value's current range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pnorm\"},{\"name\":\"Ppixels\",\"detail\":\"pg<PGRAPHICS>  Ppixels  pg<PGRAPHICS> pixels<LIST<LONG>>\\nimg<PIMAGE>  Ppixels  img<PIMAGE> pixels<LIST<LONG>>\",\"documentation\":\"Returns an array containing the values for all the pixels in the display window. These values are of the color datatype. This array is the size of the display window. For example, if the image is 100x100 pixels, there will be 10000 values and if the window is 200x300 pixels, there will be 60000 values. After **pixels** has been modified, the [`PupdatePixels`](/doc/PupdatePixels) function must be run to update the content of the display window.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pixels.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppixels\"},{\"name\":\"Ppoint\",\"detail\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Ppoint  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Ppoint  pg<PGRAPHICS>\",\"documentation\":\"Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point.\\n\\nUse [`Pstroke`](/doc/Pstroke) to set the color of a `Ppoint`.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/point_.html)\\n\\n@param `x` x-coordinate of the point\\n\\n@param `y` y-coordinate of the point\\n\\n@param `z` z-coordinate of the point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppoint\"},{\"name\":\"PpopMatrix\",\"detail\":\"pg<PGRAPHICS>  PpopMatrix  pg<PGRAPHICS>\",\"documentation\":\"Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The [`PpushMatrix`](/doc/PpushMatrix) function saves the current coordinate system to the stack and `PpopMatrix` restores the prior coordinate system. [`PpushMatrix`](/doc/PpushMatrix) and `PpopMatrix` are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopMatrix\"},{\"name\":\"PpopStyle\",\"detail\":\"pg<PGRAPHICS>  PpopStyle  pg<PGRAPHICS>\",\"documentation\":\"The [`PpushStyle`](/doc/PpushStyle) function saves the current style settings and `PpopStyle` restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with [`PpushStyle`](/doc/PpushStyle), it builds on the current style information. The [`PpushStyle`](/doc/PpushStyle) and `PpopStyle` functions can be nested to provide more control (see example for a demonstration.)\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopStyle\"},{\"name\":\"PpushMatrix\",\"detail\":\"pg<PGRAPHICS>  PpushMatrix  pg<PGRAPHICS>\",\"documentation\":\"Pushes the current transformation matrix onto the matrix stack. Understanding `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) requires understanding the concept of a matrix stack. The `PpushMatrix` function saves the current coordinate system to the stack and [`PpopMatrix`](/doc/PpopMatrix) restores the prior coordinate system. `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushMatrix\"},{\"name\":\"PpushStyle\",\"detail\":\"pg<PGRAPHICS>  PpushStyle  pg<PGRAPHICS>\",\"documentation\":\"The `PpushStyle` function saves the current style settings and [`PpopStyle`](/doc/PpopStyle) restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `PpushStyle`, it builds on the current style information. The `PpushStyle` and [`PpopStyle`](/doc/PpopStyle) functions can be nested to provide more control. (See example for a demonstration.)\\n\\n\\nThe style information controlled by the following functions are included in the style:fill, stroke, tint, strokeWeight, strokeCap, strokeJoin, imageMode, rectMode, ellipseMode, shapeMode, colorMode, textAlign, textFont, textMode, textSize, textLeading, emissive, specular, shininess, ambient.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushStyle\"},{\"name\":\"Pquad\",\"detail\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pquad  pg<PGRAPHICS>\",\"documentation\":\"A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quad_.html)\\n\\n@param `x1` float: x-coordinate of the first corner\\n\\n@param `y1` float: y-coordinate of the first corner\\n\\n@param `x2` float: x-coordinate of the second corner\\n\\n@param `y2` float: y-coordinate of the second corner\\n\\n@param `x3` float: x-coordinate of the third corner\\n\\n@param `y3` float: y-coordinate of the third corner\\n\\n@param `x4` float: x-coordinate of the fourth corner\\n\\n@param `y4` float: y-coordinate of the fourth corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pquad\"},{\"name\":\"PquadraticVertex\",\"detail\":\"pg<PGRAPHICS> cx<DOUBLE> cy<DOUBLE> x3<DOUBLE> y3<DOUBLE>  PquadraticVertex  pg<PGRAPHICS>\",\"documentation\":\"Specifies vertex coordinates for quadratic Bezier curves. Each call to `PquadraticVertex` defines the position of one control point and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PquadraticVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when there is no MODE parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quadraticVertex_.html)\\n\\n@param `cx` the x-coordinate of the control point\\n\\n@param `cy` the y-coordinate of the control point\\n\\n@param `x3` the x-coordinate of the anchor point\\n\\n@param `y3` the y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PquadraticVertex\"},{\"name\":\"Prect\",\"detail\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Prect  pg<PGRAPHICS>\\npg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER> r<NUMBER>  Prect  pg<PGRAPHICS>\\npg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER> tl<NUMBER> tr<NUMBER> br<NUMBER> bl<NUMBER>  Prect  pg<PGRAPHICS>\",\"documentation\":\"Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the [`PrectMode`](/doc/PrectMode) function.\\n\\n\\n\\nTo draw a rounded rectangle, add a fifth parameter, which is used as the radius value for all four corners.\\n\\n\\n\\nTo use a different radius value for each corner, include eight parameters. When using eight parameters, the latter four set the radius of the arc at each corner separately, starting with the top-left corner and moving clockwise around the rectangle.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rect_.html)\\n\\n@param `a` float: x-coordinate of the rectangle by default\\n\\n@param `b` float: y-coordinate of the rectangle by default\\n\\n@param `c` float: width of the rectangle by default\\n\\n@param `d` float: height of the rectangle by default\\n\\n@param `r` float: radii for all four corners\\n\\n@param `tl` float: radius for top-left corner\\n\\n@param `tr` float: radius for top-right corner\\n\\n@param `br` float: radius for bottom-right corner\\n\\n@param `bl` float: radius for bottom-left corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Prect\"},{\"name\":\"PrectMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PrectMode  pg<PGRAPHICS>\",\"documentation\":\"Modifies the location from which rectangles are drawn by changing the way in which parameters given to [`Prect`](/doc/Prect) are intepreted.\\n\\nThe default mode is **CORNER**, which interprets the first two parameters of [`Prect`](/doc/Prect) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**CORNERS** interprets the first two parameters of [`Prect`](/doc/Prect) as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\\n\\n**CENTER** interprets the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**RADIUS** also uses the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, but uses the third and fourth parameters to specify half of the shape's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\\n\\n[Link to original Processing doc](https://processing.org/reference/rectMode_.html)\\n\\n@param `mode` either CORNER, CORNERS, CENTER, or RADIUS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PrectMode\"},{\"name\":\"Pred\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Pred  pg<PGRAPHICS> red<DOUBLE>\",\"documentation\":\"Extracts the red value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pred` function is easy to use and understand, but it is slower than bit shifting. \\n\\n[Link to original Processing doc](https://processing.org/reference/red_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `red` Red component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pred\"},{\"name\":\"PresetMatrix\",\"detail\":\"pg<PGRAPHICS>  PresetMatrix  pg<PGRAPHICS>\",\"documentation\":\"Replaces the current matrix with the identity matrix. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/resetMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PresetMatrix\"},{\"name\":\"Protate\",\"detail\":\"pg<PGRAPHICS> angle<NUMBER>  Protate  pg<PGRAPHICS>\",\"documentation\":\"Rotates the amount specified by the **angle** parameter. Angles must be specified in radians (values from **0** to **2 PI**). \\n\\nThe coordinates are always rotated around their relative position to the origin. Positive numbers rotate objects in a clockwise direction and negative numbers rotate in the couterclockwise direction. Transformations apply to everything that happens afterward, and subsequent calls to the function compound the effect. For example, calling `pi 2.0 / Protate` once and then calling `pi 2.0 / Protate` a second time is the same as a single `pi Protate`. \\n \\n\\nTechnically, `Protate` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rotate_.html)\\n\\n@param `angle` angle of rotation specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Protate\"},{\"name\":\"Psaturation\",\"detail\":\"pg<PGRAPHICS> rgb<NUMBER>  Psaturation  pg<PGRAPHICS> saturation<DOUBLE>\",\"documentation\":\"Extracts the saturation value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/saturation_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `saturation` Saturation component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psaturation\"},{\"name\":\"Pscale\",\"detail\":\"pg<PGRAPHICS> s<NUMBER>  Pscale  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pscale  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Pscale  pg<PGRAPHICS>\",\"documentation\":\"Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call `2.0 Pscale` increases the dimension of a shape by 200%.\\n\\n\\n\\nTransformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `2.0 Pscale` and then `1.5 Pscale` is the same as `3.0 Pscale`. This function can be further controlled with [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/scale_.html)\\n\\n@param `s` percentage to scale the object\\n\\n@param `x` percentage to scale the object in the x-axis\\n\\n@param `y` percentage to scale the object in the y-axis\\n\\n@param `z` percentage to scale the object in the z-axis\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pscale\"},{\"name\":\"Pset\",\"detail\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER> c<NUMBER>  Pset  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> img<PIMAGE>  Pset  pg<PGRAPHICS>\",\"documentation\":\"Changes the color of any pixel, or writes an image directly to the display window.\\n\\n\\n\\nThe **x** and **y** parameters specify the pixel to change and the **c** parameter specifies the color value. The **c** parameter is interpreted according to the current color mode.  (The default color mode is RGB values from 0 to 255.)  When setting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\n\\n\\nSetting the color of a single pixel with **set(x, y)** is easy, but not as fast as putting the data directly into the list of pixels returned by  [`Ppixels`](/doc/Ppixels).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/set_.html)\\n\\n@param `x` X-coordinate of the pixel\\n\\n@param `y` Y-coordinate of the pixel\\n\\n@param `c` Any value of the color datatype\\n\\n@param `img` Image to copy into the original image\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pset\"},{\"name\":\"Pshape\",\"detail\":\"pg<PGRAPHICS> shape<PSHAPE>  Pshape  pg<PGRAPHICS>\\npg<PGRAPHICS> shape<PSHAPE> x<DOUBLE> y<DOUBLE>  Pshape  pg<PGRAPHICS>\\npg<PGRAPHICS> shape<PSHAPE> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE>  Pshape  pg<PGRAPHICS>\",\"documentation\":\"Draws shapes to the display window. Shapes must be loaded with [`PloadShape`](/doc/PloadShape). Processing currently works with SVG, OBJ, and custom-created shapes. WrapScript only support SVG. The **shape** parameter specifies the shape to display and the coordinate parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PshapeMode`](/doc/PshapeMode) function can be used to change the way these parameters are interpreted.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shape_.html)\\n\\n@param `shape` the shape to display\\n\\n@param `x` x-coordinate of the shape\\n\\n@param `y` y-coordinate of the shape\\n\\n@param `a` x-coordinate of the shape\\n\\n@param `b` y-coordinate of the shape\\n\\n@param `c` width to display the shape\\n\\n@param `d` height to display the shape\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"Pshape\"},{\"name\":\"PshapeMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PshapeMode  pg<PGRAPHICS>\",\"documentation\":\"Modifies the location from which shapes draw. The default mode is **shapeMode(CORNER)**, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. The syntax **shapeMode(CORNERS)** uses the first and second parameters of [`Pshape`](/doc/Pshape) to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax **shapeMode(CENTER)** draws the shape from its center point and uses the third and forth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shapeMode_.html)\\n\\n@param `mode` int: either CORNER, CORNERS, CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshapeMode\"},{\"name\":\"PshearX\",\"detail\":\"pg<PGRAPHICS> angle<NUMBER>  PshearX  pg<PGRAPHICS>\",\"documentation\":\"Shears a shape around the x-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearX` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearX_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearX\"},{\"name\":\"PshearY\",\"detail\":\"pg<PGRAPHICS> angle<NUMBER>  PshearY  pg<PGRAPHICS>\",\"documentation\":\"Shears a shape around the y-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearY` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearY_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearY\"},{\"name\":\"Psize\",\"detail\":\"img<PIMAGE>  Psize  width<LONG> height<LONG>\\npg<PGRAPHICS>  Psize  width<LONG> height<LONG>\",\"documentation\":\"The `Psize` function returns the pixel `width` and `height` of a Pimage or PGraphics object.\\n\\n@param `img` PImage instance to measure.\\n\\n@param `pg` PGraphics instance to measure.\\n\\n@param `height` Object height in pixels.\\n\\n@param `width` Object height in pixels.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.6.0\",\"OPB64name\":\"Psize\"},{\"name\":\"Psphere\",\"detail\":\"pg<PGRAPHICS> r<NUMBER>  Psphere  pg<PGRAPHICS>\",\"documentation\":\"A sphere is a hollow ball made from tessellated triangles.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphere_.html)\\n\\n@param `r` the radius of the sphere\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psphere\"},{\"name\":\"PsphereDetail\",\"detail\":\"pg<PGRAPHICS> res<NUMBER>  PsphereDetail  pg<PGRAPHICS>\\npg<PGRAPHICS> ures<NUMBER> vres<NUMBER>  PsphereDetail  pg<PGRAPHICS>\",\"documentation\":\"Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you are going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until `PsphereDetail` is called again with a new parameter and so should **not** be called prior to every [`Psphere`](/doc/Psphere) statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphereDetail_.html)\\n\\n@param `res` int: number of segments (minimum 3) used per full circle revolution\\n\\n@param `ures` int: number of segments used longitudinally per full circle revolutoin\\n\\n@param `vres` int: number of segments used latitudinally from top to bottom\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PsphereDetail\"},{\"name\":\"Pstroke\",\"detail\":\"pg<PGRAPHICS> argb<LONG>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<LONG> alpha<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE> alpha<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pstroke  pg<PGRAPHICS>\",\"documentation\":\"Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current **colorMode** The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/stroke_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pstroke\"},{\"name\":\"PstrokeCap\",\"detail\":\"pg<PGRAPHICS> cap<STRING>  PstrokeCap  pg<PGRAPHICS>\",\"documentation\":\"Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeCap_.html)\\n\\n@param `cap` Either SQUARE, PROJECT, or ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeCap\"},{\"name\":\"PstrokeJoin\",\"detail\":\"pg<PGRAPHICS> join<STRING>  PstrokeJoin  pg<PGRAPHICS>\",\"documentation\":\"Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeJoin_.html)\\n\\n@param `join` Either MITER, BEVEL, ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeJoin\"},{\"name\":\"PstrokeWeight\",\"detail\":\"pg<PGRAPHICS> weight<NUMBER>  PstrokeWeight  pg<PGRAPHICS>\",\"documentation\":\"Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight. See [`Ppoint`](/doc/Ppoint) example.\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeWeight_.html)\\n\\n@param `weight` The weight (in pixels) of the stroke.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeWeight\"},{\"name\":\"Ptext\",\"detail\":\"pg<PGRAPHICS> s<STRING> x<DOUBLE> y<DOUBLE>  Ptext  pg<PGRAPHICS>\\npg<PGRAPHICS> s<STRING> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE>  Ptext  pg<PGRAPHICS>\",\"documentation\":\"Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the [`PtextFont`](/doc/PtextFont) function and a default size will be used unless a font is set with [`PtextSize`](/doc/PtextSize). Change the color of the text with the [`Pfill`](/doc/Pfill) function. The text displays in relation to the [`PtextAlign`](/doc/PtextAlign) function, which gives the option to draw to the left, right, and center of the coordinates.\\n\\n\\n\\nThe **x2** and **y2** parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current [`PrectMode`](/doc/PrectMode) setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen.\\n\\n\\n\\nNote that Processing now lets you call `Ptext` without first specifying a PFont with [`PtextFont`](/doc/PtextFont). In that case, a generic sans-serif font will be used instead.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/text_.html)\\n\\n@param `s` the string to be displayed\\n\\n@param `x` by default, x-coordinate of text\\n\\n@param `y` by default, y-coordinate of text\\n\\n@param `x1` by default, the x-coordinate of text, see PrectMode for more info\\n\\n@param `y1` by default, the y-coordinate of text, see PrectMode for more info\\n\\n@param `x2` by default, the width of the text box, see PrectMode for more info\\n\\n@param `y2` by default, the height of the text box, see PrectMode for more info\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptext\"},{\"name\":\"PtextAlign\",\"detail\":\"pg<PGRAPHICS> alignX<STRING>  PtextAlign  pg<PGRAPHICS>\\npg<PGRAPHICS> alignX<STRING> alignY<STRING>  PtextAlign  pg<PGRAPHICS>\",\"documentation\":\"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the **x** and **y** parameters of the [`Ptext`](/doc/Ptext) function.\\n\\n\\n\\nAn optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current [`PtextDescent`](/doc/PtextDescent). For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.\\n\\n\\n\\nWhen using [`Ptext`](/doc/Ptext) with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)\\n\\n\\n\\nThe vertical alignment is based on the value of [`PtextAscent`](/doc/PtextAscent), which many fonts do not specify correctly. It may be necessary to use a hack and offset by a few pixels by hand so that the offset looks correct. To do this as less of a hack, use some percentage of [`PtextAscent`](/doc/PtextAscent) or [`PtextDescent`](/doc/PtextDescent) so that the hack works even if you change the size of the font.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAlign_.html)\\n\\n@param `alignX` Horizontal alignment, either LEFT, CENTER, or RIGHT\\n\\n@param `alignY` Vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAlign\"},{\"name\":\"PtextAscent\",\"detail\":\"pg<PGRAPHICS>  PtextAscent  pg<PGRAPHICS> ascent<DOUBLE>\",\"documentation\":\"Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline. For example, adding the `PtextAscent` and [`PtextDescent`](/doc/PtextDescent) values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAscent_.html)\\n\\n@param `ascent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAscent\"},{\"name\":\"PtextDescent\",\"detail\":\"pg<PGRAPHICS>  PtextDescent  pg<PGRAPHICS> descent<DOUBLE>\",\"documentation\":\"Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline. For example, adding the [`PtextAscent`](/doc/PtextAscent) and `PtextDescent` values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textDescent_.html)\\n\\n@param `descent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextDescent\"},{\"name\":\"PtextFont\",\"detail\":\"pg<PGRAPHICS> font<PFONT>  PtextFont  pg<PGRAPHICS>\\npg<PGRAPHICS> font<PFONT> size<NUMBER>  PtextFont  pg<PGRAPHICS>\",\"documentation\":\"Sets the current font that will be drawn with the [`Ptext`](/doc/Ptext) function. Fonts must be created for Processing with [`PcreateFont`](/doc/PcreateFont) before they can be used. The font set through `PtextFont` will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textFont_.html)\\n\\n@param `font` Any variable of the type PFont\\n\\n@param `size` the size of the letters in pixel.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextFont\"},{\"name\":\"PtextLeading\",\"detail\":\"pg<PGRAPHICS> leading<NUMBER>  PtextLeading  pg<PGRAPHICS>\",\"documentation\":\"Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.  Note, however, that the leading is reset by [`PtextSize`](/doc/PtextSize). For example, if the leading is set to 20 with `20 PtextLeading`, then if `48 PtextSize` is run at a later point, the leading will be reset to the default for the text size of 48.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textLeading_.html)\\n\\n@param `leading` The size in pixels for spacing between lines\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextLeading\"},{\"name\":\"PtextMode\",\"detail\":\"pg<PGRAPHICS> mode<STRING>  PtextMode  pg<PGRAPHICS>\",\"documentation\":\"Sets the way text draws to the screen, either as texture maps or as vector geometry. The default **textMode(MODEL)**, uses textures to render the fonts. The **textMode(SHAPE)** mode draws text using the glyph outlines of individual characters rather than as textures. This mode is only supported with the **PDF** and **P3D** renderer settings. With the **PDF** renderer, you must call **textMode(SHAPE)** before any other drawing occurs. If the outlines are not available, then **textMode(SHAPE)** will be ignored and **textMode(MODEL)** will be used instead.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textMode_.html)\\n\\n@param `mode` int: either MODEL or SHAPE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextMode\"},{\"name\":\"PtextSize\",\"detail\":\"pg<PGRAPHICS> size<NUMBER>  PtextSize  pg<PGRAPHICS>\",\"documentation\":\"Sets the current font size. This size will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function. Font size is measured in units of pixels.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textSize_.html)\\n\\n@param `size` float: the size of the letters in units of pixels\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextSize\"},{\"name\":\"PtextWidth\",\"detail\":\"pg<PGRAPHICS> str<STRING>  PtextWidth  pg<PGRAPHICS> w<DOUBLE>\",\"documentation\":\"Calculates and returns the width of any character or text string.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textWidth_.html)\\n\\n@param `str` The String of characters to measure\\n\\n@param `w` The width of the input string\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextWidth\"},{\"name\":\"Ptint\",\"detail\":\"pg<PGRAPHICS> argb<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<NUMBER> alpha<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Ptint  pg<PGRAPHICS>\",\"documentation\":\"Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.\\n\\n\\n\\nTo apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, **tint(255, 128)** will make an image 50pc transparent (assuming the default alpha range of 0-255, which can be changed with [`PcolorMode`](/doc/PcolorMode)).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/tint_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `alpha` opacity of the image\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptint\"},{\"name\":\"PtoImage\",\"detail\":\"pg<PGRAPHICS>  PtoImage  img<PIMAGE>\",\"documentation\":\"The `PtoImage` function transforms a `PGRAPHICS` to a `PIMAGE`.\\n\\nThe `PGRAPHICS` can still be used after the transformation as this function copies the pixel values. This is equivalent to `Pencode Pdecode` but it is a lot faster.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `img` Processing Pimage object.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.1.0\",\"OPB64name\":\"PtoImage\"},{\"name\":\"Ptranslate\",\"detail\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Ptranslate  pg<PGRAPHICS>\",\"documentation\":\"Specifies an amount to displace objects within the display window. The **x** parameter specifies left/right translation, the **y** parameter specifies up/down translation.\\n\\n\\n\\nTransformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling **50 0 Ptranslate** and then **20 0 Ptranslate** is the same as **70 0 Ptranslate**. This function can be further controlled by using [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/translate_.html)\\n\\n@param `x` left/right translation\\n\\n@param `y` up/down translation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptranslate\"},{\"name\":\"Ptriangle\",\"detail\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE>  Ptriangle  pg<PGRAPHICS>\",\"documentation\":\"A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/triangle_.html)\\n\\n@param `x1` float: x-coordinate of the first point\\n\\n@param `y1` float: y-coordinate of the first point\\n\\n@param `x2` float: x-coordinate of the second point\\n\\n@param `y2` float: y-coordinate of the second point\\n\\n@param `x3` float: x-coordinate of the third point\\n\\n@param `y3` float: y-coordinate of the third point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptriangle\"},{\"name\":\"PupdatePixels\",\"detail\":\"pg<PGRAPHICS> pixels<LIST<LONG>>  PupdatePixels  pg<PGRAPHICS>\\nimg<PIMAGE> pixels<LIST<LONG>>  PupdatePixels  img<PIMAGE>\",\"documentation\":\"Updates the display window with the data in the **pixels[]** array. Use in conjunction with [`Ppixels`](/doc/Ppixels). If you are only reading pixels from the array, there's no need to call `PupdatePixels` - updating is only necessary to apply changes.\\n\\n[Link to original Processing doc](https://processing.org/reference/updatePixels_.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PupdatePixels\"},{\"name\":\"Pvertex\",\"detail\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> u<NUMBER> v<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER> u<NUMBER> v<NUMBER>  Pvertex  pg<PGRAPHICS>\",\"documentation\":\"All shapes are constructed by connecting a series of vertices. `Pvertex` is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/vertex_.html)\\n\\n@param `x` x-coordinate of the vertex\\n\\n@param `y` y-coordinate of the vertex\\n\\n@param `z` float: z-coordinate of the vertex\\n\\n@param `u` float: horizontal coordinate for the texture mapping\\n\\n@param `v` float: vertical coordinate for the texture mapping\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pvertex\"},{\"name\":\"Q->\",\"detail\":\"input<LONG>  Q->  w<DOUBLE> x<DOUBLE> y<DOUBLE> z<DOUBLE>\",\"documentation\":\"The `Q->` function consumes on the stack a [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long and push back the quaternion into\\n4 doubles (w, x, y, z, with z being on top).\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `input` Quaternion representation\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"JHoy\"},{\"name\":\"QCONJUGATE\",\"detail\":\"quaternion<LONG>  QCONJUGATE  result<LONG>\",\"documentation\":\"The `QCONJUGATE` function performs a [conjugation](https://en.wikipedia.org/wiki/Quaternion#Conjugation,_the_norm,_and_reciprocal) of a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the quaternion conjugate into a long.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `result` The conjugated quaternion\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QCONJUGATE\"},{\"name\":\"QDIVIDE\",\"detail\":\"q<LONG> r<LONG>  QDIVIDE  result<LONG>\",\"documentation\":\"The `QDIVIDE` function divides a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of dividing them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from division *q* by *r*\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QDIVIDE\"},{\"name\":\"QMULTIPLY\",\"detail\":\"q<LONG> r<LONG>  QMULTIPLY  result<LONG>\",\"documentation\":\"The `QMULTIPLY` function multiplies a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of multiplying them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from multiplication *q* by *r*\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QMULTIPLY\"},{\"name\":\"QROTATE\",\"detail\":\"x<DOUBLE> y<DOUBLE> z<DOUBLE> quaternion<LONG>  QROTATE  x<DOUBLE> y<DOUBLE> z<DOUBLE>\",\"documentation\":\"Rotates a vector by a [quaternion](https://en.wikipedia.org/wiki/Quaternion).\\n\\nThe `QROTATE` function consumes on the top of the stack three doubles representing a vector(x, y, z) and a long representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the vector rotated into 3 doubles (x, y, z with z being on top).\\n\\n@param `quaternion` The quaternion used to rotate the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATE\"},{\"name\":\"QROTATION\",\"detail\":\"quaternion<LONG>  QROTATION  x<DOUBLE> y<DOUBLE> z<DOUBLE> angle<DOUBLE>\",\"documentation\":\"The `QROTATION` extracts the axis and angle of the rotation represented by the [quaternion](https://en.wikipedia.org/wiki/Quaternion) on the stack.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `angle` The angle of rotation\\n\\n@param `x` The X axis\\n\\n@param `y` The Y axis\\n\\n@param `z` The Z axis\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATION\"},{\"name\":\"QUANTIZE\",\"detail\":\"gts<GTS> bounds<LIST<DOUBLE>> values<LIST>  QUANTIZE  qgts<GTS>\\nlgts<LIST<GTS>> bounds<LIST<DOUBLE>> values<LIST>  QUANTIZE  lqgts<LIST<GTS>>\",\"documentation\":\"The `QUANTIZE` function produces a quantized version of a Geo Time Series™ by replacing each value with a value from a finite list according to the interval the original value falls in. This function only works on numeric Geo Time Series™.\\nThis function can help to \\\"discretify\\\" data before calling [`VALUEHISTOGRAM`](/doc/VALUEHISTOGRAM).\\nThe list of intervals is defined as: [-∞,bounds<sub>0</sub>], (bounds<sub>0</sub>,bounds_<sub>1</sub>], (bounds<sub>1</sub>,bounds<sub>2</sub>], ..., (bounds<sub>n-1</sub>,+∞]\\n\\n@param `values` List of `n+1` values, one for each interval defined by `bounds`. If empty, the list `[ `0` `1` ... `n+1` ]` will be used.\\n\\n@param `bounds` Sorted list of `n` finite bounds defining `n+1` intervals.\\n\\n@param `gts` Geo Time Series™ to quantize.\\n\\n@param `qgts` Quantized GTS.\\n\\n@param `lgts` List of Geo Time Series™ to quantize.\\n\\n@param `lqgts` List of quantized GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"QUANTIZE\"},{\"name\":\"RAND\",\"detail\":\" RAND  num<DOUBLE>\",\"documentation\":\"The `RAND` function pushes onto the stack a random floating point number between 0.0 (inclusive) and 1.0 (exlusive) generated by the default random generator.\\n\\nThis generation is cryptographically secure.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RAND\"},{\"name\":\"RANDOM\",\"detail\":\" RANDOM  num<DOUBLE>\",\"documentation\":\"The `RANDOM` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThis function is very similar to [SRAND](/doc/SRAND) except the seed is choosen pseudorandomly when the function is first called. Subsequent calls use the same generator.\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"RANDOM\"},{\"name\":\"RANDPDF\",\"detail\":\"valueHistogram<MAP>  RANDPDF  result<STRING>\",\"documentation\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe result if a function pushed onto the stack. This function does not have any arguments.\\n\\nTo use the function pushed by `RANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.7\",\"OPB64name\":\"RANDPDF\"},{\"name\":\"RANGE\",\"detail\":\"[ end<LONG> ]  RANGE  output<LIST<LONG>>\\n[ start<LONG> end<LONG> ]  RANGE  output<LIST<LONG>>\\n[ start<LONG> end<LONG> step<LONG> ]  RANGE  output<LIST<LONG>>\",\"documentation\":\"`RANGE` pushes onto the stack a list of integers in the given range [start included, end excluded[. If start is not in the parameter list, start=0.\\n\\n`RANGE` also accepts a step parameter in the parameter list.\\n\\n\\n@param `start` The start of range, default is 0\\n\\n@param `end` The end of range\\n\\n@param `step` The step between integers, default is 1\\n\\n@param `output` The list of every integers in the range [start end[\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGE\"},{\"name\":\"RANGECOMPACT\",\"detail\":\"gts<GTS>  RANGECOMPACT  compacted<GTS>\\nlgts<LIST<GTS>>  RANGECOMPACT  lcompacted<LIST<GTS>>\",\"documentation\":\"The `RANGECOMPACT` simplifies a Geo Time Series™ by simplifying ranges of identical values (with identical latitude, longitude and elevation), retaining only the first and last ticks of each range.\\n\\n@param `gts` Geo Time Series™ to compact.\\n\\n@param `compacted` Compacted GTS.\\n\\n@param `lgts` List of Geo Time Series™ to compact.\\n\\n@param `lcompacted` List of compacted GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGECOMPACT\"},{\"name\":\"RAWDTW\",\"detail\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  RAWDTW  dtw<DOUBLE>\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe computation is performed on the raw Geo Time Series™, no transformation is applied to them.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"RAWDTW\"},{\"name\":\"REDEFS\",\"detail\":\"flag<BOOLEAN>  REDEFS \",\"documentation\":\"The `REDEFS` function allows or disallows execution of redefined functions.\\n\\n@param `flag` Shall we allow or disallow the execution of redefined functions.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REDEFS\"},{\"name\":\"REDUCE\",\"detail\":\"[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> ]  REDUCE  result<LIST<GTS>>\\n[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> overrideTick<BOOLEAN> ]  REDUCE  result<LIST<GTS>>\",\"documentation\":\"The `REDUCE` framework groups Geo Time Series™ by equivalence classes based on label values and applies a function on each equivalence class of Geo Time Series™, considering the values of each tick and producing one GTS per equivalence class.\\n\\nAs the selected reducer function is applied tick by tick, it is usually wise to [`BUCKETIZE`](/doc/BUCKETIZE) the GTS first with a common value of `lastbucket`.\\n\\nThe labels whose values are common to all the GTS in an equivalence class will be retained.\\n\\nSince 2.1 you can make REDUCE override the GTSs ticks. This usage in mainly to be used in conjuction with [`MACROREDUCER`](/doc/MACROREDUCER).\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` List of resulting Geo Time Series™.\\n\\n@param `overrideTick` Boolean, if true allows the reducer to modify the ticks of the GTSs. If not set, the reducer cannot modify the ticks.\\n\\n\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"REDUCE\"},{\"name\":\"RELABEL\",\"detail\":\"gts<GTS> labels<MAP>  RELABEL  gts<GTS>\\nlgts<LIST<GTS>> labels<MAP>  RELABEL  lgts<LIST<GTS>>\\nencoder<GTSENCODER> labels<MAP>  RELABEL  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> labels<MAP>  RELABEL  lencoder<LIST<GTSENCODER>>\",\"documentation\":\"Modifies the labels of a Geo Time Series™. The `RELABEL` function expects a parameter MAP whose entries are labels to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `RELABEL` function will use the rest of the MAP as the actual labels to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing labels.\\n\\nAn entry with an empty STRING value or a NULL value will have the effect of removing the label from the GTS' labels.        \\n\\n@param `labels` Parameter map of label names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `encoder` Encoder to relabel\\n\\n@param `lencoder` List of encoders to relabel\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RELABEL\"},{\"name\":\"REMOVE\",\"detail\":\"inputlist<LIST> index<LONG>  REMOVE  outputlist<LIST> removeditem<ANY>\\ninputmap<MAP> key<ANY>  REMOVE  outputmap<MAP> removeditem<ANY>\\ninputgts<GTS> pointindex<LONG>  REMOVE  outputgts<GTS> removedpoint<LIST>\",\"documentation\":\"Removes an entry from a MAP or from a LIST.\\n\\nThe `REMOVE` function consumes a list (or a map) and a index (or a key), then remove the entry.\\nIt lets the input on the stack and puts the removed item on top of the stack. \\nAs a result, the input map or list is modified and the map or list left on top of the stack is *not* a copy. \\n\\nIf the index is out of bound, the returned value is `NULL` and the list or array is unmodified.\\nIf the key does not exist in the map, it returns null as the removed entry.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **GTS**.\\n\\nSince 2.7, `REMOVE` can be called on a **GTS**.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `inputmap` The reference to the map to be modified\\n\\n@param `index` The index of the list, 0 for the first item\\n\\n@param `inputlist` The reference to the list to be modified\\n\\n@param `removeditem` Depending on map or list content, could be any type\\n\\n@param `outputmap` The input map modified\\n\\n@param `outputlist` The input list modified\\n\\n@param `pointindex` Index of the point in the GTS, 0-indexed, handles negative indexing.\\n\\n@param `inputgts` The GTS to remove the point from.\\n\\n@param `removedpoint` The removed point. List of timestamp, latitude, longitude, elevation and value.\\n\\n@param `outputgts` The acopy of the original GTS with the requested point removed.\\n\\n\",\"tags\":[\"maps\",\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"REMOVE\"},{\"name\":\"REMOVETICK\",\"detail\":\"gts<GTS> tick<LONG>  REMOVETICK  pruned<GTS>\\ngts<GTS> lticks<LIST<LONG>>  REMOVETICK  pruned<GTS>\\ngts<GTS> lticks<SET<LONG>>  REMOVETICK  pruned<GTS>\",\"documentation\":\"The `REMOVETICK` function transforms a Geo Time Series™ by removing all occurrences of a tick or ticks.\\n\\n@param `tick` Tick (timestamp) to remove.\\n\\n@param `lticks` List or Set of ticks to remove.\\n\\n@param `gts` Geo Time Series™ to transform.\\n\\n@param `pruned` Tranformed Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.19\",\"OPB64name\":\"REMOVETICK\"},{\"name\":\"RENAME\",\"detail\":\"gts<GTS> name<STRING>  RENAME  gts<GTS>\\nlgts<LIST<GTS>> name<STRING>  RENAME  lgts<LIST<GTS>>\\nencoder<GTSENCODER> name<STRING>  RENAME  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> name<STRING>  RENAME  lencoder<LIST<GTSENCODER>>\",\"documentation\":\"The `RENAME` function changes the name of a Geo Time Series™, an Encoder or a list thereof. This operation may be required prior to using some functions. If the name starts with '+', the specified name will be appended to the current name of the GTS or Encoder.\\n\\nIf you want to rename a Geo Time Series™ or an Encoder so its name starts with a '+', you must first set its name to the empty string then use rename with the desired name prefixed with an additional '+'.\\n\\n@param `gts` Geo Time Series™ instance to rename.\\n\\n@param `lgts` List of Geo Time Series™ instances to rename.\\n\\n@param `encoder` Encoder to rename.\\n\\n@param `lencoder` Encoder to rename.\\n\\n@param `name` New name to give to the GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"RENAME\"},{\"name\":\"REOPTALT\",\"detail\":\"alternatives<LIST<STRING>>  REOPTALT  regexp<STRING>\",\"documentation\":\"Produces a **R**egular **E**xpression **OPT**imized for **ALT**ernation from a list of STRINGs. Large alternations in regular expressions can lead to excessive backtracking and poor matching performance. In order to mitigate this, the `REOPTALT` function will produce a regular expression from a list of STRINGs which reduces the backtracking thus leading to better matching performance.\\n\\n@param `alternatives` List of STRINGs which should be used in the alternation.\\n\\n@param `regexp` Regular expression\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.2.16\",\"OPB64name\":\"REOPTALT\"},{\"name\":\"REPLACE\",\"detail\":\"original<ANY> pattern<ANY> replacement<ANY>  REPLACE  result<STRING>\",\"documentation\":\"Replaces the first occurrence of a pattern by its substitution.\\n\\nThe `REPLACE` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with the replaced value if it was found\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACE\"},{\"name\":\"REPLACEALL\",\"detail\":\"original<ANY> pattern<ANY> replacement<ANY>  REPLACEALL  result<STRING>\",\"documentation\":\"Replaces all occurrence of a pattern by its substitution.\\n\\nThe `REPLACEALL` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with all occurrences of pattern replaced by its value\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACEALL\"},{\"name\":\"REPORT\",\"detail\":\"secret<STRING>  REPORT  report<STRING>\",\"documentation\":\"The `REPORT` function pushes onto the stack a STRING containing configuration and usage informations which can be useful when investigating issues.\\n\\n@param `secret` Secret configured for using the `REPORT` function.\\n\\n@param `report` Actual report.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"REPORT\"},{\"name\":\"RESET\",\"detail\":\"depth<LONG>  RESET \",\"documentation\":\"The `RESET` function resets the stack to the given depth, discarding any items above those 'depth' items.\\n\\n@param `depth` Depth at which the stack should be reset.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESET\"},{\"name\":\"RESETS\",\"detail\":\"gts<GTS> decreasingGTS<BOOLEAN>  RESETS  result<GTS>\\nlgts<LIST<GTS>> decreasingGTS<BOOLEAN>  RESETS  lresult<LIST<GTS>>\",\"documentation\":\"The `RESETS` functions transforms a numerical Geo Time Series™, shifting values so no offset (*i.e.* a decrease or increase of values) appears after the operation.\\n\\nThe parameter to `RESETS` determines if the Geo Time Series should be considered as decreasing instead of increasing.\\n\\n@param `decreasingGTS` Flag set to `true` to indicate the GTS is decreasing.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `lgts` List of Geo Time Series™ or list thereof to transform.\\n\\n@param `result` GTS with resets compensated.\\n\\n@param `lresult` List of GTS with resets compensated.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESETS\"},{\"name\":\"RESHAPE\",\"detail\":\"input<LIST> shape<LIST<LONG>>  RESHAPE  output<LIST>\",\"documentation\":\"The `RESHAPE` function modifies the shape of a list.\\n\\nThe new shape is specified using a list of dimensions, the first being the outer dimension. Such a shape can be produced by `SHAPE`.\\n\\nNote that the number of elements in the array must be compatible with the requested shape, i.e. the product of the dimensions must match the number of elements in the input list.\\n\\n@param `input` List to reshape.\\n\\n@param `shape` Shape specification, list of dimensions, the first element being the outer list.\\n\\n@param `output` Reshaped list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"RESHAPE\"},{\"name\":\"RESTORE\",\"detail\":\"context<CONTEXT>  RESTORE \",\"documentation\":\"The `RESTORE` function resets the stack's symbol table to the state recorded in the context passed as parameter.\\n\\n@param `context` Stack context produced by [`SAVE`](doc/SAVE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESTORE\"},{\"name\":\"RETHROW\",\"detail\":\" RETHROW \",\"documentation\":\"Inside the *catch* or *finally* macro of a [`TRY`](/doc/TRY), rethrows the last thrown error. If no error was previously thrown, `RETHROW` does nothing.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"RETHROW\"},{\"name\":\"RETURN\",\"detail\":\" RETURN \",\"documentation\":\"Returns immediately from the currently executing macro. If called outside a macro, `RETURN` will stop the execution of the current script, behaving like [`STOP`](/doc/STOP).\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"RETURN\"},{\"name\":\"REV\",\"detail\":\" REV  revision<STRING>\",\"documentation\":\"The `REV` function pushes onto the stack the revision of the Warp 10 instance.`\\n\\n@param `revision` Revision of the Warp 10 platform.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"REV\"},{\"name\":\"REVBITS\",\"detail\":\"long<LONG>  REVBITS  gnol<LONG>\",\"documentation\":\"Reverses the order of the bits of a LONG value.\\n\\n@param `long` LONG value from which to revert the bits.\\n\\n@param `gnol` LONG value whose bits are in reverse order compared to those of `long`.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVBITS\"},{\"name\":\"REVERSE\",\"detail\":\"originalList<LIST>  REVERSE  reversedObj<LIST>\\noriginalString<STRING>  REVERSE  reversedObj<STRING>\\noriginalString<BYTES>  REVERSE  reversedObj<BYTES>\",\"documentation\":\"Reverses the order of the elements of the list or the string.\\n\\nThe `REVERSE` function inverts the order of the elements of the list or the string on the top of the stack.\\nBeware, `REVERSE` do not create a new object. Use [`CLONEREVERSE`](/doc/CLONEREVERSE) if you want to keep input.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n\\n@param `originalList` The list to reverse\\n\\n@param `originalString` The string to reverse\\n\\n@param `reversedObj` The original object with the elements in reverse order\\n\\n\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVERSE\"},{\"name\":\"REXEC\",\"detail\":\"warpscript<STRING> endpoint<STRING>  REXEC  stack<ANY*>\",\"documentation\":\"The `REXEC` function executes some WarpScript code on a remote Warp 10 instance. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.0.8\",\"OPB64name\":\"REXEC\"},{\"name\":\"REXECZ\",\"detail\":\"warpscript<STRING> endpoint<STRING>  REXECZ  stack<ANY*>\",\"documentation\":\"The `REXECZ` function executes some WarpScript code on a remote Warp 10 instance just like [`REXEC`](/doc/REXEC) does, but compresses the WarpScript code prior to sending it. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REXECZ\"},{\"name\":\"RINT\",\"detail\":\"value<NUMBER>  RINT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  RINT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `RINT` function consumes a numeric parameter from the top of the stack and pushes back the DOUBLE the closest to the parameter and equal to a mathematical integer.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `result` Closest floating-point value to a that is equal to a mathematical integer.\\n\\n@param `lvalue` List of Numeric values.\\n\\n@param `lresult` List of closest floating-point values to a that is equal to a mathematical integer.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RINT\"},{\"name\":\"RLOWESS\",\"detail\":\"gts<GTS> q<LONG> r<LONG> d<LONG> p<LONG>  RLOWESS  result<GTS>\\ngtsList<LIST<GTS>> q<LONG> r<LONG> d<LONG> p<LONG>  RLOWESS  resultList<LIST<GTS>>\",\"documentation\":\"The `RLOWESS` function applies an iterative smoothing program on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is done via locally weighted regression, and is robust to outliers.\\n\\n> ### REFERENCE\\n>\\n> **Cleveland, W. S.** (1979) Robust locally weighted regression and smoothing scatterplots. J. American Statistical Association 74, 829–836.\\n> **Cleveland, W. S.** (1981) LOWESS: A program for smoothing scatterplots by robust locally weighted regression. The American Statistician 35, 54.\\n\\n@param `p` The degree for the polynomial fit of the regression\\n\\n@param `d` The delta radius (in time units) whithin which the local regression is computed only once (other points are interpolated). For very large datasets, it can be wise to set `d` > 0 to speed up the computations.\\n\\n@param `r` The number of robustifying iterations. The higher the value of `r`, the better the program is robust to outliers.\\n\\n@param `q` The bandwidth of the local regression. To obtain a good smoothing, it is advised to choose an odd number of at least 5.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RLOWESS\"},{\"name\":\"ROLL\",\"detail\":\"eltN<ANY> elt2<ANY> elt1<ANY> N<LONG>  ROLL  elt2<ANY> elt1<ANY> eltN<ANY>\",\"documentation\":\"`ROLL` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element at level *N* to the top of the stack and moving the other elements up one level.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLL\"},{\"name\":\"ROLLD\",\"detail\":\"eltN<ANY> elt2<ANY> elt1<ANY> N<LONG>  ROLLD  elt1<ANY> eltN<ANY> elt2<ANY>\",\"documentation\":\"`ROLLD` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element on top of the stack to level *N* and moving the other *N-1* elements down the stack.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLLD\"},{\"name\":\"ROT\",\"detail\":\"level3<ANY> level2<ANY> top<ANY>  ROT  level2<ANY> top<ANY> level3<ANY>\",\"documentation\":\"`ROT` cycles through the 3 topmost elements of the stack by moving the element at level 3 to the top of the stack and pushing the other 2 elements up the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n@param `level3` The element at the third level of the stack prior to the function execution\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROT\"},{\"name\":\"ROTATIONQ\",\"detail\":\"x<DOUBLE> y<DOUBLE> z<DOUBLE> angle<DOUBLE>  ROTATIONQ  quaternion<QUATERNION>\",\"documentation\":\"The `ROTATIONQ` function consumes on the stack 4 doubles representing a rotation vector and pushes back [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long.\\n\\n@param `quaternion` The quaternion representation\\n\\n@param `angle` The angle of the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROTATIONQ\"},{\"name\":\"ROUND\",\"detail\":\"input<NUMBER>  ROUND  output<LONG>\",\"documentation\":\"The `ROUND` function consumes a numeric parameter from the top of the stack and pushes back the long number the closest to the parameter.\\n\\n@param `input` Input to round.\\n\\n@param `output` Input rounded to the nearest Long.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROUND\"},{\"name\":\"RSADECRYPT\",\"detail\":\"cipher<BYTES> key<KEY>  RSADECRYPT  data<BYTES>\",\"documentation\":\"Decrypts content encrypted with an RSA key.\\n\\n@param `key` RSA key to use for decryption (a public key if content was encrypted with a private key, a private key otherwise).\\n\\n@param `cipher` Encrypted data.\\n\\n@param `data` Cleartext data.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSADECRYPT\"},{\"name\":\"RSAENCRYPT\",\"detail\":\"data<BYTES> key<KEY>  RSAENCRYPT  encrypted<BYTES>\",\"documentation\":\"Encrypts a byte array using an RSA key (either public or private).\\n\\n@param `key` Instance of the RSA private or public key to use for encryption.\\n\\n@param `data` Data to encrypt.\\n\\n@param `encrypted` Ciphered version of `data`.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAENCRYPT\"},{\"name\":\"RSAGEN\",\"detail\":\"publicExponent<LONG> keylen<LONG>  RSAGEN  privkeyparams<MAP> pubkeyparams<MAP>\",\"documentation\":\"Generates an RSA public key pair.\\n\\n@param `keylen` Key length in bits.\\n\\n@param `publicExponent` RSA public exponent, typically 65537.\\n\\n@param `pubkeyparams` Parameters of the generated RSA public key. Can be converted to a public key using [`RSAPUBLIC`](/doc/RSAPUBLIC).\\n\\n@param `privkeyparams` Parameters of the generated RSA privsate key. Can be converted to a private key using [`RSAPRIVATE`](/doc/RSAPRIVATE)\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAGEN\"},{\"name\":\"RSAPRIVATE\",\"detail\":\"privkeyparams<MAP>  RSAPRIVATE  privkey<KEY>\",\"documentation\":\"Creates an RSA private key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `privkeyparams` Map of private key parameters.\\n\\n@param `privkey` RSA private key instance.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPRIVATE\"},{\"name\":\"RSAPUBLIC\",\"detail\":\"pubkeyparams<MAP>  RSAPUBLIC  pubkey<KEY>\",\"documentation\":\"Creates an RSA public key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `pubkeyparams` Map of public key parameters.\\n\\n@param `pubkey` RSA public key instance.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPUBLIC\"},{\"name\":\"RSASIGN\",\"detail\":\"data<BYTES> alg<STRING> privkey<KEY>  RSASIGN  signature<BYTES>\",\"documentation\":\"Signs a byte array with an RSA private key.\\n\\n@param `privkey` RSA private key to use for signing.\\n\\n@param `alg` Name of algorithm to use for computing the data fingerprint. Supported algorithms are those provided by [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `data` Data to sign.\\n\\n@param `signature` Computed signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSASIGN\"},{\"name\":\"RSAVERIFY\",\"detail\":\"content<BYTES> signature<BYTES> alg<STRING> pubkey<KEY>  RSAVERIFY  verified<BOOLEAN>\",\"documentation\":\"The `RSAVERIFY` function verify a signature generated with [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) cryptosystem and a hash algorithm.\\n\\nAlgorithms are those supported by [BouncyCastle](http://stackoverflow.com/questions/8778531/bouncycastle-does-not-find-algorithms-that-it-provides).\\n\\n@param `pubkey` RSA public key to use for verifying the signature.\\n\\n@param `alg` Algorithm used for generating the signature. See [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `signature` Signature to verify.\\n\\n@param `content` Signed content.\\n\\n@param `verified` Status of the signature verification.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAVERIFY\"},{\"name\":\"RSORT\",\"detail\":\"gts<GTS>  RSORT  result<GTS>\\ngtsList<LIST<GTS>>  RSORT  resultList<LIST<GTS>>\",\"documentation\":\"Sort Geo Time Series™ values (and associated locations/elevations) by reverse order of their ticks (i.e. most recent ticks first).\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RSORT\"},{\"name\":\"RTFM\",\"detail\":\" RTFM  url<STRING>\",\"documentation\":\"The `RTFM` function pushes onto the stack the URL of the Warp 10 documentation, so whenever you are lost you can rapidly retrieve the URL you need to get back on track!\\n\\n@param `url` URL of the Warp 10 documentation.\\n\\n\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.0.7\",\"OPB64name\":\"RTFM\"},{\"name\":\"RUN\",\"detail\":\"macroName<STRING>  RUN \\nmacroRegister<LONG>  RUN \",\"documentation\":\"The `RUN` function attempts to execute the macro whose name is on top of the stack. It is equivalent to `@macro` if called with `macro` on top of the stack.\\n\\n@param `macroName` Name of macro to execute, without a leading '@'\\n\\n@param `macroRegister` Register number in which the macro is stored, without a leading '@'\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"RUN\"},{\"name\":\"RUNNERNONCE\",\"detail\":\"nonce<STRING>  RUNNERNONCE  time<LONG>\",\"documentation\":\"The `RUNNERNONCE` function decrypts the content of a runner *nonce* as generated when a script is executed by a Warp 10 runner instance.\\n\\nWhen a script is executed by a runner instance, the following symbols are defined when the script is invoked:\\n\\n| Symbol | Description |\\n| --- | --- |\\n| `runner.periodicity` | Periodicity at which the script is supposed to run, in ms. |\\n| `runner.path` | Path of the script. |\\n| `runner.scheduledat` | Time at which the current execution was scheduled, in ms since the [UNIX Epoch](). |\\n| `runner.nonce` | Encrypted time of execution, in time units since the [UNIX Epoch](). |\\n\\nNote that if the runner pre-shared key is not configured via `runner.psk`, the `RUNNERNONCE` function will push `NULL` onto the stack. Note that in this case, the `runner.nonce` symbol will not be defined.\\n\\n@param `nonce` Runner *nonce* as stored in `runner.nonce`.\\n\\n@param `time` Time retrieved from the *nonce*.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.7\",\"OPB64name\":\"RUNNERNONCE\"},{\"name\":\"RUNR\",\"detail\":\" RUNR \",\"documentation\":\"Run the macro currently contained in the designated register.\\n\\nThe `RUNR` function is really a family of functions named `RUNRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"RUNR\"},{\"name\":\"RVALUESORT\",\"detail\":\"gts<GTS>  RVALUESORT  result<GTS>\\ngtsList<LIST<GTS>>  RVALUESORT  resultList<LIST<GTS>>\",\"documentation\":\"Sort Geo Time Series™ values (and associated locations/elevations) by by reverse order of their values.\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RVALUESORT\"},{\"name\":\"SAVE\",\"detail\":\" SAVE  context<CONTEXT>\",\"documentation\":\"The `SAVE` function pushes onto the stack a *context* object which contains all the symbols currently defined in the current stack. This context can be passed as a parameter to the [`RESTORE`](doc/RESTORE) function to later reset the symbol table to the state store in the context. Any symbol created after the context was saved and before it is restored will be discarded when `RESTORE` is called.\\n\\n@param `context` Stack context, suitable as a parameter to [`RESTORE`](doc/RESTORE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SAVE\"},{\"name\":\"SCALB\",\"detail\":\"d<NUMBER> scaleFactor<LONG>  SCALB  result<TYPE>\",\"documentation\":\"The `SCALB` function consumes a scale factor *scaleFactor* and a numeric parameter *d* and pushes back <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><mi>d</mi><mo>&#xD7;</mo><msup><mn>2</mn><mi>scaleFactor</mi></msup></math>. The scale factor must fit into an INT.\\n\\n@param `scaleFactor` The scaling factor, must fit into an INT\\n\\n@param `d` The value to be scaled\\n\\n@param `result` The scaled value\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SCALB\"},{\"name\":\"SECTION\",\"detail\":\"section<STRING>  SECTION \",\"documentation\":\"The `SECTION` function modifies the value of the *section* attribute of the stack. This value appears in the error messages and can therefore help you debug your WarpScript code. Typically, the `SECTION` function is used to separate your code in different logical units.\\n\\n@param `section` Name to assign to the *section* attribute.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"SECTION\"},{\"name\":\"SECURE\",\"detail\":\"script<STRING>  SECURE  encrypted<STRING>\",\"documentation\":\"The `SECURE` function encrypts a STRING representing a WarpScript code fragment using the platform's secure script cryptographic key and the current secret set via [`SECUREKEY`](doc/SECUREKEY).\\n\\nSecure scripts can also be created using the `<S .... S>` syntax.\\n\\n@param `script` Cleartext version of the WarpScript fragment to encrypt.\\n\\n@param `encrypted` Encrypted secure script.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"SECURE\"},{\"name\":\"SECUREKEY\",\"detail\":\"key<STRING>  SECUREKEY \",\"documentation\":\"The `SECUREKEY` function sets the secret which will be used to decrypt further secure scripts.\\n\\nSecure scripts are WarpScript fragments which are encrypted with a cryptographic key specific to the platform they were created on. They can be executed on a platform configured with the same cryptographic key.\\n\\n@param `key` Secret to use for unlocking the cleartext versions of future secure scripts.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SECUREKEY\"},{\"name\":\"SENSISION.DUMP\",\"detail\":\"valueTimestamp<BOOLEAN>  SENSISION.DUMP  dump<STRING>\",\"documentation\":\"The `SENSISION.DUMP` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) metrics in the JVM.\\n\\nThe STRING produced by `SENSISION.DUMP` can be parsed using `PARSE`.\\n\\n@param `valueTimestamp` Flag indicating whether to dump the Geo Time Series™ with the timestamp of last updates or the timestamp at which the value is read.\\n\\n@param `dump` Latest values of all Geo Time Series™ known to Sensision in Geo Time Series™ output input.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMP\"},{\"name\":\"SENSISION.DUMPEVENTS\",\"detail\":\" SENSISION.DUMPEVENTS  dump<STRING>\",\"documentation\":\"The `SENSISION.DUMPEVENTS` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) events in the events history.\\n\\nThe STRING produced by `SENSISION.DUMPEVENTS` can be parsed using `PARSE`.\\n\\nNote that if the system property `sensision.events.history` is not set to a value greater than 0, the function will always return an empty STRING.\\n\\nThe Sensision event history is a circular buffer.\\n\\n@param `dump` Latest values of all events in the Sensision event history.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMPEVENTS\"},{\"name\":\"SENSISION.EVENT\",\"detail\":\"[ value<LONG> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<STRING> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<LONG> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<DOUBLE> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<STRING> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<BOOLEAN> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \",\"documentation\":\"The `SENSISION.EVENT` function creates a [Sensision](https://github.com/senx/sensision) event.\\n\\n@param `class` Name of the class of the Sensision event to emit.\\n\\n@param `labels` Map of label names to values, both STRINGs of the Sensision event.\\n\\n@param `value` Value associated with the event.\\n\\n@param `ts` Optional timestamp for the event (in Sensision time units), if omitted, the current timestamp will be used.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.EVENT\"},{\"name\":\"SENSISION.GET\",\"detail\":\"selector<STRING>  SENSISION.GET  gts<GTS>\\nclass<STRING> labels<MAP>  SENSISION.GET  gts<GTS>\",\"documentation\":\"The `SENSISION.GET` function reads the current value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to read.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to read.\\n\\n@param `selector` Geo Time Series™ selector (`class{labels}`) of the Sensision metric to read.\\n\\n@param `gts` A Geo Time Series™ containing the current value of the Sensision metric. If the metric does not exist, the resulting GTS will be empty.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.GET\"},{\"name\":\"SENSISION.SET\",\"detail\":\"[ value<LONG> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<STRING> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<LONG> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<STRING> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.SET \",\"documentation\":\"The `SENSISION.SET` function sets a value for a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `value` Value to assign to the Sensision metric.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.SET\"},{\"name\":\"SENSISION.UPDATE\",\"detail\":\"[ delta<LONG> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ delta<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ ttl<LONG> delta<LONG> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ ttl<LONG> delta<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.UPDATE \",\"documentation\":\"The `SENSISION.UPDATE` function updates the numerical value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `delta` Delta to add to the current value of the Sensision metric. If the metric does not exist it will be created with this value.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.UPDATE\"},{\"name\":\"SET\",\"detail\":\"inputlist<LIST> item<ANY> index<LONG>  SET  outputlist<LIST>\\ninputlist<LIST> item<ANY> index<LIST>  SET  outputlist<LIST>\\narray<BYTES> bytevalue<LONG> index<LONG>  SET  outputarray<LIST>\",\"documentation\":\"The `SET` function replaces item at specified index in a list.\\nIf the index is greater than the size of the list, it will raise an error.\\n\\nWhen used on a **BYTE ARRAY**, SET replaces the byte by the byte value. The byte value, signed or not, must be in the range of [-128,255].\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, SET can set an element in a nested list. In this case, the index is a list.\\n\\n@param `index` The index in the list, 0 for the first item.\\n\\n@param `inputlist` The input list to modified.\\n\\n@param `outputlist` The input list modified,  this is not a new list object.\\n\\n@param `item` The item to update in the inputlist at index, could be any type.\\n\\n@param `array` Byte array to which write a byte.\\n\\n@param `bytevalue` The value of the byte, signed or unsigned (from -128 to 255).\\n\\n@param `outputarray` The input byte array modified, this is not a new byte array.\\n\\n\",\"tags\":[\"lists\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SET\"},{\"name\":\"SET->\",\"detail\":\"input<SET>  SET->  output<LIST>\",\"documentation\":\"The `SET->` function converts the set on top of the stack into a **LIST**.\\n\\n@param `input` Input set.\\n\\n@param `output` A list containing input elements.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"JoKJAIs\"},{\"name\":\"SETATTRIBUTES\",\"detail\":\"gts<GTS> attributes<MAP>  SETATTRIBUTES  gts<GTS>\\nlgts<LIST<GTS>> attributes<MAP>  SETATTRIBUTES  lgts<LIST<GTS>>\\nencoder<GTSENCODER> attributes<MAP>  SETATTRIBUTES  encoder<GTSENCODER>\\nlencoder<LIST<GTS>> attributes<MAP>  SETATTRIBUTES  lencoder<LIST<GTS>>\",\"documentation\":\"Modifies the attributes of a Geo Time Series™, an encoder or a list thereof. The `SETATTRIBUTES` function expects a parameter MAP whose entries are attributes to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `SETATTRIBUTES` function will use the rest of the MAP as the actual attributes to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing attributes.\\n\\nAn entry with an empty STRING value will have the effect of removing the attribute from the attributes of the GTSs or encoders.   \\n\\n@param `attributes` Parameter map of attributes names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lencoder` List of Encoders.\\n\\n@param `encoder` Encoder to relabel\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETATTRIBUTES\"},{\"name\":\"SETMACROCONFIG\",\"detail\":\"value<STRING> key<STRING> secret<STRING>  SETMACROCONFIG \",\"documentation\":\"The `SETMACROCONFIG` function allows you to set or modify the value of a configuration key accessible via the [`MACROCONFIG`](/doc/MACROCONFIG) or [`MACROCONFIGDEFAULT`](/doc/MACROCONFIGDEFAULT) functions or via the runner script variable expansion.\\n\\nThis function can only be used if the `warpscript.macroconfig.secret` is set in the Warp 10™ configuration.\\n\\nThe configuration keys which can be set using `SETMACROCONFIG` must have the format `key@path/tomacro` or `key@/path/to/runner/script`.\\n\\nSetting the value of a configuration key to `NULL` has the effect of removing the configuration key altogether.\\n\\n@param `key` Configuration key to set.\\n\\n@param `secret` Macro config secret.\\n\\n@param `value` String value to set for the key or `NULL`.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"SETMACROCONFIG\"},{\"name\":\"SETVALUE\",\"detail\":\"gts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<STRING>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BOOLEAN>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<DOUBLE>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<LONG>  SETVALUE  result<GTS>\",\"documentation\":\"The `SETVALUE` function adds a value to a GTS or override an existing value. If the tick already exists, this function will overwrite the first one it encounters in the GTS. If the tick does not exist, it is appended. \\nThe [`ADDVALUE`](/doc/ADDVALUE) function adds a value to a GTS but do not override an existing value.\\n\\nThe `SETVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `SETVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, using [`GET`](/doc/GET) for instance.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Serie\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `elevation` Elevation or NaN\\n\\n@param `result` modified Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETVALUE\"},{\"name\":\"SHA1\",\"detail\":\"input<BYTES>  SHA1  result<BYTES>\",\"documentation\":\"The `SHA1` function digests a byte array on the stack with the cryptographic hash function [SHA-1](https://en.wikipedia.org/wiki/SHA-1).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1\"},{\"name\":\"SHA1HMAC\",\"detail\":\"message<BYTES> secret<BYTES>  SHA1HMAC  result<BYTES>\",\"documentation\":\"The `SHA1HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-1](https://en.wikipedia.org/wiki/SHA-1) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1HMAC\"},{\"name\":\"SHA256\",\"detail\":\"input<BYTES>  SHA256  result<BYTES>\",\"documentation\":\"The `SHA256` function digests a byte array on the stack with the cryptographic hash function [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256\"},{\"name\":\"SHA256HMAC\",\"detail\":\"message<BYTES> secret<BYTES>  SHA256HMAC  result<BYTES>\",\"documentation\":\"The `SHA256HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-256](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256HMAC\"},{\"name\":\"SHAPE\",\"detail\":\"list<LIST>  SHAPE  shape<LIST>\\n{ list<LIST> fast<BOOLEAN>  } SHAPE  shape<LIST>\",\"documentation\":\"Return the shape of an input list if it could be a tensor (or multidimensional array), or raise an Exception.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent and it returns a shape based on the first nested lists at each level. Default to false.\\n\\n@param `list` The input list.\\n\\n@param `shape` The shape of the input list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHAPE\"},{\"name\":\"SHMLOAD\",\"detail\":\"symbol<STRING>  SHMLOAD  object<ANY>\",\"documentation\":\"The `SHMLOAD` function loads data previously stored by [`SHMSTORE`](/doc/SHMSTORE) in shared memory, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the requested shared symbol is not known or if the calling script does not currently hold the mutex associated with the symbol.\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to retrieve.\\n\\n@param `object` Object currently stored under `symbol`.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMLOAD\"},{\"name\":\"SHMSTORE\",\"detail\":\"object<ANY> symbol<STRING>  SHMSTORE \",\"documentation\":\"The `SHMSTORE` function stores an object in a named shared memory location, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the calling script is not currently holding a mutex (in a call to [`MUTEX`](/doc/MUTEX)). The call will have no effect if the named memory location was already set by a previous call to `SHMSTORE`.\\n\\nIn order to overwrite a shared memory location, its content must first be cleared by storing [`NULL`](/doc/NULL).\\n\\n\\nIf the calling script currently holds a mutex, this mutex will be associated with the shared memory location, the same mutex will have to be held when retrieving the content of the memory location via [`SHMLOAD`](/doc/SHMLOAD).\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to store.\\n\\n@param `object` Object to store under `symbol` or `NULL` to clear its content.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMSTORE\"},{\"name\":\"SHOW\",\"detail\":\"levels<LONG>  SHOW \",\"documentation\":\"The `SHOW` function makes visible some levels of the stack which were previously hidden by a call to [`HIDE`](/doc/HIDE).\\n\\nThe levels made visible are the ones closest to the top of the stack. Depending on the `levels` parameter to the call to `SHOW`, the revealed levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there are at most a certain number ((*abs(`levels`)*) with `levels` < 0) of visible levels after the call.\\n\\nWhen called with `NULL` as parameter, `SHOW` wil reveal all levels currently hidden.\\n\\n@param `levels` Number of levels to reveal, or `NULL` to reveal them all.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"SHOW\"},{\"name\":\"SHRINK\",\"detail\":\"gts<GTS> size<LONG>  SHRINK  result<GTS>\",\"documentation\":\"Shrink the number of values of a Geo Time Series™ to `size`. The oldest values are kept if `size` is non negative. The earliest ones are kept in the other case.\\n\\nThis function has the side effect of sorting the Geo Time Series™. If the Geo Time Series™ has fewer than `size` values the function raises an error.\\n\\n@param `size` Size used to shrink the Geo Time Series™\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `result` A shrinked Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SHRINK\"},{\"name\":\"SHUFFLE\",\"detail\":\"input<LIST>  SHUFFLE  shuffled<LIST>\",\"documentation\":\"The `SHUFFLE` function shuffles a list.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `input` The reference of the list to shuffle\\n\\n@param `shuffled` The original list shuffled, this is not a new list object\\n\\n\",\"tags\":[\"lists\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHUFFLE\"},{\"name\":\"SIGNUM\",\"detail\":\"value<NUMBER>  SIGNUM  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SIGNUM  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `SIGNUM` function consumes a numeric parameter from the top of the stack and pushes back its signum.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Signum, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of signum for each given value, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIGNUM\"},{\"name\":\"SIN\",\"detail\":\"value<NUMBER>  SIN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SIN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `SIN` function consumes a floating point number from the top of the stack and pushes back its sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Sine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of sine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIN\"},{\"name\":\"SINGLEEXPONENTIALSMOOTHING\",\"detail\":\"gts<GTS> alpha<DOUBLE>  SINGLEEXPONENTIALSMOOTHING  result<GTS>\",\"documentation\":\"The `SINGLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Simple Exponential Smoothing](https://www.otexts.org/fpp/7/1) formula.\\n\\nIt consumes two parameters from the top of the stack:\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** is pushed onto the stack.\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The smoothed Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINGLEEXPONENTIALSMOOTHING\"},{\"name\":\"SINH\",\"detail\":\"value<NUMBER>  SINH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SINH  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `SINH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic sine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic sine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINH\"},{\"name\":\"SIZE\",\"detail\":\"input<LIST>  SIZE  size<LONG>\\ninput<MAP>  SIZE  size<LONG>\\ninput<GTS>  SIZE  size<LONG>\\ninput<STRING>  SIZE  size<LONG>\\ninput<BYTES>  SIZE  size<LONG>\\ninput<GEOSHAPE>  SIZE  size<LONG>\\ninput<GTSENCODER>  SIZE  size<LONG>\\ninput<SET>  SIZE  size<LONG>\",\"documentation\":\"Returns the size of the input parameter.\\n\\nThe `SIZE` function computes the size of a LIST, MAP, GTS or ENCODER (number of values), STRING, byte array of GEOSHAPE (number of cells).\\n\\n@param `input` The input parameter\\n\\n@param `size` The size of the input parameter\\n\\n\",\"tags\":[\"strings\",\"lists\",\"maps\",\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIZE\"},{\"name\":\"SKEWNESS\",\"detail\":\"gts<GTS> bessel<BOOLEAN>  SKEWNESS  skewness<DOUBLE>\\nlgts<LIST<GTS>> bessel<BOOLEAN>  SKEWNESS  lskewness<LIST<DOUBLE>>\",\"documentation\":\"The `SKEWNESS` function computes the [skewness](https://en.wikipedia.org/wiki/Skewness) of a Geo Time Series™.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the skewness.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `skewness` Computed skewness of the Geo Time Series™ instance.\\n\\n@param `lskewness` List of computed skewness of the Geo Time Series™ instances.\\n\\n\",\"tags\":[\"statistics\",\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"SKEWNESS\"},{\"name\":\"SMARTPARSE\",\"detail\":\"string<STRING> regexp<STRING>  SMARTPARSE  results<LIST<GTS>>\\ngts<GTS> regexp<STRING>  SMARTPARSE  results<LIST<GTS>>\\nlgts<LIST<GTS>> regexp<STRING>  SMARTPARSE  lresults<LIST<LIST<GTS>>>\",\"documentation\":\"The `SMARTPARSE` function parses STRING values, either from a single STRING parameter or from STRING Geo Time Series™, and produces a number of GTS from the parsed data.\\n\\nThe parsing is done according to a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) which contains [named capturing groups](https://www.regular-expressions.info/named.html) with the Java/.NET syntax, *i.e.* `(?<name>...)`.\\n\\nThe captured group is interpreted differently based on the syntax of the name.\\n\\n| Syntax | Interpretation |\\n| --- | --- |\\n| Lxxx | Captured content is used as the value of label `xxx` |\\n| TU | Captured group is interpreted as a timestamp in unit `U` from the [UNIX Epoch](https://en.wikipedia.org/wiki/Unix_time) origin. Valid values for U are `s`, `ms`, `us`, `ns` |\\n| lat | Captured group is interpreted as the latitude if another group named `lon` is also present |\\n| lon | Captured group is interpreted as the longitude if another group named `lat` is also present |\\n| elevU | Captured group is interpreted as the elevation in unit `U`, where `U` can be `m`, `cm`, `mm`, `ft`, `km`, `mi`, `nm` (Nautical Mile). The value is parsed as a DOUBLE and converted to a LONG in `mm` |\\n| VTxxx | Captured group is interpreted as a value for a GTS with class `xxx`. The type of the value is determined by the value of `T` which can be `B`(oolean) `S`(tring) `L`(ong) or `D`(ouble) |\\n\\nThis function is ideally suited for parsing log messages and producing Geo Time Series™ from their content.\\n\\n@param `regexp` Regular expression to use for parsing. See the function description for the syntax to use.\\n\\n@param `string` String to parse\\n\\n@param `results` List of Geo Time Series™ created from the parsed data.\\n\\n@param `lresults` List of list of GTS created from the parsed data.\\n\\n@param `gts` STRING valued Geo Time Series™ whose values are to be parsed.\\n\\n@param `lgts` List of STRING valued GTS whose values are to be parsed.\\n\\n\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.2.13\",\"OPB64name\":\"SMARTPARSE\"},{\"name\":\"SNAPSHOT\",\"detail\":\"stack<ANY*>  SNAPSHOT  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOT` functions produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOT` was called.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.6\",\"OPB64name\":\"SNAPSHOT\"},{\"name\":\"SNAPSHOTALL\",\"detail\":\"stack<ANY*>  SNAPSHOTALL  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTALL` functions acts similarly as [`SNAPSHOT`](/doc/SNAPSHOT) and produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOTALL` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALL\"},{\"name\":\"SNAPSHOTALLTOMARK\",\"detail\":\"mark<MARK> stack<ANY*>  SNAPSHOTALLTOMARK  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTALLTOMARK` functions acts similarly as [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) and produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTALLTOMARK` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALLTOMARK\"},{\"name\":\"SNAPSHOTCOPY\",\"detail\":\"stack<ANY*>  SNAPSHOTCOPY  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTCOPY` function behaves like [`SNAPSHOT`](/doc/SNAPSHOT) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPY` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPY\"},{\"name\":\"SNAPSHOTCOPYALL\",\"detail\":\"stack<ANY*>  SNAPSHOTCOPYALL  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTCOPYALL` function behaves like [`SNAPSHOTALL`](/doc/SNAPSHOTALL) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALL\"},{\"name\":\"SNAPSHOTCOPYALLTOMARK\",\"detail\":\"stack<ANY*>  SNAPSHOTCOPYALLTOMARK  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTCOPYALLTOMARK` function behaves like [`SNAPSHOTALLTOMARK`](/doc/SNAPSHOTALLTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALLTOMARK\"},{\"name\":\"SNAPSHOTCOPYN\",\"detail\":\"stack<ANY*> n<LONG>  SNAPSHOTCOPYN  snapshot<STRING>\",\"documentation\":\"Performs a [`SNAPSHOTCOPY`](/doc/SNAPSHOTCOPY) on the top *N* elements of the stack.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTCOPYN\"},{\"name\":\"SNAPSHOTCOPYTOMARK\",\"detail\":\"stack<ANY*>  SNAPSHOTCOPYTOMARK  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTCOPYTOMARK` function behaves like [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYTOMARK\"},{\"name\":\"SNAPSHOTN\",\"detail\":\"stack<ANY*> n<LONG>  SNAPSHOTN  snapshot<STRING>\",\"documentation\":\"Produces a WarpScript code fragment which will regenerate the *N* top levels of the stack. The content of those levels is consumed off the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTN\"},{\"name\":\"SNAPSHOTTOMARK\",\"detail\":\"mark<MARK> stack<ANY*>  SNAPSHOTTOMARK  snapshot<STRING>\",\"documentation\":\"The `SNAPSHOTTOMARK` functions produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTTOMARK` was called.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTTOMARK\"},{\"name\":\"SORT\",\"detail\":\"gts<GTS>  SORT  sgts<GTS>\\nlgts<LIST<GTS>>  SORT  slist<LIST<GTS>>\",\"documentation\":\"Sorts a Geo Time Series™ or each GTS of a list of GTS in ascending tick order.\\n\\n@param `gts` Single Geo Time Series™ instance to sort.\\n\\n@param `sgts` Sorted Geo Time Series™, this is the same instance as `gts`.\\n\\n@param `lgts` List of Geo Time Series™ instances to sort.\\n\\n@param `slist` List of sorted Geo Time Series™. Each instance is the same as the input one.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SORT\"},{\"name\":\"SORTBY\",\"detail\":\"list<LIST> macro<MACRO>  SORTBY  lsorted<LIST>\\nmap<MAP> macro<MACRO>  SORTBY  msorted<MAP>\",\"documentation\":\"The `SORTBY` function sorts a **LIST** or a **MAP** according to a value returned by a macro. The macro must return a value of the same type (LONG, DOUBLE or STRING) for each element.\\n\\nOnly **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nBefore release `1.2.22`, the `SORTBY` function could only sort lists of Geo Time Series™.\\n\\nBefore release `2.7.0`, the `SORTBY` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for sorting, consumes a list element off the stack and produces a LONG, DOUBLE or STRING value.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"tags\":[\"lists\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"SORTBY\"},{\"name\":\"SORTWITH\",\"detail\":\"list<LIST> macro<MACRO>  SORTWITH  lsorted<LIST>\\nmap<MAP> macro<MACRO>  SORTWITH  msorted<MAP>\",\"documentation\":\"The `SORTWITH` function sorts a **LIST** or a **MAP** according to a value returned by a comparison macro. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nIn used a on **LIST**, the comparison macro is given 2 elements of the **LIST** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest element in the stack is respectively strictly less than, equal to or strictly more than than the element on the stack.\\n\\nIn used a on **MAP**, the comparison macro is given 2 entries (key deepest, value shallowest) of the **MAP** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest entry in the stack is respectively strictly less than, equal to or strictly more than than the shallowest entry on the stack.\\n\\nBefore release `2.7.0`, the `SORTWITH` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for comparison, must consume two elements of the stack and produces a LONG.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"tags\":[\"lists\",\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"SORTWITH\"},{\"name\":\"SPLIT\",\"detail\":\"s<STRING> delimiter<STRING>  SPLIT  result<LIST<STRING>>\",\"documentation\":\"The SPLIT function split a string in segments given a delimiter.\\n\\n\\nIt consumes two parameters from the top of the stack: the delimiter and the string to test matching with. The delimiter must be a string of length 1, i.e. only one character.\\n\\n\\nThe function will return a list with all the segments. If delimiter is not found, the output list contains the input string.\\n\\n@param `delimiter` One character delimiter.\\n\\n@param `s` The string to split\\n\\n@param `result` List of strings.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"SPLIT\"},{\"name\":\"SQRT\",\"detail\":\"value<NUMBER>  SQRT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SQRT  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `SQRT` function consumes a numeric parameter from the top of the stack and pushes back its square root.\\n\\nFor negative numbers, SQRT returns NaN.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Square root of the given value, NaN if it is negative.\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of square root of each given value, NaN if it is negative.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SQRT\"},{\"name\":\"SRAND\",\"detail\":\" SRAND  num<DOUBLE>\",\"documentation\":\"The `SRAND` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThe seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"SRAND\"},{\"name\":\"SRANDPDF\",\"detail\":\"valueHistogram<MAP>  SRANDPDF  result<STRING>\",\"documentation\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe randomization is seeded. The seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThe result is a function. This function does not have any arguments.\\n\\nTo use the function pushed by `SRANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"2.2.1\",\"OPB64name\":\"SRANDPDF\"},{\"name\":\"STACKATTRIBUTE\",\"detail\":\"name<STRING>  STACKATTRIBUTE  value<ANY>\",\"documentation\":\"Retrieves the value of a stack attribute.\\n\\n@param `name` Name of the stack attribute to retrieve.\\n\\n@param `value` Associated value or null if attribute is not set.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STACKATTRIBUTE\"},{\"name\":\"STACKPSSECRET\",\"detail\":\"newsecret<STRING> secret<STRING>  STACKPSSECRET \",\"documentation\":\"Modifies the secret needed for using functions such as `WSPS`, `WSSTOP` and `WSKILL`.\\n\\nThis function is only useable if a secret was configured using `stackps.secret`.\\n\\n@param `secret` Current secret for process status operations, initially the value configured via `stackps.secret`.\\n\\n@param `newsecret` New secret to set for process status operations.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"STACKPSSECRET\"},{\"name\":\"STACKTOLIST\",\"detail\":\"stack<ANY*>  STACKTOLIST  list<LIST>\",\"documentation\":\"Converts the whole stack into a list and pushes this list on top of the stack. The elements are consumed off the stack in the way [`->LIST`](/doc/AItBHKCJ) does it.\\n\\n@param `stack` Content of the stack.\\n\\n@param `list` List containing the elements of the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"STACKTOLIST\"},{\"name\":\"STANDARDIZE\",\"detail\":\"gts<GTS>  STANDARDIZE  result<GTS>\\ngtsList<LIST<GTS>>  STANDARDIZE  resultList<LIST<GTS>>\",\"documentation\":\"Standardizes a single (or a list of) numeric Geo Time Series™ (i.e. it replaces X by (X-mu)/sd).\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STANDARDIZE\"},{\"name\":\"STDERR\",\"detail\":\"msg<STRING>  STDERR \",\"documentation\":\"The `STDERR` function prints text to the standard error stream.\\n\\nThe `STDERR` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDERR\"},{\"name\":\"STDOUT\",\"detail\":\"obj<ANY>  STDOUT \",\"documentation\":\"The `STDOUT` function prints text to the standard output stream.\\n\\nThe `STDOUT` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `obj` The object to print. Its `.toString()` method is used to generate the outputed String.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDOUT\"},{\"name\":\"STL\",\"detail\":\"gts<GTS> { p<LONG>  } STL  result<GTS>\\ngtsList<LIST<GTS>> { p<LONG>  } STL  resultList<LIST<GTS>>\",\"documentation\":\"The `STL` function applies a Seasonal Trend decomposition on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is based on multiple calls of [`RLOWESS`](/doc/RLOWESS).\\n\\nThese Geo Time Series™ are the seasonal part and the trend part of the input Geo Time Series™. Their classnames are suffixed with \\\"_seasonal\\\" and \\\"_trend\\\".\\n\\nThis function can only be applied to [bucketized](/doc/BUCKETIZE) Geo Time Series™ of numeric type.\\n\\nThe **MAP** parameter must have at least the field `PERIOD`. You can provide additional optional parameters:\\n\\n## Optional parameters\\n### Global\\n- `ROBUST` if TRUE, set defaults of number of inner and outer loops to 1 and 15 instead of 2 and 0. Default is FALSE\\n- `PRECISION` number of inner loops (a LONG). Default is 2 or 1\\n- `ROBUSTNESS` number of outer loops (a LONG). Default is 0 or 15\\n\\n### Seasonal extract\\n- `BANDWIDTH_S` the bandwidth (a LONG) of the local regression. Default is 7\\n- `DEGREE_S` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_S` the number of values interpolated instead of estimated. Default is BANDWIDTH_S/10\\n\\n### Low frequency filtering\\n- `BANDWIDTH_L` the bandwidth (a LONG) of the local regression. Default is nextOdd(PERIOD)\\n- `DEGREE_L` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_L` the number of values interpolated instead of estimated. Default is BANDWIDTH_L/10\\n\\n### Trend extract\\n- `BANDWIDTH_T` the bandwidth (a LONG) of the local regression. Default is nextOdd(ceiling(1.5*PERIOD/(1-(1.5/BANDWIDTH_S))))\\n- `DEGREE_T` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_T` the number of values interpolated instead of estimated. Default is BANDWIDTH_T/10\\n\\n### Post seasonal smoothing\\n- `BANDWIDTH_P` the bandwidth (a LONG) of the local regression. Default is 0 (i.e. no post smoothing)\\n- `DEGREE_P` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_P` the number of values interpolated instead of estimated. Default is BANDWIDTH_P/10\\n\\n### Additional fields\\n- `BANDWIDT` value of all BANDWIDTH_X fields that are not set\\n- `DEGREE` value of all DEGREE_X fields that are not set\\n- `SPEED` value of all SPEED_X fields that are not set\\n\\n> ### REFERENCE\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"STL\"},{\"name\":\"STLESDTEST\",\"detail\":\"gts<GTS> p<LONG> k<LONG> alpha<DOUBLE> STLOption<MAP>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG> alpha<DOUBLE>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG> STLOption<MAP>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG>  STLESDTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> alpha<DOUBLE> STLOption<MAP>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> alpha<DOUBLE>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> STLOption<MAP>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG>  STLESDTEST  resultList<LIST<LIST<LONG>>>\",\"documentation\":\"The 'STLESDTEST' function detects outliers in a Geo Time Series™ (or a **LIST** of Geo Time Series™) which has a seasonal part.\\n\\nThe seasonal part and the trend part of the Geo Time Series™ are extracted using [`STL`](/doc/STL) decomposition, then an [`ESDTEST`](/doc/ESDTEST) is performed on the remainder.\\n\\nThis function only applies to [bucketized](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ### References\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n> **Rosner, Bernard (May 1983)**, \\\"Percentage Points for a Generalized ESD Many-Outlier Procedure\\\",Technometrics, 25(2), pp. 165-172.\\n\\n@param `STLOption` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `resultList` A **LIST** of ticks corresponding to the outliers\\n\\n@param `result` A **LIST** of LIST of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STLESDTEST\"},{\"name\":\"STOP\",\"detail\":\"\",\"documentation\":\"The `STOP` function stops the current execution by throwing a `WarpScriptStopException`. This means that the current script execution will be aborted unless the call to `STOP` was in a macro invoked via [`TRY`](/doc/TRY).\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"STOP\"},{\"name\":\"STORE\",\"detail\":\"value<ANY> symbol<STRING>  STORE \\nvalue<ANY> register<LONG>  STORE \\nvalues<ANY*> symbols<LIST<STRING>>  STORE \",\"documentation\":\"The `STORE` function stores a value in a symbol.\\n\\nSince 2.7, when the list of symbols contains duplicates only the last occurence in the list is assigned to its corresponding value.\\n\\n@param `symbol` Name of the symbol to modify.\\n\\n@param `register` Index of the register to modify.\\n\\n@param `symbols` List of symbols or registers to modify. The last element of the list will contain the top of the stack.\\n\\n@param `value` Value to store under `symbol`.\\n\\n@param `values` Multiple values to store in `symbols`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STORE\"},{\"name\":\"STRICTMAPPER\",\"detail\":\"mapper<AGGREGATOR> min<NUMBER> max<NUMBER>  STRICTMAPPER  wrapped<AGGREGATOR>\",\"documentation\":\"Wraps a *mapper* in such a way that the mapper will only be called if the number of ticks in the window is in the specified range.\\n\\nSince 2.1 STRICTMAPPER can also take a timespan definition by inputing negative numbers. Number of ticks and timespan can also be mixed to specify, for instance, more than 2 points but less than 5 seconds.\\n\\n@param `max` If positive, maximum number of ticks in the window. If negative, maximum timespan of the window.\\n\\n@param `min` If positive, minimum number of ticks in the window. If negative, minimum timespan of the window.\\n\\n@param `mapper` Mapper to wrap.\\n\\n@param `wrapped` Wrapped mapper.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTMAPPER\"},{\"name\":\"STRICTPARTITION\",\"detail\":\"lgts<LIST<GTS>> labels<LIST<STRING>>  STRICTPARTITION  result<MAP>\",\"documentation\":\"The `STRICTPARTITION` splits a Geo Time Series™ list in equivalence classes based on label values just like [`PARTITION`](/doc/PARTITION) but only retains in each equivalence class key the labels on which the partitioning was done.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels`.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTPARTITION\"},{\"name\":\"STRICTREDUCER\",\"detail\":\"reducer<AGGREGATOR>  STRICTREDUCER  wrapped<AGGREGATOR>\",\"documentation\":\"Wraps a *reducer* so it is only applied if there are values for all the Geo Time Series™ being reduced.\\n\\n@param `reducer` Reducer to wrap.\\n\\n@param `wrapped` Wrapped version of the reducer.\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.6\",\"OPB64name\":\"STRICTREDUCER\"},{\"name\":\"STRINGFORMAT\",\"detail\":\"format<STRING> args<LIST>  STRINGFORMAT  formattedString<STRING>\\nformat<STRING> args<LIST> locale<STRING>  STRINGFORMAT  formattedString<STRING>\",\"documentation\":\"The STRINGFORMAT function format a String in the same ways as Java [String.format](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.util.Locale-java.lang.String-java.lang.Object...-) does.\\n\\nThis fonction consumes an optional locale in [ISO 639](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry), a list of Objects to be used in the format string and a [format string](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax).\\n\\nIf no locale is specified, it defaults to the default JVM locale.\\n\\n@param `format` A format string.\\n\\n@param `args` Arguments referenced by the format specifiers in the format string.\\n\\n@param `locale` The locale to apply during formatting.\\n\\n@param `formattedString` A formatted string.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"2.2.0\",\"OPB64name\":\"STRINGFORMAT\"},{\"name\":\"STU\",\"detail\":\" STU  numberTimeUnits<LONG>\",\"documentation\":\"The `STU` function pushes onto the stack the number of platform time units in one second. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one second.\\n\\n\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"STU\"},{\"name\":\"SUBLIST\",\"detail\":\"base<LIST<ANY>> arguments<LIST<LONG>>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER> end<NUMBER>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER> end<NUMBER> step<NUMBER>  SUBLIST  result<LIST<ANY>>\",\"documentation\":\"It creates a new list with the elements of the base list whose indices are in the argument list.\\n\\nIf the argument list contains two indices [a,b] then `SUBLIST` returns the list of elements from index a to index b (included). If the argument list contains more than two indices, the result of `SUBLIST` contains all the elements at the specified indices, with possible duplicates.\\n\\nNegative indexing is allowed, with negative index effectively refering to index + size.\\n\\nSince 2.1 a new signature allowing the step to be defined has been introduced. Instead of specifying a list has range, you can put the start, end (optional) and step (optional) as **LONG** values.\\n\\n@param `arguments` List of indices. Negative indices are considered to be calculated from the end of the list.\\n\\n@param `base` Base list\\n\\n@param `result` Filtred list\\n\\n@param `start` The first index to consider, will be included.\\n\\n@param `end` The last index to consider, will be included. If not specified, defaults to -1.\\n\\n@param `step` The delta between two consecutive indexes to consider. If end is after start in the list, step must be strictly positive. If start is after end in the list, step must be strictly negative. If not specified, defaults to 1 or -1 depending on start and end.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBLIST\"},{\"name\":\"SUBMAP\",\"detail\":\"base<MAP> arguments<LIST<STRING>>  SUBMAP  result<MAP>\",\"documentation\":\"It creates a new map with the key-value pairs from the base map whose keys are in the argument list.\\n\\n@param `arguments` List of indices.\\n\\n@param `base` Base map\\n\\n@param `result` Filtred map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBMAP\"},{\"name\":\"SUBSTRING\",\"detail\":\"str<STRING> start<LONG> len<LONG>  SUBSTRING  substr<STRING>\\nstr<STRING> start<LONG>  SUBSTRING  substr<STRING>\\narray<BYTES> start<LONG> len<LONG>  SUBSTRING  subarray<BYTES>\\narray<BYTES> start<LONG>  SUBSTRING  subarray<BYTES>\",\"documentation\":\"Extract a substring from a **STRING** input, or a subarray from a **BYTE ARRAY** input.  \\nIf the length is ommitted, it extracts until the end of the string or byte array. If length is greater than max length, extract stops at the input end.\\n\\nIf the start is greater than the input size, `SUBSTRING` raises an error.\\n\\nSince 2.1, the start index can be negative. In this case the effective index is index + size of the **STRING**.\\n\\n@param `len` Length of substring to extract.\\n\\n@param `start` First character to include in the substring (0 based).\\n\\n@param `str` String from which to extract a substring.\\n\\n@param `substr` Extracted substring.\\n\\n@param `array` Byte array from which to extract a sub array.\\n\\n@param `subarray` Extracted sub array.\\n\\n\",\"tags\":[\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBSTRING\"},{\"name\":\"SUBTRACTEXACT\",\"detail\":\"x<NUMBER> y<NUMBER>  SUBTRACTEXACT  diff<LONG>\\nlist<LIST<NUMBER>>  SUBTRACTEXACT  sdiff<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  SUBTRACTEXACT  ldiff<LIST<LONG>>\",\"documentation\":\"The `SUBTRACTEXACT` function consumes two LONGs from the top of the stack and puts back the difference between them. If the difference overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `diff` The difference of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sdiff` The first element of the list minus all the others\\n\\n@param `lx` List of numeric values\\n\\n@param `ldiff` List of **LONG** where each value is the difference of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SUBTRACTEXACT\"},{\"name\":\"SWAP\",\"detail\":\"level2<ANY> top<ANY>  SWAP  top<ANY> level2<ANY>\",\"documentation\":\"Exchanges the positions of the top two elements of the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWAP\"},{\"name\":\"SWITCH\",\"detail\":\"cond1<MACRO> exec1<MACRO> condn<MACRO> execn<MACRO> default<MACRO> n<LONG>  SWITCH \",\"documentation\":\"Performs a [switch statement](https://en.wikipedia.org/wiki/Switch_statement) allowing to select a macro execution based on a series of condition macros or to fallback on to the execution of a default macro.\\n\\n@param `n` Number of cases to consider. The `SWITCH` function will expect `n` pairs of condition/execution macros plus a default macro on the stack.\\n\\n@param `default` Macro which will be executed if all condition macros returned false.\\n\\n@param `cond1` First condition macro. All condition macros are expected to push a boolean on the stack.\\n\\n@param `condn` `n`th condition macro.\\n\\n@param `exec1` First execution macro, this macro will be executed if `cond1` left `true` on the stack.\\n\\n@param `execn` `n`th execution macro.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWITCH\"},{\"name\":\"SYMBOLS\",\"detail\":\" SYMBOLS  symbols<LIST>\",\"documentation\":\"The `SYMBOLS` function outputs the list of all defined symbols.\\n\\n@param `symbols` The list of the names of all defined symbols.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.2.1\",\"OPB64name\":\"SYMBOLS\"},{\"name\":\"SYNC\",\"detail\":\"macro<MACRO>  SYNC \",\"documentation\":\"Executes a macro in a synchronized way while in a parallel execution triggered by a call to [`CEVAL`](/doc/CEVAL). If `SYNC` is called outside of a parallel execution, it simply executes the macro.\\n\\nWhen called within a `CEVAL` execution, the use of `SYNC` guarantees that only one of the concurrently executing threads will execute the specified macro at any given time.\\n\\n@param `macro` Macro to execute in a synchronized way.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"SYNC\"},{\"name\":\"T\",\"detail\":\" T  b<BOOLEAN>\",\"documentation\":\"`T` stand for `true`. It is a boolean constant.\\n\\n\\n@param `b` true\\n\\n\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"T\"},{\"name\":\"TAN\",\"detail\":\"value<NUMBER>  TAN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  TAN  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `TAN` function consumes a floating point number from the top of the stack and pushes back its tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Tangent of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of tangent of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TAN\"},{\"name\":\"TANH\",\"detail\":\"value<NUMBER>  TANH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  TANH  lresult<LIST<DOUBLE>>\",\"documentation\":\"The `TANH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic tangent of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic tangent of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TANH\"},{\"name\":\"TDESCRIBE\",\"detail\":\"object<ANY>  TDESCRIBE  description<STRING>\",\"documentation\":\"The `TDESCRIBE` function is a recursive [`TYPEOF`](/doc/TYPEOF).\\n\\nWhen `TDESCRIBE` finds a LIST, it takes the first element of the list to look for his type. When `TDESCRIBE` finds a MAP, it takes a random key in the map to look for the type of the key and the type of the value.\\n\\n**By design, TDESCRIBE cannot describe heterogeneous lists or maps.**\\n\\nTDESCRIBE output is subject to change in the future. Do not try to parse it. This function is here to help you during Warpscript development.\\n\\n\\nThe `TDESCRIBE` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `object` Any kind of reference\\n\\n@param `description` The description of the object\\n\\n\",\"tags\":[\"extensions\",\"debug\"],\"since\":\"1.2.19\",\"OPB64name\":\"TDESCRIBE\"},{\"name\":\"TEMPLATE\",\"detail\":\"template<STRING> dictionnary<MAP>  TEMPLATE  output<STRING>\\ntemplate<STRING> listofmaps<LIST<MAP>>  TEMPLATE  output<STRING>\",\"documentation\":\"`TEMPLATE` fills a template with values contained in a map. See example for syntax help.\\n\\nThe `TEMPLATE` function expects the map of values on top of the stack and will operate on the string template below it.\\n\\nValues speficied with `{{key}}` will be url-escaped. If you do not want that behavior, use `{{{key}}}`.\\n\\n@param `dictionnary` Each key will be replaced in a {{key}} template. Value could be string long, double, boolean, or a list of maps. If Value is a list of maps, each subkey/value will be replaced in a {{#key}}{{subkey}}{{/key}} template. \\n\\n@param `listofmaps` Contains a list of subkey/value map. Will be replaced in a {{#key}}{{subkey}}{{/key}} template.\\n\\n@param `template` Input template.\\n\\n@param `output` Result of substitution.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TEMPLATE\"},{\"name\":\"THRESHOLDTEST\",\"detail\":\"gts<GTS> threshold<DOUBLE>  THRESHOLDTEST  ticks<LIST<LONG>>\\nlgts<LIST<GTS>> threshold<DOUBLE>  THRESHOLDTEST  lticks<LIST<LIST<LONG>>>\",\"documentation\":\"Analyzes Geo Time Series™, identifying ticks where values are outliers above the given threshold.\\n\\n@param `threshold` Threshold above which values are considered outliers.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `ticks` List of ticks where outliers were found.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lticks` List of lists of ticks where outliers were found.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"THRESHOLDTEST\"},{\"name\":\"TICKINDEX\",\"detail\":\"gts<GTS>  TICKINDEX  indexed<GTS>\\nlgts<LIST<GTS>>  TICKINDEX  lindexed<LIST<GTS>>\\nencoder<GTSENCODER>  TICKINDEX  indexedenc<GTSENCODER>\\nlencoder<LIST<GTSENCODER>>  TICKINDEX  lindexedenc<LIST<GTSENCODER>>\",\"documentation\":\"Creates a clone of a Geo Time Series™, replacing each tick with the index (0 based) at which it appears at the moment of the call.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `encoder` Geo Time Series™ Encoder instance to transform.\\n\\n@param `indexed` Transformed GTS.\\n\\n@param `indexedenc` Transformed GTS Encoder.\\n\\n@param `lgts` List of Geo Time Series™ instances to transform.\\n\\n@param `lencoder` List of Geo Time Series™ Encoder instances to transform.\\n\\n@param `lindexed` List of indexed Geo Time Series™.\\n\\n@param `lindexedenc` List of indexed Geo Time Series™ Encoder.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKINDEX\"},{\"name\":\"TICKLIST\",\"detail\":\"gts<GTS>  TICKLIST  ticks<LIST<LONG>>\\nlgts<LIST<GTS>>  TICKLIST  lticks<LIST<LIST<LONG>>>\\nencoder<GTSENCODER>  TICKLIST  ticks<LIST<LONG>>\\nlencoder<LIST<GTSENCODER>>  TICKLIST  lticks<LIST<LIST<LONG>>>\",\"documentation\":\"Pushes onto the stack the list of ticks of a Geo Time Series™ or encoder. The ticks appear in the order in which they are found.\\n\\nIf a list of Geo Time Series™ is given, the result is a list of list of ticks as if the TICKLIST function was applied to each Geo Time Series™ separately.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n@param `encoder` Instance of encoder from which to extract the ticks.\\n\\n@param `lencoder` List of encoders.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `lticks` List of lists of ticks.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKLIST\"},{\"name\":\"TICKS\",\"detail\":\"gts<GTS>  TICKS  ticks<LIST<LONG>>\\nlgts<LIST<GTS>>  TICKS  ticks<LIST<LONG>>\",\"documentation\":\"Pushes onto the stack the sorted list of **distinct** ticks of a Geo Time Series™. If a list of Geo Time Series™ is given, all the **distinct** ticks are returned in a single sorted list as if all Geo Time Series™ were merged.\\n\\nThis function is not to be confused with [`TICKLIST`](/doc/TICKLIST) as this function returns **distinct** ticks and acts as it merges Geo Time Series™.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKS\"},{\"name\":\"TIMEBOX\",\"detail\":\"macro<MACRO> maxtime<LONG>  TIMEBOX \",\"documentation\":\"The `TIMEBOX` executes a macro with a maximum execution time. If the maximum time is reached, an exception will be thrown which can be caught using [`TRY`](/doc/TRY).\\n\\n@param `maxtime` Maximum execution time, in platform time units.\\n\\n@param `macro` Macro to execute.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TIMEBOX\"},{\"name\":\"TIMECLIP\",\"detail\":\"gts<GTS> end<LONG> duration<LONG>  TIMECLIP  clipped<GTS>\\nlgts<LIST<GTS>> end<LONG> duration<LONG>  TIMECLIP  lclipped<LIST<GTS>>\\ngts<GTS> stop<STRING> start<STRING>  TIMECLIP  clipped<GTS>\\nlgts<LIST<GTS>> stop<STRING> start<STRING>  TIMECLIP  lclipped<LIST<GTS>>\\nencoder<GTSENCODER> end<LONG> duration<LONG>  TIMECLIP  clippedEncoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> end<LONG> duration<LONG>  TIMECLIP  lclippedEncoders<LIST<GTSENCODER>>\\nencoder<GTSENCODER> stop<STRING> start<STRING>  TIMECLIP  clippedEncoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> stop<STRING> start<STRING>  TIMECLIP  lclippedEncoders<LIST<GTSENCODER>>\",\"documentation\":\"Clips Geo Time Series™ instances by restricting their ticks to those within a time interval.      \\n\\n@param `duration` Width of the time interval to retain, in time units.\\n\\n@param `end` Most recent timestamp to retain.\\n\\n@param `start` Start timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `stop` End timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `clipped` Clipped Geo Time Series™.\\n\\n@param `lclipped` List of clipped GTS.\\n\\n@param `encoder` Single GTS Encoder instance.\\n\\n@param `lencoder` List of GTS Encoder instances.\\n\\n@param `clippedEncoder` Clipped GST encoder.\\n\\n@param `lclippedEncoders` List of clipped GTS encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMECLIP\"},{\"name\":\"TIMED\",\"detail\":\"macro<MACRO> name<STRING>  TIMED  timedMacro<MACRO>\",\"documentation\":\"The `TIMED` function converts a macro to a timed macro, recording its execution time and its number of calls.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\n@param `name` A name identifying the macro.\\n\\n@param `macro` The macro you want to monitor.\\n\\n@param `timedMacro` A macro which, when called, will update the statitics associated with the given name.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"TIMED\"},{\"name\":\"TIMEMODULO\",\"detail\":\"gts<GTS> modulus<LONG> label<STRING>  TIMEMODULO  splits<LIST<GTS>>\\nlgts<LIST<GTS>> modulus<LONG> label<STRING>  TIMEMODULO  lsplits<LIST<LIST<GTS>>>\",\"documentation\":\"Splits Geo Time Series™ into sub-GTS whose timestamps are the original timestamp modulo a given modulus value. Each sub-GTS will bear a label with the quotient of the original timestamps divided by the modulus. The output list order is not guaranteed, use [`SORTBY`](/doc/SORTBY) if you want to order the output by label.\\n\\nThis function can be used to generate for example one Geo Time Series™ per day with ticks from 0 to 86400 s (excluded).\\n\\n@param `label` Name of the label which will have the quotient value.\\n\\n@param `modulus` Value by which to divide the original timestamps.\\n\\n@param `gts` Geo Time Series™ to split.\\n\\n@param `splits` Resulting splits.\\n\\n@param `lgts` List of GTS to split.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMEMODULO\"},{\"name\":\"TIMEOFF\",\"detail\":\" TIMEOFF \",\"documentation\":\"Turns off the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEOFF\"},{\"name\":\"TIMEON\",\"detail\":\" TIMEON \",\"documentation\":\"Turns on the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEON\"},{\"name\":\"TIMESCALE\",\"detail\":\"gts<GTS> scale<DOUBLE>  TIMESCALE  scaled<GTS>\\ngts<GTS> scale<LONG>  TIMESCALE  scaled<GTS>\\nlgts<LIST<GTS>> scale<DOUBLE>  TIMESCALE  lscaled<LIST<GTS>>\\nlgts<LIST<GTS>> scale<LONG>  TIMESCALE  lscaled<LIST<GTS>>\",\"documentation\":\"Modifies the ticks of Geo Time Series™ instances by multiplying each tick by a provided scale.      \\n\\nThe resulting tick will be converted to a LONG after multiplication by the scale.\\n\\nIf the Geo Time Series™ instance is bucketized, the `lastbucket` and `bucketspan` parameters will also be scaled. If the scale would incur a `bucketspan` of 0, the call will end with an error.\\n\\n@param `scale` Scale by which to multiply each tick.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `scaled` Geo Time Series™ result.\\n\\n@param `lscaled` List of Geo Time Series™ result.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESCALE\"},{\"name\":\"TIMESHIFT\",\"detail\":\"gts<GTS> offset<LONG>  TIMESHIFT  shifted<GTS>\\nlgts<LIST<GTS>> offset<LONG>  TIMESHIFT  lshifted<LIST<GTS>>\",\"documentation\":\"Shifts the ticks of Geo Time Series™ instances by a given amount.\\n\\n@param `offset` Offset to apply to the ticks, in time units.\\n\\n@param `gts` Single Geo Time Series™ instance to shift.\\n\\n@param `lgts` List of GTS to shift.\\n\\n@param `shifted` Shifted Geo Time Series™.\\n\\n@param `lshifted` List of shifted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESHIFT\"},{\"name\":\"TIMESPLIT\",\"detail\":\"gts<GTS> quietperiod<LONG> minvalues<LONG> label<STRING>  TIMESPLIT  splits<LIST<GTS>>\\nlgts<LIST<GTS>> quietperiod<LONG> minvalues<LONG> label<STRING>  TIMESPLIT  lsplits<LIST<LIST<GTS>>>\",\"documentation\":\"The `TIMESPLIT` functions splits Geo Time Series™ instances based on *quiet periods*, *i.e.* periods during which the GTS has no values.\\n\\nWhenever a quiet period longer than a minimum duration is encountered, the Geo Time Series™ is split.\\n\\nIf input gts has no values or if 'label' is already part of the labels of 'gts', then the resulting list of GTS will only contain a clone of 'gts'. **Make sure to test your GTS split size if needed.**\\n\\n@param `label` Name of label in which to store the sequence number.\\n\\n@param `minvalues` Minimum number of values a split should contain. Splits with less than that many values will be discarded.\\n\\n@param `quietperiod` Minimum duration of the silent period (*i.e.* with no values) between splits.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESPLIT\"},{\"name\":\"TIMINGS\",\"detail\":\"\",\"documentation\":\"Turns on the collection of timing information for each line of the script. The collected timings can be put onto the stack by using [`ELAPSED`](/doc/ELAPSED).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMINGS\"},{\"name\":\"TLTTB\",\"detail\":\"gts<GTS> samples<LONG>  TLTTB  downsampled<GTS>\\nlgts<LIST<GTS>> samples<LONG>  TLTTB  ldownsampled<LIST<GTS>>\",\"documentation\":\"The `TLTTB` function performs downsampling of Geo Time Series™ by applying the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data. It differs from the [`LTTB`](doc/LTTB) function by the fact that it considers time based buckets instead of buckets based on a number of values.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"TLTTB\"},{\"name\":\"TOBIN\",\"detail\":\"param<LONG>  TOBIN  result<STRING>\",\"documentation\":\"Converts the long on top of the stack to its 64 bits binary representation.\\n\\n@param `param` value to convert\\n\\n@param `result` String converted binary representation of param\\n\\n\",\"tags\":[\"conversion\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBIN\"},{\"name\":\"TOBITS\",\"detail\":\"number<NUMBER>  TOBITS  bits<LONG>\\ngts<GTS>  TOBITS  longgts<GTS>\",\"documentation\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n**Deprecation notice** the `TOBITS` function will be removed, please use `->DOUBLEBITS` or `->FLOATBITS`.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBITS\"},{\"name\":\"TOBOOLEAN\",\"detail\":\"value<BOOLEAN>  TOBOOLEAN  result<BOOLEAN>\\nvalue<NUMBER>  TOBOOLEAN  result<BOOLEAN>\\nvalue<STRING>  TOBOOLEAN  result<BOOLEAN>\",\"documentation\":\"Converts a value of primitive type into a boolean value.\\n\\nThe `TOBOOLEAN` function consumes a parameter from the top of the stack and pushes back its conversion to boolean.\\nNumbers will be false if they are equal to 0 and true otherwise.\\nStrings will be false if they are equals to '' and true otherwise.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The boolean conversion of the value\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.5\",\"OPB64name\":\"TOBOOLEAN\"},{\"name\":\"TODEGREES\",\"detail\":\"angle<NUMBER>  TODEGREES  result<DOUBLE>\\nlangle<LIST<NUMBER>>  TODEGREES  lresult<LIST<DOUBLE>>\",\"documentation\":\"Converts an angle measured in radians to its equivalent in degrees.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from radians to degrees.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in radian to convert in degree\\n\\n@param `result` Result of the conversion from radians to degrees\\n\\n@param `langle` List of angles in radian to convert in degree\\n\\n@param `lresult` List of results of the conversion from radians to degrees\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODEGREES\"},{\"name\":\"TODOUBLE\",\"detail\":\"value<BOOLEAN>  TODOUBLE  result<DOUBLE>\\nvalue<NUMBER>  TODOUBLE  result<DOUBLE>\\nvalue<STRING>  TODOUBLE  result<DOUBLE>\",\"documentation\":\"Converts a value of primitive type into a double value.\\n\\nThe `TODOUBLE` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to double.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The double conversion of the value\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODOUBLE\"},{\"name\":\"TOHEX\",\"detail\":\"input<LONG>  TOHEX  output<STRING>\",\"documentation\":\"Converts a long to its 64 bits hexadecimal representation.\\n\\n@param `input` Signed long integer.\\n\\n@param `output` Hexadecimal string representation of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOHEX\"},{\"name\":\"TOINTEXACT\",\"detail\":\"value<NUMBER>  TOINTEXACT  result<LONG>\\nlvalue<LIST<NUMBER>>  TOINTEXACT  lresult<LIST<LONG>>\",\"documentation\":\"The `TOINTEXACT` function consumes one LONG from the top of the stack and puts back the value. If the result overflows an INT, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be checked not to overflow an INT\\n\\n@param `result` The given value, converted to Long\\n\\n@param `lvalue` List of values to be checked not to overflow an INT\\n\\n@param `lresult` List of given values, converted to Long\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"TOINTEXACT\"},{\"name\":\"TOKENDUMP\",\"detail\":\"token<STRING>  TOKENDUMP  map<MAP>\\ntoken<STRING> secret<STRING>  TOKENDUMP  map<MAP>\",\"documentation\":\"Deciphers a token and outputs a map describing the various elements of the token.\\n\\nThe map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Original token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| params | MAP | Map of token parameters, can be used as input to [`TOKENGEN`](/doc/TOKENGEN) |\\n\\nThe `params` map contains the following entries for both `READ` and `WRITE` tokens:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| type  | STRING | `READ` or `WRITE` depending on the type of token |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in ms since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in ms since the Unix Epoch |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nAdditionally, for `READ` tokens, the map contains those entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, those will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nNote that the `TOKENDUMP` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration key was not set.\\n\\n\\n@param `token` Token to decode.\\n\\n@param `map` Map with the extracted parameters, the original token and its *ident*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENDUMP` from Worf.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENDUMP\"},{\"name\":\"TOKENGEN\",\"detail\":\"params<MAP>  TOKENGEN  result<MAP>\\nparams<MAP> secret<STRING>  TOKENGEN  result<MAP>\",\"documentation\":\"Generates a token given a map of parameters. The `TOKENGEN` function outputs a map.\\n\\nThe input parameter map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| id | STRING | Optional identifier that will be put verbatim in the result map |\\n| type  | STRING | `READ` or `WRITE` depending on the type of token to generate |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| ttl | LONG | If `expiry` is not specified, a time to live can be set with this key. The TTL is expressed in **milliseconds**, the computed expiry timestamp will be the issuance timestamp plus the ttl |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nWhen generating a `READ` token, the following parameters are needed to ensure data isolation:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, they will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nIf one of these parameter key is not set or set to an empty list, then the generated `READ` token will be granted access to all the scope associated with the parameter key. For example, if `owners` is not set, data from all owners will be accessible to this token.\\n\\nThe `TOKENGEN` function outputs a map with the following keys:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Generated token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| id | STRING | Optional identifier if the `id` key was specified in the parameter map |\\n\\nNote that the `TOKENGEN` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration was not set.\\n\\n@param `params` Map of parameters used to generate the token.\\n\\n@param `result` Map containing the token, its *ident* and an optional *id*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENGEN` from Worf.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENGEN\"},{\"name\":\"TOKENINFO\",\"detail\":\"token<STRING>  TOKENINFO  infos<MAP>\",\"documentation\":\"Retrieves information from token.\\n\\nThe `TOKENINFO` function consumes a token from the top of the stack and pushes back a map containing the token information:\\n* type: type of token 'Read' or 'Write'\\n* issuance: timestamp of token creation, in **milliseconds** since the Unix Epoch \\n* expiry: timestamp of token expiration, in **milliseconds** since the Unix Epoch \\n* application: name of the application accessing the data\\n* apps: list of applications whose data can be accessed (usually limited to a single application)\\n\\n@param `token` Token to extract informations\\n\\n@param `infos` Token informations extract from the tokens\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOKENINFO\"},{\"name\":\"TOKENSECRET\",\"detail\":\"newsecret<STRING> secret<STRING>  TOKENSECRET \",\"documentation\":\"Modifies the secret needed for using `TOKENGEN` or `TOKENDUMP`.\\n\\nThis function is only useable if a secret was configured using `token.secret`.\\n\\n@param `secret` Current secret for token operations, initially the value configured via `token.secret`.\\n\\n@param `newsecret` New secret to set for token operations.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TOKENSECRET\"},{\"name\":\"TOLONG\",\"detail\":\"value<BOOLEAN>  TOLONG  result<LONG>\\nvalue<NUMBER>  TOLONG  result<LONG>\\nvalue<STRING>  TOLONG  result<LONG>\\narray<BYTES>  TOLONG  result<LONG>\",\"documentation\":\"Converts a value of primitive type or a **BYTE ARRAY** into a long value.\\n\\nThe `TOLONG` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to long.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The long conversion of the value\\n\\n@param `array` Maximum 8 bytes to convert to a LONG. Sign is kept.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLONG\"},{\"name\":\"TOLOWER\",\"detail\":\"input<STRING>  TOLOWER  output<STRING>\",\"documentation\":\"Converts the **STRING** on top of the stack to lower case.\\n\\n@param `input` input string\\n\\n@param `output` Lower case string\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLOWER\"},{\"name\":\"TORADIANS\",\"detail\":\"angle<NUMBER>  TORADIANS  result<DOUBLE>\\nlangle<LIST<NUMBER>>  TORADIANS  lresult<LIST<DOUBLE>>\",\"documentation\":\"Converts an angle measured in degrees to its equivalent in radians.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from degrees to radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in degree to convert in radian\\n\\n@param `result` Result of the conversion from degree to radian\\n\\n@param `langle` List of angles in degree to convert in radian\\n\\n@param `lresult` List of results of the conversion from degree to radian\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TORADIANS\"},{\"name\":\"TOSELECTOR\",\"detail\":\"gts<GTS>  TOSELECTOR  selector<STRING>\\ngtslist<LIST<GTS>>  TOSELECTOR  selectorlist<LIST<STRING>>\\nencoder<GTSENCODER>  TOSELECTOR  selector<STRING>\\nencoderlist<LIST<GTSENCODER>>  TOSELECTOR  selectorlist<LIST<STRING>>\",\"documentation\":\"The `TOSELECTOR` function takes a Geo Time Series™ or Geo Time Series™ LIST from the top of the stack and, for each encountered GTS, replace it with a selector which would select it.\\n\\nThis selector can be used as input of [`PARSESELECTOR`](/doc/PARSESELECTOR) for a [`FETCH`](/doc/FETCH).\\n\\n@param `gts` The input Geo Time Series™.\\n\\n@param `gtslist` The input list of Geo Time Series™.\\n\\n@param `encoder` The input encoder.\\n\\n@param `encoderlist` The input list of encoders.\\n\\n@param `selector` The selector string.\\n\\n@param `selectorlist` The list of selector strings, one per GTS in gtslist.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSELECTOR\"},{\"name\":\"TOSTRING\",\"detail\":\"value<NUMBER>  TOSTRING  result<STRING>\\nvalue<BOOLEAN>  TOSTRING  result<STRING>\\nvalue<STRING>  TOSTRING  result<STRING>\\nvalue<GTS>  TOSTRING  result<STRING>\",\"documentation\":\"Converts a value of primitive type into a string value.\\n\\nThe `TOSTRING` function consumes a parameter from the top of the stack and pushes back its conversion to string.\\n\\nNote that GTS are converted to input format and that the string ends with CRLF to follow HTTP recommendations.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The string conversion of the value\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSTRING\"},{\"name\":\"TOTIMESTAMP\",\"detail\":\"input<STRING>  TOTIMESTAMP  result<LONG>\",\"documentation\":\"Converts a date in format ISO8601 into a timestamp in the platform's time unit.\\n\\nThe `TOTIMESTAMP` function consumes a string parameter (date + time + time zone) from the top of the stack and pushes back its conversion to a number of time units since the Unix Epoch.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nThe supported format is ISO8601 and are:\\n* yyyy-mm-dddThh:mm:ss.ssssssZ\\n* yyyy-mm-dddThh:mm:ss+hh:mm\\n\\nAs the string are URL encoded, the symbol + have to be replaced by %2B, otherwise a space will replace the + in the string.\\n\\n@param `input` ISO8601 string.\\n\\n@param `result` timestamp in the platform unit.\\n\\n\",\"tags\":[\"conversion\",\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOTIMESTAMP\"},{\"name\":\"TOUPPER\",\"detail\":\"input<STRING>  TOUPPER  output<STRING>\",\"documentation\":\"Converts the **STRING** on top of the stack to upper case.\\n\\n@param `input` input string\\n\\n@param `output` Upper case string\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOUPPER\"},{\"name\":\"TR\",\"detail\":\"matrix<MATRIX>  TR  trace<DOUBLE>\",\"documentation\":\"Computes the [trace](https://en.wikipedia.org/wiki/Trace_(linear_algebra)) of a square matrix. If the input matrix is not square, an error is raised.\\n\\n@param `matrix` The square matrix for which to compute the trace.\\n\\n@param `trace` The computed trace.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TR\"},{\"name\":\"TRANSPOSE\",\"detail\":\"matrix<MATRIX>  TRANSPOSE  transpose<MATRIX>\",\"documentation\":\"Computes the [transpose](https://en.wikipedia.org/wiki/Transpose) of a matrix.\\n\\n@param `matrix` Matrix to transpose.\\n\\n@param `transpose` The transpose of the original matrix.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TRANSPOSE\"},{\"name\":\"TRIM\",\"detail\":\"str<STRING>  TRIM  trimmedstr<STRING>\",\"documentation\":\"Trims whitespaces from both ends of the string on top of the stack.\\n\\n@param `str` String to trim\\n\\n@param `trimmedstr` String trimmed\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TRIM\"},{\"name\":\"TRY\",\"detail\":\"try<MACRO> catch<MACRO> finally<MACRO>  TRY \",\"documentation\":\"The `TRY` function provides a way to execute a macro in a safety harness with [Exception handling](https://en.wikipedia.org/wiki/Exception_handling).\\n\\nIf an error is thrown, it is recorded and will be available via [`ERROR`](/doc/ERROR).\\n\\n@param `try` Macro whose execution is *attempted*.\\n\\n@param `catch` Macro which will be executed if an error is encountered while executing the `try` macro.\\n\\n@param `finally` Macro which will be executed unconditionally after either the `try` or `try`/`catch` execution.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"TRY\"},{\"name\":\"TSELEMENTS\",\"detail\":\"timestamp<LONG>  TSELEMENTS  dateAndTimeElements<LIST<LONG>>\\ntimestamp<LONG> timezone<STRING>  TSELEMENTS  dateAndTimeElements<LIST<LONG>>\",\"documentation\":\"Alias of [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nThe `TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"TSELEMENTS\"},{\"name\":\"TSELEMENTS->\",\"detail\":\"dateAndTimeElements<LIST<LONG>>  TSELEMENTS->  timestamp<LONG>\\ndateAndTimeElements<LIST<LONG>> timezone<STRING>  TSELEMENTS->  timestamp<LONG>\",\"documentation\":\"The `TSELEMENTS->` function consumes an optional **STRING** timezone and a **LIST** of **LONG** describing a time and date and pushes back the **LONG** timestamp. The **LIST** of **LONG** follows the format given by [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"K4C4I3KCGJtJJmoy\"},{\"name\":\"TYPEOF\",\"detail\":\"object<ANY>  TYPEOF  type<STRING>\",\"documentation\":\"Gets the type of an element.\\n\\nThe `TYPEOF` function consumes the top element on the stack and pushes back a string containing the type. The output could be:\\n+ AGGREGATOR\\n+ BITSET\\n+ BOOLEAN\\n+ BYTES\\n+ CONTEXT\\n+ COUNTER\\n+ DOUBLE\\n+ FILLER\\n+ FILTER\\n+ GEOSHAPE\\n+ GTS\\n+ GTSENCODER\\n+ KEY\\n+ LIST\\n+ LONG\\n+ MACRO\\n+ MAP\\n+ MARK\\n+ MATCHER\\n+ MATRIX\\n+ NULL\\n+ OPERATOR\\n+ PFONT\\n+ PGRAPHICS\\n+ PIMAGE\\n+ PSHAPE\\n+ REDUCER\\n+ SET\\n+ STRING\\n+ VECTOR\\n+ VLIST\\n\\nFor any object introduced by a WarpScript extension whose output of TYPEOF is not in the list thereof, the output would be preceded by \\\"X-\\\".\\n\\nNote: since revision 2.5.0, the TYPEOF output of bucketizers, mappers, reducers is changed from 'MAPPER' to 'AGGREGATOR'.\\n\\n\\n@param `object` Any kind of reference\\n\\n@param `type` The type of the object\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"TYPEOF\"},{\"name\":\"UDF\",\"detail\":\"class<STRING>  UDF \",\"documentation\":\"The `UDF` function invokes a User Defined Function from a Jar. A new function instance is loaded at each invocation.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UDF\"},{\"name\":\"ULP\",\"detail\":\"value<NUMBER>  ULP  ulp<DOUBLE>\\nlvalue<LIST<NUMBER>>  ULP  lulp<LIST<DOUBLE>>\",\"documentation\":\"Returns the size of the [ULP (Unit in the Last Place)](https://en.wikipedia.org/wiki/Unit_in_the_last_place) for the argument. The ulp for a DOUBLE is the positive distance between this floating-point value and the DOUBLE value next larger in magnitude.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `ulp` Computed ULP.\\n\\n@param `lvalue` List of numeric values.\\n\\n@param `lulp` List of computed ULPs.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ULP\"},{\"name\":\"UNBUCKETIZE\",\"detail\":\"gts<GTS>  UNBUCKETIZE  gts<GTS>\\nlgts<LIST<GTS>>  UNBUCKETIZE  lgts<LIST<GTS>>\",\"documentation\":\"Transforms a bucketized Geo Time Series™ into a non bucketized one. Note that this function transforms the original GTS, it does not clone it.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™ instances.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNBUCKETIZE\"},{\"name\":\"UNBUCKETIZE.CALENDAR\",\"detail\":\"gts<GTS>  UNBUCKETIZE.CALENDAR  gts<GTS>\\nlgts<LIST<GTS>>  UNBUCKETIZE.CALENDAR  lgts<LIST<GTS>>\",\"documentation\":\"On a GTS that is calendar-bucketized, this function replaces the ticks with the timestamp end boundaries of each bucket, and unbucketize it.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `lgts` One or more lists of Geo Time Series™\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"UNBUCKETIZE.CALENDAR\"},{\"name\":\"UNGZIP\",\"detail\":\"compressed<BYTES>  UNGZIP  uncompressed<BYTES>\",\"documentation\":\"Decompresses a byte array containing data compressed by [`GZIP`](doc/GZIP).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNGZIP\"},{\"name\":\"UNION\",\"detail\":\"setA<SET> setB<SET>  UNION  output<SET>\",\"documentation\":\"Computes the union &#x222a; of two sets.\\n\\nThe `UNION` function consumes two sets from the top of the stack and pushes back its mathematical union.\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x222a; *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNION\"},{\"name\":\"UNIQUE\",\"detail\":\"input<LIST>  UNIQUE  output<LIST>\",\"documentation\":\"The `UNIQUE` function eliminates duplicate elements on the LIST on the top of the stack.\\nThe order of the resulting LIST is not the same than the original one.\\n\\nIt makes elements of a list unique by converting it to a set temporarily. See [()](/doc/91Z) for more informations.\\n\\n@param `input` The list to parse\\n\\n@param `output` The new list object, without any duplicates\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNIQUE\"},{\"name\":\"UNLIST\",\"detail\":\"list<LIST>  UNLIST  mark<MARK> elts<ANY*>\",\"documentation\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`]`](/doc/MF).\\n\\n@param `list` List to expand.\\n\\n@param `elts` Elements of `list`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNLIST\"},{\"name\":\"UNMAP\",\"detail\":\"map<MAP>  UNMAP  mark<MARK> k1<ANY> v1<ANY> kN<ANY> vN<ANY>\",\"documentation\":\"Unpacks a map, pushing its keys and values onto the stack along a mark as the deepest stack element such that one can use [`}`](/doc/UF) to rebuild the map.\\n\\n@param `k1` First map key.\\n\\n@param `v1` First map value.\\n\\n@param `kN` Nth map key.\\n\\n@param `vN` Nth map value.\\n\\n@param `map` Map to unpack.\\n\\n@param `mark` Mark indicating the deepest level to consider when building the map.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNMAP\"},{\"name\":\"UNPACK\",\"detail\":\"list<BYTES> format<STRING>  UNPACK  result<LIST<ANY>>\",\"documentation\":\"The `UNPACK` function unpacks a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n* **<**: No bigendian\\n* **>**: Bigendian\\n* **L**: Long\\n* **B**: Boolean\\n* **D**: Double length always equals 64.\\n* **<L32**: No bigendian 32 bits Long\\n\\n@param `list` Pqcked list to unpack\\n\\n@param `format` Format used to unpack\\n\\n@param `result` Unpacked list\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"UNPACK\"},{\"name\":\"UNSECURE\",\"detail\":\"secure<STRING>  UNSECURE  script<STRING>\",\"documentation\":\"The `UNSECURE` function decrypts a secure script. The correct secret MUST have been set unsing [`SECUREKEY`](doc/SECUREKEY) prior to calling this function.\\n\\n@param `secure` STRING with the secure script to decode.\\n\\n@param `script` Decoded scripted.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNSECURE\"},{\"name\":\"UNSET\",\"detail\":\"set<SET>  UNSET  mark<MARK> elts<ANY*>\",\"documentation\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`)`](/doc/9F).\\n\\n@param `set` Set to expand.\\n\\n@param `elts` Elements of `set`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"2.6.0\",\"OPB64name\":\"UNSET\"},{\"name\":\"UNTIL\",\"detail\":\"code<MACRO> condition<MACRO>  UNTIL \\ncode<MACRO> condition<MACRO> index<BOOLEAN>  UNTIL \",\"documentation\":\"The `UNTIL` function implements an until loop. It takes two macros as arguments from the stack: the code to execute until the condition is true and the condition to evaluate after every iteration.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force UNTIL to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `code` Macro executed on each loop\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNTIL\"},{\"name\":\"UNWRAP\",\"detail\":\"wrapped<STRING>  UNWRAP  gts<GTS>\\nwrappedbytes<BYTES>  UNWRAP  gts<GTS>\\nlwrapped<LIST<STRING>>  UNWRAP  lgts<LIST<GTS>>\\nlwrapped<LIST<BYTES>>  UNWRAP  lgts<LIST<GTS>>\",\"documentation\":\"Unwraps packed Geo Time Series™ instances.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNWRAP\"},{\"name\":\"UNWRAPEMPTY\",\"detail\":\"wrapped<STRING>  UNWRAPEMPTY  gts<GTS>\\nwrappedbytes<BYTES>  UNWRAPEMPTY  gts<GTS>\\nlwrapped<LIST<STRING>>  UNWRAPEMPTY  lgts<LIST<GTS>>\\nlwrapped<LIST<BYTES>>  UNWRAPEMPTY  lgts<LIST<GTS>>\",\"documentation\":\"Unwraps wrapped Geo Time Series™ instances without unpacking the actual datapoints. This is handy to extract the metadata (class, labels, attributes) from a set of wrapped GTS.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPEMPTY\"},{\"name\":\"UNWRAPENCODER\",\"detail\":\"wrapped<STRING>  UNWRAPENCODER  encoder<GTSENCODER>\\nwrappedbytes<BYTES>  UNWRAPENCODER  encoder<GTSENCODER>\\nlwrapped<LIST<STRING>>  UNWRAPENCODER  lencoder<LIST<GTSENCODER>>\\nlwrapped<LIST<BYTES>>  UNWRAPENCODER  lencoder<LIST<GTSENCODER>>\",\"documentation\":\"Unwraps packed Geo Time Series™ into encoders.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `encoder` Encoder with decoded Geo Time Series™ datapoints.\\n\\n@param `lencoder` List of encoders with decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"UNWRAPENCODER\"},{\"name\":\"UNWRAPSIZE\",\"detail\":\"wrapped<STRING>  UNWRAPSIZE  size<LONG>\\nwrappedbytes<BYTES>  UNWRAPSIZE  size<LONG>\\nlwrapped<LIST<STRING>>  UNWRAPSIZE  lsize<LIST<LONG>>\\nlwrapped<LIST<BYTES>>  UNWRAPSIZE  lsize<LIST<LONG>>\",\"documentation\":\"Extracts the size (number of datapoints) of wrapped Geo Time Series™ instances.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `size` Decoded Geo Time Series™ size.\\n\\n@param `lsize` List of decoded Geo Time Series™ sizes.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPSIZE\"},{\"name\":\"UPDATE\",\"detail\":\"gts<GTS> token<STRING>  UPDATE \\nencoder<GTSENCODER> token<STRING>  UPDATE \\nlist<LIST<GTS>> token<STRING>  UPDATE \\nlist<LIST<GTSENCODER>> token<STRING>  UPDATE \",\"documentation\":\"Pushes Geo Time Series™ data to the Warp 10 instance.\\n\\nThe `UPDATE` function allows you to push data directly from your WarpScript code without having to retrieve the data and use the `/update` endpoint.\\n\\nThe GTS or Encoder instances to push *MUST* have a non empty name and in the case of Geo Time Series™ *MUST* have been renamed (to avoid pushing data by mistake which could override existing data you just retrieved).\\n\\n@param `token` Write token to use for pushing the data.\\n\\n@param `gts` Geo Time Series™ to push.\\n\\n@param `encoder` GTS Encoder to push.\\n\\n@param `list` List containing Geo Time Series™ and/or GTS Encoder instances to push.\\n\\n\",\"tags\":[\"gts\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"UPDATE\"},{\"name\":\"UPDATEOFF\",\"detail\":\"message<STRING> secret<STRING>  UPDATEOFF \",\"documentation\":\"Disables update operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when an update operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEOFF\"},{\"name\":\"UPDATEON\",\"detail\":\"secret<STRING>  UPDATEON \",\"documentation\":\"Enables update operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEON\"},{\"name\":\"URLDECODE\",\"detail\":\"encoded<STRING>  URLDECODE  decoded<STRING>\",\"documentation\":\"Decodes a [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) STRING.\\n\\n@param `encoded` Encoded STRING to decode.\\n\\n@param `decoded` Decoded STRING.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLDECODE\"},{\"name\":\"URLENCODE\",\"detail\":\"string<STRING>  URLENCODE  encoded<STRING>\",\"documentation\":\"Encodes a STRING using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and replacing occurrences of '+' with '%20'.\\n\\nThe character set used is [UTF-8](https://en.wikipedia.org/wiki/UTF-8).\\n\\n@param `string` Input STRING to encode.\\n\\n@param `encoded` Encoded version of 'string' using the UTF-8 character set.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLENCODE\"},{\"name\":\"URLFETCH\",\"detail\":\"url<STRING>  URLFETCH  result<LIST<LIST>>\\nurl<STRING> headers<MAP>  URLFETCH  result<LIST<LIST>>\\nurls<LIST<STRING>>  URLFETCH  result<LIST<LIST>>\\nurls<LIST<STRING>> headers<MAP>  URLFETCH  result<LIST<LIST>>\",\"documentation\":\"The `URLFETCH` function sends HTTP(S) GET requests, waits for the responses and puts them on the stack.\\n\\nFor security reasons, the stack must be authenticated for this function to work, see [`AUTHENTICATE`](/doc/AUTHENTICATE).\\n\\nSince 2.7.0, this function also accepts a MAP of headers.\\n\\n@param `url` The URL to send the GET request to. Must begin with `http://` or `https://`.\\n\\n@param `urls` The list of URLs to send the GET requests to. Each URL must begin with `http://` or `https://`. \\n\\n@param `result` A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\\n\\n@param `headers` \\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"1.0.2\",\"OPB64name\":\"URLFETCH\"},{\"name\":\"UUID\",\"detail\":\" UUID  uuid<STRING>\",\"documentation\":\"Pushes onto the stack a randomly generated [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\n\\n@param `uuid` Generated UUID string\\n\\n\",\"tags\":[\"misc\"],\"since\":\"1.0.0\",\"OPB64name\":\"UUID\"},{\"name\":\"V->\",\"detail\":\"list<VLIST>  V->  result<LIST>\",\"documentation\":\"The `V->` function converts a Vector (VLIST) on top of the stack into a list.\\n\\n@param `list` Input Vector.\\n\\n@param `result` Result list.\\n\\n\",\"tags\":[\"lists\",\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"KXoy\"},{\"name\":\"VALUEDEDUP\",\"detail\":\"gts<GTS> order<BOOLEAN>  VALUEDEDUP  dedupgts<GTS>\\nlgts<LIST<GTS>> order<BOOLEAN>  VALUEDEDUP  ldedupgts<LIST<GTS>>\",\"documentation\":\"Deletes duplicated values of the Geo Time Series™.\\n\\nThe `VALUEDEDUP` function takes as parameter a **GTS** or a **LIST** of **GTS** and it removes its duplicate values.\\n\\nExpects a boolean indicating whether we keep the oldest or most recent datapoint for a given value.\\n\\n@param `order` Boolean value, true for keeping the oldest datapoint for a given value, false otherwise.\\n\\n@param `gts` Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `lgts` List of Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `dedupgts` Geo Time Series™ with unique values.\\n\\n@param `ldedupgts` List of Geo Time Series™ with unique values.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEDEDUP\"},{\"name\":\"VALUEHISTOGRAM\",\"detail\":\"gts<GTS>  VALUEHISTOGRAM  histogram<MAP>\\nencoder<GTSENCODER>  VALUEHISTOGRAM  histogram<MAP>\\nlist<LIST<GTS>>  VALUEHISTOGRAM  lhistogram<LIST<MAP>>\",\"documentation\":\"Produces the value histogram of a Geo Time Series™ or (since 2.2.0) of a GTS Encoder.\\n\\nThe histogram is a map with an entry for each value (used as the map key), with an associated value equal to the number of occurrences of the value in the series.\\n\\nIf the input is a bucketized Geo Time Series™, the `NULL` key will have an associated value which is the number of buckets without values (assuming no datapoints were added at timestamps other than those of buckets).\\n\\nWhen the input is a GTS Encoder, keys may be BigDecimal, LONG, DOUBLE, BOOLEAN or STRING, binary values are not used as keys, their STRING representation (in ISO-8859-1) is used.\\n\\n@param `gts` Geo Time Series™ for which to compute the histogram\\n\\n@param `encoder` GTS Encoder for which to compute the histogram\\n\\n@param `histogram` The value histogram for the input Geo Time Series™ or GTS Encoder\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders\\n\\n@param `lhistogram` The list of value histogram maps\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEHISTOGRAM\"},{\"name\":\"VALUELIST\",\"detail\":\"map<MAP>  VALUELIST  values<LIST>\",\"documentation\":\"Gets values from a **MAP**.\\n\\nThe function `VALUELIST` extracts the values of a **MAP** on the top of the stack and pushes on the stack a list with those values. The **MAP** is consumed.\\n\\n\\n@param `map` Map for which to get the values.\\n\\n@param `values` List of values for the input MAP.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUELIST\"},{\"name\":\"VALUES\",\"detail\":\"gts<GTS>  VALUES  values<LIST>\\nlgts<LIST<GTS>>  VALUES  lvalues<LIST<LIST>>\\nencoder<GTSENCODER>  VALUES  values<LIST>\\nlencoder<LIST<GTSENCODER>>  VALUES  lvalues<LIST<LIST>>\",\"documentation\":\"Gets the values of Geo Time Series™ or encoders.\\n\\nThe `VALUES` function consumes a Geo Time Series™, an encoder or a list thereof from the stack, and it replaces each instance of Geo Time Series™ or encoder by a list of its values.\\n\\n@param `gts` Geo Time Series™ for which to get the values.\\n\\n@param `lgts` List of Geo Time Series™ for which to get the values.\\n\\n@param `encoder` Encoder for which to get the values.\\n\\n@param `lencoder` List of encoders for which to get the values.\\n\\n@param `values` List of values from the input Geo Time Series™.\\n\\n@param `lvalues` List of list of values from the input Geo Time Series™ list.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUES\"},{\"name\":\"VALUESORT\",\"detail\":\"gts<GTS>  VALUESORT  sortedgts<GTS>\\nlgts<LIST<GTS>>  VALUESORT  lsortedgts<LIST<GTS>>\",\"documentation\":\"Sorts values of the Geo Time Series™ in ascending order.\\n\\nThe function `VALUESORT` takes the **GTS** on top of the stack and sort its values (and associated locations/elevations) in ascending order.\\n\\n@param `gts` Geo Time Series™ for which to sort the values.\\n\\n@param `sortedgts` Geo Time Series™ with sorted values.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lsortedgts` List of Geo Time Series™ with sorted values.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESORT\"},{\"name\":\"VALUESPLIT\",\"detail\":\"gts<GTS> label<STRING>  VALUESPLIT  splitedgts<LIST<GTS>>\\nlgts<LIST<GTS>> label<STRING>  VALUESPLIT  lsplitedgts<LIST<LIST<GTS>>>\",\"documentation\":\"Splits Geo Time Series™ by values.\\n\\nThe function `VALUESPLIT` takes one **STRING** on top of the stack plus one **GTS** or a list of **GTS**. It splits **GTS** by values and creates a **GTS** for each different value. For each new **GTS**, the label specified in parameter will be added.\\n\\nThe new **GTS** will be sorted by value with `VALUESORT`.\\n\\n@param `label` Label to add to the new Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ to split by value.\\n\\n@param `splitedgts` List of Geo Time Series™ splited by value.\\n\\n@param `lgts` List of Geo Time Series™ to split by value.\\n\\n@param `lsplitedgts` List of Geo Time Series™ splited by value.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESPLIT\"},{\"name\":\"VARINT->\",\"detail\":\"encoded<BYTES>  VARINT->  numbers<LIST<LONG>>\\nencoded<BYTES> count<LONG>  VARINT->  numbers<LIST<LONG>> processed<LONG>\",\"documentation\":\"The `VARINT` function decodes [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoded numbers.\\n\\n@param `numbers` List of decoded numbers.\\n\\n@param `encoded` Byte array containing the encoded number(s) to decode.\\n\\n@param `count` Maximum number of `LONG`s to decode.\\n\\n@param `processed` Number of bytes which were processed to decode the numbers.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"KZ4HHJtJAIs\"},{\"name\":\"VARS\",\"detail\":\"macro<MACRO>  VARS  vars<LIST<STRING>>\\nmacro<MACRO> onlyPoprAndStore<BOOLEAN>  VARS  vars<LIST<STRING>>\",\"documentation\":\"Extracts all variables used in a macro. The `VARS` function scans the macro for occurrences of `LOAD`, `STORE` or `CSTORE` functions and inspects the associated variable name. If such a name is not an explicit STRING, the call to `VARS` will fail with an error.\\n\\nThe list of symbols is sorted according to the number of occurrences encountered, decreasing.\\n\\n@param `macro` Macro to inspect.\\n\\n@param `vars` List of encountered symbols.\\n\\n@param `onlyPoprAndStore` Returns only variables used by POPR, CPOPR and STORE. Defaults to false.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"VARS\"},{\"name\":\"VEC->\",\"detail\":\"input<VECTOR>  VEC->  result<LIST>\",\"documentation\":\"The `VEC->` function converts a Vector into a list.\\n\\n\\n@param `input` Vector to convert\\n\\n@param `result` list\\n\\n\",\"tags\":[\"lists\",\"conversion\",\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"KZK2AIs\"},{\"name\":\"WEBCALL\",\"detail\":\"token<STRING> method<STRING> url<STRING> headers<MAP> body<STRING>  WEBCALL  uuid<STRING>\",\"documentation\":\"Makes an outbound HTTP call.\\n\\nNote that the hosts which may be reached via `WEBCALL` might have been restricted through the use of the `webcall.host.patterns` Warp&nbsp;10 configuration parameter.\\n\\nThe write token is here to check you have the right to send a webcall. If the write token is valid, then the request is sent. It will never be sent in the request.\\n\\nThe call to `WEBCALL` returns a UUID on the stack. The actual request is performed asynchronously, the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`.\\n\\n@param `body` body of the request.\\n\\n@param `headers` map of additionnal http headers.\\n\\n@param `url` supported schemes are http and https.\\n\\n@param `method` `GET` or `POST` string.\\n\\n@param `token` valid write token\\n\\n@param `uuid` the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`\\n\\n\",\"tags\":[\"web\"],\"since\":\"1.0.0\",\"OPB64name\":\"WEBCALL\"},{\"name\":\"WF.ADDREPO\",\"detail\":\"url<STRING>  WF.ADDREPO \",\"documentation\":\"The `WF.ADDREPO` function allows you to add a repository to the list of repositories taken into account by the WarpFleet™ macro resolver.\\n\\nIf the URL is valid (syntaxically), then it will be added at the end of the current list of repositories scanned by the resolver. All repository URLs will then be validated by the `validator` macro defined in the configuration (`warpfleet.macros.validator`). Those URLs for which the `validator` macro returned true will be retained.\\n\\nNote that the repository is only added in the scope of the current stack.\\n\\n@param `url` URL to add to the list of repositories.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.ADDREPO\"},{\"name\":\"WF.GETREPOS\",\"detail\":\" WF.GETREPOS  repos<LIST<STRING>>\",\"documentation\":\"Retrieves the current list of repositories used by the WarpFleet™ resolver.\\n\\nNote that if the configuration disabled the use of this function (via `warpfleet.getrepos.disable`), the returned list will be empty even though it contains repositories.\\n\\n@param `repos` Current list of repository URLs.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.GETREPOS\"},{\"name\":\"WF.SETREPOS\",\"detail\":\"repos<LIST<STRING>>  WF.SETREPOS \",\"documentation\":\"Sets the list of repositories used by the WarpFleet™ resolver to the given value (list of valid URLs).\\n\\nEach URL is tested against WarpFleet™ validator macro to check if it is allowed. Non-valid ones are discarded.\\n\\nNote that this changes the list only for the scope of the current WarpScript execution.\\n\\n@param `repos` List of URLs to use for the WarpFleet™ resolver.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.SETREPOS\"},{\"name\":\"WFOFF\",\"detail\":\" WFOFF \",\"documentation\":\"The `WFOFF` function disables the WarpFleet™ Resolver. It can be re-enabled using `WFON`.\\n\\nThis is useful when you want to ensure that a macro call only looks it up locally.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFOFF\"},{\"name\":\"WFON\",\"detail\":\" WFON \",\"documentation\":\"The `WFON` function enables the WarpFleet™ Resolver after it has been disabled by `WFOFF`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFON\"},{\"name\":\"WHILE\",\"detail\":\"condition<MACRO> code<MACRO>  WHILE \\ncondition<MACRO> code<MACRO> index<BOOLEAN>  WHILE \",\"documentation\":\"The `WHILE` function implements a while loop. It takes two macros as arguments from the stack: the condition macro to evaluate and the macro to execute while the condition is true.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force WHILE to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `code` Macro executed on each loop\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"WHILE\"},{\"name\":\"WRAP\",\"detail\":\"encoder<GTSENCODER>  WRAP  wrapped<STRING>\\nlencoder<GTSENCODER>  WRAP  lwrapped<LIST<STRING>>\\ngts<GTS>  WRAP  wrapped<STRING>\\nlgts<LIST<GTS>>  WRAP  lwrapped<LIST<STRING>>\",\"documentation\":\"The `WRAP` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a STRING.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"WRAP\"},{\"name\":\"WRAPFAST\",\"detail\":\"encoder<GTSENCODER>  WRAPFAST  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPFAST  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPFAST  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPFAST  lwrapped<LIST<BYTES>>\",\"documentation\":\"The `WRAPFAST` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a byte array. For fast execution, the content of the GTS is not compressed, so the resulting byte array will be larger than that produced by `WRAPRAW`.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPFAST\"},{\"name\":\"WRAPMV\",\"detail\":\"encoder<GTSENCODER>  WRAPMV  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPMV  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPMV  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPMV  lwrapped<LIST<BYTES>>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPRAWOPT`, `WRAPMV` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPMV\"},{\"name\":\"WRAPMV!\",\"detail\":\"encoder<GTSENCODER>  WRAPMV!  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPMV!  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPMV!  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPMV!  lwrapped<LIST<BYTES>>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPMV`, `WRAPMV!` attempts to optimize the representation of DOUBLE values for Geo Time Series™ but unlike `WARPMV`, it does not increase the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.6.0\",\"OPB64name\":\"Kp80J3pL7F\"},{\"name\":\"WRAPOPT\",\"detail\":\"encoder<GTSENCODER>  WRAPOPT  wrapped<STRING>\\nlencoder<GTSENCODER>  WRAPOPT  lwrapped<LIST<STRING>>\\ngts<GTS>  WRAPOPT  wrapped<STRING>\\nlgts<LIST<GTS>>  WRAPOPT  lwrapped<LIST<STRING>>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a STRING. The packing performed by `WRAPOPT` differs from that of [`WRAP`](/doc/WRAP) only by the fact that `WRAPOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPOPT\"},{\"name\":\"WRAPRAW\",\"detail\":\"encoder<GTSENCODER>  WRAPRAW  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPRAW  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPRAW  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPRAW  lwrapped<LIST<BYTES>>\",\"documentation\":\"The `WRAPRAW` function packs a Geo Time Series™ into a byte array.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.7\",\"OPB64name\":\"WRAPRAW\"},{\"name\":\"WRAPRAWOPT\",\"detail\":\"encoder<GTSENCODER>  WRAPRAWOPT  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPRAWOPT  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPRAWOPT  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPRAWOPT  lwrapped<LIST<BYTES>>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES. The packing performed by `WRAPRAWOPT` differs from that of [`WRAPRAW`](/doc/WRAPRAW) only by the fact that `WRAPRAWOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPRAWOPT\"},{\"name\":\"WSINFO\",\"detail\":\"session<STRING>  WSINFO  infos<LIST<MAP>>\",\"documentation\":\"Displays informations about WarpScript environments with a given session id. The informations are returned as a map identical to that returned by [`WSPS`](/doc/WSPS):\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `session` Session of the environments to inspect.\\n\\n@param `infos` List of informations about each WarpScript execution environment with 'session' as their session name.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSINFO\"},{\"name\":\"WSKILL\",\"detail\":\"uuid<STRING> secret<STRING>  WSKILL  status<BOOLEAN>\",\"documentation\":\"Kills the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP) and marking the environment as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to kill.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILL\"},{\"name\":\"WSKILLSESSION\",\"detail\":\"session<STRING>  WSKILLSESSION  count<LONG>\",\"documentation\":\"Kills the execution WarpScript programs by forcing a call to [`STOP`](/doc/STOP) and marking the environments as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `session` Session id of the WarpScript execution environments to kill.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILLSESSION\"},{\"name\":\"WSNAME\",\"detail\":\"name<STRING>  WSNAME  current<STRING>\",\"documentation\":\"Modifies the name associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stack.name` in the attributes map.\\n\\nName size is limited to 128 characters.\\n\\n@param `name` Name to assign to the calling execution environment, or `NULL` to simply read the current name.\\n\\n@param `current` Name assigned to the execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSNAME\"},{\"name\":\"WSPS\",\"detail\":\"secret<STRING>  WSPS  procs<LIST<MAP>>\",\"documentation\":\"Lists all the registers WarpScript execution environments. For each environment a map is returned with the following fields:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `procs` List of informations about each registered WarpScript execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSPS\"},{\"name\":\"WSSESSION\",\"detail\":\"session<STRING>  WSSESSION  current<STRING>\",\"documentation\":\"Modifies the session id associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stackps.session` in the attributes map.\\n\\nSession id size is limited to 128 characters.\\n\\nSession can also be set by setting the `X-Warp10-WarpScriptSession` header.\\n\\nOnce the session has been set it cannot be modified.\\n\\n@param `session` Session id to assign to the calling execution environment, or NULL to simply read the current session id.\\n\\n@param `current` The session id assigned to the execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSESSION\"},{\"name\":\"WSSTACK\",\"detail\":\" WSSTACK \",\"documentation\":\"Select the WarpScript™ (*i.e.* SNAPSHOT) format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"WSSTACK\"},{\"name\":\"WSSTOP\",\"detail\":\"uuid<STRING> secret<STRING>  WSSTOP  status<BOOLEAN>\",\"documentation\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to stop.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOP\"},{\"name\":\"WSSTOPSESSION\",\"detail\":\"session<STRING>  WSSTOPSESSION  count<LONG>\",\"documentation\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\nThe environments to stop are identified by a session id.\\n\\n@param `session` Session of the WarpScript execution environments to stop.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOPSESSION\"},{\"name\":\"Z->\",\"detail\":\"z<BYTES> n<LONG> bitwidth<LONG>  Z->  longs<LIST<LONG>>\",\"documentation\":\"Unpacks LONG values from a [Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) stored in a byte array.\\n\\n@param `bitwidth` Size in bits of the LONG values to extract, from 1 to 63.\\n\\n@param `n` Number of LONG values to extract.\\n\\n@param `z` Byte array containing the Morton Code to unpack.\\n\\n@param `longs` List of extracted LONG values.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"LXoy\"},{\"name\":\"ZDISCORDS\",\"detail\":\"window_size<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  ZDISCORDS  result<GTS>\",\"documentation\":\"The `ZDISCORDS` function detects discords in a standardized ([`STANDARDIZE`](/doc/STANDARDIZE) Geo Time Series™. The discord detection\\n algorithm is based on identifying outlier patterns in the Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `ZDISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\nGiven the `ZDISCORDS` expects the Geo Time Series™ it operates on to be standardized ([`STANDARDIZE`](/doc/STANDARDIZE), the discord detection \\nalgorithm is more sensitive than that of [`DISCORDS`](/doc/DISCORDS).\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0.\\n\\n@param `overlapping` Flag indicating whether or not the `ZDISCORDS` function should report overlapping discords.\\n\\n@param `maximum` The maximum number of discords to identify.\\n\\n@param `window_size` Window size which is the width of each interval on which the pattern extraction should be performed, a pattern length which will determine how the window is segmented, and lastly a quantization scale which will determine how many different buckets will be used to ventilate the series values. (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `result` Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZDISCORDS\"},{\"name\":\"ZDTW\",\"detail\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  ZDTW  dtw<DOUBLE>\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be Z-normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"ZDTW\"},{\"name\":\"ZIP\",\"detail\":\"input<LIST<LIST>>  ZIP  output<LIST<LIST>>\",\"documentation\":\"The function ZIP takes a list of lists as parameters. Each list which are not singletons must be of same size.\\n\\nIt returns a list of lists where the i-th list contains the i-th elements of each input list in the same order.\\n\\nAlso, it considers singletons as a list of the same size with a duplicated value.\\n\\n@param `input` List of lists\\n\\n@param `output` List of lists\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZIP\"},{\"name\":\"ZPATTERNDETECTION\",\"detail\":\"gts<GTS> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNDETECTION  result<GTS>\\nlgts<LIST<GTS>> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNDETECTION  lresult<LIST<GTS>>\",\"documentation\":\"The `ZPATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`ZPATTERNS`](/doc/ZPATTERNS) or [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe `ZPATTERNDETECTION` does not standardize the datapoints in the sliding window, assuming (wrongly) they already are.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `ZPATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform.\\n\\n@param `gts` The single GTS to transform.\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it.\\n\\n@param `lresult` The list of result GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNDETECTION\"},{\"name\":\"ZPATTERNS\",\"detail\":\"gts<GTS> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNS  result<GTS>\\nlgts<LIST<GTS>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNS  lresult<LIST<GTS>>\",\"documentation\":\"Extracts symbolic patterns from Geo Time Series™ as [`PATTERNS`](/doc/PATTERNS) does, but does not standardize each window, assuming (wrongly) the GTS windows are already standardized.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNS\"},{\"name\":\"ZSCORE\",\"detail\":\"gts<GTS> flag<BOOLEAN>  ZSCORE  result<GTS>\\ngtsList<LIST<GTS>> flag<BOOLEAN>  ZSCORE  resultList<LIST<GTS>>\",\"documentation\":\"The 'ZSCORE' function consumes a flag, then normalizes a Geo Time Series™ or a **LIST** of Geo Time Series™ that are below by replacing their values by their [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe flag indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median).\\n\\nIf the GTS isn’t of type **DOUBLE** or if the deviation equals 0, an exception is raised.\\n\\n@param `flag` Indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORE\"},{\"name\":\"ZSCORETEST\",\"detail\":\"gts<GTS> mad<BOOLEAN>  ZSCORETEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> mad<BOOLEAN>  ZSCORETEST  lresult<LIST<LIST<LONG>>>\\ngts<GTS> mad<BOOLEAN> trigger<DOUBLE>  ZSCORETEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> mad<BOOLEAN> trigger<DOUBLE>  ZSCORETEST  lresult<LIST<LIST<LONG>>>\",\"documentation\":\"The ZSCORETEST function detects outliers in a GTS by comparing the Z-score of its values with a given threshold.\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median). If this value is greater than the given threshold, it is flagged as an outlier.\\n\\nA LIST of ticks, corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n@param `gts` The Geo Time Series™ to test\\n\\n@param `result` List of the detected outliers timestamps\\n\\n@param `lgts` The list of Geo Time Series™ to test\\n\\n@param `lresult` List of list of the detected outliers timestamps\\n\\n@param `mad` False: use the mean/sigma, true: use the median/mad to calculate the Z-score\\n\\n@param `trigger` Optional threshold. Default value is 3.5\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORETEST\"},{\"name\":\"[\",\"detail\":\" [  mark<MARK>\",\"documentation\":\"Starts a list creation.\\n\\nThe `[` function creates a list by pushing a mark onto the stack. This is a syntactic help to better present list constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"lists\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lk\"},{\"name\":\"[[\",\"detail\":\" [[  mark<MARK>\",\"documentation\":\"Pushes a MARK on the stack. This is a syntaxic help to better present Vector (VLIST) constructions.\\n \\n\\n@param `mark` A MARK instance.\\n\\n\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"Lpg\"},{\"name\":\"[[]]\",\"detail\":\" [[]]  vector<VLIST>\",\"documentation\":\"Pushes an empty Vector onto the stack.\\n\\n@param `vector` Empty Vector.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.13\",\"OPB64name\":\"LphSMF\"},{\"name\":\"[]\",\"detail\":\"content<ANY>  []  newlist<LIST>\",\"documentation\":\"The [] function creates an empty LIST on the top of the stack.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newlist` list instance, initialized with content.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lpo\"},{\"name\":\"]\",\"detail\":\"mark<MARK> v1<ANY> vN<ANY>  ]  list<LIST>\",\"documentation\":\"Closes a currently open list and pushes it onto the stack.\\n\\n  The `]` function pops from the stack the elements of the list up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"MF\"},{\"name\":\"]]\",\"detail\":\"mark<MARK> v1<ANY> vN<ANY>  ]]  list<VLIST>\",\"documentation\":\"Closes a currently open Vector (VLIST) and pushes it onto the stack. The elements on the stack are those up to the first mark encountered. The mark is discarded.\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"MKo\"},{\"name\":\"^\",\"detail\":\"p1<LONG> p2<LONG>  ^  result<LONG>\\ninputgts<GTS> mask<LONG>  ^  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  ^  outputgts<GTS>\",\"documentation\":\"Performs a bitwise **XOR** operation.\\n\\nThe `^` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **XOR**.\\n\\nSince Warp 10™ 2.1, `^` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be XOR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with XOR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts XOR with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"MV\"},{\"name\":\"bucketizer.and\",\"detail\":\" bucketizer.and  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.and` function applies the logical operator **AND** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.and\"},{\"name\":\"bucketizer.count\",\"detail\":\" bucketizer.count  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.count` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count\"},{\"name\":\"bucketizer.count.exclude-nulls\",\"detail\":\" bucketizer.count.exclude-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.count.exclude-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.exclude-nulls` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.exclude-nulls\"},{\"name\":\"bucketizer.count.include-nulls\",\"detail\":\" bucketizer.count.include-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.count.include-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.include-nulls function computes the number of values, including null values, found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.include-nulls\"},{\"name\":\"bucketizer.count.nonnull\",\"detail\":\" bucketizer.count.nonnull  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.count.nonnull` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.nonnull\"},{\"name\":\"bucketizer.first\",\"detail\":\" bucketizer.first  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.first` function returns the first value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.first` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.first\"},{\"name\":\"bucketizer.join\",\"detail\":\"separator<STRING>  bucketizer.join  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.join` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join\"},{\"name\":\"bucketizer.join.forbid-nulls\",\"detail\":\"separator<STRING>  bucketizer.join.forbid-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.join.forbid-nulls` has the same behavior as `bucketizer.join`, use `bucketizer.join` instead.\\n\\nThe `bucketizer.join.forbid-nulls` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join.forbid-nulls\"},{\"name\":\"bucketizer.last\",\"detail\":\" bucketizer.last  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.last` function returns the last value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.last` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.last\"},{\"name\":\"bucketizer.mad\",\"detail\":\" bucketizer.mad  bucketizer<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) of each bucket.\\n\\nThe returned location is the median of all the locations in the bucket, and the returned elevation is the median of all the elevations in the bucket.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.0\",\"OPB64name\":\"bucketizer.mad\"},{\"name\":\"bucketizer.max\",\"detail\":\" bucketizer.max  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.max` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max\"},{\"name\":\"bucketizer.max.forbid-nulls\",\"detail\":\" bucketizer.max.forbid-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.max.forbid-nulls` has the same behavior as `bucketizer.max`, use `bucketizer.max` instead.\\n\\nThe `bucketizer.max.forbid-nulls` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\nThe `bucketizer.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max.forbid-nulls\"},{\"name\":\"bucketizer.mean\",\"detail\":\" bucketizer.mean  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.mean` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean\"},{\"name\":\"bucketizer.mean.circular\",\"detail\":\"modulo<NUMBER>  bucketizer.mean.circular  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.mean.circular` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`bucketizer.mean.circular.exclude-nulls`](/doc/bucketizer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `bucketizer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular\"},{\"name\":\"bucketizer.mean.circular.exclude-nulls\",\"detail\":\"modulo<NUMBER>  bucketizer.mean.circular.exclude-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.mean.circular.exclude-nulls` has the same behavior as `bucketizer.mean.circular`, use `bucketizer.mean.circular` instead.\\n        \\nThe `bucketizer.mean.circular.exclude-nulls` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular.exclude-nulls\"},{\"name\":\"bucketizer.mean.exclude-nulls\",\"detail\":\" bucketizer.mean.exclude-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.mean.exclude-nulls` has the same behavior as `bucketizer.mean`, use `bucketizer.mean` instead.\\n \\nThe `bucketizer.mean.exclude-nulls` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.exclude-nulls\"},{\"name\":\"bucketizer.median\",\"detail\":\" bucketizer.median  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.median` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.median\"},{\"name\":\"bucketizer.median.forbid-nulls\",\"detail\":\" bucketizer.median.forbid-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.median.forbid-nulls` has the same behavior as `bucketizer.median`, use `bucketizer.median` instead.\\n\\nThe `bucketizer.median.forbid-nulls` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.4.0\",\"OPB64name\":\"bucketizer.median.forbid-nulls\"},{\"name\":\"bucketizer.min\",\"detail\":\" bucketizer.min  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.min` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min\"},{\"name\":\"bucketizer.min.forbid-nulls\",\"detail\":\" bucketizer.min.forbid-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.min.forbid-nulls` has the same behavior as `bucketizer.min`, use `bucketizer.min` instead.\\n\\nThe `bucketizer.min.forbid-nulls` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min.forbid-nulls\"},{\"name\":\"bucketizer.or\",\"detail\":\" bucketizer.or  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.or` function applies the logical operator **OR** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.or\"},{\"name\":\"bucketizer.percentile\",\"detail\":\"percentile<NUMBER>  bucketizer.percentile  bucketizer<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the bucket.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `percentile` Percentile to consider\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.percentile\"},{\"name\":\"bucketizer.rms\",\"detail\":\" bucketizer.rms  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.rms` function returns the root mean square of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are the last one encountered for each bucket.\\n\\nThe `bucketizer.rms` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.18\",\"OPB64name\":\"bucketizer.rms\"},{\"name\":\"bucketizer.sd\",\"detail\":\"bessel<BOOLEAN>  bucketizer.sd  result<AGGREGATOR>\",\"documentation\":\"This bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd\"},{\"name\":\"bucketizer.sd.forbid-nulls\",\"detail\":\"bessel<BOOLEAN>  bucketizer.sd.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.sd.forbid-nulls` has the same behavior as `bucketizer.sd`, use `bucketizer.sd` instead.\\n\\nThis bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd.forbid-nulls\"},{\"name\":\"bucketizer.sum\",\"detail\":\" bucketizer.sum  bucketizer<AGGREGATOR>\",\"documentation\":\"The `bucketizer.sum` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum\"},{\"name\":\"bucketizer.sum.forbid-nulls\",\"detail\":\" bucketizer.sum.forbid-nulls  bucketizer<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `bucketizer.sum.forbid-nulls` has the same behavior as `bucketizer.sum`, use `bucketizer.sum` instead.\\n\\nThe `bucketizer.sum.forbid-nulls` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum.forbid-nulls\"},{\"name\":\"d\",\"detail\":\"input<NUMBER>  d  output<LONG>\",\"documentation\":\"Converts a number of days (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of days from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of days to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of days\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"d\"},{\"name\":\"e\",\"detail\":\" e  eValue<DOUBLE>\",\"documentation\":\"Alias of [E](/doc/GF).\\n\\nThe `e` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"OF\"},{\"name\":\"filler.interpolate\",\"detail\":\" filler.interpolate  filler<FILLER>\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with a linear interpolation of enclosing values in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading or trailing ticks as there is no possible interpolation.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.interpolate\"},{\"name\":\"filler.next\",\"detail\":\" filler.next  filler<FILLER>\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the next value in a Geo Time Series™.\\n\\nNote that this function will not fill missing trailing ticks as there is no next value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.next\"},{\"name\":\"filler.previous\",\"detail\":\" filler.previous  filler<FILLER>\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the previous value in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading ticks as there is no previous value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.previous\"},{\"name\":\"filler.trend\",\"detail\":\" filler.trend  filler<FILLER>\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the centroid of the points computed by projecting trends from both sides of the missing point.\\n\\nNote that this function will fill all missing points.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.trend\"},{\"name\":\"filter.all.eq\",\"detail\":\"filter-value<LONG>  filter.all.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.all.eq  result<FILTER>\\nfilter-value<STRING>  filter.all.eq  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.eq\"},{\"name\":\"filter.all.ge\",\"detail\":\"filter-value<LONG>  filter.all.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.ge  result<FILTER>\\nfilter-value<STRING>  filter.all.ge  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ge\"},{\"name\":\"filter.all.gt\",\"detail\":\"filter-value<LONG>  filter.all.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.gt  result<FILTER>\\nfilter-value<STRING>  filter.all.gt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.gt\"},{\"name\":\"filter.all.le\",\"detail\":\"filter-value<LONG>  filter.all.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.le  result<FILTER>\\nfilter-value<STRING>  filter.all.le  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.le\"},{\"name\":\"filter.all.lt\",\"detail\":\"filter-value<LONG>  filter.all.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.lt  result<FILTER>\\nfilter-value<STRING>  filter.all.lt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.lt\"},{\"name\":\"filter.all.ne\",\"detail\":\"filter-value<LONG>  filter.all.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.all.ne  result<FILTER>\\nfilter-value<STRING>  filter.all.ne  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value does not equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ne\"},{\"name\":\"filter.any.eq\",\"detail\":\"filter-value<LONG>  filter.any.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.any.eq  result<FILTER>\\nfilter-value<STRING>  filter.any.eq  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.eq\"},{\"name\":\"filter.any.ge\",\"detail\":\"filter-value<LONG>  filter.any.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.ge  result<FILTER>\\nfilter-value<STRING>  filter.any.ge  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ge\"},{\"name\":\"filter.any.gt\",\"detail\":\"filter-value<LONG>  filter.any.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.gt  result<FILTER>\\nfilter-value<STRING>  filter.any.gt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.gt\"},{\"name\":\"filter.any.le\",\"detail\":\"filter-value<LONG>  filter.any.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.le  result<FILTER>\\nfilter-value<STRING>  filter.any.le  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.le\"},{\"name\":\"filter.any.lt\",\"detail\":\"filter-value<LONG>  filter.any.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.lt  result<FILTER>\\nfilter-value<STRING>  filter.any.lt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.lt\"},{\"name\":\"filter.any.ne\",\"detail\":\"filter-value<LONG>  filter.any.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.any.ne  result<FILTER>\\nfilter-value<STRING>  filter.any.ne  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ne\"},{\"name\":\"filter.byattr\",\"detail\":\"filter<MAP>  filter.byattr  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose attributes match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.byattr\"},{\"name\":\"filter.byclass\",\"detail\":\"filter<STRING>  filter.byclass  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose class name matches the filter parameter.\\n\\n@param `filter` The filter parameter is a **STRING**, if it starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.byclass\"},{\"name\":\"filter.bylabels\",\"detail\":\"filter<MAP>  filter.bylabels  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bylabels\"},{\"name\":\"filter.bylabelsattr\",\"detail\":\"filter<MAP>  filter.bylabelsattr  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose attributes or labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes or labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.bylabelsattr\"},{\"name\":\"filter.bymetadata\",\"detail\":\"lgts<LIST<GTS>>  filter.bymetadata  filter<FILTER>\",\"documentation\":\"Filter GTSs by retaining those whose metadata **exactly** match at least one metadata from the given GTS list. \\n\\nThe metadata consists of the classname and labels.\\n\\n@param `lgts` List of GTSs to extract the metadata from.\\n\\n@param `filter` Filter to apply which will keep only GTSs with exact metadata matching.\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bymetadata\"},{\"name\":\"filter.byselector\",\"detail\":\"selector<STRING>  filter.byselector  result<FILTER>\",\"documentation\":\"This filter allow to select GTS with a standard or an extended selector.\\n###### Standard selector: `classname{labelOrAttribute=x}`\\n- If classname match, `filter.byselector` looks into input labels to check if labelOrAttribute exists and equals x. If labelOrAttribute is not found among input labels, it looks into input attributes if the label exists and equals x.\\n###### Extended selector: `classname{labelname=x}{attributename=y}` matches if:\\n- classname matches\\n- input have labelname in its labels, and label value matches\\n- input have attributename in its labels, and attribute value matches\\n\\n###### Selectors example:\\n- `~.*{}` matches everything.\\n- `={}` matches only emtpy classnames, whatever the labels and attributes.\\n- `~.*{label=value}{} filter.byselector` is equivalent to `{ 'label' 'value' } filter.bylabels`.\\n- `~.*{}{attribute~value} filter.byselector` is equivalent to `{ 'attribute' '~value' } filter.byattr`.\\n\\n\\n@param `selector` The selector parameter. It could be a standard or an extended selector.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.byselector\"},{\"name\":\"filter.bysize\",\"detail\":\"min<LONG> max<LONG>  filter.bysize  result<FILTER>\",\"documentation\":\"Filter GTSs by retaining those whose size is contained between specified bounds (inclusive).\\n\\n@param `min` The minimum size\\n\\n@param `max` The maximum size\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.bysize\"},{\"name\":\"filter.last.eq\",\"detail\":\"filter-value<LONG>  filter.last.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.last.eq  result<FILTER>\\nfilter-value<STRING>  filter.last.eq  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.eq\"},{\"name\":\"filter.last.ge\",\"detail\":\"filter-value<LONG>  filter.last.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.ge  result<FILTER>\\nfilter-value<STRING>  filter.last.ge  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ge\"},{\"name\":\"filter.last.gt\",\"detail\":\"filter-value<LONG>  filter.last.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.gt  result<FILTER>\\nfilter-value<STRING>  filter.last.gt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.gt\"},{\"name\":\"filter.last.le\",\"detail\":\"filter-value<LONG>  filter.last.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.le  result<FILTER>\\nfilter-value<STRING>  filter.last.le  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is less or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.le\"},{\"name\":\"filter.last.lt\",\"detail\":\"filter-value<LONG>  filter.last.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.lt  result<FILTER>\\nfilter-value<STRING>  filter.last.lt  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is less than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.lt\"},{\"name\":\"filter.last.ne\",\"detail\":\"filter-value<LONG>  filter.last.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.last.ne  result<FILTER>\\nfilter-value<STRING>  filter.last.ne  result<FILTER>\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ne\"},{\"name\":\"filter.latencies\",\"detail\":\"minLatency<LONG> maxLatency<LONG> options<LIST<STRING>>  filter.latencies  filter<FILTER>\",\"documentation\":\"Pushes onto the stack a *pseudo* FILTER which computes latencies in a network. It uses the [`FILTER`](/doc/FILTER) framework for conveniency but really returns new GTS.\\n\\nThe input Geo Time Series™ are assumed to have values which are fingerprints of packet payloads. The first GTS is assumed to be the *uplink* and all the other GTS the *downlinks*.\\n\\nThe ticks are the time at which a packet with the given fingerprint was observed.\\n\\nThe generated Geo Time Series™ will have the same ticks as the uplink one, except the values will be latencies instead of packet fingerprints.\\n\\nThe `filter.latencies` function accepts a number of options:\\n\\n| Option | Description |\\n|--------|-------------|\\n| uplink.latency.min | Compute minimum latency on the uplink. |\\n| uplink.latency.max | Compute maximum latency on the uplink. |\\n| downlink.latency.min | Compute minimum latency on each downlink. |\\n| downlink.latency.max | Compute maximum latency on each downlink. |\\n| downlink.matches | Compute the number of matches for each downlink. |\\n| downlinks.totalmatches | Computes the total number of matches across downlinks. |\\n| downlinks.bitsets | Computes a bitset of downlinks which saw the packet (limited to 64 downlinks). |\\n| downlinks.withmatches | Computes the number of downlinks with matches for the given packet. |\\n\\nThis pseudo FILTER is very specific to a networking use case, but it is a good demonstration of the power of WarpScript and its frameworks.\\n\\n@param `options` List of options, see above for their description.\\n\\n@param `maxLatency` Maximum allowable latency, packets with latency above this threshold are ignored.\\n\\n@param `minLatency` Minimum latency, packets with a latency below this threshold are ignored.\\n\\n@param `filter` Instance of `filter.latencies`.\\n\\n\",\"tags\":[\"filter\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.latencies\"},{\"name\":\"h\",\"detail\":\"input<NUMBER>  h  output<LONG>\",\"documentation\":\"Converts a number of hours (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of hours from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of hours to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of hours\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"h\"},{\"name\":\"m\",\"detail\":\"input<NUMBER>  m  output<LONG>\",\"documentation\":\"Converts a number of minutes (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of minutes from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of minutes to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of minutes\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"m\"},{\"name\":\"mapper.abs\",\"detail\":\" mapper.abs  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the absolute value of single value in a sliding window.\\n\\nThe `mapper.abs` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.abs\"},{\"name\":\"mapper.add\",\"detail\":\"constant<DOUBLE>  mapper.add  result<AGGREGATOR>\\nconstant<LONG>  mapper.add  result<AGGREGATOR>\",\"documentation\":\"This mapper function adds a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.add` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.add` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Value to add\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.add\"},{\"name\":\"mapper.and\",\"detail\":\" mapper.and  result<AGGREGATOR>\",\"documentation\":\"This mapper function applies the logical operator **AND** on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.and\"},{\"name\":\"mapper.ceil\",\"detail\":\" mapper.ceil  result<AGGREGATOR>\",\"documentation\":\"This mapper function rounds the single value in a sliding window to the closests greater **LONG**.\\n\\nThe `mapper.ceil` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.ceil\"},{\"name\":\"mapper.count\",\"detail\":\" mapper.count  result<AGGREGATOR>\",\"documentation\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count\"},{\"name\":\"mapper.count.exclude-nulls\",\"detail\":\" mapper.count.exclude-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.count.exclude-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.exclude-nulls\"},{\"name\":\"mapper.count.include-nulls\",\"detail\":\" mapper.count.include-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.count.include-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.include-nulls\"},{\"name\":\"mapper.count.nonnull\",\"detail\":\" mapper.count.nonnull  result<AGGREGATOR>\",\"documentation\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.nonnull\"},{\"name\":\"mapper.day\",\"detail\":\"timezone<STRING>  mapper.day  result<AGGREGATOR>\\noffset<NUMBER>  mapper.day  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the day of the tick for which it is computed.\\n\\nThe `mapper.day` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n@param `timezone` Timezone to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.day\"},{\"name\":\"mapper.delta\",\"detail\":\" mapper.delta  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the delta between the last and first values (delta = last - first) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.delta` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does \\nnot return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.delta\"},{\"name\":\"mapper.dotproduct\",\"detail\":\"vector<LIST>  mapper.dotproduct  result<AGGREGATOR>\",\"documentation\":\"The `mapper.dotproduct` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct\"},{\"name\":\"mapper.dotproduct.positive\",\"detail\":\"vector<LIST>  mapper.dotproduct.positive  result<AGGREGATOR>\",\"documentation\":\"The `mapper.dotproduct.positive` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it sets all negative results to 0.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.positive\"},{\"name\":\"mapper.dotproduct.sigmoid\",\"detail\":\"vector<LIST>  mapper.dotproduct.sigmoid  result<AGGREGATOR>\",\"documentation\":\"The `mapper.dotproduct.sigmoid` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the sigmoid of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.sigmoid\"},{\"name\":\"mapper.dotproduct.tanh\",\"detail\":\"vector<LIST>  mapper.dotproduct.tanh  result<AGGREGATOR>\",\"documentation\":\"The `mapper.dotproduct.tanh` function consumes a vector as parameter (a **LIST* of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the \\n[hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_function) of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.tanh\"},{\"name\":\"mapper.eq\",\"detail\":\"parameter<LONG>  mapper.eq  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq  result<AGGREGATOR>\\nparameter<BOOLEAN>  mapper.eq  result<AGGREGATOR>\\nparameter<STRING>  mapper.eq  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.eq` function can be applied to data of any type.\\n\\nThe `mapper.eq` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.eq\"},{\"name\":\"mapper.eq.elev\",\"detail\":\"parameter<LONG>  mapper.eq.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is equal to a given value.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.eq.elev` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.elev\"},{\"name\":\"mapper.eq.hhcode\",\"detail\":\"parameter<LONG>  mapper.eq.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is equal to a given value.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.eq.hhcode` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.hhcode\"},{\"name\":\"mapper.eq.lat\",\"detail\":\"parameter<LONG>  mapper.eq.lat  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is equal to a given value.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.eq.lat` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lat\"},{\"name\":\"mapper.eq.lon\",\"detail\":\"parameter<LONG>  mapper.eq.lon  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is equal to a given value.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.eq.lon` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lon\"},{\"name\":\"mapper.eq.tick\",\"detail\":\"parameter<LONG>  mapper.eq.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is equal to a given value.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.eq.tick` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.tick\"},{\"name\":\"mapper.exp\",\"detail\":\"constant<LONG>  mapper.exp  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.exp  result<AGGREGATOR>\",\"documentation\":\"This mapper function raises a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.exp` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.exp` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\n> ## Note\\n> The `mapper.exp` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n>\\n> So you are looking for a way to apply the exponential function, ex, to a series of Geo Time Series™. It’s very easy to do it using `mapper.exp` and the\\n> [`e`](/doc/OF) constant.\\n\\n@param `result` Mapper to apply\\n\\n@param `constant` Constant to use\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.exp\"},{\"name\":\"mapper.finite\",\"detail\":\" mapper.finite  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns its input value only if it is finite (*i.e.* a non DOUBLE or a DOUBLE which is neither NaN nor Infinity).\\n\\n@param `result` Instance of mapper.finite.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.finite\"},{\"name\":\"mapper.first\",\"detail\":\" mapper.first  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.first` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.first\"},{\"name\":\"mapper.floor\",\"detail\":\" mapper.floor  result<AGGREGATOR>\",\"documentation\":\"This mapper function rounds the *single value* in a sliding window to the closests lower **LONG**.\\n\\nThe `mapper.floor` function can be applied to data of type **LONG** or **DOUBLE**.      \\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.floor\"},{\"name\":\"mapper.ge\",\"detail\":\"threshold<LONG>  mapper.ge  result<AGGREGATOR>\\nthreshold<STRING>  mapper.ge  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ge` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.ge` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ge\"},{\"name\":\"mapper.ge.elev\",\"detail\":\"threshold<LONG>  mapper.ge.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ge.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.elev\"},{\"name\":\"mapper.ge.hhcode\",\"detail\":\"threshold<LONG>  mapper.ge.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ge.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.hhcode\"},{\"name\":\"mapper.ge.lat\",\"detail\":\"threshold<LONG>  mapper.ge.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ge.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lat\"},{\"name\":\"mapper.ge.lon\",\"detail\":\"threshold<LONG>  mapper.ge.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ge.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lon\"},{\"name\":\"mapper.ge.tick\",\"detail\":\"threshold<LONG>  mapper.ge.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ge.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.tick\"},{\"name\":\"mapper.geo.approximate\",\"detail\":\"resolution<LONG>  mapper.geo.approximate  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack a mapper instance which will transform the input Geo Time Series™ by approximating the location to the givnen resolution.\\n\\nApproximation is done by clearing lower bits of the location [HHCode](https://en.wikipedia.org/wiki/HHCode). At resolution `R`, the lower `64 - 2R` bits are cleared.\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\n\\n\\n@param `resolution` HHCode resolution at which to approximate the locations. Resoluion is an even number between 2 (coarsest) and 32 (finest).\\n\\n@param `result` Instance of mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.approximate\"},{\"name\":\"mapper.geo.clear\",\"detail\":\" mapper.geo.clear  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack a mapper which will discard location and elevation information when applied to a Geo Time Series™.\\n\\nThis mapper can only be applied to single values\\n\\n@param `result` Instance of the `mapper.geo.clear` mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.geo.clear\"},{\"name\":\"mapper.geo.fence\",\"detail\":\"zone<GEOSHAPE>  mapper.geo.fence  result<AGGREGATOR>\",\"documentation\":\"This function produces a `mapper` which outputs a `BOOLEAN` for each point with an associated location. The value of the output is `true` if the location is inside the provided `GEOSHAPE` and `false` otherwise.\\nThe geo zone can be defined in [WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using [`GEO.WKT`](/doc/GEO.WKT) or in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) using [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `zone` Geographical zone.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"2.7.1\",\"OPB64name\":\"mapper.geo.fence\"},{\"name\":\"mapper.geo.outside\",\"detail\":\"geoZone<GEOSHAPE>  mapper.geo.outside  result<AGGREGATOR>\",\"documentation\":\"This mapper filters the Geo Time Series™, keeping only the points outside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.outside\"},{\"name\":\"mapper.geo.within\",\"detail\":\"geoZone<GEOSHAPE>  mapper.geo.within  result<AGGREGATOR>\",\"documentation\":\"This mapper filters the Geo Time Series™, keeping only the points inside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.within\"},{\"name\":\"mapper.gt\",\"detail\":\"threshold<LONG>  mapper.gt  result<AGGREGATOR>\\nthreshold<STRING>  mapper.gt  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is greater than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.gt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.gt` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.gt\"},{\"name\":\"mapper.gt.elev\",\"detail\":\"threshold<LONG>  mapper.gt.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is greater than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.gt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.elev\"},{\"name\":\"mapper.gt.hhcode\",\"detail\":\"threshold<LONG>  mapper.gt.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.gt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.hhcode\"},{\"name\":\"mapper.gt.lat\",\"detail\":\"threshold<LONG>  mapper.gt.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is greater than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.gt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lat\"},{\"name\":\"mapper.gt.lon\",\"detail\":\"threshold<LONG>  mapper.gt.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is greater than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.gt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lon\"},{\"name\":\"mapper.gt.tick\",\"detail\":\"threshold<LONG>  mapper.gt.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is greater than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.gt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.tick\"},{\"name\":\"mapper.hdist\",\"detail\":\" mapper.hdist  hdistMapper<AGGREGATOR>\",\"documentation\":\"The `mapper.hdist` function computes the total distance traveled while going through the points in the sliding window in chronological order. This distance is in meters.\\n\\nThe distance used is the loxodromic distance aka rhumb line. As a consequence, elevation is not taken into account in the distance.\\n\\nIf a point has no position in the sliding window, it is ignored.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe `mapper.hdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `hdistMapper` A function which can be used in a mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hdist\"},{\"name\":\"mapper.highest\",\"detail\":\" mapper.highest  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the value associated with the highest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the most recent is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.highest\"},{\"name\":\"mapper.hour\",\"detail\":\"timezone<STRING>  mapper.hour  result<AGGREGATOR>\\noffset<NUMBER>  mapper.hour  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the hour of the tick for which it is computed.\\n\\nThe `mapper.hour` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.hour\"},{\"name\":\"mapper.hspeed\",\"detail\":\" mapper.hspeed  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the horizontal speed along the path traveled in the sliding window.\\n\\nThe distance is computed by summing the distances along the rhumb line between two consecutive locations.\\n\\nIf there is only one tick in the sliding window, the speed is 0.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.hspeed` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hspeed\"},{\"name\":\"mapper.join\",\"detail\":\"separator<STRING>  mapper.join  result<AGGREGATOR>\",\"documentation\":\"This mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join\"},{\"name\":\"mapper.join.forbid-nulls\",\"detail\":\"separator<STRING>  mapper.join.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.join.forbid-nulls` has the same behavior as `mapper.join`, use `mapper.join` instead.\\n\\nThis mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join.forbid-nulls\"},{\"name\":\"mapper.kernel.cosine\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.cosine  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [cosine kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics.\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.cosine\"},{\"name\":\"mapper.kernel.epanechnikov\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.epanechnikov  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using an [epanechnikov kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.epanechnikov\"},{\"name\":\"mapper.kernel.gaussian\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.gaussian  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [gaussian kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.gaussian\"},{\"name\":\"mapper.kernel.logistic\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.logistic  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [logistic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.logistic\"},{\"name\":\"mapper.kernel.quartic\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.quartic  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [quartic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.quartic\"},{\"name\":\"mapper.kernel.silverman\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.silverman  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [silverman kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.silverman\"},{\"name\":\"mapper.kernel.triangular\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.triangular  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triangular kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triangular\"},{\"name\":\"mapper.kernel.tricube\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.tricube  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [tricube kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.tricube\"},{\"name\":\"mapper.kernel.triweight\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.triweight  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triweight kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triweight\"},{\"name\":\"mapper.kernel.uniform\",\"detail\":\"bandwidth<LONG> step<LONG>  mapper.kernel.uniform  result<AGGREGATOR>\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [uniform kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.uniform\"},{\"name\":\"mapper.last\",\"detail\":\" mapper.last  result<AGGREGATOR>\",\"documentation\":\"This [`mapper`](/doc/MAP) function returns the last value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.last` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.last\"},{\"name\":\"mapper.le\",\"detail\":\"threshold<DOUBLE>  mapper.le  result<AGGREGATOR>\\nthreshold<LONG>  mapper.le  result<AGGREGATOR>\\nthreshold<STRING>  mapper.le  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.le` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.le` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.le\"},{\"name\":\"mapper.le.elev\",\"detail\":\"threshold<LONG>  mapper.le.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.le.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.elev\"},{\"name\":\"mapper.le.hhcode\",\"detail\":\"threshold<LONG>  mapper.le.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.le.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.hhcode\"},{\"name\":\"mapper.le.lat\",\"detail\":\"threshold<LONG>  mapper.le.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.le.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.le.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lat\"},{\"name\":\"mapper.le.lon\",\"detail\":\"threshold<LONG>  mapper.le.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.le.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.le.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lon\"},{\"name\":\"mapper.le.tick\",\"detail\":\"threshold<LONG>  mapper.le.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.le.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.tick\"},{\"name\":\"mapper.log\",\"detail\":\"constant<DOUBLE>  mapper.log  result<AGGREGATOR>\\nconstant<LONG>  mapper.log  result<AGGREGATOR>\",\"documentation\":\"This mapper function takes the log of the **single value** in a sliding window in the base used as parameter to `mapper.log`.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.log` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.log` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\nThe `mapper.log` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n\\n@param `constant` Constant parameter\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.log\"},{\"name\":\"mapper.lowest\",\"detail\":\" mapper.lowest  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the value associated with the lowest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the one appearing first chronologically is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.lowest\"},{\"name\":\"mapper.lt\",\"detail\":\"threshold<DOUBLE>  mapper.lt  result<AGGREGATOR>\\nthreshold<LONG>  mapper.lt  result<AGGREGATOR>\\nthreshold<STRING>  mapper.lt  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is less than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.lt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.lt` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.lt\"},{\"name\":\"mapper.lt.elev\",\"detail\":\"threshold<LONG>  mapper.lt.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is less than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.lt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.elev\"},{\"name\":\"mapper.lt.hhcode\",\"detail\":\"threshold<LONG>  mapper.lt.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.lt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.hhcode\"},{\"name\":\"mapper.lt.lat\",\"detail\":\"threshold<LONG>  mapper.lt.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.lt.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is less than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.lt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lat\"},{\"name\":\"mapper.lt.lon\",\"detail\":\"threshold<LONG>  mapper.lt.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.lt.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is less than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.lt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lon\"},{\"name\":\"mapper.lt.tick\",\"detail\":\"threshold<LONG>  mapper.lt.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is less than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.lt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.tick\"},{\"name\":\"mapper.mad\",\"detail\":\" mapper.mad  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) over each sliding window.\\n\\nThe returned location is the median of all the locations in the sliding window, and the returned elevation is the median of all the elevations in the window.\\n\\n@param `result` Instance of `mapper.mad`.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.0\",\"OPB64name\":\"mapper.mad\"},{\"name\":\"mapper.max\",\"detail\":\" mapper.max  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max\"},{\"name\":\"mapper.max.forbid-nulls\",\"detail\":\" mapper.max.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.max.forbid-nulls` has the same behavior as `mapper.max`, use `mapper.max` instead.\\n\\nThis mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max.forbid-nulls\"},{\"name\":\"mapper.max.x\",\"detail\":\"constant<DOUBLE>  mapper.max.x  result<AGGREGATOR>\\nconstant<LONG>  mapper.max.x  result<AGGREGATOR>\\nconstant<STRING>  mapper.max.x  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.max.x  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the max between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.max.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.max.x\"},{\"name\":\"mapper.mean\",\"detail\":\" mapper.mean  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean\"},{\"name\":\"mapper.mean.circular\",\"detail\":\"modulo<NUMBER>  mapper.mean.circular  result<AGGREGATOR>\",\"documentation\":\"This function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`mapper.mean.circular.exclude-nulls`](/doc/mapper.mean.circular.exclude-nulls) if your sliding windows may contain nulls.\\n\\nThe `mapper.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular\"},{\"name\":\"mapper.mean.circular.exclude-nulls\",\"detail\":\"modulo<NUMBER>  mapper.mean.circular.exclude-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.mean.circular.exclude-nulls` has the same behavior as `mapper.mean.circular`, use `mapper.mean.circular` instead.\\n\\nThis function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular.exclude-nulls` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `mapper.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular.exclude-nulls\"},{\"name\":\"mapper.mean.exclude-nulls\",\"detail\":\" mapper.mean.exclude-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.mean.exclude-nulls` has the same behavior as `mapper.mean`, use `mapper.mean` instead.\\n        \\nThis mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.exclude-nulls\"},{\"name\":\"mapper.median\",\"detail\":\" mapper.median  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.median\"},{\"name\":\"mapper.median.forbid-nulls\",\"detail\":\" mapper.median.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.median.forbid-nulls` has the same behavior as `mapper.median`, use `mapper.median` instead.\\n\\nPushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median.forbid-nulls`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"2.4.0\",\"OPB64name\":\"mapper.median.forbid-nulls\"},{\"name\":\"mapper.min\",\"detail\":\" mapper.min  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min\"},{\"name\":\"mapper.min.forbid-nulls\",\"detail\":\" mapper.min.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.min.forbid-nulls` has the same behavior as `mapper.min`, use `mapper.min` instead.\\n\\nThis mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min.forbid-nulls\"},{\"name\":\"mapper.min.x\",\"detail\":\"constant<DOUBLE>  mapper.min.x  result<AGGREGATOR>\\nconstant<LONG>  mapper.min.x  result<AGGREGATOR>\\nconstant<STRING>  mapper.min.x  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.min.x  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the min between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.min.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.min.x\"},{\"name\":\"mapper.minute\",\"detail\":\"timezone<STRING>  mapper.minute  result<AGGREGATOR>\\noffset<NUMBER>  mapper.minute  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the minute of the tick for which it is computed.\\n\\nThe `mapper.minute` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.minute\"},{\"name\":\"mapper.mod\",\"detail\":\"modulus<NUMBER>  mapper.mod  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the remainder of a value given a modulus.\\n\\nThis MAPPER can only be applied to a single value.\\n\\n@param `modulus` Modulus to consider when computing the remainder.\\n\\n@param `result` Instance of `mapper.mod`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"mapper.mod\"},{\"name\":\"mapper.month\",\"detail\":\"timezone<STRING>  mapper.month  result<AGGREGATOR>\\noffset<NUMBER>  mapper.month  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the month of the tick for which it is computed.\\n\\nThe `mapper.month` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.month\"},{\"name\":\"mapper.mul\",\"detail\":\"constant<LONG>  mapper.mul  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.mul  result<AGGREGATOR>\",\"documentation\":\"This mapper function multiplies by a constant the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.mul` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.mul` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.mul\"},{\"name\":\"mapper.ne\",\"detail\":\"parameter<LONG>  mapper.ne  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.ne  result<AGGREGATOR>\\nparameter<BOOLEAN>  mapper.ne  result<AGGREGATOR>\\nparameter<STRING>  mapper.ne  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first value in a sliding window which is not equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ne` function can be applied to data of any type.\\n\\nThe `mapper.ne` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ne\"},{\"name\":\"mapper.ne.elev\",\"detail\":\"threshold<LONG>  mapper.ne.elev  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is not equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ne.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.elev\"},{\"name\":\"mapper.ne.hhcode\",\"detail\":\"threshold<LONG>  mapper.ne.hhcode  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is not equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ne.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.hhcode\"},{\"name\":\"mapper.ne.lat\",\"detail\":\"threshold<LONG>  mapper.ne.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ne.lat  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ne.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lat\"},{\"name\":\"mapper.ne.lon\",\"detail\":\"threshold<LONG>  mapper.ne.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ne.lon  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ne.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lon\"},{\"name\":\"mapper.ne.tick\",\"detail\":\"threshold<LONG>  mapper.ne.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is not equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ne.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.tick\"},{\"name\":\"mapper.npdf\",\"detail\":\"mu<DOUBLE> sigma<DOUBLE>  mapper.npdf  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the probability of a value given a normal distribution.\\n\\n@param `mu` Mean of the normal (Gaussian) distribution to consider.\\n\\n@param `sigma` Standard deviation of the normal (Gaussian) distribution to consider.\\n\\n@param `result` Instance of `mapper.npdf`.\\n\\n\",\"tags\":[\"gts\",\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.npdf\"},{\"name\":\"mapper.or\",\"detail\":\" mapper.or  result<AGGREGATOR>\",\"documentation\":\"This mapper function applies the logical operator OR on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.or\"},{\"name\":\"mapper.parsedouble\",\"detail\":\"tag<STRING>  mapper.parsedouble  result<AGGREGATOR>\",\"documentation\":\"This mapper function converts a **STRING** single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.parsedouble` function can be applied to data of type **STRING**.\\n\\nThis function expects a [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) \\nparameter in top of the mapper. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `tag` [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) parameter. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.5\",\"OPB64name\":\"mapper.parsedouble\"},{\"name\":\"mapper.percentile\",\"detail\":\"percentile<NUMBER>  mapper.percentile  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the sliding window.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `percentile` Percentile to consider.\\n\\n@param `result` Instance of `mapper.percentile`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.percentile\"},{\"name\":\"mapper.pow\",\"detail\":\"constant<LONG>  mapper.pow  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.pow  result<AGGREGATOR>\",\"documentation\":\"This mapper function raises the single value in a sliding window to a constant power.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.pow` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.pow` function must be parameterized with the constant.\\n\\nThe result is always of type DOUBLE.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.pow\"},{\"name\":\"mapper.product\",\"detail\":\" mapper.product  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the product of all the values found in the sliding window.\\n\\nThe `mapper.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\nOn [bucketized](/doc/BUCKETIZE) Geo Time Series™, it is necessary to fill gaps with [`FILLVALUE`](/doc/FILLVALUE)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.product\"},{\"name\":\"mapper.rate\",\"detail\":\" mapper.rate  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the rate of change between the first and last values (rate = (last - first) / (lastick - firsttick)) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.rate` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value. If the\\nsliding window contains less than 2 values, the rate of change will be 0.0.\\n\\nThe rate of change is expressed in units per second.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.rate\"},{\"name\":\"mapper.replace\",\"detail\":\"constant<LONG>  mapper.replace  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.replace  result<AGGREGATOR>\\nconstant<STRING>  mapper.replace  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.replace  result<AGGREGATOR>\",\"documentation\":\"This mapper function replaces windows with at least one value with a constant. The location and elevation returned are those associated with the most \\nrecent value in the sliding window.\\n\\n@param `constant` constant used for replacement\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.replace\"},{\"name\":\"mapper.rms\",\"detail\":\" mapper.rms  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the root mean square of all the values found in each sliding window. The associated location is the last one of the window.\\n\\nThe `mapper.rms` function can only be applied to values of type **LONG** or **DOUBLE**.\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.18\",\"OPB64name\":\"mapper.rms\"},{\"name\":\"mapper.round\",\"detail\":\" mapper.round  result<AGGREGATOR>\",\"documentation\":\"This mapper function rounds the *single value* in a sliding window to the closests **LONG**.\\n\\nThe `mapper.round` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.round\"},{\"name\":\"mapper.sd\",\"detail\":\"bessel<BOOLEAN>  mapper.sd  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd\"},{\"name\":\"mapper.sd.forbid-nulls\",\"detail\":\"bessel<BOOLEAN>  mapper.sd.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.sd.forbid-nulls` has the same behavior as `mapper.sd`, use `mapper.sd` instead.\\n\\nThis mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd.forbid-nulls\"},{\"name\":\"mapper.second\",\"detail\":\"timezone<STRING>  mapper.second  result<AGGREGATOR>\\noffset<NUMBER>  mapper.second  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the second of the tick for which it is computed.\\n\\nThe `mapper.second` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.second\"},{\"name\":\"mapper.sigmoid\",\"detail\":\" mapper.sigmoid  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the sigmoid of *single value* in a sliding window.\\n\\nThe `mapper.sigmoid` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sigmoid\"},{\"name\":\"mapper.sqrt\",\"detail\":\" mapper.sqrt  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the square root of the single value in a sliding window.\\n\\nFor negative numerics, this mapper returns **NaN**. For string values, this mapper returns 0.\\n\\nThe associated location and elevation are those of the single value.\\n\\n> ### Note\\n> The `mapper.sqrt` mapper needs a single value sliding window, i.e. pre-window and post-window to 0\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.11\",\"OPB64name\":\"mapper.sqrt\"},{\"name\":\"mapper.sum\",\"detail\":\" mapper.sum  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum\"},{\"name\":\"mapper.sum.forbid-nulls\",\"detail\":\" mapper.sum.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.sum.forbid-nulls` has the same behavior as `mapper.sum`, use `mapper.sum` instead.\\n\\nThis mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum.forbid-nulls\"},{\"name\":\"mapper.tanh\",\"detail\":\" mapper.tanh  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the hyperbolic tangent of *single value* in a sliding window.\\n\\nThe `mapper.tanh` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tanh\"},{\"name\":\"mapper.tick\",\"detail\":\" mapper.tick  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the tick for which it is computed. The associated location and elevation are those of the selected value.\\n\\nThe `mapper.tick` function can be applied to values of any type.        \\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.tick\"},{\"name\":\"mapper.toboolean\",\"detail\":\" mapper.toboolean  result<AGGREGATOR>\",\"documentation\":\"This mapper function converts the single value in a sliding window to **BOOLEAN**.\\n\\nThe `mapper.toboolean` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.toboolean\"},{\"name\":\"mapper.todouble\",\"detail\":\" mapper.todouble  result<AGGREGATOR>\",\"documentation\":\"This mapper function converts the single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.todouble` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.todouble\"},{\"name\":\"mapper.tolong\",\"detail\":\" mapper.tolong  result<AGGREGATOR>\",\"documentation\":\"This mapper function converts the single value in a sliding window to **LONG**.\\n\\nThe `mapper.tolong` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tolong\"},{\"name\":\"mapper.tostring\",\"detail\":\" mapper.tostring  result<AGGREGATOR>\",\"documentation\":\"This mapper function converts the single value in a sliding window to **STRING**.\\n\\nThe `mapper.tostring` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tostring\"},{\"name\":\"mapper.truecourse\",\"detail\":\" mapper.truecourse  result<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack a mapper which will compute the initial [true course]http://www.edwilliams.org/avform.htm#Crs) on a great circle from the first to the last datapoint in the sliding window.\\n\\nThe location and elevation of the result is that of the tick being considered.\\n\\n@param `result` Instance of mapper.truecourse.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.truecourse\"},{\"name\":\"mapper.var\",\"detail\":\"bessel<BOOLEAN>  mapper.var  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var\"},{\"name\":\"mapper.var.forbid-nulls\",\"detail\":\"bessel<BOOLEAN>  mapper.var.forbid-nulls  result<AGGREGATOR>\",\"documentation\":\"**Deprecated**: `mapper.var.forbid-nulls` has the same behavior as `mapper.var`, use `mapper.var` instead.\\n\\nThis mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var.forbid-nulls\"},{\"name\":\"mapper.vdist\",\"detail\":\" mapper.vdist  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the total distance traveled in the vertical plane in the sliding window.\\n\\nThe distance is computed by summing the distances between consecutive elevations (this differs from the computation done in [`mapper.vspeed`](/doc/mapper.vspeed))\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed distance is expressed in meters.\\n\\nThe `mapper.vdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vdist\"},{\"name\":\"mapper.vspeed\",\"detail\":\" mapper.vspeed  result<AGGREGATOR>\",\"documentation\":\"This mapper function computes the vertical speed between the first and last readings of the sliding window. It does not compute the speed based on the total\\nvertical distance traveled in the sliding window, it only considers its extrema (it differs significantly of what is done for horizontal speed in\\n[`mapper.hspeed`](/doc/mapper.hspeed)), thus the result can be positive or negative.\\n\\nIf one of the extrema of the sliding window has no elevation, no value is returned.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.vspeed` function can be applied to data of any type since it only considers elevations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vspeed\"},{\"name\":\"mapper.weekday\",\"detail\":\"timezone<STRING>  mapper.weekday  result<AGGREGATOR>\\noffset<NUMBER>  mapper.weekday  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the day of the week of the tick for which it is computed.\\n\\nThe `mapper.weekday` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.weekday\"},{\"name\":\"mapper.year\",\"detail\":\"timezone<STRING>  mapper.year  result<AGGREGATOR>\\noffset<NUMBER>  mapper.year  result<AGGREGATOR>\",\"documentation\":\"This mapper function returns the year of the tick for which it is computed.\\n\\nThe `mapper.year` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.year\"},{\"name\":\"max.tick.sliding.window\",\"detail\":\" max.tick.sliding.window  max<LONG>\",\"documentation\":\"Pushes onto the stack [`MAXLONG`](/doc/MAXLONG) divided by 2, to serve as the maximum number of ticks left or right of the current tick in a [`MAP`](/doc/MAP) sliding window.\\n\\nGiven that a Geo Time Series™ can have no more than 2**32 datapoints, this value is sufficient to cover the whole GTS left or right of the current tick.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.tick.sliding.window\"},{\"name\":\"max.time.sliding.window\",\"detail\":\" max.time.sliding.window  max<LONG>\",\"documentation\":\"Pushes onto the stack half of the minimum LONG value, to serve as a *pre* or *post* extension of a [`MAP`](/doc/MAP) sliding window in time units.\\n\\nThis value spans a lot of time but may not be enough to cover the entirety of a GTS.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.time.sliding.window\"},{\"name\":\"ms\",\"detail\":\"input<NUMBER>  ms  output<LONG>\",\"documentation\":\"Converts a number of milliseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of milliseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of milliseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of milliseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ms\"},{\"name\":\"ns\",\"detail\":\"input<NUMBER>  ns  output<LONG>\",\"documentation\":\"Converts a number of nanoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of nanoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of nanoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of nanoseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ns\"},{\"name\":\"op.add\",\"detail\":\" op.add  op<OPERATOR>\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter Geo Time Series™.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator forbids null values, *i.e.* if a `null` is encountered, then there will be no result for the given tick.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.add\"},{\"name\":\"op.add.ignore-nulls\",\"detail\":\" op.add.ignore-nulls  op<OPERATOR>\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter GTS.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.add.ignore-nulls\"},{\"name\":\"op.and\",\"detail\":\" op.and  op<OPERATOR>\",\"documentation\":\"To apply an `op.and` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and\"},{\"name\":\"op.and.ignore-nulls\",\"detail\":\" op.and.ignore-nulls  op<OPERATOR>\",\"documentation\":\"To apply an `op.and.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and.ignore-nulls` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and.ignore-nulls\"},{\"name\":\"op.div\",\"detail\":\" op.div  op<OPERATOR>\",\"documentation\":\"To apply an `op.div` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.div is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.div` operation can only operate on equivalence classes which have two GTS (if the equivalence class has more than two GTS, there is no result guaranted). It will divide at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.div\"},{\"name\":\"op.eq\",\"detail\":\" op.eq  op<OPERATOR>\",\"documentation\":\"To apply an `op.eq` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.eq is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.eq` operation will check for equality at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.eq\"},{\"name\":\"op.ge\",\"detail\":\" op.ge  op<OPERATOR>\",\"documentation\":\"To apply an `op.ge` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ge` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ge` operation will check at each tick if the value of the current GTS is greater or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ge\"},{\"name\":\"op.gt\",\"detail\":\" op.gt  op<OPERATOR>\",\"documentation\":\"To apply an `op.gt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.gt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.gt` operation will check at each tick if the value of the current GTS is greater than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.gt\"},{\"name\":\"op.le\",\"detail\":\" op.le  op<OPERATOR>\",\"documentation\":\"To apply an `op.le` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.le` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.le` operation will check at each tick if the value of the current GTS is lesser or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.le\"},{\"name\":\"op.lt\",\"detail\":\" op.lt  op<OPERATOR>\",\"documentation\":\"To apply an `op.lt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.lt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.lt` operation will check at each tick if the value of the current GTS is lesser than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.lt\"},{\"name\":\"op.mask\",\"detail\":\" op.mask  op<OPERATOR>\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), retains datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mask\"},{\"name\":\"op.mul\",\"detail\":\" op.mul  op<OPERATOR>\",\"documentation\":\"To apply an `op.mul` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mul\"},{\"name\":\"op.mul.ignore-nulls\",\"detail\":\" op.mul.ignore-nulls  op<OPERATOR>\",\"documentation\":\"To apply an `op.mul.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul.ignore-nulls` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.mul.ignore-nulls\"},{\"name\":\"op.ne\",\"detail\":\" op.ne  op<OPERATOR>\",\"documentation\":\"To apply an `op.ne` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ne` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ne` operation will check for inequality at each tick all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ne\"},{\"name\":\"op.negmask\",\"detail\":\" op.negmask  op<OPERATOR>\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), removes datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The operator instance.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.negmask\"},{\"name\":\"op.or\",\"detail\":\" op.or  op<OPERATOR>\",\"documentation\":\"To apply an `op.or` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or\"},{\"name\":\"op.or.ignore-nulls\",\"detail\":\" op.or.ignore-nulls  op<OPERATOR>\",\"documentation\":\"To apply an `op.or.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or.ignore-nulls` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or.ignore-nulls\"},{\"name\":\"op.sub\",\"detail\":\" op.sub  op<OPERATOR>\",\"documentation\":\"To apply an `op.sub` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.sub` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe sub operator can only operate on equivalence classes which have **exactly two GTS**. It will substract at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.sub\"},{\"name\":\"pi\",\"detail\":\" pi  pi<DOUBLE>\",\"documentation\":\"Alias of [PI](/doc/J3Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"R5Z\"},{\"name\":\"ps\",\"detail\":\"input<NUMBER>  ps  output<LONG>\",\"documentation\":\"Converts a number of picoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of picoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of picoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of picoseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ps\"},{\"name\":\"reducer.and\",\"detail\":\" reducer.and  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.and` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and\"},{\"name\":\"reducer.and.exclude-nulls\",\"detail\":\" reducer.and.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.and.exclude-nulls` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ \\nwhich are in the same equivalence class, excluding nulls from the computation.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, \\nthe current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and.exclude-nulls\"},{\"name\":\"reducer.argmax\",\"detail\":\"label<STRING> maximum<LONG>  reducer.argmax  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.argmax` function outputs for each tick, the tick and the concatenation separated by ‘,’ of the values of the labels for which the\\nvalue is the maximum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the maximum to report (use 0 to report all), and a **STRING**\\nparameter to choose on which label it operates.\\n\\n@param `maximum` Maximum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmax\"},{\"name\":\"reducer.argmin\",\"detail\":\"label<STRING> minimum<LONG>  reducer.argmin  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.argmin` function outputs for each tick, the tick and the concatenation separated by ‘,’ \\nwith the values of the labels for which the value is the minimum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the minimum to report (use 0 to report all), and a **STRING** \\nparameter to choose on which label it operates.\\n\\n@param `minimum` Minimum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmin\"},{\"name\":\"reducer.count\",\"detail\":\" reducer.count  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.count` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe include null version, [`reducer.count.include-nulls`](/doc/reducer.count.include-nulls), will include null values when computing the count. The exclude null version, \\n[`reducer.count.exclude-nulls`](/doc/reducer.count.exclude-nulls), will exclude null values when computing the count.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count\"},{\"name\":\"reducer.count.exclude-nulls\",\"detail\":\" reducer.count.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.count.exclude-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.exclude-nulls\"},{\"name\":\"reducer.count.include-nulls\",\"detail\":\" reducer.count.include-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.count.include-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are included.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.include-nulls\"},{\"name\":\"reducer.count.nonnull\",\"detail\":\" reducer.count.nonnull  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.count.nonnull` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.nonnull\"},{\"name\":\"reducer.join\",\"detail\":\"separator<STRING>  reducer.join  reducer<AGGREGATOR>\",\"documentation\":\"The 'reducer.join' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will exclude all null values when computing the join.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join\"},{\"name\":\"reducer.join.forbid-nulls\",\"detail\":\"separator<STRING>  reducer.join.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.join.nonnull`](/doc/reducer.join.nonnull).\\n\\nThe 'reducer.join.forbid-nulls' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.forbid-nulls\"},{\"name\":\"reducer.join.nonnull\",\"detail\":\"separator<STRING>  reducer.join.nonnull  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.join.forbid-nulls`](/doc/reducer.join.forbid-nulls).\\n\\nThe 'reducer.join.nonnull' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.nonnull\"},{\"name\":\"reducer.join.urlencoded\",\"detail\":\"separator<STRING>  reducer.join.urlencoded  reducer<AGGREGATOR>\",\"documentation\":\"The 'reducer.join.urlencoded' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) charset.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.urlencoded\"},{\"name\":\"reducer.mad\",\"detail\":\" reducer.mad  reducer<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) for each ticks. Null values are removed before computing the MAD for each ticks.\\n\\nThe returned location is the median of all the locations and the returned elevation is the median of all the elevations.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.0\",\"OPB64name\":\"reducer.mad\"},{\"name\":\"reducer.max\",\"detail\":\" reducer.max  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.max` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will exclude all null values when computing the maximum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max\"},{\"name\":\"reducer.max.forbid-nulls\",\"detail\":\" reducer.max.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.max.nonnull`](/doc/reducer.max.nonnull).\\n\\nThe `reducer.max.forbid-nulls` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.forbid-nulls\"},{\"name\":\"reducer.max.nonnull\",\"detail\":\" reducer.max.nonnull  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.max.forbid-nulls`](/doc/reducer.max.forbid-nulls).\\n\\nThe `reducer.max.nonnull` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.nonnull\"},{\"name\":\"reducer.mean\",\"detail\":\" reducer.mean  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.mean` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean\"},{\"name\":\"reducer.mean.circular\",\"detail\":\"modulo<NUMBER>  reducer.mean.circular  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.mean.circular` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`reducer.mean.circular.exclude-nulls`](/doc/reducer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `reducer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular\"},{\"name\":\"reducer.mean.circular.exclude-nulls\",\"detail\":\"modulo<NUMBER>  reducer.mean.circular.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.mean.circular.exclude-nulls` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `reducer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular.exclude-nulls\"},{\"name\":\"reducer.mean.exclude-nulls\",\"detail\":\" reducer.mean.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.mean.exclude-nulls` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will exclude all null values when computing the mean.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.exclude-nulls\"},{\"name\":\"reducer.median\",\"detail\":\" reducer.median  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.median` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.median\"},{\"name\":\"reducer.median.forbid-nulls\",\"detail\":\" reducer.median.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.median.forbid-nulls` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value, ie ticks do not match between Geo Times Series™ in the same equivalence class, it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"2.4.0\",\"OPB64name\":\"reducer.median.forbid-nulls\"},{\"name\":\"reducer.min\",\"detail\":\" reducer.min  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.min` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will exclude all null values when computing the minimum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min\"},{\"name\":\"reducer.min.forbid-nulls\",\"detail\":\" reducer.min.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.min.nonnull`](/doc/reducer.min.nonnull).\\n\\nThe `reducer.min.forbid-nulls` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.forbid-nulls\"},{\"name\":\"reducer.min.nonnull\",\"detail\":\" reducer.min.nonnull  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.min.forbid-nulls`](/doc/reducer.min.forbid-nulls).\\n\\nThe `reducer.min.nonnull` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.nonnull\"},{\"name\":\"reducer.or\",\"detail\":\" reducer.or  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.or` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or\"},{\"name\":\"reducer.or.exclude-nulls\",\"detail\":\" reducer.or.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.or.exclude-nulls` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or.exclude-nulls\"},{\"name\":\"reducer.percentile\",\"detail\":\" reducer.percentile  reducer<AGGREGATOR>\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values for each tick.\\n\\nFor this reducer, GTS must be aligned and must have a value for each tick of each GTS. \\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.percentile\"},{\"name\":\"reducer.product\",\"detail\":\" reducer.product  reducer<AGGREGATOR>\",\"documentation\":\"This reducer function computes the product of all the values for each tick.\\n\\nThe `reducer.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.product\"},{\"name\":\"reducer.rms\",\"detail\":\" reducer.rms  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIf one value is null, there won't be any result for the concerned tick.\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms\"},{\"name\":\"reducer.rms.exclude-nulls\",\"detail\":\" reducer.rms.exclude-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms. Even if input GTS are misaligned, there will be one result per tick.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms.exclude-nulls\"},{\"name\":\"reducer.sd\",\"detail\":\"bessel<BOOLEAN>  reducer.sd  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.sd` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd\"},{\"name\":\"reducer.sd.forbid-nulls\",\"detail\":\"bessel<BOOLEAN>  reducer.sd.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.sd.forbid-nulls` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd.forbid-nulls\"},{\"name\":\"reducer.shannonentropy.0\",\"detail\":\" reducer.shannonentropy.0  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.shannonentropy.0` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 0 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.0\"},{\"name\":\"reducer.shannonentropy.1\",\"detail\":\" reducer.shannonentropy.1  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.shannonentropy.1` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 1 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.1\"},{\"name\":\"reducer.sum\",\"detail\":\" reducer.sum  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.sum` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum\"},{\"name\":\"reducer.sum.forbid-nulls\",\"detail\":\" reducer.sum.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.sum.nonnull`](/doc/reducer.sum.nonnull).\\n\\nThe `reducer.sum.forbid-nulls` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.forbid-nulls\"},{\"name\":\"reducer.sum.nonnull\",\"detail\":\" reducer.sum.nonnull  reducer<AGGREGATOR>\",\"documentation\":\"Alias of [`reducer.sum.forbid-nulls`](/doc/reducer.sum.forbid-nulls).\\n\\nThe `reducer.sum.nonnull` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.nonnull\"},{\"name\":\"reducer.var\",\"detail\":\"bessel<BOOLEAN>  reducer.var  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var\"},{\"name\":\"reducer.var.forbid-nulls\",\"detail\":\"bessel<BOOLEAN>  reducer.var.forbid-nulls  reducer<AGGREGATOR>\",\"documentation\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var.forbid-nulls\"},{\"name\":\"s\",\"detail\":\"input<NUMBER>  s  output<LONG>\",\"documentation\":\"Converts a number of seconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of seconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of seconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of seconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"s\"},{\"name\":\"us\",\"detail\":\"input<NUMBER>  us  output<LONG>\",\"documentation\":\"Converts a number of microseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of microseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of microseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of microseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"us\"},{\"name\":\"w\",\"detail\":\"input<NUMBER>  w  output<LONG>\",\"documentation\":\"Converts a number of weeks (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of weeks from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of weeks to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of weeks\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"w\"},{\"name\":\"{\",\"detail\":\" {  mark<MARK>\",\"documentation\":\"Starts a map creation.\\n\\nThe `{` function creates a map by pushing a mark onto the stack. This is a syntactic help to better present map constructions. This function behaves like [`MARK`].\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tk\"},{\"name\":\"{}\",\"detail\":\" {}  newmap<MAP>\",\"documentation\":\"The {} function creates an empty MAP on the top of the stack.\\n\\n\\n@param `newmap` Empty map instance.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tro\"},{\"name\":\"|\",\"detail\":\"p1<LONG> p2<LONG>  |  result<LONG>\\ninputgts<GTS> mask<LONG>  |  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  |  outputgts<GTS>\",\"documentation\":\"Performs a bitwise **OR** operation.\\n\\nThe `|` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **OR**.\\n \\nSince Warp 10™ 2.1, `|` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be OR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with OR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts OR with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"U.\"},{\"name\":\"||\",\"detail\":\"p1<BOOLEAN> p2<BOOLEAN>  ||  result<BOOLEAN>\\nl<LIST>  ||  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  ||  gtsresult<GTS>\",\"documentation\":\"The `||` operator is a synonymous for [`OR`](/doc/OR).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `||` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"U6k\"},{\"name\":\"}\",\"detail\":\"mark<MARK> k1<ANY> v1<ANY> kN<ANY> vN<ANY>  }  map<MAP>\",\"documentation\":\"Closes a currently open map and pushes it onto the stack.\\n\\nThe `}` function pops from the stack the elements (key/value pairs) of the map up to the first mark. The marks are consumed.\\n\\n@param `k1` The first key\\n\\n@param `v1` The first value\\n\\n@param `kN` The Nth key\\n\\n@param `vN` The Nth value\\n\\n@param `map` The built map\\n\\n@param `mark` The mark indicating the deepest level to consider when building the map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"UF\"},{\"name\":\"~\",\"detail\":\"param<LONG>  ~  result<LONG>\",\"documentation\":\"Computes the unary bitwise complement of the long value on top of the stack.\\n\\n@param `param` Value to compute\\n\\n@param `result` Bitwise result\\n\\n\",\"tags\":[\"operators\",\"binary\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"UV\"},{\"name\":\"~=\",\"detail\":\"p2<DOUBLE> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<LONG>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<LONG>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\",\"documentation\":\"The `~=` operator consumes three parameters from the top of the stack, two operands p1 and p2 and a tolerance factor lambda, \\nand pushes onto the stack true if *|p1-p2| < lambda*, i.e. the difference between the two operands is lesser than lambda.\\n\\nThe two parameters must be of numeric types.\\n\\nThe operator `~=` is useful when making comparaisons between doubles, where floating point operations generate rounding errors.\\n\\n@param `p1` First number\\n\\n@param `p2` Second number\\n\\n@param `lambda` Tolerance factor lambda\\n\\n@param `result` \\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"UYo\"}];\n}\n      ","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, languages, Position, Thenable} from 'monaco-editor';\nimport CompletionList = languages.CompletionList;\nimport CompletionItemKind = languages.CompletionItemKind;\nimport CompletionItemProvider = languages.CompletionItemProvider;\nimport IReadOnlyModel = editor.IReadOnlyModel;\nimport CompletionContext = languages.CompletionContext;\nimport CompletionItem = languages.CompletionItem;\n\nexport abstract class W10CompletionItemProvider implements CompletionItemProvider {\n  languageId: string;\n\n  protected constructor(languageId: string) {\n    this.languageId = languageId;\n  }\n\n  abstract provideCompletionItems(model: IReadOnlyModel, position: Position, _context: CompletionContext, token: CancellationToken): Thenable<CompletionList>;\n\n  abstract transformKeyWord(keyword: string): string;\n\n  protected _provideCompletionItems(model: editor.IReadOnlyModel, position: Position, _context: languages.CompletionContext, token: CancellationToken, source: any, snippets: any): Thenable<languages.CompletionList> {\n    const defs: CompletionList = {\n      suggestions: [],\n    };\n    source.forEach(f => {\n      const item: CompletionItem = {\n        label: this.transformKeyWord(f.name),\n        insertText: this.transformKeyWord(f.name),\n        range: undefined,\n        kind: W10CompletionItemProvider.getType(f.tags, f.name)\n      };\n      defs.suggestions.push(item);\n    });\n    Object.keys(snippets).forEach(s => {\n      const snippet = snippets[s];\n      defs.suggestions.push({\n        label: s,\n        kind: languages.CompletionItemKind.Snippet,\n        insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,\n        documentation: snippet.prefix,\n        insertText: snippet.body.join('\\n')\n      } as CompletionItem);\n    });\n\n    return Promise.resolve(defs);\n  }\n\n  private static getType(tags: string[], name: string): CompletionItemKind {\n    const t = tags.join(' ');\n    if (t.indexOf('constant') > -1) {\n      return CompletionItemKind.Enum;\n    } else if (t.indexOf('reducer') > -1 && name !== 'REDUCE') {\n      return CompletionItemKind.Interface;\n    } else if (t.indexOf('mapper') > -1 && name !== 'MAP') {\n      return CompletionItemKind.Interface;\n    } else if (t.indexOf('bucketize') > -1 && name !== 'BUCKETIZE') {\n      return CompletionItemKind.Interface;\n    } else if (t.indexOf('filter') > -1 && name !== 'FILTER') {\n      return CompletionItemKind.Interface;\n    } else if (t.indexOf('control') > -1) {\n      return CompletionItemKind.Keyword;\n    } else if (t.indexOf('operators') > -1) {\n      return CompletionItemKind.Method;\n    } else if (t.indexOf('stack') > -1) {\n      return CompletionItemKind.Module;\n    } else {\n      return CompletionItemKind.Function;\n    }\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class EditorUtils {\n  static WARPSCRIPT_LANGUAGE = 'warpscript';\n  static FLOWS_LANGUAGE = 'flows';\n\n  static formatElapsedTime(elapsed: number) {\n    if (elapsed < 1000) {\n      return elapsed.toFixed(3) + ' ns';\n    }\n    if (elapsed < 1000000) {\n      return (elapsed / 1000).toFixed(3) + ' μs';\n    }\n    if (elapsed < 1000000000) {\n      return (elapsed / 1000000).toFixed(3) + ' ms';\n    }\n    if (elapsed < 1000000000000) {\n      return (elapsed / 1000000000).toFixed(3) + ' s ';\n    }\n    // Max exec time for nice output: 999.999 minutes (should be OK, timeout should happen before that).\n    return (elapsed / 60000000000).toFixed(3) + ' m ';\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class SnippetsWarpScript {\n\n  static snippets = {\n    macro: {\n      prefix: 'macro (example)',\n      body: [\n        '{',\n        '  \\'name\\' \\'${1:euclideanDivision}\\'',\n        '  \\'desc\\' ',\n        '  <\\'',\n        '${2:This macro returns the quotient and the remainder of a/b.}',\n        '  \\'>',\n        '  \\'sig\\' [ [ [ ${3:\\'a:LONG\\' \\'b:LONG\\'} ] [ ${4:\\'q:LONG\\' \\'r:LONG\\'} ] ] ] // Signature',\n        '  \\'params\\' {',\n        '    // Signature params description',\n        '    ${5:\\'b\\' \\'parameter b TOP of the stack\\'',\n        '    \\'a\\' \\'parameter a just below on the stack\\'',\n        '    \\'q\\' \\'the quotient of a/b, N-1 on the stack\\'',\n        '    \\'r\\' \\'the remainder of a/b, on the TOP of the stack\\'}',\n        '  }',\n        '  \\'examples\\' [',\n        '    <\\'',\n        '${6:10 3 @mymacros/euclideanDivision [ \\'q\\' \\'r\\' ] STORE',\n        '\\'quotient is  :\\' \\\\$q TOSTRING +',\n        '\\'remainder is :\\' \\\\$r TOSTRING +}',\n        '    \\'>',\n        '  ]',\n        '} \\'info\\' STORE',\n        '',\n        '<%',\n        '  !\\\\$info INFO',\n        '  SAVE \\'context\\' STORE',\n        '  <%',\n        '    // Code of the actual macro',\n        '    ${7:[ \\'a\\' \\'b\\' ] STORE',\n        '    \\\\$a \\\\$b / TOLONG',\n        '    \\\\$a \\\\$b %}',\n        '      ',\n        '  %>',\n        '  <% // catch any exception',\n        '    RETHROW',\n        '  %>',\n        '  <% // finally, restore the context',\n        '    \\\\$context RESTORE',\n        '  %> TRY',\n        '%>',\n        '\\'macro\\' STORE',\n        '',\n        '// Unit tests',\n        '${8:10 3 @macro [ \\'q\\' \\'r\\' ] STORE',\n        '\\\\$q 3 == ASSERT',\n        '\\\\$r 1 == ASSERT',\n        '\\\\$q TYPEOF \\'LONG\\' == ASSERT',\n        '\\\\$r TYPEOF \\'LONG\\' == ASSERT}',\n        '',\n        '\\\\$macro'\n      ],\n      description: 'Macro'\n    },\n    'macro(empty)': {\n      prefix: 'macro (empty)',\n      body: [\n        '{',\n        '  \\'name\\' \\'${1: }\\'',\n        '  \\'desc\\' ',\n        '  <\\'',\n        '${2: }',\n        '  \\'>',\n        '  \\'sig\\' [ [ [   ] [   ] ] ] // Signature',\n        '  \\'params\\' {',\n        '    // Signature params description',\n        '  }',\n        '  \\'examples\\' [',\n        '    <\\'',\n        '',\n        '    \\'>',\n        '  ]',\n        '} \\'info\\' STORE',\n        '',\n        '<%',\n        '  !\\\\$info INFO',\n        '  SAVE \\'context\\' STORE',\n        '  <%',\n        '    // Code of the actual macro',\n        '    ${3:  }',\n        '  %>',\n        '  <% // catch any exception',\n        '    RETHROW',\n        '  %>',\n        '  <% // finally, restore the context',\n        '    \\\\$context RESTORE',\n        '  %> TRY',\n        '%>',\n        '\\'macro\\' STORE',\n        '',\n        '// Unit tests',\n        '',\n        '\\\\$macro'\n      ],\n      description: 'Macro'\n    },\n    fetch: {\n      prefix: 'fetch',\n      body: [\n        '[ \\'TOKEN\\' \\'className\\'  { \\'label0\\' \\'=value0\\'  \\'label1\\' \\'~val.\\' }  start timespan ] FETCH'\n      ]\n    },\n    bucketize: {\n      prefix: 'bucketize',\n      body: [\n        '[ ${1:gts} ${2|MACROBUCKETIZER,bucketizer.and,bucketizer.count,bucketizer.count.exclude-nulls,bucketizer.count.include-nulls,bucketizer.count.nonnull,bucketizer.first,bucketizer.join,bucketizer.join.forbid-nulls,bucketizer.last,bucketizer.max,bucketizer.max.forbid-nulls,bucketizer.mean,bucketizer.mean.circular,bucketizer.mean.circular.exclude-nulls,bucketizer.mean.exclude-nulls,bucketizer.median,bucketizer.min,bucketizer.min.forbid-nulls,bucketizer.or,bucketizer.sum,bucketizer.sum.forbid-nulls|} ${3:lastbucket} ${4:bucketspan} ${5:bucketcount} ] BUCKETIZE'\n      ]\n    },\n    filter: {\n      prefix: 'filter',\n      body: [\n        '[ ${1:gts} [${2:labels}] ${3|MACROFILTER,filter.byattr,filter.byclass,filter.bylabels,filter.bylabelsattr,filter.bymetadata,filter.last.eq,filter.last.ge,filter.last.gt,filter.last.le,filter.last.lt,filter.last.ne,filter.latencies|} ] FILTER'\n      ]\n    },\n    map: {\n      prefix: 'map',\n      body: [\n        '[ ${1:gts} ${2|MACROMAPPER,mapper.abs,mapper.add,mapper.and,mapper.ceil,mapper.count,mapper.count.exclude-nulls,mapper.count.include-nulls,mapper.count.nonnull,mapper.day,mapper.delta,mapper.dotproduct,mapper.dotproduct.positive,mapper.dotproduct.sigmoid,mapper.dotproduct.tanh,mapper.eq,mapper.exp,mapper.finite,mapper.first,mapper.floor,mapper.ge,mapper.geo.approximate,mapper.geo.clear,mapper.geo.outside,mapper.geo.within,mapper.gt,mapper.hdist,mapper.highest,mapper.hour,mapper.hspeed,mapper.join,mapper.join.forbid-nulls,mapper.kernel.cosine,mapper.kernel.epanechnikov,mapper.kernel.gaussian,mapper.kernel.logistic,mapper.kernel.quartic,mapper.kernel.silverman,mapper.kernel.triangular,mapper.kernel.tricube,mapper.kernel.triweight,mapper.kernel.uniform,mapper.last,mapper.le,mapper.log,mapper.lowest,mapper.lt,mapper.mad,mapper.max,mapper.max.forbid-nulls,mapper.max.x,mapper.mean,mapper.mean.circular,mapper.mean.circular.exclude-nulls,mapper.mean.exclude-nulls,mapper.median,mapper.min,mapper.min.forbid-nulls,mapper.min.x,mapper.minute,mapper.mod,mapper.month,mapper.mul,mapper.ne,mapper.npdf,mapper.or,mapper.parsedouble,mapper.percentile,mapper.pow,mapper.product,mapper.rate,mapper.replace,mapper.round,mapper.sd,mapper.sd.forbid-nulls,mapper.second,mapper.sigmoid,mapper.sqrt,mapper.sum,mapper.sum.forbid-nulls,mapper.tanh,mapper.tick,mapper.toboolean,mapper.todouble,mapper.tolong,mapper.tostring,mapper.truecourse,mapper.var,mapper.var.forbid-nulls,mapper.vdist,mapper.vspeed,mapper.weekday,mapper.year,max.tick.sliding.window,max.time.sliding.window|} ${3:pre} ${4:post} ${5:occurrences} ] MAP'\n      ]\n    },\n    reduce: {\n      prefix: 'reduce',\n      body: [\n        '[ ${1:gts} [${2:labels}] ${3|MACROREDUCER,reducer.and,reducer.and.exclude-nulls,reducer.argmax,reducer.argmin,reducer.count,reducer.count.exclude-nulls,reducer.count.include-nulls,reducer.count.nonnull,reducer.join,reducer.join.forbid-nulls,reducer.join.nonnull,reducer.join.urlencoded,reducer.max,reducer.max.forbid-nulls,reducer.max.nonnull,reducer.mean,reducer.mean.circular,reducer.mean.circular.exclude-nulls,reducer.mean.exclude-nulls,reducer.median,reducer.min,reducer.min.forbid-nulls,reducer.min.nonnull,reducer.or,reducer.or.exclude-nulls,reducer.sd,reducer.sd.forbid-nulls,reducer.shannonentropy.0,reducer.shannonentropy.1,reducer.sum,reducer.sum.forbid-nulls,reducer.sum.nonnull,reducer.var,reducer.var.forbid-nulls|} ] REDUCE'\n      ]\n    },\n    apply: {\n      prefix: 'apply',\n      body: [\n        '[ ${1:gts} [${2:labels}] ${3|OP,op.add,op.add.ignore-nulls,op.and,op.and.ignore-nulls,op.div,op.eq,op.ge,op.gt,op.le,op.lt,op.mask,op.mul,op.mul.ignore-nulls,op.ne,op.negmask,op.or,op.or.ignore-nulls,op.sub|} ] APPLY'\n      ],\n      description: 'Apply framework'\n    },\n    ift: {\n      prefix: 'ift',\n      body: [\n        '<% ${1:condition} %>',\n        '<% ${2:action_if_true} %>',\n        'IFT'\n      ],\n      description: 'If statement'\n    },\n    ifte: {\n      prefix: 'ifte',\n      body: [\n        '<% ${1:condition} %>',\n        '<% ${2:action_if_true} %>',\n        '<% ${3:action_if_false} %>',\n        'IFTE'\n      ],\n      description: 'If then else statement'\n    },\n    'switch': {\n      prefix: 'switch',\n      body: [\n        '<% ${1:case_1} %> <% ${2:action_1} %>',\n        '<% ${3:case_2} %> <% ${4:action_2} %>',\n        '<% ${5:case_3} %> <% ${6:action_3} %>',\n        '<% ${7:default} %>',\n        '${8:number_of_cases}',\n        'SWITCH'\n      ],\n      description: 'Switch statement'\n    },\n    'try': {\n      prefix: 'try',\n      body: [\n        '<% ${1:try} %>',\n        '<% ${2:catch} %>',\n        '<% ${3:finally} %>',\n        'TRY'\n      ],\n      description: 'Try/Catch statement'\n    },\n    'while': {\n      prefix: 'while',\n      body: [\n        '<% ${1:condition} %>',\n        '<% ${2:action_while_true} %>',\n        'WHILE'\n      ],\n      description: 'While loop'\n    },\n    until: {\n      prefix: 'until',\n      body: [\n        '<% ${1:action_until_true} %>',\n        '<% ${2:condition} %>',\n        'UNTIL'\n      ],\n      description: 'Until loop'\n    },\n    'for': {\n      prefix: 'for',\n      body: [\n        '${1:initial_value} ${2:final_value}',\n        '<% ${3:action} %>',\n        'FOR'\n      ],\n      description: 'For loop'\n    },\n    foreach: {\n      prefix: 'foreach',\n      body: [\n        '${1:object}',\n        '<% ',\n        '  //[ \\'key\\' \\'value\\' ] STORE // object is a map',\n        '  //[ \\'value\\' ] STORE // object is a list',\n        '  ${2:action}',\n        '%>',\n        'FOREACH'\n      ],\n      description: 'Foreach loop'\n    },\n    forstep: {\n      prefix: 'forstep',\n      body: [\n        '${1:initial_value} ${2:final_value} <% ${3:1 +} %>',\n        '<% ${4:action} %>',\n        'FORSTEP'\n      ],\n      description: 'Forstep loop'\n    },\n    shm: {\n      prefix: 'shm',\n      body: [\n        '<%',\n        '  <%',\n        '    //try to read data from SHared Memory',\n        '    \\'gtsList\\' SHMLOAD DROP',\n        '  %>',\n        '  <%',\n        '    //when not found, store data in SHM',\n        '    ${1:[ \\\\$token \\'classname\\' {\\\\} NOW 365 d ] FETCH} \\'gtsList\\' SHMSTORE',\n        '  %>',\n        '  <%',\n        '    //finally, load the reference from SHM and store it ',\n        '    \\'gtsList\\' SHMLOAD \\'gtsList\\' STORE',\n        '  %> TRY',\n        '',\n        '  //analytics on \\\\$gtsList',\n        '  ${2:\\\\$gtsList}',\n        '',\n        '',\n        '',\n        '%> \\'myMutex\\' MUTEX //prevent a concurrent execution on the same SHM data'\n      ],\n      description: 'Keep fetched data in RAM. You need to enable the SHM extension.'\n    }\n  };\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, languages, Position, Thenable} from 'monaco-editor';\nimport {WarpScript} from '../../../model/ref';\nimport {W10CompletionItemProvider} from './W10CompletionItemProvider';\nimport {EditorUtils} from './editorUtils';\nimport {SnippetsWarpScript} from './SnippetsWarpScript';\nimport CompletionList = languages.CompletionList;\nimport IReadOnlyModel = editor.IReadOnlyModel;\nimport CompletionContext = languages.CompletionContext;\n\nexport class WSCompletionItemProvider extends W10CompletionItemProvider {\n\n  constructor() {\n    super(EditorUtils.WARPSCRIPT_LANGUAGE);\n  }\n\n  transformKeyWord(keyword: string): string {\n    return keyword;\n  }\n\n  // noinspection JSUnusedLocalSymbols\n  provideCompletionItems(model: IReadOnlyModel, position: Position, _context: CompletionContext, token: CancellationToken): Thenable<CompletionList> {\n    return super._provideCompletionItems(model, position, _context, token, WarpScript.reference, SnippetsWarpScript.snippets);\n  }\n}\n","export class Monarch {\n        public static rules:any =  {\n    \"keywords\": [\n        \"!\",\n        \"!=\",\n        \"%\",\n        \"&\",\n        \"&&\",\n        \"(\",\n        \"()\",\n        \")\",\n        \"*\",\n        \"**\",\n        \"+\",\n        \"+!\",\n        \"-\",\n        \"->B64\",\n        \"->B64URL\",\n        \"->BIN\",\n        \"->BYTES\",\n        \"->DOUBLEBITS\",\n        \"->ENCODER\",\n        \"->ENCODERS\",\n        \"->FLOATBITS\",\n        \"->GEOCELL\",\n        \"->GEOHASH\",\n        \"->GEOJSON\",\n        \"->GEOSHAPE\",\n        \"->GTS\",\n        \"->GTSHHCODE\",\n        \"->GTSHHCODELONG\",\n        \"->HEX\",\n        \"->HHCODE\",\n        \"->HHCODELONG\",\n        \"->JSON\",\n        \"->LIST\",\n        \"->LONGBYTES\",\n        \"->MAP\",\n        \"->MAT\",\n        \"->MVSTRING\",\n        \"->OPB64\",\n        \"->PICKLE\",\n        \"->Q\",\n        \"->SET\",\n        \"->TSELEMENTS\",\n        \"->V\",\n        \"->VARINT\",\n        \"->VEC\",\n        \"->WKB\",\n        \"->WKT\",\n        \"->Z\",\n        \"/\",\n        \"<\",\n        \"<<\",\n        \"<=\",\n        \"==\",\n        \">\",\n        \">=\",\n        \">>\",\n        \">>>\",\n        \"ABS\",\n        \"ACCEL.CACHE\",\n        \"ACCEL.NOCACHE\",\n        \"ACCEL.NOPERSIST\",\n        \"ACCEL.PERSIST\",\n        \"ACCEL.REPORT\",\n        \"ACOS\",\n        \"ADDDAYS\",\n        \"ADDDURATION\",\n        \"ADDEXACT\",\n        \"ADDMONTHS\",\n        \"ADDVALUE\",\n        \"ADDYEARS\",\n        \"AESUNWRAP\",\n        \"AESWRAP\",\n        \"AGO\",\n        \"AND\",\n        \"APPEND\",\n        \"APPLY\",\n        \"ASENCODERS\",\n        \"ASIN\",\n        \"ASREGS\",\n        \"ASSERT\",\n        \"ASSERTMSG\",\n        \"ATAN\",\n        \"ATAN2\",\n        \"ATBUCKET\",\n        \"ATINDEX\",\n        \"ATTICK\",\n        \"ATTRIBUTES\",\n        \"AUTHENTICATE\",\n        \"B64->\",\n        \"B64TOHEX\",\n        \"B64URL->\",\n        \"BBOX\",\n        \"BIN->\",\n        \"BINTOHEX\",\n        \"BITCOUNT\",\n        \"BITGET\",\n        \"BITSTOBYTES\",\n        \"BOOTSTRAP\",\n        \"BREAK\",\n        \"BUCKETCOUNT\",\n        \"BUCKETIZE\",\n        \"BUCKETIZE.CALENDAR\",\n        \"BUCKETSPAN\",\n        \"BYTES->\",\n        \"BYTESTOBITS\",\n        \"CALL\",\n        \"CBRT\",\n        \"CEIL\",\n        \"CEVAL\",\n        \"CHECKMACRO\",\n        \"CHECKSHAPE\",\n        \"CHRONOEND\",\n        \"CHRONOSTART\",\n        \"CHRONOSTATS\",\n        \"CHUNK\",\n        \"CHUNKENCODER\",\n        \"CLEAR\",\n        \"CLEARDEFS\",\n        \"CLEARREGS\",\n        \"CLEARSYMBOLS\",\n        \"CLEARTOMARK\",\n        \"CLIP\",\n        \"CLONE\",\n        \"CLONEEMPTY\",\n        \"CLONEREVERSE\",\n        \"COMMONTICKS\",\n        \"COMPACT\",\n        \"CONTAINS\",\n        \"CONTAINSKEY\",\n        \"CONTAINSVALUE\",\n        \"CONTINUE\",\n        \"COPYGEO\",\n        \"COPYSIGN\",\n        \"CORRELATE\",\n        \"COS\",\n        \"COSH\",\n        \"COUNTER\",\n        \"COUNTERDELTA\",\n        \"COUNTERSET\",\n        \"COUNTERVALUE\",\n        \"COUNTTOMARK\",\n        \"CPOPR\",\n        \"CPROB\",\n        \"CROP\",\n        \"CSTORE\",\n        \"DEBUGOFF\",\n        \"DEBUGON\",\n        \"DECREMENTEXACT\",\n        \"DEDUP\",\n        \"DEF\",\n        \"DEFINED\",\n        \"DEFINEDMACRO\",\n        \"DEFLATE\",\n        \"DELETE\",\n        \"DELETEOFF\",\n        \"DELETEON\",\n        \"DEPTH\",\n        \"DEREF\",\n        \"DET\",\n        \"DIFFERENCE\",\n        \"DISCORDS\",\n        \"DOC\",\n        \"DOCMODE\",\n        \"DOUBLEBITS->\",\n        \"DOUBLEEXPONENTIALSMOOTHING\",\n        \"DROP\",\n        \"DROPN\",\n        \"DTW\",\n        \"DUP\",\n        \"DUPN\",\n        \"DURATION\",\n        \"DWTSPLIT\",\n        \"E\",\n        \"ECGEN\",\n        \"ECHOOFF\",\n        \"ECHOON\",\n        \"ECPRIVATE\",\n        \"ECPUBLIC\",\n        \"ECSIGN\",\n        \"ECVERIFY\",\n        \"ELAPSED\",\n        \"ELEVATIONS\",\n        \"EMPTY\",\n        \"ENCODER->\",\n        \"ERROR\",\n        \"ESDTEST\",\n        \"EVALSECURE\",\n        \"EVERY\",\n        \"EXP\",\n        \"EXPM1\",\n        \"EXPORT\",\n        \"EXTLOADED\",\n        \"F\",\n        \"FDWT\",\n        \"FETCH\",\n        \"FETCHBOOLEAN\",\n        \"FETCHDOUBLE\",\n        \"FETCHLONG\",\n        \"FETCHSTRING\",\n        \"FFT\",\n        \"FFTAP\",\n        \"FFTWINDOW\",\n        \"FILL\",\n        \"FILLNEXT\",\n        \"FILLPREVIOUS\",\n        \"FILLTICKS\",\n        \"FILLVALUE\",\n        \"FILTER\",\n        \"FILTERBY\",\n        \"FIND\",\n        \"FINDSETS\",\n        \"FINDSTATS\",\n        \"FIRSTTICK\",\n        \"FLATTEN\",\n        \"FLOATBITS->\",\n        \"FLOOR\",\n        \"FLOORDIV\",\n        \"FLOORMOD\",\n        \"FORGET\",\n        \"FROMBIN\",\n        \"FROMBITS\",\n        \"FROMHEX\",\n        \"FUNCTIONS\",\n        \"FUSE\",\n        \"GEO.BUFFER\",\n        \"GEO.COVER\",\n        \"GEO.COVER.RL\",\n        \"GEO.DIFFERENCE\",\n        \"GEO.INTERSECTION\",\n        \"GEO.INTERSECTS\",\n        \"GEO.JSON\",\n        \"GEO.JSON.UNIFORM\",\n        \"GEO.NORMALIZE\",\n        \"GEO.OPTIMIZE\",\n        \"GEO.REGEXP\",\n        \"GEO.UNION\",\n        \"GEO.WITHIN\",\n        \"GEO.WKB\",\n        \"GEO.WKB.UNIFORM\",\n        \"GEO.WKT\",\n        \"GEO.WKT.UNIFORM\",\n        \"GEOCELL->\",\n        \"GEOHASH->\",\n        \"GEOPACK\",\n        \"GEOSHAPE->\",\n        \"GEOSHIFT\",\n        \"GEOSPLIT\",\n        \"GEOUNPACK\",\n        \"GET\",\n        \"GETEXPONENT\",\n        \"GETHOOK\",\n        \"GETSECTION\",\n        \"GOLDWRAP\",\n        \"GROUPBY\",\n        \"GRUBBSTEST\",\n        \"GTSHHCODE->\",\n        \"GZIP\",\n        \"HASH\",\n        \"HAVERSINE\",\n        \"HEADER\",\n        \"HEX->\",\n        \"HEXTOB64\",\n        \"HEXTOBIN\",\n        \"HHCODE->\",\n        \"HHCODE.BBOX\",\n        \"HHCODE.CENTER\",\n        \"HHCODE.EAST\",\n        \"HHCODE.NORTH\",\n        \"HHCODE.NORTH.EAST\",\n        \"HHCODE.NORTH.WEST\",\n        \"HHCODE.SOUTH\",\n        \"HHCODE.SOUTH.EAST\",\n        \"HHCODE.SOUTH.WEST\",\n        \"HHCODE.WEST\",\n        \"HIDE\",\n        \"HLOCATE\",\n        \"HULLSHAPE\",\n        \"HUMANDURATION\",\n        \"HYBRIDTEST\",\n        \"HYBRIDTEST2\",\n        \"HYPOT\",\n        \"IDENT\",\n        \"IDWT\",\n        \"IEEEREMAINDER\",\n        \"IFFT\",\n        \"IMMUTABLE\",\n        \"IMPORT\",\n        \"INCREMENTEXACT\",\n        \"INFLATE\",\n        \"INFO\",\n        \"INFOMODE\",\n        \"INTEGRATE\",\n        \"INTERPOLATE\",\n        \"INTERSECTION\",\n        \"INV\",\n        \"ISAUTHENTICATED\",\n        \"ISNULL\",\n        \"ISNaN\",\n        \"ISO8601\",\n        \"ISODURATION\",\n        \"ISONORMALIZE\",\n        \"JOIN\",\n        \"JSON->\",\n        \"JSONLOOSE\",\n        \"JSONSTACK\",\n        \"JSONSTRICT\",\n        \"KEYLIST\",\n        \"KURTOSIS\",\n        \"LABELS\",\n        \"LASTACTIVITY\",\n        \"LASTBUCKET\",\n        \"LASTSORT\",\n        \"LASTTICK\",\n        \"LBOUNDS\",\n        \"LFLATMAP\",\n        \"LIMIT\",\n        \"LINEOFF\",\n        \"LINEON\",\n        \"LIST->\",\n        \"LMAP\",\n        \"LOAD\",\n        \"LOCATIONOFFSET\",\n        \"LOCATIONS\",\n        \"LOCSTRINGS\",\n        \"LOG\",\n        \"LOG10\",\n        \"LOG1P\",\n        \"LOGEVENT->\",\n        \"LOGMSG\",\n        \"LOWESS\",\n        \"LR\",\n        \"LSORT\",\n        \"LTTB\",\n        \"MACROBUCKETIZER\",\n        \"MACROCONFIG\",\n        \"MACROCONFIGDEFAULT\",\n        \"MACROCONFIGSECRET\",\n        \"MACROFILLER\",\n        \"MACROTTL\",\n        \"MAKEGTS\",\n        \"MAN\",\n        \"MAP\",\n        \"MAP->\",\n        \"MAPID\",\n        \"MARK\",\n        \"MAT->\",\n        \"MATCH\",\n        \"MATCHER\",\n        \"MAX\",\n        \"MAXBUCKETS\",\n        \"MAXDEPTH\",\n        \"MAXGEOCELLS\",\n        \"MAXGTS\",\n        \"MAXJSON\",\n        \"MAXLONG\",\n        \"MAXLOOP\",\n        \"MAXOPS\",\n        \"MAXPIXELS\",\n        \"MAXRECURSION\",\n        \"MAXSYMBOLS\",\n        \"MAXURLFETCHCOUNT\",\n        \"MAXURLFETCHSIZE\",\n        \"MD5\",\n        \"MERGE\",\n        \"META\",\n        \"METADIFF\",\n        \"METAOFF\",\n        \"METAON\",\n        \"METASET\",\n        \"METASORT\",\n        \"MIN\",\n        \"MINLONG\",\n        \"MINREV\",\n        \"MMAP\",\n        \"MODE\",\n        \"MONOTONIC\",\n        \"MOTIONSPLIT\",\n        \"MSORT\",\n        \"MSTU\",\n        \"MULTIPLYEXACT\",\n        \"MUSIGMA\",\n        \"MUTEX\",\n        \"MVELEVATIONS\",\n        \"MVHHCODES\",\n        \"MVINDEXSPLIT\",\n        \"MVLOCATIONS\",\n        \"MVTICKS\",\n        \"MVTICKSPLIT\",\n        \"MVVALUES\",\n        \"NAME\",\n        \"NBOUNDS\",\n        \"NDEBUGON\",\n        \"NEGATEEXACT\",\n        \"NEWENCODER\",\n        \"NEWGTS\",\n        \"NEXTAFTER\",\n        \"NEXTDOWN\",\n        \"NEXTUP\",\n        \"NOLOG\",\n        \"NONEMPTY\",\n        \"NONNULL\",\n        \"NOOP\",\n        \"NORMALIZE\",\n        \"NOT\",\n        \"NOTAFTER\",\n        \"NOTBEFORE\",\n        \"NOTIMINGS\",\n        \"NOW\",\n        \"NPDF\",\n        \"NPEEK\",\n        \"NSUMSUMSQ\",\n        \"ONLYBUCKETS\",\n        \"OPB64->\",\n        \"OPB64TOHEX\",\n        \"OPS\",\n        \"OPTDTW\",\n        \"OPTIMIZE\",\n        \"OR\",\n        \"PACK\",\n        \"PAPPLY\",\n        \"PARSE\",\n        \"PARSESELECTOR\",\n        \"PARSEVALUE\",\n        \"PARTITION\",\n        \"PATTERNDETECTION\",\n        \"PATTERNS\",\n        \"PEEK\",\n        \"PEEKN\",\n        \"PERMUTE\",\n        \"PFILTER\",\n        \"PGraphics\",\n        \"PI\",\n        \"PICK\",\n        \"PICKLE->\",\n        \"PIGSCHEMA\",\n        \"PIVOT\",\n        \"PIVOTSTRICT\",\n        \"POPR\",\n        \"PREDUCE\",\n        \"PRNG\",\n        \"PROB\",\n        \"PROBABILITY\",\n        \"PSTACK\",\n        \"PUSHR\",\n        \"PUT\",\n        \"Palpha\",\n        \"Parc\",\n        \"Pbackground\",\n        \"PbeginContour\",\n        \"PbeginShape\",\n        \"Pbezier\",\n        \"PbezierDetail\",\n        \"PbezierPoint\",\n        \"PbezierTangent\",\n        \"PbezierVertex\",\n        \"Pblend\",\n        \"PblendMode\",\n        \"Pblue\",\n        \"Pbox\",\n        \"Pbrightness\",\n        \"Pclear\",\n        \"Pclip\",\n        \"Pcolor\",\n        \"PcolorMode\",\n        \"Pconstrain\",\n        \"Pcopy\",\n        \"PcreateFont\",\n        \"Pcurve\",\n        \"PcurveDetail\",\n        \"PcurvePoint\",\n        \"PcurveTangent\",\n        \"PcurveTightness\",\n        \"PcurveVertex\",\n        \"Pdecode\",\n        \"Pdist\",\n        \"Pellipse\",\n        \"PellipseMode\",\n        \"Pencode\",\n        \"PendContour\",\n        \"PendShape\",\n        \"Pfill\",\n        \"Pfilter\",\n        \"Pget\",\n        \"Pgreen\",\n        \"Phue\",\n        \"Pimage\",\n        \"PimageMode\",\n        \"Plerp\",\n        \"PlerpColor\",\n        \"Pline\",\n        \"PloadShape\",\n        \"Pmag\",\n        \"Pmap\",\n        \"Pmask\",\n        \"PnoClip\",\n        \"PnoFill\",\n        \"PnoStroke\",\n        \"PnoTint\",\n        \"Pnorm\",\n        \"Ppixels\",\n        \"Ppoint\",\n        \"PpopMatrix\",\n        \"PpopStyle\",\n        \"PpushMatrix\",\n        \"PpushStyle\",\n        \"Pquad\",\n        \"PquadraticVertex\",\n        \"Prect\",\n        \"PrectMode\",\n        \"Pred\",\n        \"PresetMatrix\",\n        \"Protate\",\n        \"Psaturation\",\n        \"Pscale\",\n        \"Pset\",\n        \"Pshape\",\n        \"PshapeMode\",\n        \"PshearX\",\n        \"PshearY\",\n        \"Psize\",\n        \"Psphere\",\n        \"PsphereDetail\",\n        \"Pstroke\",\n        \"PstrokeCap\",\n        \"PstrokeJoin\",\n        \"PstrokeWeight\",\n        \"Ptext\",\n        \"PtextAlign\",\n        \"PtextAscent\",\n        \"PtextDescent\",\n        \"PtextFont\",\n        \"PtextLeading\",\n        \"PtextMode\",\n        \"PtextSize\",\n        \"PtextWidth\",\n        \"Ptint\",\n        \"PtoImage\",\n        \"Ptranslate\",\n        \"Ptriangle\",\n        \"PupdatePixels\",\n        \"Pvertex\",\n        \"Q->\",\n        \"QCONJUGATE\",\n        \"QDIVIDE\",\n        \"QMULTIPLY\",\n        \"QROTATE\",\n        \"QROTATION\",\n        \"QUANTIZE\",\n        \"RAND\",\n        \"RANDOM\",\n        \"RANDPDF\",\n        \"RANGE\",\n        \"RANGECOMPACT\",\n        \"RAWDTW\",\n        \"REDEFS\",\n        \"REDUCE\",\n        \"RELABEL\",\n        \"REMOVE\",\n        \"REMOVETICK\",\n        \"RENAME\",\n        \"REOPTALT\",\n        \"REPLACE\",\n        \"REPLACEALL\",\n        \"REPORT\",\n        \"RESET\",\n        \"RESETS\",\n        \"RESHAPE\",\n        \"RESTORE\",\n        \"REV\",\n        \"REVBITS\",\n        \"REVERSE\",\n        \"REXEC\",\n        \"REXECZ\",\n        \"RINT\",\n        \"RLOWESS\",\n        \"ROLL\",\n        \"ROLLD\",\n        \"ROT\",\n        \"ROTATIONQ\",\n        \"ROUND\",\n        \"RSADECRYPT\",\n        \"RSAENCRYPT\",\n        \"RSAGEN\",\n        \"RSAPRIVATE\",\n        \"RSAPUBLIC\",\n        \"RSASIGN\",\n        \"RSAVERIFY\",\n        \"RSORT\",\n        \"RTFM\",\n        \"RUN\",\n        \"RUNNERNONCE\",\n        \"RUNR\",\n        \"RVALUESORT\",\n        \"SAVE\",\n        \"SCALB\",\n        \"SECTION\",\n        \"SECURE\",\n        \"SECUREKEY\",\n        \"SENSISION.DUMP\",\n        \"SENSISION.DUMPEVENTS\",\n        \"SENSISION.EVENT\",\n        \"SENSISION.GET\",\n        \"SENSISION.SET\",\n        \"SENSISION.UPDATE\",\n        \"SET\",\n        \"SET->\",\n        \"SETATTRIBUTES\",\n        \"SETMACROCONFIG\",\n        \"SETVALUE\",\n        \"SHA1\",\n        \"SHA1HMAC\",\n        \"SHA256\",\n        \"SHA256HMAC\",\n        \"SHAPE\",\n        \"SHMLOAD\",\n        \"SHMSTORE\",\n        \"SHOW\",\n        \"SHRINK\",\n        \"SHUFFLE\",\n        \"SIGNUM\",\n        \"SIN\",\n        \"SINGLEEXPONENTIALSMOOTHING\",\n        \"SINH\",\n        \"SIZE\",\n        \"SKEWNESS\",\n        \"SMARTPARSE\",\n        \"SNAPSHOT\",\n        \"SNAPSHOTALL\",\n        \"SNAPSHOTALLTOMARK\",\n        \"SNAPSHOTCOPY\",\n        \"SNAPSHOTCOPYALL\",\n        \"SNAPSHOTCOPYALLTOMARK\",\n        \"SNAPSHOTCOPYN\",\n        \"SNAPSHOTCOPYTOMARK\",\n        \"SNAPSHOTN\",\n        \"SNAPSHOTTOMARK\",\n        \"SORT\",\n        \"SORTBY\",\n        \"SORTWITH\",\n        \"SPLIT\",\n        \"SQRT\",\n        \"SRAND\",\n        \"SRANDPDF\",\n        \"STACKATTRIBUTE\",\n        \"STACKPSSECRET\",\n        \"STACKTOLIST\",\n        \"STANDARDIZE\",\n        \"STDERR\",\n        \"STDOUT\",\n        \"STL\",\n        \"STLESDTEST\",\n        \"STOP\",\n        \"STORE\",\n        \"STRICTPARTITION\",\n        \"STRINGFORMAT\",\n        \"STU\",\n        \"SUBLIST\",\n        \"SUBMAP\",\n        \"SUBSTRING\",\n        \"SUBTRACTEXACT\",\n        \"SWAP\",\n        \"SYMBOLS\",\n        \"SYNC\",\n        \"T\",\n        \"TAN\",\n        \"TANH\",\n        \"TDESCRIBE\",\n        \"TEMPLATE\",\n        \"THRESHOLDTEST\",\n        \"TICKINDEX\",\n        \"TICKLIST\",\n        \"TICKS\",\n        \"TIMEBOX\",\n        \"TIMECLIP\",\n        \"TIMED\",\n        \"TIMEMODULO\",\n        \"TIMEOFF\",\n        \"TIMEON\",\n        \"TIMESCALE\",\n        \"TIMESHIFT\",\n        \"TIMESPLIT\",\n        \"TIMINGS\",\n        \"TLTTB\",\n        \"TOBIN\",\n        \"TOBITS\",\n        \"TOBOOLEAN\",\n        \"TODEGREES\",\n        \"TODOUBLE\",\n        \"TOHEX\",\n        \"TOINTEXACT\",\n        \"TOKENDUMP\",\n        \"TOKENGEN\",\n        \"TOKENINFO\",\n        \"TOKENSECRET\",\n        \"TOLONG\",\n        \"TOLOWER\",\n        \"TORADIANS\",\n        \"TOSELECTOR\",\n        \"TOSTRING\",\n        \"TOTIMESTAMP\",\n        \"TOUPPER\",\n        \"TR\",\n        \"TRANSPOSE\",\n        \"TRIM\",\n        \"TSELEMENTS\",\n        \"TSELEMENTS->\",\n        \"TYPEOF\",\n        \"ULP\",\n        \"UNBUCKETIZE\",\n        \"UNBUCKETIZE.CALENDAR\",\n        \"UNGZIP\",\n        \"UNION\",\n        \"UNIQUE\",\n        \"UNLIST\",\n        \"UNMAP\",\n        \"UNPACK\",\n        \"UNSECURE\",\n        \"UNSET\",\n        \"UNWRAP\",\n        \"UNWRAPEMPTY\",\n        \"UNWRAPENCODER\",\n        \"UNWRAPSIZE\",\n        \"UPDATE\",\n        \"UPDATEOFF\",\n        \"UPDATEON\",\n        \"URLDECODE\",\n        \"URLENCODE\",\n        \"URLFETCH\",\n        \"UUID\",\n        \"V->\",\n        \"VALUEDEDUP\",\n        \"VALUEHISTOGRAM\",\n        \"VALUELIST\",\n        \"VALUES\",\n        \"VALUESORT\",\n        \"VALUESPLIT\",\n        \"VARINT->\",\n        \"VARS\",\n        \"VEC->\",\n        \"WEBCALL\",\n        \"WF.ADDREPO\",\n        \"WF.GETREPOS\",\n        \"WF.SETREPOS\",\n        \"WFOFF\",\n        \"WFON\",\n        \"WRAP\",\n        \"WRAPFAST\",\n        \"WRAPMV\",\n        \"WRAPMV!\",\n        \"WRAPOPT\",\n        \"WRAPRAW\",\n        \"WRAPRAWOPT\",\n        \"WSINFO\",\n        \"WSKILL\",\n        \"WSKILLSESSION\",\n        \"WSNAME\",\n        \"WSPS\",\n        \"WSSESSION\",\n        \"WSSTACK\",\n        \"WSSTOP\",\n        \"WSSTOPSESSION\",\n        \"Z->\",\n        \"ZDISCORDS\",\n        \"ZDTW\",\n        \"ZIP\",\n        \"ZPATTERNDETECTION\",\n        \"ZPATTERNS\",\n        \"ZSCORE\",\n        \"ZSCORETEST\",\n        \"[\",\n        \"[[\",\n        \"[[]]\",\n        \"[]\",\n        \"]\",\n        \"]]\",\n        \"^\",\n        \"bucketizer.and\",\n        \"bucketizer.or\",\n        \"d\",\n        \"e\",\n        \"filler.interpolate\",\n        \"filler.next\",\n        \"filler.previous\",\n        \"filler.trend\",\n        \"filter.latencies\",\n        \"h\",\n        \"m\",\n        \"mapper.and\",\n        \"mapper.finite\",\n        \"mapper.geo.approximate\",\n        \"mapper.geo.clear\",\n        \"mapper.geo.fence\",\n        \"mapper.geo.outside\",\n        \"mapper.geo.within\",\n        \"mapper.hdist\",\n        \"mapper.median\",\n        \"mapper.median.forbid-nulls\",\n        \"mapper.mod\",\n        \"mapper.npdf\",\n        \"mapper.or\",\n        \"mapper.percentile\",\n        \"mapper.truecourse\",\n        \"max.tick.sliding.window\",\n        \"max.time.sliding.window\",\n        \"ms\",\n        \"ns\",\n        \"op.add\",\n        \"op.add.ignore-nulls\",\n        \"op.and\",\n        \"op.and.ignore-nulls\",\n        \"op.div\",\n        \"op.eq\",\n        \"op.ge\",\n        \"op.gt\",\n        \"op.le\",\n        \"op.lt\",\n        \"op.mask\",\n        \"op.mul\",\n        \"op.mul.ignore-nulls\",\n        \"op.ne\",\n        \"op.negmask\",\n        \"op.or\",\n        \"op.or.ignore-nulls\",\n        \"op.sub\",\n        \"pi\",\n        \"ps\",\n        \"reducer.and\",\n        \"reducer.and.exclude-nulls\",\n        \"s\",\n        \"us\",\n        \"w\",\n        \"{\",\n        \"{}\",\n        \"|\",\n        \"||\",\n        \"}\",\n        \"~\",\n        \"~=\"\n    ],\n    \"constants\": [\n        \"E\",\n        \"F\",\n        \"MAXLONG\",\n        \"MINLONG\",\n        \"NULL\",\n        \"NaN\",\n        \"PI\",\n        \"T\",\n        \"e\",\n        \"pi\"\n    ],\n    \"functions\": [\n        \"BUCKETIZE\",\n        \"BUCKETIZE.CALENDAR\",\n        \"FILTER\",\n        \"MACROBUCKETIZER\",\n        \"MACROFILTER\",\n        \"MACROMAPPER\",\n        \"MACROREDUCER\",\n        \"MAP\",\n        \"PFILTER\",\n        \"PREDUCE\",\n        \"REDUCE\",\n        \"STRICTMAPPER\",\n        \"STRICTREDUCER\",\n        \"UNBUCKETIZE.CALENDAR\",\n        \"bucketizer.and\",\n        \"bucketizer.count\",\n        \"bucketizer.count.exclude-nulls\",\n        \"bucketizer.count.include-nulls\",\n        \"bucketizer.count.nonnull\",\n        \"bucketizer.first\",\n        \"bucketizer.join\",\n        \"bucketizer.join.forbid-nulls\",\n        \"bucketizer.last\",\n        \"bucketizer.mad\",\n        \"bucketizer.max\",\n        \"bucketizer.max.forbid-nulls\",\n        \"bucketizer.mean\",\n        \"bucketizer.mean.circular\",\n        \"bucketizer.mean.circular.exclude-nulls\",\n        \"bucketizer.mean.exclude-nulls\",\n        \"bucketizer.median\",\n        \"bucketizer.median.forbid-nulls\",\n        \"bucketizer.min\",\n        \"bucketizer.min.forbid-nulls\",\n        \"bucketizer.or\",\n        \"bucketizer.percentile\",\n        \"bucketizer.rms\",\n        \"bucketizer.sd\",\n        \"bucketizer.sd.forbid-nulls\",\n        \"bucketizer.sum\",\n        \"bucketizer.sum.forbid-nulls\",\n        \"filter.all.eq\",\n        \"filter.all.ge\",\n        \"filter.all.gt\",\n        \"filter.all.le\",\n        \"filter.all.lt\",\n        \"filter.all.ne\",\n        \"filter.any.eq\",\n        \"filter.any.ge\",\n        \"filter.any.gt\",\n        \"filter.any.le\",\n        \"filter.any.lt\",\n        \"filter.any.ne\",\n        \"filter.byattr\",\n        \"filter.byclass\",\n        \"filter.bylabels\",\n        \"filter.bylabelsattr\",\n        \"filter.bymetadata\",\n        \"filter.byselector\",\n        \"filter.bysize\",\n        \"filter.last.eq\",\n        \"filter.last.ge\",\n        \"filter.last.gt\",\n        \"filter.last.le\",\n        \"filter.last.lt\",\n        \"filter.last.ne\",\n        \"filter.latencies\",\n        \"mapper.abs\",\n        \"mapper.add\",\n        \"mapper.and\",\n        \"mapper.ceil\",\n        \"mapper.count\",\n        \"mapper.count.exclude-nulls\",\n        \"mapper.count.include-nulls\",\n        \"mapper.count.nonnull\",\n        \"mapper.day\",\n        \"mapper.delta\",\n        \"mapper.dotproduct\",\n        \"mapper.dotproduct.positive\",\n        \"mapper.dotproduct.sigmoid\",\n        \"mapper.dotproduct.tanh\",\n        \"mapper.eq\",\n        \"mapper.eq.elev\",\n        \"mapper.eq.hhcode\",\n        \"mapper.eq.lat\",\n        \"mapper.eq.lon\",\n        \"mapper.eq.tick\",\n        \"mapper.exp\",\n        \"mapper.finite\",\n        \"mapper.first\",\n        \"mapper.floor\",\n        \"mapper.ge\",\n        \"mapper.ge.elev\",\n        \"mapper.ge.hhcode\",\n        \"mapper.ge.lat\",\n        \"mapper.ge.lon\",\n        \"mapper.ge.tick\",\n        \"mapper.geo.approximate\",\n        \"mapper.geo.clear\",\n        \"mapper.geo.fence\",\n        \"mapper.geo.outside\",\n        \"mapper.geo.within\",\n        \"mapper.gt\",\n        \"mapper.gt.elev\",\n        \"mapper.gt.hhcode\",\n        \"mapper.gt.lat\",\n        \"mapper.gt.lon\",\n        \"mapper.gt.tick\",\n        \"mapper.hdist\",\n        \"mapper.highest\",\n        \"mapper.hour\",\n        \"mapper.hspeed\",\n        \"mapper.join\",\n        \"mapper.join.forbid-nulls\",\n        \"mapper.kernel.cosine\",\n        \"mapper.kernel.epanechnikov\",\n        \"mapper.kernel.gaussian\",\n        \"mapper.kernel.logistic\",\n        \"mapper.kernel.quartic\",\n        \"mapper.kernel.silverman\",\n        \"mapper.kernel.triangular\",\n        \"mapper.kernel.tricube\",\n        \"mapper.kernel.triweight\",\n        \"mapper.kernel.uniform\",\n        \"mapper.last\",\n        \"mapper.le\",\n        \"mapper.le.elev\",\n        \"mapper.le.hhcode\",\n        \"mapper.le.lat\",\n        \"mapper.le.lon\",\n        \"mapper.le.tick\",\n        \"mapper.log\",\n        \"mapper.lowest\",\n        \"mapper.lt\",\n        \"mapper.lt.elev\",\n        \"mapper.lt.hhcode\",\n        \"mapper.lt.lat\",\n        \"mapper.lt.lon\",\n        \"mapper.lt.tick\",\n        \"mapper.mad\",\n        \"mapper.max\",\n        \"mapper.max.forbid-nulls\",\n        \"mapper.max.x\",\n        \"mapper.mean\",\n        \"mapper.mean.circular\",\n        \"mapper.mean.circular.exclude-nulls\",\n        \"mapper.mean.exclude-nulls\",\n        \"mapper.median\",\n        \"mapper.median.forbid-nulls\",\n        \"mapper.min\",\n        \"mapper.min.forbid-nulls\",\n        \"mapper.min.x\",\n        \"mapper.minute\",\n        \"mapper.mod\",\n        \"mapper.month\",\n        \"mapper.mul\",\n        \"mapper.ne\",\n        \"mapper.ne.elev\",\n        \"mapper.ne.hhcode\",\n        \"mapper.ne.lat\",\n        \"mapper.ne.lon\",\n        \"mapper.ne.tick\",\n        \"mapper.npdf\",\n        \"mapper.or\",\n        \"mapper.parsedouble\",\n        \"mapper.percentile\",\n        \"mapper.pow\",\n        \"mapper.product\",\n        \"mapper.rate\",\n        \"mapper.replace\",\n        \"mapper.rms\",\n        \"mapper.round\",\n        \"mapper.sd\",\n        \"mapper.sd.forbid-nulls\",\n        \"mapper.second\",\n        \"mapper.sigmoid\",\n        \"mapper.sqrt\",\n        \"mapper.sum\",\n        \"mapper.sum.forbid-nulls\",\n        \"mapper.tanh\",\n        \"mapper.tick\",\n        \"mapper.toboolean\",\n        \"mapper.todouble\",\n        \"mapper.tolong\",\n        \"mapper.tostring\",\n        \"mapper.truecourse\",\n        \"mapper.var\",\n        \"mapper.var.forbid-nulls\",\n        \"mapper.vdist\",\n        \"mapper.vspeed\",\n        \"mapper.weekday\",\n        \"mapper.year\",\n        \"max.tick.sliding.window\",\n        \"max.time.sliding.window\",\n        \"reducer.and\",\n        \"reducer.and.exclude-nulls\",\n        \"reducer.argmax\",\n        \"reducer.argmin\",\n        \"reducer.count\",\n        \"reducer.count.exclude-nulls\",\n        \"reducer.count.include-nulls\",\n        \"reducer.count.nonnull\",\n        \"reducer.join\",\n        \"reducer.join.forbid-nulls\",\n        \"reducer.join.nonnull\",\n        \"reducer.join.urlencoded\",\n        \"reducer.mad\",\n        \"reducer.max\",\n        \"reducer.max.forbid-nulls\",\n        \"reducer.max.nonnull\",\n        \"reducer.mean\",\n        \"reducer.mean.circular\",\n        \"reducer.mean.circular.exclude-nulls\",\n        \"reducer.mean.exclude-nulls\",\n        \"reducer.median\",\n        \"reducer.median.forbid-nulls\",\n        \"reducer.min\",\n        \"reducer.min.forbid-nulls\",\n        \"reducer.min.nonnull\",\n        \"reducer.or\",\n        \"reducer.or.exclude-nulls\",\n        \"reducer.percentile\",\n        \"reducer.product\",\n        \"reducer.rms\",\n        \"reducer.rms.exclude-nulls\",\n        \"reducer.sd\",\n        \"reducer.sd.forbid-nulls\",\n        \"reducer.shannonentropy.0\",\n        \"reducer.shannonentropy.1\",\n        \"reducer.sum\",\n        \"reducer.sum.forbid-nulls\",\n        \"reducer.sum.nonnull\",\n        \"reducer.var\",\n        \"reducer.var.forbid-nulls\"\n    ],\n    \"control\": [\n        \"BREAK\",\n        \"CHECKMACRO\",\n        \"CONTINUE\",\n        \"CUDF\",\n        \"DEFINED\",\n        \"DEFINEDMACRO\",\n        \"EVAL\",\n        \"FAIL\",\n        \"FOR\",\n        \"FOREACH\",\n        \"FORSTEP\",\n        \"IFT\",\n        \"IFTE\",\n        \"MSGFAIL\",\n        \"NRETURN\",\n        \"RETHROW\",\n        \"RETURN\",\n        \"SWITCH\",\n        \"TRY\",\n        \"UDF\",\n        \"UNTIL\",\n        \"WHILE\"\n    ],\n    \"operators\": [\n        \"!\",\n        \"!=\",\n        \"%\",\n        \"&\",\n        \"&&\",\n        \"*\",\n        \"**\",\n        \"+\",\n        \"+!\",\n        \"-\",\n        \"/\",\n        \"<\",\n        \"<<\",\n        \"<=\",\n        \"==\",\n        \">\",\n        \">=\",\n        \">>\",\n        \">>>\",\n        \"AND\",\n        \"NOT\",\n        \"OR\",\n        \"^\",\n        \"|\",\n        \"||\",\n        \"~\",\n        \"~=\"\n    ],\n    \"escapes\": \"\\\\\\\\(?:[abfnrtv\\\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})\",\n    \"tokenizer\": {\n        \"root\": [\n            [\n                \"\\\\@[A-Za-z0-9._\\\\/]+\",\n                \"variable\"\n            ],\n            [\n                \"\\\\$[A-Za-z0-9._\\\\/]+\",\n                \"variable\"\n            ],\n            [\n                \"true|false\",\n                \"number\"\n            ],\n            [\n                \"[A-Za-z_][.\\\\w$]*\",\n                {\n                    \"cases\": {\n                        \"@constants\": \"regexp\",\n                        \"@keywords\": \"keyword\",\n                        \"@functions\": \"type\",\n                        \"@control\": \"metatag\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                \"[{}()[\\\\]]\",\n                \"@brackets\"\n            ],\n            [\n                \"\\\\d*\\\\.\\\\d+([eE][-+]?\\\\d+)?[fFdD]?\",\n                \"number.float\"\n            ],\n            [\n                \"0[xX][0-9a-fA-F_]*[0-9a-fA-F][Ll]?\",\n                \"number.hex\"\n            ],\n            [\n                \"0[0-7_]*[0-7][Ll]?\",\n                \"number.octal\"\n            ],\n            [\n                \"0[bB][0-1_]*[0-1][Ll]?\",\n                \"number.binary\"\n            ],\n            [\n                \"\\\\d+[lL]?\",\n                \"number\"\n            ],\n            {\n                \"include\": \"@whitespace\"\n            },\n            [\n                \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*$\",\n                \"string.invalid\"\n            ],\n            [\n                \"\\\"\",\n                \"string\",\n                \"@string\"\n            ],\n            [\n                \"'([^'\\\\\\\\]|\\\\\\\\.)*$\",\n                \"string.invalid\"\n            ],\n            [\n                \"'\",\n                \"string\",\n                \"@string2\"\n            ],\n            [\n                \"<'\",\n                \"string\",\n                \"@string3\"\n            ]\n        ],\n        \"whitespace\": [\n            [\n                \"[ \\\\t\\\\r\\\\n]+\",\n                \"white\"\n            ],\n            [\n                \"\\\\/\\\\*\",\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                \"\\\\/\\\\/.*$\",\n                \"comment\"\n            ]\n        ],\n        \"comment\": [\n            [\n                \"[^\\\\/*]+\",\n                \"comment\"\n            ],\n            [\n                \"\\\\/\\\\*\",\n                \"comment.invalid\"\n            ],\n            [\n                \"\\\\*/\",\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                \"[\\\\/*]\",\n                \"comment\"\n            ]\n        ],\n        \"string\": [\n            [\n                \"[^\\\\\\\"]+\",\n                \"string\"\n            ],\n            [\n                \"@escapes\",\n                \"string.escape\"\n            ],\n            [\n                \"\\\\.\",\n                \"string.escape.invalid\"\n            ],\n            [\n                \"\\\"\",\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        \"string2\": [\n            [\n                \"[^\\\\']+\",\n                \"string\"\n            ],\n            [\n                \"@escapes\",\n                \"string.escape\"\n            ],\n            [\n                \"\\\\.\",\n                \"string.escape.invalid\"\n            ],\n            [\n                \"'\",\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        \"string3\": [\n            [\n                \"[^\\\\(<')]+\",\n                \"string\"\n            ],\n            [\n                \"'>\",\n                \"string\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n      }","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\nimport {languages} from 'monaco-editor';\nimport IndentAction = languages.IndentAction;\n\nexport class WSLanguageConfiguration {\n  getConfiguration(): languages.LanguageConfiguration {\n    return {\n      wordPattern: /[^\\s\\t]+/,\n      comments: {\n        lineComment: '//',\n        blockComment: ['/**', '*/'],\n      },\n      brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<%', '%>'],\n        ['<\\'', '\\'>'],\n        ['[[', ']]'],\n      ],\n      autoClosingPairs: [\n        {open: '{', close: '}'},\n        {open: '[', close: ']'},\n        {open: '(', close: ')'},\n        {open: '<%', close: '%>'},\n        {open: '[[', close: ']]'},\n        {open: ' \\'', close: '\\'', notIn: ['string', 'comment']},\n        {open: '<\\'', close: '\\'>'},\n        {open: '\"', close: '\"', notIn: ['string']},\n        {open: '`', close: '`', notIn: ['string', 'comment']},\n        {open: '/**', close: ' */', notIn: ['string']},\n      ],\n      surroundingPairs: [\n        {open: '{', close: '}'},\n        {open: '[', close: ']'},\n        {open: '(', close: ')'},\n        {open: '[[', close: ']]'},\n        {open: '<%', close: '%>'},\n        {open: '<\\'', close: '\\'>'},\n        {open: '\\'', close: '\\''},\n        {open: '\"', close: '\"'},\n        {open: '`', close: '`'},\n      ],\n      onEnterRules: [\n        {\n          // e.g. /** | */\n          beforeText: /^\\s*\\/\\*\\*(?!\\/)([^*]|\\*(?!\\/))*$/,\n          afterText: /^\\s*\\*\\/$/,\n          action: {indentAction: IndentAction.IndentOutdent, appendText: ' * '},\n        },\n        {\n          // e.g. /** ...|\n          beforeText: /^\\s*\\/\\*\\*(?!\\/)([^*]|\\*(?!\\/))*$/,\n          action: {indentAction: IndentAction.None, appendText: ' * '},\n        },\n        {\n          // e.g.  * ...|\n          beforeText: /^(\\t|( {2}))* \\*( ([^*]|\\*(?!\\/))*)?$/,\n          action: {indentAction: IndentAction.None, appendText: '* '},\n        },\n        {\n          // e.g.  */|\n          beforeText: /^(\\t|( {2}))* \\*\\/\\s*$/,\n          action: {indentAction: IndentAction.None, removeText: 1},\n        },\n      ],\n    };\n  }\n}\n","export interface IEntry { description?: string; signature?: string; tags?: string[], since: string, OPB64name: string}\nexport interface IEntries { [name: string]: IEntry; }\nexport var globalfunctions: IEntries = {\"!\":{\"description\":\"Negates a boolean.\\n\\nThe `!` function is synonymous for [`NOT`](/doc/NOT). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nSince Warp 10™ 2.1, `!` can be applied on a boolean GTS to flip all values.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gtsinput` Since 2.1, a GTS with boolean value.\\n\\n@param `gtsresult` Since 2.1, a GTS with negated boolean value. GTS is not sorted by the operation. Metadata are kept.\\n\\n\",\"signature\":\"input<BOOLEAN>  !  result<BOOLEAN>\\ngtsinput<GTS>  !  gtsresult<GTS>\",\"tags\":[\"logic\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7F\"},\"!=\":{\"description\":\"Tests if both parameters are different.\\n\\nThe `!=` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are different, false otherwise.\\n\\nThe two parameters must be homogeneous of numeric, boolean or string types.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `!=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 !=` is strictly equivalent of a `42 mapper.ne` MAP operation, with a simplified syntax.\\n\\n@param `p1` First parameter to compare, anything except a GTS.\\n\\n@param `p2` Second parameter to compare, anything except a GTS.\\n\\n@param `result` True if p1 and p2 are different, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values different from constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is different from gts2 value.\\n\\n\",\"signature\":\"p1<ANY> p2<ANY>  !=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  !=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  !=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  !=  outputgts<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7Io\"},\"%\":{\"description\":\"The `%` operator consumes two parameters from the top of the stack and pushes back the remainder of the Euclidean division of the first one by the second one.\\n\\nThe two parameters must be of numeric types.\\n\\n@param `dividend` Number divided by divisor\\n\\n@param `divisor` Number used to divide dividend\\n\\n@param `modulo` Modulo of the two given parameters\\n\\n\",\"signature\":\"divisor<LONG> dividend<LONG>  %  modulo<LONG>\\ndivisor<DOUBLE> dividend<LONG>  %  modulo<DOUBLE>\\ndivisor<LONG> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<DOUBLE> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<COUNTER> dividend<COUNTER>  %  modulo<LONG>\\ndivisor<DOUBLE> dividend<COUNTER>  %  modulo<DOUBLE>\\ndivisor<COUNTER> dividend<DOUBLE>  %  modulo<DOUBLE>\\ndivisor<LONG> dividend<COUNTER>  %  modulo<LONG>\\ndivisor<COUNTER> dividend<LONG>  %  modulo<LONG>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8F\"},\"&\":{\"description\":\"Performs a bitwise **AND** operation.\\n\\nThe `&` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **AND**.\\n\\nSince Warp 10™ 2.1, `&` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be AND to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with AND between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts AND with mask\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  &  result<LONG>\\ninputgts<GTS> mask<LONG>  &  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  &  outputgts<GTS>\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8V\"},\"&&\":{\"description\":\"The `&&` operator is a synonymous for [`AND`](/doc/AND).\\n\\nIt performs a logical **&&** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `&&` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical && applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with && between each common tick input values.\\n\\n\",\"signature\":\"p1<BOOLEAN> p2<BOOLEAN>  &&  result<BOOLEAN>\\nl<LIST>  &&  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  &&  gtsresult<GTS>\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"8XN\"},\"(\":{\"description\":\"Starts a set creation.\\n\\nThe `(` function creates a set by pushing a mark onto the stack. This is a syntactic help to better present set constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\" (  mark<MARK>\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9.\"},\"()\":{\"description\":\"The `()` function creates an empty SET on the top of the stack.\\nA Set is a collection that cannot contain duplicate elements.\\n\\nThis is an implementation of java [HashSet](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html). NULL object is permitted. It makes no guarantees as to the iteration order of the set.\\n\\nThe SET object could not be represented on the stack.\\nIt has to be converted in a list to be displayed.\\n\\nStoring GTS into sets do not guarantee uniqueness. each GTS has a hidden id. see example.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newset` set instance, initialized with content.\\n\\n\",\"signature\":\"content<ANY>  ()  newset<SET>\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"91Z\"},\")\":{\"description\":\"Closes a currently open set and pushes it onto the stack.\\n\\nThe `)` function pops from the stack the elements of the set up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `set` The built set\\n\\n@param `mark` The mark indicating the deepest level to consider when building the set\\n\\n\",\"signature\":\"mark<MARK> v1<ANY> vN<ANY>  )  set<SET>\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9F\"},\"*\":{\"description\":\"The `*` operator consumes two parameters from the top of the stack and pushes back the result of multiplying both of them.\\n\\nIf you want to multiply two matrices together, they have to be of the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Multiplication result\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  *  result<NUMBER>\\np1<VECTOR> p2<NUMBER>  *  result<VECTOR>\\np1<NUMBER> p2<VECTOR>  *  result<VECTOR>\\np1<MATRIX> p2<NUMBER>  *  result<MATRIX>\\np1<NUMBER> p2<MATRIX>  *  result<MATRIX>\\np1<MATRIX> p2<VECTOR>  *  result<VECTOR>\\np1<VECTOR> p2<MATRIX>  *  result<VECTOR>\\np1<MATRIX> p2<MATRIX>  *  result<VECTOR>\\np2<GTS> p1<GTS>  *  result<GTS>\\np2<GTS> p1<NUMBER>  *  result<GTS>\\np2<NUMBER> p1<GTS>  *  result<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9V\"},\"**\":{\"description\":\"Returns the value of the first argument raised to the power of the second argument.\\n\\nThe `**` operator consumes two parameters from the top of the stack (a base **b** and an exponent **n**) and pushes back the result raising b to the power of n,\\ni.e. b<sup>n</sup>. For special cases see [pow()](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double- \\\"javadoc\\\").\\n\\nThe two parameters must be of numeric types.\\n\\n@param `b` First parameter, the base\\n\\n@param `n` Second parameter, the exponent\\n\\n@param `result` The result of b<sup>n</sup>\\n\\n\",\"signature\":\"b<LONG> n<LONG>  **  result<LONG>\\nb<DOUBLE> n<LONG>  **  result<DOUBLE>\\nb<LONG> n<DOUBLE>  **  result<DOUBLE>\\nb<DOUBLE> n<DOUBLE>  **  result<DOUBLE>\\nb<COUNTER> n<COUNTER>  **  result<LONG>\\nb<DOUBLE> n<COUNTER>  **  result<DOUBLE>\\nb<COUNTER> n<DOUBLE>  **  result<DOUBLE>\\nb<COUNTER> n<LONG>  **  result<LONG>\\nb<LONG> n<COUNTER>  **  result<LONG>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9Xc\"},\"+\":{\"description\":\"The `+` operator consumes two parameters from the top of the stack and pushes back the result of adding them.\\n\\nThe meaning of adding depends on the type of parameter:\\n\\n- If both parameters are numbers, the result is the sum of both numbers.\\n\\n- If both parameters are strings, the result is the concatenation of both strings.\\n- If both parameters are byte arrays, the result is the concatenation of both byte arrays (version 2.1+).\\n\\n- If the first parameter is a list, the + operator clones the list and appends the second parameter to the cloned list.\\n\\n- If the first parameter is a set, the + operator clones the set and appends the second parameter to the cloned set.\\n\\n- If both parameters are macros, the result is a macro concatenating the two others in any other case + with throw an exception.\\n\\n- If the first parameter is a vector, the + operator adds the second numeric parameter to each element of the vector.\\n- If the second parameter is a vector, the + operator adds the first numeric parameter to each element of the vector.\\n- If both parameters are vectors, the + operator adds each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If the first parameter is a matrix, the + operator adds the second numeric parameter to each element of the matrix.\\n- If the second parameter is a matrix, the + operator adds the first numeric parameter to each element of the matrix.\\n- If both parameters are matrices, the + operator adds each element of matrices which are on the same index. Matrices must be the same size.\\n- If one of the parameters is a Geo Time Series™, the result will be a Geo Time Series™ of type DOUBLE.\\n\\n@param `param1` First parameter\\n\\n@param `param2` Second parameter\\n\\n@param `result` Result of the addition\\n\\n\",\"signature\":\"param1<STRING> param2<STRING>  +  result<STRING>\\nparam1<LONG> param2<LONG>  +  result<LONG>\\nparam1<DOUBLE> param2<LONG>  +  result<DOUBLE>\\nparam1<COUNTER> param2<LONG>  +  result<LONG>\\nparam1<LONG> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<DOUBLE> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<COUNTER> param2<DOUBLE>  +  result<DOUBLE>\\nparam1<COUNTER> param2<COUNTER>  +  result<LONG>\\nparam1<DOUBLE> param2<COUNTER>  +  result<DOUBLE>\\nparam1<LONG> param2<COUNTER>  +  result<LONG>\\nparam1<LIST> param2<ANY>  +  result<LIST>\\nparam1<SET> param2<ANY>  +  result<SET>\\nparam1<VECTOR> param2<NUMBER>  +  result<VECTOR>\\nparam1<NUMBER> param2<VECTOR>  +  result<VECTOR>\\nparam1<VECTOR> param2<VECTOR>  +  result<VECTOR>\\nparam1<MACRO> param2<MACRO>  +  result<MACRO>\\nparam1<MATRIX> param2<NUMBER>  +  result<MATRIX>\\nparam1<NUMBER> param2<MATRIX>  +  result<MATRIX>\\nparam1<MATRIX> param2<MATRIX>  +  result<MATRIX>\\nparam2<GTS> param1<GTS>  +  result<GTS>\\nparam2<GTS> param1<DOUBLE>  +  result<GTS>\\nparam2<GTS> param1<LONG>  +  result<GTS>\\nparam2<GTS> param1<STRING>  +  result<GTS>\\nparam2<DOUBLE> param1<GTS>  +  result<GTS>\\nparam2<LONG> param1<GTS>  +  result<GTS>\\nparam2<STRING> param1<GTS>  +  result<GTS>\\nparam1<BYTES> param2<BYTES>  +  result<BYTES>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9k\"},\"+!\":{\"description\":\"The +! operator adds the element on top of the stack to the set or list below it. \\nThe element is added to the existing collection. \\n\\n\\n@param `input` reference to the list or set to be modified\\n\\n@param `output` copy of input list or set reference.\\n\\n@param `item` the item to append to inputlist. Depending on list content, could be any type.\\n\\n\",\"signature\":\"input<LIST> item<ANY>  +!  output<LIST>\\ninput<SET> item<ANY>  +!  output<SET>\",\"tags\":[\"lists\",\"operators\"],\"since\":\"1.2.0\",\"OPB64name\":\"9m3\"},\"-\":{\"description\":\"Subtracts two parameters.\\n\\nThe `-` operator consumes two parameters from the top of the stack and pushes back the result of subtracting the second one from the first one.\\n\\n- If both parameters are numbers, the result is the subtraction of both numbers.\\n\\n- If both parameters are vectors, the - operator subtracts each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If both parameters are matrices, the - operator subtracts each element of matrices which are on the same index. Matrices must be the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Subtraction result\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  -  result<LONG>\\np1<LONG> p2<DOUBLE>  -  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  -  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  -  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  -  result<LONG>\\np1<COUNTER> p2<DOUBLE>  -  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  -  result<DOUBLE>\\np1<LONG> p2<COUNTER>  -  result<LONG>\\np1<COUNTER> p2<LONG>  -  result<LONG>\\np1<MATRIX> p2<MATRIX>  -  result<MATRIX>\\np1<VECTOR> p2<VECTOR>  -  result<VECTOR>\\np2<GTS> p1<GTS>  -  result<GTS>\\np2<GTS> p1<NUMBER>  -  result<GTS>\\np2<NUMBER> p1<GTS>  -  result<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"AF\"},\"->B64\":{\"description\":\"Encodes the string on top of the stack in [base64](https://en.wikipedia.org/wiki/Base64).\\n\\n@param `input` String or byte array to encode\\n\\n@param `result` Base64 encoded string\\n\\n\",\"signature\":\"input<STRING>  ->B64  result<STRING>\\ninput<BYTES>  ->B64  result<STRING>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYF\"},\"->B64URL\":{\"description\":\"Encodes the string on top of the stack in [base64url](https://en.wikipedia.org/wiki/Base64#Variants_summary_table).\\n\\n@param `input` String to encode\\n\\n@param `bytes` Byte array to encode\\n\\n@param `result` Base64url encoded string\\n\\n\",\"signature\":\"input<STRING>  ->B64URL  result<STRING>\\nbytes<BYTES>  ->B64URL  result<STRING>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYGKJZk\"},\"->BIN\":{\"description\":\"The ->BIN function converts the byte array or the string on top of the stack \\nto its binary representation.\\n\\nApplied on a string, `->BIN` replaces ` 'utf-8' ->BYTES ->BIN `\\n\\nIf the encoded content is not a \\nvalid UTF-8 representation, the resulting string will reflect that. \\n\\n@param `input` Any string or byte array.\\n\\n@param `output` Binary representation of the input.\\n\\n\",\"signature\":\"input<STRING>  ->BIN  output<STRING>\\ninput<BYTES>  ->BIN  output<STRING>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1HJs\"},\"->BYTES\":{\"description\":\"->BYTES function converts a string into a bytes array given a charset\\nand put the result on top of the stack.\\n\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\nBytes array cannot be represented on the stack.\\n\\n\\n@param `input` String input.\\n\\n@param `charset` Charset to use.\\n\\n@param `output` Byte array representation of input.\\n\\n\",\"signature\":\"input<STRING> charset<STRING>  ->BYTES  output<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1LKG4Jk\"},\"->DOUBLEBITS\":{\"description\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"signature\":\"number<NUMBER>  ->DOUBLEBITS  bits<LONG>\\ngts<GTS>  ->DOUBLEBITS  longgts<GTS>\",\"tags\":[\"math\",\"gts\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt3IpK1I3K1HKGI\"},\"->ENCODER\":{\"description\":\"The `->ENCODER` function takes a list of points and encode them in a single encoder. Each point is a list of ( timestamp, latitude, longitude, elevation, value ). Since 2.1.1, a point can also be a Geo Time Series™ or a wrapped one. In that case all the points of the Geo Time Series™ are added to the encoder.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `elements` List of list of ( timestamp, latitude, longitude, elevation, value ). See example to see which element(s) can be omitted.\\n\\n@param `lgts` A list of Geo Time Series™ instances.\\n\\n@param `lwrappedgts` A list of wrapped Geo Time Series™ instances, such as produced by [`WRAP`](/doc/WRAP).\\n\\n@param `lrawwrappedgts` A list of raw wrapped Geo Time Series™ instances, such as produced by [`WRAPRAW`](/doc/WRAPRAW).\\n\\n@param `output` Encoder\\n\\n\",\"signature\":\"elements<LIST>  ->ENCODER  output<GTSENCODER>\\nlgts<LIST<GTS>>  ->ENCODER  output<GTSENCODER>\\nlwrappedgts<LIST<STRING>>  ->ENCODER  output<GTSENCODER>\\nlrawwrappedgts<LIST<BYTES>>  ->ENCODER  output<GTSENCODER>\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt4IZCEG3KH\"},\"->ENCODERS\":{\"description\":\"The `->ENCODERS` function converts an encoder into one encoder per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content, when a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  ->ENCODERS  output<MAP>\\nwrappedencoder<STRING>  ->ENCODERS  output<MAP>\\nrawwrappedencoder<BYTES>  ->ENCODERS  output<MAP>\",\"tags\":[\"gts\",\"encoder\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AIt4IZCEG3KHJk\"},\"->FLOATBITS\":{\"description\":\"Converts a numeric value to a **FLOAT** then to a **LONG** value of the raw bits of its representation.\\n\\nOnly the lower 32 bits of the **LONG** value are significant.\\n\\n@param `input` Double to convert\\n\\n@param `result` Raw bits representation\\n\\n\",\"signature\":\"input<NUMBER>  ->FLOATBITS  result<LONG>\",\"tags\":[\"math\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt5I3x0K388K4B\"},\"->GEOCELL\":{\"description\":\"The `->GEOCELL` function converts a **STRING** or a **BYTES** HHCode prefix to a **LONG** geocell. The length of the input implicitly specifies the resolution of the cell.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `hhPrefixS` A HHCode prefix representing a cell. Resolution is twice the length of the **STRING**.\\n\\n@param `hhPrefixB` A HHCode prefix representing a cell. Resolution is four times the length of the **BYTES**.\\n\\n@param `geocell` The geocell representation.\\n\\n\",\"signature\":\"hhPrefixS<STRING>  ->GEOCELL  geocell<LONG>\\nhhPrefixB<BYTES>  ->GEOCELL  geocell<LONG>\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJx2GJlB\"},\"->GEOHASH\":{\"description\":\"The `->GEOHASH` function packs a latitude and a longitude into a STRING [Geohash](https://en.wikipedia.org/wiki/Geohash), converts a [HHCode](https://en.wikipedia.org/wiki/HHCode) into its Geohash counterpart, or converts a `GEOSHAPE` into a list of Geohashes covering the same geographical area.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `geohash` Geohash string packing the specified latitude and longitude.\\n\\n@param `hhcode` HHCode to transform.\\n\\n@param `shape` `GEOSHAPE` to convert.\\n\\n@param `geohashes` List of Geohashes covering the same area as `shape`.\\n\\n\",\"signature\":\"lat<DOUBLE> lon<DOUBLE>  ->GEOHASH  geohash<STRING>\\nhhcode<LONG>  ->GEOHASH  geohash<STRING>\\nshape<GEOSHAPE>  ->GEOHASH  geohashes<LIST<STRING>>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt6GJx7FKC7\"},\"->GEOJSON\":{\"description\":\"The `->GEOJSON` function translate the given GeoShape into a GeoJSON.\\n\\nThe resulting GeoJSON is a string representing a MultiPolygon geometry. By default, it defines the boundaries of the covered areas and any holes it these areas, if any.\\n\\nIt is also possible for this function to return a GeoJSON representing all the cells in the GeoShape.\\n\\n GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` The resulting GeoJSON.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` WKB bytes\\n\\n\",\"signature\":\"shape<GEOSHAPE>  ->GEOJSON  geojson<STRING>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->GEOJSON  geojson<STRING>\\nwkt<STRING>  ->GEOJSON  geojson<STRING>\\nwkb<BYTES>  ->GEOJSON  geojson<STRING>\",\"tags\":[\"geo\"],\"since\":\"2.4.1\",\"OPB64name\":\"AIt6GJx9JoxD\"},\"->GEOSHAPE\":{\"description\":\"The `->GEOSHAPE` function converts a list of **LONG** geocells or HHCode prefixes (**STRING** or **BYTES**) to a **GEOSHAPE**.\\n\\n@param `geocells` List of geocells, as **LONGs**.\\n\\n@param `hhPrefixesS` List of HHCode prefixes, as **STRINGs**.\\n\\n@param `hhPrefixesB` List of HHCode prefixes, as **BYTESs**.\\n\\n@param `geoshape` The resulting **GEOSHAPE**.\\n\\n\",\"signature\":\"geocells<LIST<LONG>>  ->GEOSHAPE  geoshape<GEOSHAPE>\\nhhPrefixesS<LIST<STRING>>  ->GEOSHAPE  geoshape<GEOSHAPE>\\nhhPrefixesB<LIST<BYTES>>  ->GEOSHAPE  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJxIH34FGF\"},\"->GTS\":{\"description\":\"The `->GTS` function converts an encoder into one GTS per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\n###### Since 2.4.0:\\n- `->GTS` function can also take a conversion MAP input. Using this conversion MAP, the output is always a list of GTS.\\n- The conversion map can also take a list of selectors for each output type.\\n- The conversion map can be empty: In this case, the GTS type is enforced by the type of the first element in the encoder input.\\n- The first selector match stops the research. It means key order matters. See Examples.\\n- A new '.type' label is added to each output GTS. This could be overriden with the 'label.type' parameter of the conversion MAP.\\n- `->GTS` function can handle encoders, or list of encoders.\\n\\n###### What is an encoder ?\\nA Geo Time Series™ is limited to the type of the first value stored.\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content.\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder. Values are GTS.\\n\\n@param `lencoder` List of encoders input (supported since 2.4.0).\\n\\n@param `lwrappedencoder` List of encoders after WRAP (supported since 2.4.0).\\n\\n@param `lrawwrappedencoder` List of encoders after WRAPRAW (supported since 2.4.0).\\n\\n@param `loutput` Map with a key/value per type encountered in the input encoder. Values are a list of GTS.\\n\\n@param `conversionmap` Map with type as keys, selectors or list of selectors as values. The special key `label` allow to change the default `.type` label. Set label to NULL to avoid any new label. The conversion map could be empty.\\n\\n@param `conversionoutput` A GTS, or a list of GTS.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  ->GTS  output<MAP>\\nwrappedencoder<STRING>  ->GTS  output<MAP>\\nrawwrappedencoder<BYTES>  ->GTS  output<MAP>\\nlencoder<LIST<GTSENCODER>>  ->GTS  loutput<MAP>\\nlwrappedencoder<LIST<STRING>>  ->GTS  loutput<MAP>\\nlrawwrappedencoder<LIST<BYTES>>  ->GTS  loutput<MAP>\\nencoder<GTSENCODER> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nwrappedencoder<STRING> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nrawwrappedencoder<BYTES> conversionmap<MAP>  ->GTS  conversionoutput<GTS>\\nlencoder<LIST<GTSENCODER>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\\nlwrappedencoder<LIST<STRING>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\\nlrawwrappedencoder<LIST<BYTES>> conversionmap<MAP>  ->GTS  conversionoutput<LIST<GTS>>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt6K4B\"},\"->GTSHHCODE\":{\"description\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"signature\":\"lat<NUMBER> lon<NUMBER>  ->GTSHHCODE  hhcode<STRING>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3J\"},\"->GTSHHCODELONG\":{\"description\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"signature\":\"lat<NUMBER> lon<NUMBER>  ->GTSHHCODELONG  hhcode<STRING>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3KBIot6\"},\"->HEX\":{\"description\":\"Decodes an hex encoded string or a byte array.\\nFor different encodings, use bytes array conversion [`BYTES->`](/doc/F__JGKBhEV).\\n\\n\\nApplied on a string, `->HEX` replaces ` 'utf-8' ->BYTES ->HEX `\\n\\nIf the encoded content is not a\\nvalid UTF-8 representation, the resulting string will reflect that.\\n\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Decoded string of input, assuming utf-8 encoding of input.\\n\\n\",\"signature\":\"input<STRING>  ->HEX  output<STRING>\\ninput<BYTES>  ->HEX  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt7GKV\"},\"->HHCODE\":{\"description\":\"The `->HHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"signature\":\"lat<NUMBER> lon<NUMBER>  ->HHCODE  hhcode<STRING>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt7H3CEG3J\"},\"->HHCODELONG\":{\"description\":\"The `->HHCODELONG` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"signature\":\"lat<NUMBER> lon<NUMBER>  ->HHCODELONG  hhcode<LONG>\",\"tags\":[\"geo\"],\"since\":\"1.2.5\",\"OPB64name\":\"AIt7H3CEG3KBIot6\"},\"->JSON\":{\"description\":\"The `->JSON` functions serialize structures containing numbers, strings, booleans, lists, vlists and maps which do not reference the same list/map multiple times.\\n\\n@param `object` Object to serialize\\n\\n@param `output` JSON formatted string\\n\\n\",\"signature\":\"object<ANY>  ->JSON  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt9JoxD\"},\"->LIST\":{\"description\":\"The `->LIST` function create a list from N elements on the stack.\\nN and the N next elements on the stack are consumed.\\n\\nIf N is greater than current stack depth, the function raises an error.\\n\\n@param `N` The number of elements to take on the top of the stack to build the list.\\n\\n@param `newlist` The list of N elements. [deepest in stack ... TOP-1 ]\\n\\n@param `content` 0 to n elements\\n\\n\",\"signature\":\"content<ANY*> N<LONG>  ->LIST  newlist<LIST>\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItBHKCJ\"},\"->LONGBYTES\":{\"description\":\"`->LONGBYTES` converts a LONG to a byte array. It expects a number of bytes on the top of the stack.\\n\\nSince Warp 10™ 2.1, `->LONGBYTES` can also convert a list of LONG.\\n\\n@param `nbbytes` Number of bytes for number conversion: nbbytes could be 1 to 8. If less than 8, most significant bytes will be truncated.\\n\\n@param `number` must be a LONG\\n\\n@param `output` byte array, from 1 to 8 bytes per number\\n\\n@param `numberList` Since Warp 10 2.1, a list of LONG\\n\\n\",\"signature\":\"number<LONG> nbbytes<LONG>  ->LONGBYTES  output<BYTES>\\nnumberList<LIST<LONG>> nbbytes<LONG>  ->LONGBYTES  output<BYTES>\",\"tags\":[\"binary\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItBIot6F__JGKB\"},\"->MAP\":{\"description\":\"The ->MAP function creates a MAP from an even number N of elements on the stack. \\nN is consumed off the top of the stack. For each pair, the deepest element is the key, the shallowest is the value.\\n\\n\\n@param `content` 0 to n pairs of key-value elements. Keys must be different.\\n\\n@param `N` Number of content elements to consume on the stack. It must be even.\\n\\n@param `newmap` map instance, initialized with content.\\n\\n\",\"signature\":\"N<LONG> content<ANY*> content<ANY*>  ->MAP  newmap<MAP>\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItCFK.\"},\"->MAT\":{\"description\":\"The `->MAT` function converts nested lists of numbers (2D array with same number of columns) into a Matrix.\\n\\nMATRIX objects cannot be represented on the stack. \\n\\nMatrix entries must be numbers.\\n\\n\\n@param `input` List of lists of values\\n\\n@param `result` A MATRIX object\\n\\n\",\"signature\":\"[ input<LIST> ]  ->MAT  result<MATRIX>\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItCFKF\"},\"->MVSTRING\":{\"description\":\"The `->MVSTRING` function generates a STRING representation of an ENCODER in the format expected by the `/update` endpoint for multi values.\\n\\nWhen encountering a binary element, the function attempts to interpret it as a wrapped encoder, if that fails then it will output the element as a binary (`b64:...`) value.\\n\\n@param `input` Wrapped or unwrapped Geo Time Series™ or ENCODER.\\n\\n@param `mvstring` MultiValue format representation of the wrapped encoder/GTS.\\n\\n\",\"signature\":\"input<STRING>  ->MVSTRING  mvstring<STRING>\\ninput<BYTES>  ->MVSTRING  mvstring<STRING>\\ninput<GTS>  ->MVSTRING  mvstring<STRING>\\ninput<GTSENCODER>  ->MVSTRING  mvstring<STRING>\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItCK_CJJZ_DGk\"},\"->OPB64\":{\"description\":\"Encode a String in order preserving base64. OPB64 is a Base64 like encoding which preserves the lexicographic order of\\nthe original byte arrays in the encoded ones. This is useful to compare encoded byte arrays without having to first decode them.\\n\\n@param `input` Could be a string or a byte array.\\n\\n@param `output` OPB64 of input.\\n\\n\",\"signature\":\"input<STRING>  ->OPB64  output<STRING>\\ninput<BYTES>  ->OPB64  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItEJ37qC.\"},\"->PICKLE\":{\"description\":\"The `->PICKLE` function converts the object on top of the stack to a Python object and serializes it using Pickle protocol version 2.\\nThe conversion table used is as follow:\\n\\n| WarpScript | Python |\\n|------------|--------|\\n| NULL | None |\\n| BOOLEAN | bool |\\n| BYTES | bytearray |\\n| STRING | str/unicode |\\n| DOUBLE | float |\\n| LONG | int |\\n| LIST | list |\\n| MAP | dict |\\n| SET | set |\\n| GTS | dict |\\n| ENCODER | dict |\\n\\nOther types are unsupported.\\n\\nPython example with `->PICKLE ->HEX` output:\\n```python\\n>>> s=\\\"80025d71002858060000005049434b4c4571015806000000535452494e4771025d7103284b0547400921fb54442d1865652e\\\"\\n>>> import pickle\\n>>> pickle.loads(s.decode(\\\"hex\\\"))\\n[u'PICKLE', u'STRING', [5, 3.141592653589793]]\\n```\\n\\n@param `input` A serializable object\\n\\n@param `output` Pickle encoded content\\n\\n\",\"signature\":\"input<ANY>  ->PICKLE  output<BYTES>\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"AItFHJCAI3J\"},\"->Q\":{\"description\":\"The `->Q` function consumes on the stack 4 doubles (w, x, y, z, with z being on top) representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion)\\nand push back quaternion representation into a **LONG**.\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `result` Quaternion representation\\n\\n\",\"signature\":\"w<DOUBLE> x<DOUBLE> y<DOUBLE> z<DOUBLE>  ->Q  result<LONG>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItG\"},\"->SET\":{\"description\":\"The -`>SET` function converts a **LIST** on top of the stack into a **SET**.\\n\\nSETs are not viewable, null will be return if it remains on the stack.\\n\\nThe order in the SET is not garanteed, see [`()`](/doc/91Z).\\n\\n\\n@param `input` The input list\\n\\n@param `newset` The new set reference. SETs are not viewable, null remains on the stack.\\n\\n\",\"signature\":\"input<LIST>  ->SET  newset<SET>\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItIGKF\"},\"->TSELEMENTS\":{\"description\":\"The `->TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"timestamp<LONG>  ->TSELEMENTS  dateAndTimeElements<LIST<LONG>>\\ntimestamp<LONG> timezone<STRING>  ->TSELEMENTS  dateAndTimeElements<LIST<LONG>>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"AItJJoKBGJp4I_GI\"},\"->V\":{\"description\":\"The `->V` function converts a list of objects into a Pig Vector (VLIST).\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `list` Input list\\n\\n@param `set` Input set\\n\\n@param `result` Result list\\n\\n\",\"signature\":\"list<LIST>  ->V  result<VLIST>\\nset<SET>  ->V  result<VLIST>\",\"tags\":[\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"AItL\"},\"->VARINT\":{\"description\":\"The `->VARINT` function encodes a `LONG` or a list of `LONG`s using [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoding. The result is a byte array containing the concatenation of the encoded numbers.\\n\\nThe `->VARINT` function is optimized for encoding unsigned `LONG`s, this means that negative numbers (with the most significant bit set to 1) will be encoded on 10 bytes. In order to reduce this footprint you can pre-process the numbers to encode so they are encoded unsing [ZigZag VarInt](https://developers.google.com/protocol-buffers/docs/encoding#types) encoding. The simple trick is to compute\\n\\n```\\n$value 1 << $value 63 >> ^\\n```\\n\\nthis will have the effect of alternatively encoding positive and negative numbers thus leading to a more efficient footprint for negative numbers.\\n\\nAt decoding time using `VARINT->`, simply undo the *Zig-Zag* trick:\\n\\n```\\n$unsigned 63 << 63 >> $unsigned ^ 1 >>\\n// Flip the top bit\\n$unsigned 1 63 << & ^\\n```\\n\\n@param `number` Single number to encode.\\n\\n@param `numbers` List of numbers to encode.\\n\\n@param `encoded` Byte array containing the encoded number(s).\\n\\n\",\"signature\":\"number<LONG>  ->VARINT  encoded<BYTES>\\nnumbers<LIST<LONG>>  ->VARINT  encoded<BYTES>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"AItLFK88I_F\"},\"->VEC\":{\"description\":\"The `->VEC` function converts a list of numbers into a Vector.\\n\\nVectors objects cannot be represented on the stack. \\n\\nVectors entries must be numbers.\\n\\n@param `list` List to convert\\n\\n@param `matrix` Matrix with a single column\\n\\n@param `result` Vector\\n\\n\",\"signature\":\"list<LIST>  ->VEC  result<VECTOR>\\nmatrix<MATRIX>  ->VEC  result<VECTOR>\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItLGJB\"},\"->WKB\":{\"description\":\"The `->WKB` function converts a GeoJSON **STRING**, a WKT **STRING** or a **SHAPE** to WKB **BYTES**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` The resulting WKB.\\n\\n\",\"signature\":\"shape<GEOSHAPE>  ->WKB  wkb<BYTES>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->WKB  wkb<BYTES>\\nwkt<STRING>  ->WKB  wkb<BYTES>\\ngeojson<STRING>  ->WKB  wkb<BYTES>\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHo7\"},\"->WKT\":{\"description\":\"The `->WKT` function converts a GeoJSON **STRING**, a WKB **BYTES** or a **SHAPE** to WKT **STRING**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` The resulting  WKT.\\n\\n@param `wkb` WKB bytes.\\n\\n\",\"signature\":\"shape<GEOSHAPE>  ->WKT  wkt<STRING>\\nshape<GEOSHAPE> allCells<BOOLEAN>  ->WKT  wkt<STRING>\\ngeojson<STRING>  ->WKT  wkt<STRING>\\nwkb<BYTES>  ->WKT  wkt<STRING>\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHpF\"},\"->Z\":{\"description\":\"The `->Z` function packs multiple **LONG** arguments into a byte array by interleaving the bits of the arguments. This produces a \\n[Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) value encoding the original arguments. The value might be right padded with bits set to 0 to reach a multiple of 8 bits.\\n\\n@param `bitwidth` Number of bits to consider for each LONG in 'longs', from 1 to 63.\\n\\n@param `longs` List of LONGs to pack. Each LONG *MUST* be positive, i.e. with bit 63 set to 0.\\n\\n@param `z` Byte array containing the packed values.\\n\\n\",\"signature\":\"longs<LIST<LONG>> bitwidth<LONG>  ->Z  z<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItP\"},\"/\":{\"description\":\"The `/` operator consumes two parameters from the top of the stack and pushes back the result of dividing the first one by the second one.\\n\\nYou can't devide by zero.\\n\\nThe two parameters must be of numeric types, or Geo Time Series™, or a mix of the two.\\n\\n@param `long` Numeric integer\\n\\n@param `long-result` Numeric floor-rounded integer\\n\\n@param `double` Numeric floating point number\\n\\n@param `double-result` Numeric floating point number\\n\\n@param `counter` Numeric counter\\n\\n@param `param1` First parameter of the division.\\n\\n@param `param2` Second parameter of the division.\\n\\n@param `result` Resulting GTS, of type DOUBLE.\\n\\n\",\"signature\":\"long<LONG> long<LONG>  /  long-result<LONG>\\ndouble<DOUBLE> long<LONG>  /  double-result<DOUBLE>\\nlong<LONG> double<DOUBLE>  /  double-result<DOUBLE>\\ndouble<DOUBLE> double<DOUBLE>  /  double-result<DOUBLE>\\ncounter<COUNTER> counter<COUNTER>  /  long-result<LONG>\\ndouble<DOUBLE> counter<COUNTER>  /  long-result<DOUBLE>\\ncounter<COUNTER> double<DOUBLE>  /  long-result<DOUBLE>\\ncounter<COUNTER> long<LONG>  /  long-result<LONG>\\nlong<LONG> counter<COUNTER>  /  long-result<LONG>\\ndouble<VECTOR> double<NUMBER>  /  double-result<VECTOR>\\nparam2<GTS> param1<GTS>  /  result<GTS>\\nparam2<GTS> param1<NUMBER>  /  result<GTS>\\nparam2<NUMBER> param1<GTS>  /  result<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ak\"},\"<\":{\"description\":\"The `<` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 < p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <` is strictly equivalent of a `42 mapper.lt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 < p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less than gts2 value.\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  <  result<BOOLEAN>\\np1<STRING> p2<STRING>  <  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  <  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  <  outgts<GTS>\\ngts1<GTS> gts2<GTS>  <  outputgts<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E.\"},\"<<\":{\"description\":\"Shifts the bits of a long by a number of positions to the left. The least significant bit is filled with 0 after each shift.\\n\\nSince Warp 10™ 2.1, `<<` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\"number<LONG> shift<LONG>  <<  result<LONG>\\ninputgts<GTS> number<LONG>  <<  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  <<  outputgts<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2k\"},\"<=\":{\"description\":\"The `<=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 <= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <=` is strictly equivalent of a `42 mapper.le` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 <= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less or equal than gts2 value.\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  <=  result<BOOLEAN>\\np1<STRING> p2<STRING>  <=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  <=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  <=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  <=  outputgts<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2o\"},\"==\":{\"description\":\"Tests if both parameters are equal.\\n\\nThe `==` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are equal, false otherwise.\\n\\nThe two parameters must be of numeric, boolean, vector, matrix or string types.\\nFor vector or matrix, the parameters must be the same size.\\n\\nSince 2.1.0, as every other comparison operators, `==` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 ==` is strictly equivalent of a `42 mapper.eq` MAP operation, with a simplified syntax.\\n\\nSince 2.1.1, `==` can be use to check equality between Lists, Maps and Sets. For for details about how this is defined, check the [java documentation](https://docs.oracle.com/en/java/javase/index.html).\\n\\n@param `p1` First parameter to compare\\n\\n@param `p2` Second parameter to compare\\n\\n@param `result` True if p1 and p2 are equal, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values equal to constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value equals gts2 value.\\n\\n\",\"signature\":\"p1<ANY> p2<ANY>  ==  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  ==  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  ==  outgts<GTS>\\ngts1<GTS> gts2<GTS>  ==  outputgts<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EIo\"},\">\":{\"description\":\"The `>` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 > p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >` is strictly equivalent of a `42 mapper.gt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 > p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater than gts2 value.\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  >  result<BOOLEAN>\\np1<STRING> p2<STRING>  >  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  >  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  >  outgts<GTS>\\ngts1<GTS> gts2<GTS>  >  outputgts<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EV\"},\">=\":{\"description\":\"The `>=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 >= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >=` is strictly equivalent of a `42 mapper.ge` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 >= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater or equal than gts2 value.\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  >=  result<BOOLEAN>\\np1<STRING> p2<STRING>  >=  result<BOOLEAN>\\ninputgts<GTS> constant<ANY>  >=  outgts<GTS>\\nconstant<ANY> inputgts<GTS>  >=  outgts<GTS>\\ngts1<GTS> gts2<GTS>  >=  outputgts<GTS>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYo\"},\">>\":{\"description\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after shifting depends on the sign of the unshifted long.\\n\\nSince Warp 10™ 2.1, `>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\"number<LONG> shift<LONG>  >>  result<LONG>\\ninputgts<GTS> number<LONG>  >>  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  >>  outputgts<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYs\"},\">>>\":{\"description\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after each shift is set to 0, regardless of the sign of \\nthe unshifted long.\\n\\nSince Warp 10™ 2.1, `>>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\"number<LONG> shift<LONG>  >>>  result<LONG>\\ninputgts<GTS> number<LONG>  >>>  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  >>>  outputgts<GTS>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYsy\"},\"ABS\":{\"description\":\"Computes the absolute value of a number value.\\n\\nThe `ABS` function consumes a numeric value from the top of the stack and pushes back its absolute value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` A numeric value\\n\\n@param `result` The absolute value of the given numeric value.\\n\\n@param `lvalue` A list of numeric values\\n\\n@param `lresult` A list of the absolute values of the given values.\\n\\n\",\"signature\":\"value<LONG>  ABS  result<LONG>\\nvalue<COUNTER>  ABS  result<LONG>\\nvalue<DOUBLE>  ABS  result<DOUBLE>\\nlvalue<LIST<LONG>>  ABS  lresult<LIST<LONG>>\\nlvalue<LIST<COUNTER>>  ABS  lresult<LIST<LONG>>\\nlvalue<LIST<DOUBLE>>  ABS  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ABS\"},\"ACCEL.CACHE\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.CACHE` function will enable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.CACHE\"},\"ACCEL.NOCACHE\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOCACHE` function will disable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOCACHE\"},\"ACCEL.NOPERSIST\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOPERSIST` function will disable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOPERSIST\"},\"ACCEL.PERSIST\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.PERSIST` function will enable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.PERSIST\"},\"ACCEL.REPORT\":{\"description\":\"The `ACCEL.REPORT` function will produce a map containing informations related to the Warp 10 Accelerator. The following table describes the various keys present in this map:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `accelerated` | Boolean indicating whether or not the last [`FETCH`](/doc/FETCH) accessed the in-memory data managed by the Warp 10 Accelerator. |\\n| `status` | Boolean indicating whether or not the Warp 10 Accelerator is enabled. |\\n| `cache` | Boolean indicating if the in-memory data will be considered for update, fetch and delete operations. |\\n| `persist` | Boolean indicating if the persistent data will be considered for update, fetch and delete operations. |\\n| `chunkcount` | Number of chunks managed by the accelerator for its in-memory data. |\\n| `chunkspan` | Length of each chunk expressed in platform time units. |\\n\\n@param `report` Map containing informations related to the Warp 10 Accelerator\\n\\n\",\"signature\":\" ACCEL.REPORT  report<MAP>\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.REPORT\"},\"ACOS\":{\"description\":\"The `ACOS` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arccosine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arccosine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arccosine in radians of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  ACOS  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ACOS  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ACOS\"},\"ADDDAYS\":{\"description\":\"Adds days to a timestamp or a tselements.\\n\\nThe `ADDDAYS` function consumes from the top of the stack a number (positive or negative) of days, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the days and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `days` The number of days to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"timestamp<LONG> timezone<STRING> days<LONG>  ADDDAYS  result<LONG>\\ntimestamp<LONG> days<LONG>  ADDDAYS  result<LONG>\\ntselements<LIST<LONG>> days<LONG>  ADDDAYS  tselementsresult<LIST<LONG>>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDDAYS\"},\"ADDDURATION\":{\"description\":\"Adds an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) to a timestamp or a tselements.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `duration` The duration\\n\\n@param `factor` The number of durations to add. Can be negative. Default to 1 if not set.\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"timestamp<LONG> timezone<STRING> duration<STRING>  ADDDURATION  result<LONG>\\ntimestamp<LONG> timezone<STRING> duration<STRING> factor<LONG>  ADDDURATION  result<LONG>\\ntimestamp<LONG> duration<STRING>  ADDDURATION  result<LONG>\\ntimestamp<LONG> duration<STRING> factor<LONG>  ADDDURATION  result<LONG>\\ntselements<LIST<LONG>> duration<STRING>  ADDDURATION  tselementsresult<LIST<LONG>>\\ntselements<LIST<LONG>> duration<STRING> factor<LONG>  ADDDURATION  tselementsresult<LIST<LONG>>\",\"tags\":[\"date\"],\"since\":\"2.4.0\",\"OPB64name\":\"ADDDURATION\"},\"ADDEXACT\":{\"description\":\"The `ADDEXACT` function consumes two LONGs from the top of the stack and puts back the sum. If the sum overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `sum` The sum of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `ssum` The sum of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lsum` List of **LONG** where each value is the sum of y and an element in lx\\n\\n\",\"signature\":\"x<NUMBER> y<NUMBER>  ADDEXACT  sum<LONG>\\nlist<LIST<NUMBER>>  ADDEXACT  ssum<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  ADDEXACT  lsum<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"ADDEXACT\"},\"ADDMONTHS\":{\"description\":\"Adds months to a timestamp or a tselements.\\n\\nThe `ADDMONTHS` function consumes from the top of the stack a number (positive or negative) of months, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the months and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `months` The number of months to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"timestamp<LONG> timezone<STRING> months<LONG>  ADDMONTHS  result<LONG>\\ntimestamp<LONG> months<LONG>  ADDMONTHS  result<LONG>\\ntselements<LIST<LONG>> months<LONG>  ADDMONTHS  tselementsresult<LIST<LONG>>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDMONTHS\"},\"ADDVALUE\":{\"description\":\"The `ADDVALUE` function adds a value to a GTS, without checking for tick duplicates. The added data point is appended to the GTS.\\nThe [`SETVALUE`](/doc/SETVALUE) overrides an existing value.\\n\\nThe `ADDVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `ADDVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, for example by using [`GET`](/doc/GET)\\nwith value 0 as parameter.\\n\\nIf latitude or longitude are NaN (not a number), value has only timestamp, elevation, value.\\nIf elevation is NaN (not a number), value has only timestamp, latitude, longitude, value.\\nIf elevation is NaN and longitude or latitude are NaN, value has only timestamp, value.\\n\\nWhen adding a Geo Time Series™ or GTS Encoder value, the value will be wrapped (as when using `WRAPRAW`) and added as a binary value.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Series™\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `result` The Geo Time Series™ with the new datapoint added\\n\\n@param `elevation` Elevation or NaN\\n\\n\",\"signature\":\"gts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<STRING>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BYTES>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BOOLEAN>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<DOUBLE>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<LONG>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<GTSENCODER>  ADDVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<GTS>  ADDVALUE  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ADDVALUE\"},\"ADDYEARS\":{\"description\":\"Adds years to a timestamp or a tselements.\\n\\nThe `ADDYEARS` function consumes from the top of the stack a number (positive or negative) of years, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the years and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `years` The number of years to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"timestamp<LONG> timezone<STRING> years<LONG>  ADDYEARS  result<LONG>\\ntimestamp<LONG> years<LONG>  ADDYEARS  result<LONG>\\ntselements<LIST<LONG>> years<LONG>  ADDYEARS  tselementsresult<LIST<LONG>>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDYEARS\"},\"AESUNWRAP\":{\"description\":\"Unwraps a byte array with the [AES WRAP](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") and pushes back the decrypted data into an bytes array.\\n\\n`AESUNWRAP` removes the a 64bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) added by [`AESWRAP`](/doc/AESWRAP) WarpScript function\\n\\n@param `data` Encoded Byte array.\\n\\n@param `key` Byte array, 128, 192 or 256 bits key.\\n\\n@param `decoded` Decoded Byte array.\\n\\n\",\"signature\":\"key<BYTES> data<BYTES>  AESUNWRAP  decoded<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESUNWRAP\"},\"AESWRAP\":{\"description\":\"Wraps a byte array or String with the [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt) algorithm and pushes a byte array containing the encrypted data onto the stack.\\n\\n`AESWRAP` adds a 64 bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) prefix to the input in order to protect the encrypted data against AES block determinism as [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") uses a fixed Initialization Vector.\\n\\n@param `key` 128, 192 or 256 bits key to use for encryption.\\n\\n@param `string` String data to encrypt.\\n\\n@param `bytes` Byte array to encrypt.\\n\\n@param `encrypted` Encrypted result.\\n\\n\",\"signature\":\"string<STRING> key<BYTES>  AESWRAP  encrypted<BYTES>\\nbytes<BYTES> key<BYTES>  AESWRAP  encrypted<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESWRAP\"},\"AGO\":{\"description\":\"The `AGO` function is a shortcut which enables you to compute timestamps by specifying an offset from the current time.\\n\\n@param `offset` The numbers of ticks in platform time unit to subtract, truncated if floating-point.\\n\\n@param `timestamp` The computed timestamp\\n\\n\",\"signature\":\"offset<NUMBER>  AGO  timestamp<LONG>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"AGO\"},\"AND\":{\"description\":\"The `AND` operator is a synonymous for [`&&`](/doc/8XN).\\n\\nIt performs a logical **AND** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `AND` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical AND applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with AND between each common tick input values.\\n\\n\",\"signature\":\"p1<BOOLEAN> p2<BOOLEAN>  AND  result<BOOLEAN>\\nl<LIST>  AND  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  AND  gtsresult<GTS>\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"AND\"},\"APPEND\":{\"description\":\"The `APPEND` function consumes two paramters from the top of the stack and appends the LIST, MAP or GTS on top of the stack to the one just below.\\nThe augmented LIST, MAP or GTS is then pushed back on the stack.\\n\\n@param `newitems` items to append to input.\\n\\n@param `inputlist` LIST to be modified.\\n\\n@param `outputlist` The LIST that has been modified\\n\\n@param `inputmap` MAP to be modified.\\n\\n@param `outputmap` The AP that has been modified \\n\\n@param `inputGTS` GTS to be modified.\\n\\n@param `outputGTS` The GTS that has been modified\\n\\n\",\"signature\":\"inputlist<LIST> newitems<LIST>  APPEND  outputlist<LIST>\\ninputmap<MAP> newitems<MAP>  APPEND  outputmap<MAP>\\ninputGTS<GTS> newitems<GTS>  APPEND  outputGTS<MAP>\",\"tags\":[\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPEND\"},\"APPLY\":{\"description\":\"The `APPLY` framework provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can do. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` List of resulting GTS, one per equivalence class.\\n\\n@param `op` Operation to perform.\\n\\n\",\"signature\":\"[ gts<LIST<GTS>+> labels<LIST> op<OPERATOR> ]  APPLY  result<LIST<GTS>>\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPLY\"},\"ASENCODERS\":{\"description\":\"The `ASENCODERS` function consumes a Geo Time Series™, a wrap or a raw wrap, or a list thereof and convert each one into an encoder.\\n\\n@param `gts` Geo Time Series™ to be converted.\\n\\n@param `lgts` List of Geo Time Series™ to be converted.\\n\\n@param `wrappedgts` Wrapped Geo Time Series™ to be converted.\\n\\n@param `lwrappedgts` List of wrapped Geo Time Series™ to be converted.\\n\\n@param `rawwrappedgts` Raw wrapped Geo Time Series™ to be converted.\\n\\n@param `lrawwrappedgts` List of raw wrapped Geo Time Series™ to be converted.\\n\\n@param `encoder` Encoder of the given Geo Time Series™.\\n\\n@param `lencoder` List of encoder, one for each given Geo Time Series™.\\n\\n\",\"signature\":\"gts<GTS>  ASENCODERS  encoder<GTSENCODER>\\nlgts<LIST<GTS>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nwrappedgts<STRING>  ASENCODERS  encoder<GTSENCODER>\\nlwrappedgts<LIST<STRING>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nrawwrappedgts<BYTES>  ASENCODERS  encoder<GTSENCODER>\\nlrawwrappedgts<LIST<BYTES>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\\nencoder<GTSENCODER>  ASENCODERS  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>>  ASENCODERS  lencoder<LIST<GTSENCODER>>\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"2.2.0\",\"OPB64name\":\"ASENCODERS\"},\"ASIN\":{\"description\":\"The `ASIN` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arcsine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arcsine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arcsine in radians of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  ASIN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ASIN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASIN\"},\"ASREGS\":{\"description\":\"Replaces in a macro the uses of the given symbols by the use of registers.\\n\\nIf there are not enough registers available, replace each of the symbols from the start of the list until all registers are used.\\n\\nSince 2.6.0, the list of symbols is optional. In that case, `ASREGS` first recursively extracts all the symbols from given the macro and uses that list to do the replacement.\\n\\n@param `macro` Macro to transform.\\n\\n@param `vars` List of symbols.\\n\\n\",\"signature\":\"macro<MACRO> vars<LIST<STRING>>  ASREGS  macro<MACRO>\\nmacro<MACRO>  ASREGS  macro<MACRO>\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ASREGS\"},\"ASSERT\":{\"description\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise.\\n\\nThe `ASSERT` function consumes a **BOOLEAN** parameter from the top of the stack. If the boolean is **true** the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception.\\n\\n`ASSERT` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n\",\"signature\":\"condition<BOOLEAN>  ASSERT \",\"tags\":[\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASSERT\"},\"ASSERTMSG\":{\"description\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise and displays a message.\\n\\nThe `ASSERTMSG` function consumes a **BOOLEAN** parameter and a **STRING** parameter from the top of the stack. If the boolean is **true**, the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception with a message displaying the **STRING** parameter.\\n\\n`ASSERTMSG` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n@param `message` The exception message to display if the test fails\\n\\n\",\"signature\":\"condition<BOOLEAN> message<STRING>  ASSERTMSG \",\"tags\":[\"debug\"],\"since\":\"1.2.13\",\"OPB64name\":\"ASSERTMSG\"},\"ATAN\":{\"description\":\"The `ATAN` function consumes a floating point number between -1 et 1 from the top of the stack and pushes back its arctangent in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arctangent in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arctangent in radians of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  ATAN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  ATAN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATAN\"},\"ATAN2\":{\"description\":\"ATAN2 function returns the polar angle theta (azimut) from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of `] -pi  pi ]`.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `result` theta in polar coordinates\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `lresult` List of thetas in polar coordinates\\n\\n\",\"signature\":\"y<NUMBER> x<NUMBER>  ATAN2  result<DOUBLE>\\ny<NUMBER> lx<LIST<NUMBER>>  ATAN2  lresult<LIST<DOUBLE>>\\nly<LIST<NUMBER>> x<NUMBER>  ATAN2  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.2.13\",\"OPB64name\":\"ATAN2\"},\"ATBUCKET\":{\"description\":\"The `ATBUCKET` function consumes a bucketized GTS from the stack, looks at its `index`-th bucket and puts on the stack a\\nlist with the timestamp, latitude, longitude, elevation and value for this bucket.\\n\\n@param `gts` Bucketized Geo Time Series™\\n\\n@param `index` Index of the bucket\\n\\n@param `result` List with the timestamp, latitude, longitude, elevation and value for the index-th bucket of the GTS\\n\\n\",\"signature\":\"gts<GTS> index<LONG>  ATBUCKET  result<LIST>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATBUCKET\"},\"ATINDEX\":{\"description\":\"The `ATINDEX` function consumes a Geo Time Series™ or a list thereof from the stack, looks at its index-th point and put on the stack a list with the timestamp, longitude, \\nlatitude, elevation and value for the `index`-th point of the GTS.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the GTS.\\n\\n@param `index` Index of the tick, truncated if floating-point.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"signature\":\"gts<GTS> index<NUMBER>  ATINDEX  data<LIST>\\nlgts<LIST<GTS>> index<NUMBER>  ATINDEX  ldata<LIST<LIST>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATINDEX\"},\"ATTICK\":{\"description\":\"The `ATTICK` function consumes a Geo Time Series™ from the stack, looks at its tick-th tick (the data point with a timestamp tick) and put on the \\nstack a list with the timestamp, latitude, longitude, elevation and value for that data point.\\n\\nIf there is no data point with tick timestamp, it return a list with timestamp, latitude, longitude and elevation at **NaN** and value at **null**.\\n\\n@param `timestamp` Timestamp at which to take the data, if it is a floating-point value, it is truncated.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"signature\":\"gts<GTS> timestamp<LONG>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<LONG>  ATTICK  ldata<LIST<LIST>>\\ngts<GTS> timestamp<COUNTER>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<COUNTER>  ATTICK  ldata<LIST<LIST>>\\ngts<GTS> timestamp<DOUBLE>  ATTICK  data<LIST>\\nlgts<LIST<GTS>> timestamp<DOUBLE>  ATTICK  ldata<LIST<LIST>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTICK\"},\"ATTRIBUTES\":{\"description\":\"Retrieves the attributes of a Geo Time Series™.\\n\\nThe `ATTRIBUTES` function takes a **GTS** on top of the stack and push back a **MAP** including all its attributes.\\n\\nAn attribute corresponds to a tag for a specific series.\\nThe attribute system allows the user to add some information that can change in a series.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `encoder` The input Geo Time Series™ Encoder\\n\\n@param `return` The attributes MAP of the input Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  ATTRIBUTES  return<MAP>\\nencoder<GTSENCODER>  ATTRIBUTES  return<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTRIBUTES\"},\"AUTHENTICATE\":{\"description\":\"The `AUTHENTICATE` function authenticates the current stack with the **read token** on top of the stack. This function removes the token from the stack.\\n\\nInside a WarpScript, the stack could be authenticated only once. An exception is thrown when the stack is already authenticated.\\n\\n@param `token` Read token\\n\\n\",\"signature\":\"token<STRING>  AUTHENTICATE \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"AUTHENTICATE\"},\"B64->\":{\"description\":\"Decodes the [base64](http://tools.ietf.org/html/rfc4648#section-4) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"content<STRING>  B64->  result<BYTES>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoAIs\"},\"B64TOHEX\":{\"description\":\"Decodes the  [base64](http://tools.ietf.org/html/rfc4648#section-4) content on top of the stack and immediately re-encode it in hexadecimal.\\nThis enables you to convert encoded content which would not be valid UTF-8 encoding from base64 to hexadecimal. \\nAs the string are URL encoded, the symbol `+` have to be replaced by `%2B`, otherwise a space will replace the `+` in the string.\\n\\n@param `content` String to convert\\n\\n@param `result` Hexadecimal converted string\\n\\n\",\"signature\":\"content<STRING>  B64TOHEX  result<STRING>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"B64TOHEX\"},\"B64URL->\":{\"description\":\"Decodes the [base64url](http://tools.ietf.org/html/rfc4648#section-5) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"content<STRING>  B64URL->  result<BYTES>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoKK8BAIs\"},\"BBOX\":{\"description\":\"The `BBOX` function computes the bounding box of a Geo Time Series™ or a list thereof. It returns a list with extremas, or a list of list of extremas.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `minlat` Latitude of lower left of bounding box.\\n\\n@param `minlon` Longitude of lower left of bounding box.\\n\\n@param `maxlat` Latitude of upper right of bounding box.\\n\\n@param `maxlon` Longitude of upper right of bounding box.\\n\\n@param `extremas` List of list containing minlat, minlon, maxlat, maxlon, for every GTS in lgts.\\n\\n\",\"signature\":\"gts<GTS>  BBOX  [  minlat<DOUBLE>  minlon<DOUBLE>  maxlat<DOUBLE>  maxlon<DOUBLE>  ]\\nlgts<LIST<GTS>>  BBOX  extremas<LIST<LIST<DOUBLE>>>\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BBOX\"},\"BIN->\":{\"description\":\"The `->BIN` function decodes a binary string representation into a bytes array.\\n\\n@param `binary` The binary string representation\\n\\n@param `result` The bytes array\\n\\n\",\"signature\":\"binary<STRING>  BIN->  result<BYTES>\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"FZ_DAIs\"},\"BINTOHEX\":{\"description\":\"Converts a string representing a binary number into a string representing a hexadecimal number.\\n\\nThe `BINTOHEX` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from binary to hexadecimal.\\n\\n@param `content` The string representing a binary number\\n\\n@param `result` The string representing a hexadecimal number\\n\\n\",\"signature\":\"content<STRING>  BINTOHEX  result<STRING>\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"BINTOHEX\"},\"BITCOUNT\":{\"description\":\"Returns the logical size and the cardinality of a [BitSet](https://docs.oracle.com/javase/8/docs/api/java/util/BitSet.html).\\n\\nThe `BITCOUNT` function consumes a bitset on the top of the stack and push back its logical size and its cardinality.\\n  * The logical size is the index of the highest bit set to true plus one.\\n  * The cardinality is the number of bit set to true.\\n\\n@param `bitset` The BitSet to count\\n\\n@param `length` The logical size of the BitSet\\n\\n@param `cardinality` The number of bits set to true\\n\\n\",\"signature\":\"bitset<BITSET>  BITCOUNT  cardinality<LONG> length<LONG>\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITCOUNT\"},\"BITGET\":{\"description\":\"Returns the value of the bit with the specified index.\\n\\nThe `BITGET` function consumes a bitset and a long on the top of the stack. It returns the value of the bit with the specified index. The bit index starts at 0 from the right.\\n\\n@param `index` The bit index\\n\\n@param `bitset` The bitset\\n\\n@param `return` The value of the bit with the specified index\\n\\n\",\"signature\":\"bitset<BITSET> index<LONG>  BITGET  return<BOOLEAN>\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.5\",\"OPB64name\":\"BITGET\"},\"BITSTOBYTES\":{\"description\":\"Converts a bitset into a bytes array.\\n\\n@param `bitset` Bitset\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"bitset<BITSET>  BITSTOBYTES  result<BYTES>\",\"tags\":[\"bitset\",\"binary\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITSTOBYTES\"},\"BOOTSTRAP\":{\"description\":\"This function is executed systematically before the WarpScript stack is available for anything else. By default this function does nothing, it is equivalent \\nto [`NOOP`](/doc/NOOP).\\n\\nIf bootstrap code was specified in the Warp 10 platform configuration, for either or all of `egress`, `mobius` or `runner`, the `BOOTSTRAP` function might\\nhave been redefined and actual code could be executed.\\n\\nThis function is not meant to be used in user provided scripts.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"BOOTSTRAP\"},\"BREAK\":{\"description\":\"The `BREAK` function breaks out of the current loop. It takes no argument.\\n\\n> If used outside a loop, an error is thown\\n\\n\",\"signature\":\"\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"BREAK\"},\"BUCKETCOUNT\":{\"description\":\"The function `BUCKETCOUNT` consumes a GTS off the stack and pushes its bucketcount onto the stack.\\n\\n> Note: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Number of buckets\\n\\n\",\"signature\":\"gts<GTS>  BUCKETCOUNT  result<LONG>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETCOUNT\"},\"BUCKETIZE\":{\"description\":\"The Geo Time Series™ kept in the Warp 10 platform grow over time as more measurements are added. Some series have very regular measurements,\\nothers more sporadic ones. But when it comes to manipulating the data, it might be handy to be able to impose some kind of regularity to measurements.\\nThis is exactly what the [`BUCKETIZE`](/doc/BUCKETIZE) framework does, it provides the tooling for putting the data of a Geo Time Series™ into regularly spaced\\n**buckets**.\\n\\nA **bucket** is a time interval which spans a certain number of time units called the **bucketspan**, ending at a tick called the **lastbucket**.\\n\\nAs an example, the bucket spanning 10 time units and ending at time units 20 will contain all measurements taken at the following times:\\n\\n20, 19, 18, 17, 16, 15, 14, 13, 12, 11\\n\\nthe previous bucket with the same bucketspan ends at 10 and covers ticks 10 down to 1. The next bucket ends at 30 and covers ticks 21 to 30.\\n\\nA bucketized Geo Time Series™ is characterized by its **bucketspan**, its **bucketcount** and the **lastbucket**.\\nA bucketized Geo Time Series™ has at most one measurement per bucket, there might be buckets with no measurements.\\n\\nThe `BUCKETIZE` framework is used to convert a non bucketized Geo Time Series™ into a bucketized one. The bucketization process collects\\nthe measurements of the original geo time series which fall in each bucket and apply a bucketizer function on those data, thus leading to at most a\\nsingle measurement for each bucket.\\n\\nThe `BUCKETIZE` framework comes with a number of bucketizer which implement very common aggregation functions such as SUM, MIN, MAX, MEAN, etc.\\n\\nA macro can be used instead of the bucketizer argument. In that case, in each bucket the measurements are collected as a sub Geo Time Series™ which is taken as parameter by the macro.\\nThis macro must then push onto the stack its result (see description in signature description below).\\n\\nIf the bucketizer argument is NULL, then BUCKETIZE do not create any new Geo Time Series™ but instead sets the lastbucket, bucketspan and bucketcount of its inputs without processing their data.\\n\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so the first value of the geo time series is at the beginning of the first bucket.\\n\\n@param `bucketspan` Width in time units of each bucket. If `bucketspan` is 0 but `bucketcount` is set, WarpScript will compute `bucketspan` so `bucketcount` buckets cover the complete set of values from firsttick to lasttick. If this value is set to -1, the number of buckets is computed so the first tick is towards the end of the first bucket.\\n\\n@param `lastbucket` Specifies the timestamp in time units since the Unix Epoch of the end of the most recent bucket. If you set this value to 0, this timestamp will be computed automatically so it covers the most recent value of the geo time series and falls on a `bucketspan` boundary.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS\\n\\n\",\"signature\":\"[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> macro<MACRO> lastbucket<LONG> bucketspan<LONG> bucketcount<LONG> ]  BUCKETIZE  result<LIST<GTS>>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETIZE\"},\"BUCKETIZE.CALENDAR\":{\"description\":\"Creates bucketized Geo Time Series with buckets that span a calendar duration that can be irregular (e.g. taking into account leap years and daylight saving time).\\n\\nInstead of using a bucketspan like the BUCKETIZE framework, it uses a bucketduration: a STRING in [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) format, as `PyYmMwWdDThHmMsS` similarly to that of ADDDURATION function. However, complex bucketdurations that can be non-positive from some ticks are not allowed.\\n\\nIn the result, the tick of each bucket is its index, which is equal to the number of buckets that are ended since Unix Epoch. In particular, the tick of the bucket that contains Unix Epoch is always 0. The resulting GTS is considered bucketized for further operations. Then, the function UNBUCKETIZE.CALENDAR can be used to replace bucket indices with their timestamp end boundaries.\\n\\nThis function answers the limitation of BUCKETIZE to regular buckets. For instance, BUCKETIZE.CALENDAR can be used with a duration of one month (`P1M`) or one year (`P1Y`).\\n\\nThe delta between Unix Epoch and the first timestamp of bucket 0th is called the bucketoffset. The bucketoffset, bucketduration and buckettimezone are stored in the attributes.\\n\\n@param `timezone` The timezone to consider. Default to UTC\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so every value of the GTS falls in a bucket.\\n\\n@param `bucketduration` Width in ISO 8601 duration format of each bucket.\\n\\n@param `lastbucket` Specifies the timestamp in platform time units of the end boundary of the most recent bucket. For coherency with BUCKETIZE, this value can not be set to 0.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS in the new time referential\\n\\n\",\"signature\":\"[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> bucketizer<AGGREGATOR> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> timezone<STRING> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\\n[ gts<GTS+> macro<MACRO> lastbucket<LONG> bucketduration<STRING> bucketcount<LONG> timezone<STRING> ]  BUCKETIZE.CALENDAR  result<LIST<GTS>>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"BUCKETIZE.CALENDAR\"},\"BUCKETSPAN\":{\"description\":\"The function `BUCKETSPAN` consumes a GTS off the stack and pushes its bucketspan onto the stack.\\n\\n> when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Bucketspan\\n\\n\",\"signature\":\"gts<GTS>  BUCKETSPAN  result<LONG>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETSPAN\"},\"BYTES->\":{\"description\":\"Converts a bytes array into a string with given a charset and put the string on top of the stack.\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\n\\n@param `charset` Charset to use\\n\\n@param `bytes` Bytes array to convert\\n\\n@param `result` String converted byte array\\n\\n\",\"signature\":\"bytes<BYTES> charset<STRING>  BYTES->  result<STRING>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"F__JGKBhEV\"},\"BYTESTOBITS\":{\"description\":\"Converts a byte array into a bitset.\\n\\n@param `bytesarray` Bytes array\\n\\n@param `result` Bitset\\n\\n\",\"signature\":\"bytesarray<BYTES>  BYTESTOBITS  result<BITSET>\",\"tags\":[\"bitset\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BYTESTOBITS\"},\"CALL\":{\"description\":\"The `CALL` function invokes the external program whose path (relative to the `warpscript.call.directory` directory) is on top of the stack. The calling convention will pass to the external\\nprogram the **STRING** object below the path on a line by itself on standard input after having URL encoded the **STRING**. The invoked\\nprogram is expected to return a URL encoded **STRING** object if invocation was successful, or a string starting with a space and followed by a URL encoded error message if an error was encoutered.\\n\\nIf you need to pass complex structures to the invoked program, you can use functions such as [`->JSON`](/doc/AIt9JoxD), [`->PICKLE`](/doc/AItFHJCAI3J)\\nand [`->B64`](/doc/AIt1CYF) to encode the input prior to the invocation.\\n\\nExamples of callable programs are provided in [shell](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/sh/callable.sh)\\nand [python](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/python/callable.py).\\n\\nThe program must be stored in the directory described by the `warpscript.call.directory` configuration parameter.\\n\\nThe program must first output on the stdout the number of concurrent thread allowed.\\n\\nExample:\\n\\n```bash\\n#!/bin/bash\\necho 5 # 5 threads allowed\\nurldecode() {\\n  # urldecode <string>\\n  local url_encoded=\\\"${1//+/ }\\\"\\n  printf '%b' \\\"${url_encoded//%/\\\\\\\\x}\\\"\\n}\\nwhile true\\n\\ndo\\n  read line\\n  line=`urldecode \\\"${line}\\\"` # read the params given by the WarpScript\\n  echo $line # Will be pushed on the stack\\ndone\\n```\\n\\n@param `program` Program path\\n\\n@param `params` URL encoded input\\n\\n@param `result` URL encoded output\\n\\n\",\"signature\":\"params<STRING> program<STRING>  CALL  result<STRING>\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"CALL\"},\"CBRT\":{\"description\":\"The `CBRT` function consumes a numeric parameter from the top of the stack and pushes back its cubic root.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Cubic root of the given value.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of cubic root of each given value.\\n\\n\",\"signature\":\"value<NUMBER>  CBRT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  CBRT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CBRT\"},\"CEIL\":{\"description\":\"The `CEIL` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number bigger than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-up value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-up values, for each given value.\\n\\n\",\"signature\":\"value<NUMBER>  CEIL  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  CEIL  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEIL\"},\"CEVAL\":{\"description\":\"The `CEVAL` function allows you to execute macros in a concurrent way on a pool of threads.\\n\\nAll macros will be executed with the maximum parallelism level specified. Each macro is executed on its own stack. The context of the global stack is\\nreplicated to each of those stacks so each macro will have access to the existing symbols and the redefined functions. Any modification to the symbol\\ntable or redifined functions done in a concurrent macro will not be reflected in the global stack afterwards.\\n\\nEach macro is invoked with its index in the list on top of the stack.\\n\\nUpon termination of each macro, the content of their respective stacks is put into a list, with the top of the stack at index 0, and those lists are\\nmerged into a global list which is then pushed onto the stack. The resulting list for each macro appears at the index of the macro in the original macro list.\\n\\nBeware that no synchronization is implicitely performed between the concurrent macros. If you require synchronization between macros, for example because\\nyou are modifying a list accessible by all macros via a symbol, you must use the [`SYNC`](/doc/SYNC) function.\\n\\nIf one of the macros fail, an attempt to interrupt the other running macros will be done and the failure will be propagated to the other macros. For the\\ntime being, a call to [`STOP`](/doc/STOP) or [`RETURN`](/doc/RETURN) in one of the macros will stop all of them.\\n\\nUse of `CEVAL` is not available from within a macro currently executing in a `CEVAL` call.\\n\\nThe `CEVAL` function is part of the `io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```properties\\n// Enable CEVAL and SYNC functions\\nwarpscript.extension.concurrent = io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension\\n```\\n\\n@param `poolSize` Parallelism level\\n\\n@param `macros` List of macros\\n\\n@param `result` Result list\\n\\n\",\"signature\":\"macros<LIST> poolSize<LONG>  CEVAL  result<LIST>\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEVAL\"},\"CHECKMACRO\":{\"description\":\"The `CHECKMACRO` function checks if a macro is defined and aborts the execution when it encounters an undefined macro.\\n\\n@param `name` The macro name\\n\\n\",\"signature\":\"name<STRING>  CHECKMACRO \",\"tags\":[\"logic\",\"control\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKMACRO\"},\"CHECKSHAPE\":{\"description\":\"Return a BOOLEAN indicating whether an input list and its nested lists sizes are coherent together to form a tensor (or multidimensional array).\\n\\n@param `list` The input list.\\n\\n@param `result` true or false.\\n\\n\",\"signature\":\"list<LIST>  CHECKSHAPE  result<LIST>\\n{ list<LIST>  } CHECKSHAPE  result<LIST>\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKSHAPE\"},\"CHRONOEND\":{\"description\":\"The `CHRONOEND` function ends a stopwatch with the given name previously started with [`CHRONOSTART`](/doc/CHRONOSTART). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\nIt is a good practice to put `CHRONOEND` in the finally clause of a [`TRY`](/doc/TRY) for the timing to work even if exceptions are thrown.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"signature\":\"name<STRING>  CHRONOEND \",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOEND\"},\"CHRONOSTART\":{\"description\":\"The `CHRONOSTART` function starts a stopwatch with the given name. To stop the stopwatch, call [`CHRONOEND`](/doc/CHRONOEND). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"signature\":\"name<STRING>  CHRONOSTART \",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTART\"},\"CHRONOSTATS\":{\"description\":\"The `CHRONOSTATS` function \\n\\n@param `stats` A map with stopwatches names as keys and maps as values. These maps have two keys, `total_calls` and `total_time`. The former gives the number of calls to [`CHRONOSTART`](/doc/CHRONOSTART) and the latter gives the cumulative time between [`CHRONOSTART`](/doc/CHRONOSTART) and [`CHRONOEND`](/doc/CHRONOEND) in **nanoseconds**.\\n\\n\",\"signature\":\" CHRONOSTATS  stats<MAP>\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTATS\"},\"CHUNK\":{\"description\":\"The `CHUNK` is used to split a Geo Time Series™ into partial GTS. The split operation is controlled by multiple parameters.\\nThe series will be splitted in chunks, each chunks will form a new GTS, with a label value corresponding to its first tick.\\n\\n@param `keepempty` If true empty chunks are kept\\n\\n@param `chunklabel` The label name of the label added by the split operation (with a value corresponding to the first tick of the chunk).\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` An overlap duration (in time units) between chunks, this is useful when chunking a GTS to apply an algorithm which operates on a sliding window.\\n\\n@param `chunkwidth` The width in time units of each chunk.\\n\\n@param `lastchunkend` The end timestamp of the most recent split to consider.\\n\\n@param `gts` A single GTS instance.\\n\\n@param `gtsList` A GTS list to split, each GTS will be splitted individually.\\n\\n@param `encoder` A single GTS Encoder instance.\\n\\n@param `lEncoder` A GTS Encoder list to split, each GTS Encoder will be splitted individually.\\n\\n@param `result` GTS Chunks, a list formed with its partial GTS.\\n\\n@param `resultEncoders` GTS Encoders Chunks, a list formed with its partial GTS Encoders.\\n\\n\",\"signature\":\"gts<GTS> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  result<LIST<GTS>>\\ngtsList<LIST<GTS>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  result<LIST<GTS>>\\nencoder<GTSENCODER> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  resultEncoders<LIST<GTSENCODER>>\\nlEncoder<LIST<GTSENCODER>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNK  resultEncoders<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CHUNK\"},\"CHUNKENCODER\":{\"description\":\"The `CHUNKENCODER` function is used to split a [GTSEncoder](/doc/NEWENCODER) into partial GTSEncoder. The user defines some parameters that will \\nbe applied to the split operation. The series will be splitted in chunks, each chunks will form a new GTSEncoder, with a label value \\ncorresponding to its first tick.\\n\\nDeprecated since 2.1, use CHUNK instead which behaves the same.\\n\\n@param `keepempty` If true empty chunk are kept\\n\\n@param `chunklabel` The label name of the label added by this split operation (add a value corresponding to the first tick of the chunk). Could be a regular expression.\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` A time overlap for each chunks in time units.\\n\\n@param `chunkwidth` The width in time unit of each chunks in time units.\\n\\n@param `lastchunkend` The split operation end when it encounters this timestamp.\\n\\n@param `GTSEncoder` A single GTSEncoder \\n\\n@param `GTSEncoderList` A GTSEncoder list to split, each GTSEncoder will be splitted individually.\\n\\n@param `result` GTSEncoder Chunks, a list formed with its partial GTSEncoder\\n\\n\",\"signature\":\"GTSEncoder<GTSENCODER> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNKENCODER  result<LIST<GTSENCODER>>\\nGTSEncoderList<LIST<GTSENCODER>> lastchunkend<LONG> chunkwidth<LONG> chunkoverlap<LONG> chunkcount<LONG> chunklabel<STRING> keepempty<BOOLEAN>  CHUNKENCODER  result<LIST<LIST<GTSENCODER>>>\",\"tags\":[\"encoder\"],\"since\":\"1.2.9\",\"OPB64name\":\"CHUNKENCODER\"},\"CLEAR\":{\"description\":\"The `CLEAR` function empties the stack.\\n\\n@param `input` all the input on the stack will be erased from the stack.\\n\\n\",\"signature\":\"input<ANY*>  CLEAR \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEAR\"},\"CLEARDEFS\":{\"description\":\"The `CLEARDEFS` function allows you to clear all [redefined WarpScript functions](/doc/DEF).\\n\\nBy default, all redefined WarpScript function, will not be available anymore. Set the `warpscript.def.unshadow` \\nconfiguration property to change this behaviour.\\n\\nThis configuration parameter determines if undefining a function (via NULL 'XXX' DEF) will unshadow the original statement \\nthus making it available again or if it will replace it with a function that will fail with a message saying the function is undefined.\\nThe safest behavior is to leave this undefined or set to **false**.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARDEFS\"},\"CLEARREGS\":{\"description\":\"Clears all registers, setting their current value to `NULL`.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"signature\":\" CLEARREGS  value<ANY>\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CLEARREGS\"},\"CLEARSYMBOLS\":{\"description\":\"The `CLEARSYMBOLS` function clears all symbols defined with the function [`STORE`](/doc/STORE).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARSYMBOLS\"},\"CLEARTOMARK\":{\"description\":\"Removes elements from the stack up to and including the first mark encountered.\\n\\n@param `inputs` all the inputs references on the stack will be erased\\n\\n@param `mark` the mark will also be erased\\n\\n\",\"signature\":\"mark<MARK> inputs<ANY*>  CLEARTOMARK \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARTOMARK\"},\"CLIP\":{\"description\":\"The `CLIP` function clips a Geo Time Series™, encoders or list thereof according to a series of limits. The limits are lists of pair containing the lower and upper \\ntimestamps used to clip. Each pair will generate a clipped GTS or encoder for each instance.\\n\\n@param `bounds` List of timestamp pairs. Each pair is a list of LONG.\\n\\n@param `gts` GTS to clip\\n\\n@param `lgts` List of GTSs to clip\\n\\n@param `encoder` Emcoder to clip\\n\\n@param `lencoder` List of encoders to clip\\n\\n@param `result` List of clipped GTS\\n\\n\",\"signature\":\"gts<GTS> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<GTS>>\\nlgts<LIST<GTS>> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<LIST<GTS>>>\\nencoder<GTSENCODER> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<GTSENCODER>>\\nlencoder<LIST<GTSENCODER>> bounds<LIST<LIST<LONG>>>  CLIP  result<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.2.0\",\"OPB64name\":\"CLIP\"},\"CLONE\":{\"description\":\"The `CLONE` function does a shallow copy of a given Geo Time Series™, List, Map or Vector. Since 2.1.1 it can also clone Encoders.\\n\\nAs it makes a shallow copy, be careful when using CLONE on a List of Geo Time Series™ like those generated by the use of [`FETCH`](/doc/FETCH). Modifying a Geo Time Series™ in any of those list will alter the matching Geo Time Series™ in the other List.\\nIf you want to use `CLONE` after a [`FETCH`](/doc/FETCH), you will need to extract the Geo Time Series™ from the list, for example by using [`LIST->`](/doc/I3_IK1oy), [`GET`](/doc/GET) or [`LMAP`](/doc/LMAP).\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `list` The List to clone\\n\\n@param `map` The Map to clone\\n\\n@param `set` The Set to clone\\n\\n@param `vector` The Vector to clone\\n\\n@param `encoder` The Encoder to clone\\n\\n@param `clone` The cloned Geo Time Series™, List, Map, Vector or Encoder\\n\\n@param `original` The original Geo Time Series™, List, Map, Vector or Encoder\\n\\n\",\"signature\":\"gts<GTS>  CLONE  original<GTS> clone<GTS>\\nlist<LIST>  CLONE  original<LIST> clone<LIST>\\nmap<MAP>  CLONE  original<MAP> clone<MAP>\\nset<SET>  CLONE  original<SET> clone<SET>\\nvector<VECTOR>  CLONE  original<VECTOR> clone<VECTOR>\\nencoder<GTSENCODER>  CLONE  original<GTSENCODER> clone<GTSENCODER>\",\"tags\":[\"gts\",\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONE\"},\"CLONEEMPTY\":{\"description\":\"Clones a Geo Time Series™, an Encoder or all the instances in a list of Geo Time Series™ or an Encoder, keeping only the metadata and not the values.\\n\\nThe `CLONEEMPTY` function takes as parameter a Geo Time Series™, an Encoder or a list thereof. It creates an empty clone of the input with only his metadata. The cloned metadata are:\\n * Classname\\n * Labels\\n * Attributes\\n * Lastbucket, for Geo Time Series™ only\\n * Bucketspan, for Geo Time Series™ only\\n * Bucketcount, for Geo Time Series™ only\\n * Base timestamp, for Encoders only\\n * Wrapping key, for Encoders only\\n\\nThe input parameter is consumed and the clone or list of clones is left on the stack.\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `gtsList` The list of Geo Time Series™ to clone\\n\\n@param `result` The cloned Geo Time Series™\\n\\n@param `resultList` The cloned list of Geo Time Series™\\n\\n@param `encoder` The encoder to clone\\n\\n@param `encoderList` The list of encoder to clone\\n\\n@param `encoderResult` The cloned encoder\\n\\n@param `encoderResultList` The cloned list of encoders\\n\\n\",\"signature\":\"gts<GTS>  CLONEEMPTY  result<GTS>\\ngtsList<LIST<GTS>>  CLONEEMPTY  resultList<LIST<GTS>>\\nencoder<GTSENCODER>  CLONEEMPTY  encoderResult<GTSENCODER>\\nencoderList<LIST<GTSENCODER>>  CLONEEMPTY  encoderResultList<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEEMPTY\"},\"CLONEREVERSE\":{\"description\":\"The function CLONEREVERSE clone the input and reverses the order of the elements. \\nOutput is a reference to a new object.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n@param `input` reference of the list or string to reverse.\\n\\n@param `output` reference to a new reversed list or string or byte array.\\n\\n\",\"signature\":\"input<LIST>  CLONEREVERSE  output<LIST>\\ninput<STRING>  CLONEREVERSE  output<STRING>\\ninput<BYTES>  CLONEREVERSE  output<BYTES>\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEREVERSE\"},\"COMMONTICKS\":{\"description\":\"Take a list of Geo Time Series™ and output A GTS list with only the set of ticks they have in common compared by timestamp.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with common ticks\\n\\n\",\"signature\":\"gtsList<LIST<GTS>>  COMMONTICKS  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMMONTICKS\"},\"COMPACT\":{\"description\":\"The `COMPACT` function expects a Geo Time Series™ or a **LIST** of GTS on top of the stack. For each GTS instance it reads, it will \\nproduce a GTS whith fewer values, by removing measurements which have the same value, location and elevation as the previous one. The first tick will be the kept, then ticks with value or position change will be kept. The last tick from the original gts will be copied, in order to keep the same LASTTICK.\\n\\n@param `gts` A GTS to compact\\n\\n@param `gtsList` A GTS list to compact\\n\\n@param `result` A compacted GTS\\n\\n@param `resultList` A compacted GTS list\\n\\n\",\"signature\":\"gts<GTS>  COMPACT  result<GTS>\\ngtsList<LIST<GTS>>  COMPACT  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMPACT\"},\"CONTAINS\":{\"description\":\"The `CONTAINS` function checks if the element on top of the stack is contained by the list on second position. A boolean is pushed on the stack.\\n\\nIf the parameters are two STRINGs, `CONTAINS` checks if the second STRING is contained in the first one, leaving a boolean on the stack. This latter usage is available since revision 2.1.0.\\n\\n@param `item` Depending on list construction, could be a number, a string, a boolean, NULL, a GTS...\\n\\n@param `presence` true if inputlist contains the item. false otherwise or if inputlist is empty.\\n\\n@param `list` reference to the LIST to search.\\n\\n@param `set` reference to the SET to search.\\n\\n@param `str` STRING in which to find `substr`.\\n\\n@param `substr` STRING to find in `str`.\\n\\n\",\"signature\":\"list<LIST> item<ANY>  CONTAINS  list<LIST> presence<BOOLEAN>\\nset<SET> item<ANY>  CONTAINS  set<LIST> presence<BOOLEAN>\\nstr<STRING> substr<STRING>  CONTAINS  presence<BOOLEAN>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINS\"},\"CONTAINSKEY\":{\"description\":\"The `CONTAINSKEY` function checks if the key element on top of the stack is a key \\nof the map on second position. \\n\\nThe key is consumed, and a boolean is pushed on the stack.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this key. Do not trust presence if key is NULL.\\n\\n\",\"signature\":\"inputmap<MAP> key<ANY>  CONTAINSKEY  outputmap<MAP> presence<BOOLEAN>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSKEY\"},\"CONTAINSVALUE\":{\"description\":\"The `CONTAINSVALUE` function checks if the value element on top of the stack is a value \\nof the map on second position. \\n\\nThe value is consumed, and a boolean is pushed on the stack.\\n\\n@param `value` Depending on map construction, could be a number, a string, a boolean, NULL.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this value in at least one pair of its key-value.\\n\\n\",\"signature\":\"inputmap<MAP> value<ANY>  CONTAINSVALUE  outputmap<MAP> presence<BOOLEAN>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSVALUE\"},\"CONTINUE\":{\"description\":\"Immediately stop executing the current iteration of an ongoing loop and start the next one.\\n\\n\",\"signature\":\"\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTINUE\"},\"COPYGEO\":{\"description\":\"The `COPYGEO` function forces the location elements of a GTS onto others. `COPYGEO` expects two parameters on the stack.\\nFirst input is GTS or a gts list: those series(s) will have their location overwritten by the one of the second GTS parameter. Geo information will be copied only if they are present in the second paramaters on the same tick otherwise it keep the existing location. See [`COMMONTICKS`](/doc/COMMONTICKS) to keep only commonticks before calling `COPYGEO`.\\n\\n@param `gts` A GTS\\n\\n@param `gtsList` A list of GTS\\n\\n@param `geogts` A GTS with the geo information you want to copy to other (list of) gts.\\n\\n@param `result` A GTS with the geo information of the geogts input\\n\\n@param `resultList` A list of GTS with the geo information of the geogts input\\n\\n\",\"signature\":\"gts<GTS> geogts<GTS>  COPYGEO  result<GTS>\\ngtsList<LIST<GTS>> geogts<GTS>  COPYGEO  resultList<LIST<GTS>>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYGEO\"},\"COPYSIGN\":{\"description\":\"The `COPYSIGN` function copies the sign of a number on another one and pushes back the value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` Numeric parameter on which sign is applied\\n\\n@param `p2` Numeric parameter on which sign is extracted\\n\\n@param `list1` List of numeric parameter on wich sign is applied\\n\\n@param `list2` List of numeric parameter on wich sign is extracted\\n\\n@param `result` Value of p1 with the sign of p2 s a DOUBLE\\n\\n@param `lresult` List of results\\n\\n\",\"signature\":\"p1<NUMBER> p2<NUMBER>  COPYSIGN  result<DOUBLE>\\np1<NUMBER> list2<LIST<NUMBER>>  COPYSIGN  lresult<LIST<DOUBLE>>\\nlist1<LIST<NUMBER>> p2<NUMBER>  COPYSIGN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYSIGN\"},\"CORRELATE\":{\"description\":\"The `CORRELATE` function allows you to compute correlation between one base Geo Time Series™ and a set of others. \\nBy putting the base GTS in the set of others, cross correlation can be computed.\\n\\n@param `baseGTS` The base Geo Time Series\\n\\n@param `gtsList` A list of Geo Time Series against which to compute the correlation\\n\\n@param `timeOffsets` A list of time offsets for which the correlation will be computed (expressed in time units of the Warp instance)\\n\\n@param `result` A list of synthetic Geo Time Series™ whose timestamps are the offsets from the initial offset list and the values are the computed correlations. There is one GTS per GTS in the list at TOP-1.\\n\\n\",\"signature\":\"baseGTS<GTS> gtsList<LIST> timeOffsets<LIST>  CORRELATE  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CORRELATE\"},\"COS\":{\"description\":\"The `COS` function consumes a floating point number from the top of the stack and pushes back its cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Cosine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of cosine of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  COS  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  COS  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COS\"},\"COSH\":{\"description\":\"The `COSH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic cosine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic cosine of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  COSH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  COSH  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COSH\"},\"COUNTER\":{\"description\":\"The `COUNTER` function pushes a counter (AtomicLong) initialized with the value 0 onto the stack.\\n\\nThis atomic counter can be safely shared in multiple concurrent macros (see [`CEVAL`](/doc/CEVAL)).\\n\\n@param `counter` Counter instance.\\n\\n\",\"signature\":\" COUNTER  counter<COUNTER>\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTER\"},\"COUNTERDELTA\":{\"description\":\"The `COUNTERDELTA` function increments a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `increment` Counter increment.\\n\\n\",\"signature\":\"counter<COUNTER> increment<LONG>  COUNTERDELTA  counter<COUNTER>\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERDELTA\"},\"COUNTERSET\":{\"description\":\"The `COUNTERSET` function set the value of a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `value` Counter value.\\n\\n\",\"signature\":\"counter<COUNTER> value<LONG>  COUNTERSET  counter<COUNTER>\",\"tags\":[\"counters\"],\"since\":\"1.2.22\",\"OPB64name\":\"COUNTERSET\"},\"COUNTERVALUE\":{\"description\":\"The `COUNTERVALUE` function pushes the counter value onto the stack.\\n\\n@param `counter` The counter instance.\\n\\n@param `value` The value of the counter.\\n\\n\",\"signature\":\"counter<COUNTER>  COUNTERVALUE  value<LONG>\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERVALUE\"},\"COUNTTOMARK\":{\"description\":\"Counts the number of elements on the stack up to but excluding the first mark encountered. Neither the mark nor the\\nelements on top of it are removed from the stack.\\n\\n@param `result` Stack depth until `MARK`\\n\\n\",\"signature\":\" COUNTTOMARK  result<LONG>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTTOMARK\"},\"CPOPR\":{\"description\":\"Pops a value from the top of the stack and stores it into the designated register if the register is empty (*i.e.* has `NULL` as its current value).\\n\\nThe `CPOPR` function is really a family of functions named `CPOPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"signature\":\"value<ANY>  CPOPR \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CPOPR\"},\"CPROB\":{\"description\":\"The function `CPROB` generates a new Geo Time Series™ from an input Geo Time Series™ by computing a conditional probability.\\n\\nThe function expects a **STRING** separator on top of the stack and expects the input Geo Time Series™ to have \\nvalues of the form given1< SEP >given2< SEP >....< SEP >event. It will then emit P(event|given1,given2,...).\\n\\nIf the separator is **NULL**, `CPROB` behaves like [`PROB`](/doc/PROB).\\n\\n@param `separator` Value separator\\n\\n@param `gts` Geo Time Series™\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `lresult` List of Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> separator<STRING>  CPROB  result<GTS>\\nlgts<LIST<GTS>> separator<STRING>  CPROB  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.6\",\"OPB64name\":\"CPROB\"},\"CROP\":{\"description\":\"The `CROP` function works on bucketized Geo Time Series™ instances, if transforms a GTS into another one whose bucketcount, last bucket parameters span the smallest interval with actual values. Bucket span remains the same.\\n\\nWhen called on a non bucketized GTS instance, `CROP` simply clones it.\\n\\nThis function expects a list of GTS instances on the top of the stack.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` ropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `resultList` A list of cropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n\",\"signature\":\"gts<GTS>  CROP  result<GTS>\\ngtsList<LIST<GTS>>  CROP  resultList<LIST<GTS>>\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"CROP\"},\"CSTORE\":{\"description\":\"The `CSTORE` function stores a value in a symbol or a register only if that symbol or register is not yet defined. The name of this function stands for Conditional STORE.\\n\\n@param `symbol` Name of symbol under which to store `value`.\\n\\n@param `register` Number of the register under which to store `value`.\\n\\n@param `value` Value to store unde `symbol`.\\n\\n\",\"signature\":\"value<ANY> symbol<STRING>  CSTORE \\nvalue<ANY> register<LONG>  CSTORE \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CSTORE\"},\"CUDF\":{\"description\":\"The `CUDF` function invokes a User Defined Function from a Jar as [`UDF`](/doc/UDF) but reuses a cached instance of the function.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"signature\":\"class<STRING>  CUDF \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CUDF\"},\"DEBUGOFF\":{\"description\":\"Turns off stack debugging which was turned on by [`DEBUGON`](/doc/DEBUGON) or [`NDEBUGON`](/doc/NDEBUGON).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGOFF\"},\"DEBUGON\":{\"description\":\"Turns on stack debugging which returns the stack content in case of error. Stack debugging is off by default.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGON\"},\"DECREMENTEXACT\":{\"description\":\"The `DECREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value decremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be decremented by one\\n\\n@param `result` The decremented value\\n\\n@param `lvalue` List of values to be decremented by one\\n\\n@param `lresult` List of decremented values\\n\\n\",\"signature\":\"value<NUMBER>  DECREMENTEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  DECREMENTEXACT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"DECREMENTEXACT\"},\"DEDUP\":{\"description\":\"Removes duplicate ticks.\\n\\nThe `DEDUP` function consumes a Geo Time Series™ or a **LIST** thereof from the top of the stack and pushes back the Geo Time Series™ with deduplicated ticks.\\n\\nSince the 2.7.0 version, this function can be given an optional mapper or macro to combine the duplicate data points.\\n\\n@param `gts` The Geo Time Series™ to deduplicate\\n\\n@param `result` The Geo Time Series™ with deduplicated ticks\\n\\n@param `lgts` The list of Geo Time Series™ to deduplicate\\n\\n@param `lresult` The list of Geo Time Series™ with deduplicated ticks\\n\\n@param `mapper` Mapper used to aggregate duplicate values\\n\\n@param `macro` Macro used to aggregate duplicate values given as a GTS\\n\\n\",\"signature\":\"gts<GTS>  DEDUP  result<GTS>\\ngts<GTS> mapper<AGGREGATOR>  DEDUP  lresult<GTS>\\ngts<GTS> macro<MACRO>  DEDUP  lresult<GTS>\\nlgts<LIST<GTS>>  DEDUP  lresult<LIST<GTS>>\\nlgts<LIST<GTS>> mapper<AGGREGATOR>  DEDUP  lresult<LIST<GTS>>\\nlgts<LIST<GTS>> macro<MACRO>  DEDUP  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEDUP\"},\"DEF\":{\"description\":\"The `DEF` function allows you to define new WarpScript functions or redefine existing ones for the duration of your script execution.\\n\\nThe function expects on the stack a macro which will be used as the content of the newly defined function, and a name under which to define the new function.\\n\\nWhen redefining a function, if the function being redefined is used within the macro, the code which will be executed is the current one, \\nas the binding of function to code is done at the time when the macro is defined and not when it is executed.\\n\\nYou may therefore add limits to the use of an existing function by rewrapping it in a macro which will be associated with the original function name.\\n\\nTo remove redefined functions see [`CLEARDEFS`](/doc/CLEARDEFS).\\n\\n@param `name` New function name\\n\\n@param `newDef` Macro which will be used as the content of the newly defined function\\n\\n\",\"signature\":\"newDef<MACRO> name<STRING>  DEF \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEF\"},\"DEFINED\":{\"description\":\"The `DEFINED` function checks whether or not a symbol is defined.\\n\\n@param `name` Symbol name\\n\\n@param `result` Whether or not the symbol is defined\\n\\n\",\"signature\":\"name<STRING>  DEFINED  result<BOOLEAN>\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEFINED\"},\"DEFINEDMACRO\":{\"description\":\"The `DEFINEDMACRO` function checks if a macro is defined and pushes true or false on the stack accordingly.\\n\\n@param `name` The macro name\\n\\n@param `result` True if the macro is defined, false otherwise\\n\\n\",\"signature\":\"name<STRING>  DEFINEDMACRO  result<BOOLEAN>\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.16\",\"OPB64name\":\"DEFINEDMACRO\"},\"DEFLATE\":{\"description\":\"The `DEFLATE` function compresses a STRING or a byte array using the [Zlib](https://en.wikipedia.org/wiki/Zlib) library. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"signature\":\"string<STRING>  DEFLATE  compressed<BYTES>\\nbytes<BYTES>  DEFLATE  compressed<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"DEFLATE\"},\"DELETE\":{\"description\":\"The `DELETE` function is used to delete a set of GTS from a Warp 10 platform. A delete endpoint must be set on the Warp 10 configuration.\\n\\nDelete expects 5 parameters on top of the stack: the write token of the Warp 10 application, a string corresponding to a gts selector, a start \\nand a end timestamp and finally the number of GTS expected to be deleted.\\n\\nFor safety reasons `DELETE` will first perform a dryrun call to the /delete endpoint to retrieve the number of GTS which would be deleted by the call. \\nIf this number is above the expected number provided by the user the actual delete will not be performed and instead an error will be raised.\\n\\nDelete will push as a result the number of GTS really deleted.\\n\\nIf both end_timestamp and start_timestamp are NULL, Warp 10 will perform a delete all. FETCH won't find anything after a delete all.\\n\\n```flow\\n// Write token\\n'TOKEN'\\n\\n// Gts selector\\n'gts.to.delete{}'\\n\\n// Start Timestamp\\n1479372838011043\\n\\n// End timestamp\\nNOW\\n\\n// DELETE expects a count number (if nb GTS > count, DELETE is stopped)\\n1\\n\\nDELETE \\n```\\n\\n@param `count` Number of GTS expected to be deleted\\n\\n@param `end_timestamp` End timestamp or NULL\\n\\n@param `start_timestamp` Start timestamp or NULL\\n\\n@param `gts_selector` GTS selector\\n\\n@param `writeToken` Write token\\n\\n@param `result` Actual deleted GTS count\\n\\n\",\"signature\":\"writeToken<STRING> gts_selector<STRING> start_timestamp<LONG> end_timestamp<LONG> count<LONG>  DELETE  result<LONG>\",\"tags\":[\"gts\"],\"since\":\"1.0.5\",\"OPB64name\":\"DELETE\"},\"DELETEOFF\":{\"description\":\"Disables delete operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a delete operation is attempted.\\n\\n\",\"signature\":\"message<STRING> secret<STRING>  DELETEOFF \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEOFF\"},\"DELETEON\":{\"description\":\"Enables delete operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"secret<STRING>  DELETEON \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEON\"},\"DEPTH\":{\"description\":\"The `DEPTH` function pushes on top of the stack the depth (i.e. number of levels) of the stack prior to the call.\\n\\n@param `result` Stack depth\\n\\n\",\"signature\":\" DEPTH  result<LONG>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEPTH\"},\"DEREF\":{\"description\":\"Replaces in a Macro the occurrences of symbol dereferencing (`$x`) or calls to `LOAD` with a `STRING` argument or calls to `PUSHRx` by the values associated with either the symbol name or register number in a parameter map.\\n\\nValues are used verbatim except for Macros which are inserted as functions, *i.e.* they are inserted followed by a call to `EVAL` so they are executed in the target macro instead of ending up on the stack. If you wish to replace a symbol dereference by a Macro, you need to write the macro inside of another Macro.\\n\\n\\n@param `macro` Macro to transform.\\n\\n@param `values` Map of symbol name or register number to replacement value.\\n\\n\",\"signature\":\"macro<MACRO> values<MAP>  DEREF  macro<MACRO>\",\"tags\":[\"stack\"],\"since\":\"2.3.0\",\"OPB64name\":\"DEREF\"},\"DET\":{\"description\":\"Computes the [determinant](https://en.wikipedia.org/wiki/Determinant) of a matrix.\\n\\n@param `matrix` The matrix for which to compute the determinant.\\n\\n@param `det` The computed determinant.\\n\\n\",\"signature\":\"matrix<MATRIX>  DET  det<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"DET\"},\"DIFFERENCE\":{\"description\":\"Computes the difference between two sets.\\n\\nThe `DIFFERENCE` function consumes two sets from the top of the stack and pushes back its mathematical difference (ie: the elements in *A* but not in *B*).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* - *B*, the set of elements in *A* but not in *B*\\n\\n\",\"signature\":\"setA<SET> setB<SET>  DIFFERENCE  output<SET>\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"DIFFERENCE\"},\"DISCORDS\":{\"description\":\"The `DISCORDS` function detects discords in a Geo Time Series™. The discord detection algorithm is based on identifying outlier patterns in\\nthe Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `DISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0\\n\\n@param `overlapping` Flag indicating whether or not the `DISCORDS` function should report overlapping discords\\n\\n@param `maximum` The maximum number of discords to identify\\n\\n@param `lresult` The list of Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `result` The Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n\",\"signature\":\"lgts<LIST<GTS>> wsize<LONG> length<LONG> scale<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  DISCORDS  lresult<LIST<GTS>>\\ngts<GTS> wsize<LONG> length<LONG> scale<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  DISCORDS  result<GTS>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"DISCORDS\"},\"DOC\":{\"description\":\"Consumes the String on the stack or leave it there and stop the script if the stack is currently in documentation mode ([`DOCMODE`](/doc/DOCMODE)) \\n\\nYou can use it to document macros.\\n\\n@param `string` Text to display in [`DOCMODE`](/doc/DOCMODE)\\n\\n\",\"signature\":\"string<STRING>  DOC  string<STRING>\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOC\"},\"DOCMODE\":{\"description\":\"Toggle the 'documentation mode' of the stack\\n\\n\",\"signature\":\"\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOCMODE\"},\"DOUBLEBITS->\":{\"description\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the **LONG** value as the raw bits of the **DOUBLE**\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"input<LONG>  DOUBLEBITS->  result<DOUBLE>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"G3xKFZl4FZ_JJmoy\"},\"DOUBLEEXPONENTIALSMOOTHING\":{\"description\":\"The `DOUBLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Double Exponential Smoothing aka Holt's linear trend method](https://www.otexts.org/fpp/7/2) formula.\\n\\nIt consumes three parameters from the top of the stack:\\n * A trend smoothing factor beta (a numeric parameter between 0 < beta < 1)\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** and levels are pushed onto the stack (in this order in the **LIST**).\\n\\n@param `beta` The trend smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The list within the smoothed Geo Time Series™ and its levels\\n\\n\",\"signature\":\"gts<GTS> alpha<DOUBLE> beta<DOUBLE>  DOUBLEEXPONENTIALSMOOTHING  result<LIST<GTS>>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOUBLEEXPONENTIALSMOOTHING\"},\"DROP\":{\"description\":\"The `DROP` function removes the element at the top of the stack.\\n\\n@param `input` object reference to drop from the top of the stack.\\n\\n\",\"signature\":\"input<ANY>  DROP \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROP\"},\"DROPN\":{\"description\":\"The `DROPN` function removes the top N elements of the stack after having consumed N which was on the top of the stack prior to calling `DROPN`.\\n\\n@param `number` The number of elements to drop\\n\\n\",\"signature\":\"number<NUMBER>  DROPN \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROPN\"},\"DTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) or -1 if the threshold was reached.\\n\\n\",\"signature\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  DTW  dtw<DOUBLE>\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"DTW\"},\"DUP\":{\"description\":\"The `DUP` function duplicates the element on the top of the stack, it doesn’t copy the content. If you apply DUP to a GTS you will\\nhave two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `input` any parameter on top of the stack\\n\\n@param `out` a reference copy of input on top of the stack\\n\\n\",\"signature\":\"input<ANY>  DUP  input<ANY> out<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUP\"},\"DUPN\":{\"description\":\"The `DUPN` function duplicates the top N elements of the stack after having consumed N which is on the top of the stack when calling `DUPN`.\\n\\nAs the [`DUP`](/doc/DUP) function, `DUPN` duplicates the references of the N elements on the top of the stack, it doesn’t copy the elements.\\nIf you apply `DUPN` to a GTS you will have two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `number` The number of elements to duplicate\\n\\n\",\"signature\":\"number<NUMBER>  DUPN \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUPN\"},\"DURATION\":{\"description\":\"The `DURATION` function consumes a **STRING** representing an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) and pushes back a **LONG** duration in platform time unit.\\n\\nThe ISO 8601 duration can be expessed as `PwWdDThHmMsS` with:\\n- `w` weeks\\n- `d` days\\n- `h` hours\\n- `m` minutes\\n- `s` or `s.ssssss...` seconds\\nEach of these values can be either positive or negative. Each value/unit couple can be omitted if the value is zero but at least one value/couple should be defined.\\n\\nIf the consumed ISO 8601 duration has precision under platform time unit, superfluous digits will be ignored. Prior to revision 2.4, precision below milliseconds were always ignored, independently of platform time unit.\\n\\n@param `isoDuration` A representation of a ISO 8601 duration with some limitations, see the description.\\n\\n@param `duration` Number of platform time unit corresponding to the duration.\\n\\n\",\"signature\":\"isoDuration<STRING>  DURATION  duration<LONG>\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"DURATION\"},\"DWTSPLIT\":{\"description\":\"The `DWTSPLIT` function splits a Geo Time Series™ produced by [`FDWT`](/doc/FDWT) into multiple series, one per resolution level of the Wavelet transform.\\n\\n\\n@param `label-name` Label name used in the generated series to indicate the level of each Geo Time Series™\\n\\n@param `gts` GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `lgts` List of GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `result` Splited GTS\\n\\n@param `lresult` List of splited GTS\\n\\n\",\"signature\":\"gts<GTS> label-name<STRING>  DWTSPLIT  result<GTS>\\nlgts<LIST<GTS>> label-name<STRING>  DWTSPLIT  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DWTSPLIT\"},\"E\":{\"description\":\"Alias of [e](/doc/OF).\\n\\nThe `E` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"signature\":\" E  eValue<DOUBLE>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"GF\"},\"ECGEN\":{\"description\":\"The `ECGEN` function generates a public/private key pair parameters suitable for performing [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography).\\n\\nThe resulting parameters can serve as input to [`ECPRIVATE`](/doc/ECPRIVATE) and [`ECPUBLIC`](/doc/ECPUBLIC) to generate the actual private and public keys.\\n\\nThe following curves are supported:\\n\\n`c2pnb272w1`, `c2tnb191v3`, `c2pnb208w1`, `c2tnb191v2`, `c2tnb191v1`, `prime192v3`, `c2tnb359v1`, `prime192v2`, `prime192v1`, `c2tnb239v3`, `c2pnb163v3`, `c2tnb239v2`, `c2pnb163v2`, `c2tnb239v1`, `c2pnb163v1`, `c2pnb176w1`, `prime256v1`, `c2pnb304w1`, `c2pnb368w1`, `c2tnb431r1`, `prime239v3`, `prime239v2`, `prime239v1`, `sect233r1`, `secp112r2`, `secp112r1`, `secp256k1`, `sect113r2`, `secp521r1`, `sect113r1`, `sect409r1`, `secp192r1`, `sect193r2`, `sect131r2`, `sect193r1`, `sect131r1`, `secp160k1`, `sect571r1`, `sect283k1`, `secp384r1`, `sect163k1`, `secp256r1`, `secp128r2`, `secp128r1`, `secp224k1`, `sect233k1`, `secp160r2`, `secp160r1`, `sect409k1`, `sect283r1`, `sect163r2`, `sect163r1`, `secp192k1`, `secp224r1`, `sect239k1`, `sect571k1`, `B-163`, `P-521`, `P-256`, `B-233`, `P-224`, `B-409`, `P-384`, `B-283`, `B-571`, `P-192`, `brainpoolp512r1`, `brainpoolp384t1`, `brainpoolp256r1`, `brainpoolp192r1`, `brainpoolp512t1`, `brainpoolp256t1`, `brainpoolp224r1`, `brainpoolp320r1`, `brainpoolp192t1`, `brainpoolp160r1`, `brainpoolp224t1`, `brainpoolp384r1`, `brainpoolp320t1`, `brainpoolp160t1`\\n\\n@param `curve` Name of the elliptic curve to use.\\n\\n@param `public` Map containing the public key parameters.\\n\\n@param `private` Map containing the private key parameters.\\n\\n\",\"signature\":\"curve<STRING>  ECGEN  private<MAP> public<MAP>\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECGEN\"},\"ECHOOFF\":{\"description\":\"Turns off the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" ECHOOFF \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOOFF\"},\"ECHOON\":{\"description\":\"Turns on the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of topmost stack levels to display after each WarpScript™ line, truncated if floating-point.\\n\\n\",\"signature\":\"levels<NUMBER>  ECHOON \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOON\"},\"ECPRIVATE\":{\"description\":\"The `ECPRIVATE` function generates a private key from private key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `private` Map containing ECC private key parameters.\\n\\n@param `key` ECC private key.\\n\\n\",\"signature\":\"private<MAP>  ECPRIVATE  key<KEY>\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPRIVATE\"},\"ECPUBLIC\":{\"description\":\"The `ECPUBLIC` function generates a public key from public key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `public` Map containing ECC public key parameters.\\n\\n@param `key` ECC public key.\\n\\n\",\"signature\":\"public<MAP>  ECPUBLIC  key<KEY>\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPUBLIC\"},\"ECSIGN\":{\"description\":\"The `ECSIGN` function generates a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) private key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Content to sign.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `private` Private key to use for signining.\\n\\n@param `signature` Resulting signature.\\n\\n\",\"signature\":\"data<BYTES> alg<STRING> private<KEY>  ECSIGN  signature<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECSIGN\"},\"ECVERIFY\":{\"description\":\"The `ECVERIFY` function verifies a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) public key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Signed data.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `public` Public key to use for verification.\\n\\n@param `signature` Signature to verify.\\n\\n@param `result` Validity of the signature.\\n\\n\",\"signature\":\"data<BYTES> signature<BYTES> alg<STRING> public<KEY>  ECVERIFY  result<BOOLEAN>\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECVERIFY\"},\"ELAPSED\":{\"description\":\"The `ELAPSED` function pushes onto the stack a list containing timing informations. The first element of the list is the timestamp at which \\nthe script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution \\nof the associated script line.\\n\\nTiming informations are only collected after a call to [`TIMINGS`](/doc/TIMINGS) (its line included) and before a call to [`NOTIMINGS`](/doc/NOTIMINGS)\\n (its line excluded).\\n\\n@param `result` The first element of the list is the timestamp at which the script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution of the associated script line.\\n\\n\",\"signature\":\" ELAPSED  result<LIST<LONG>>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELAPSED\"},\"ELEVATIONS\":{\"description\":\"The `ELEVATIONS` function consumes a Geo Time Series™ or a list thereof from the stack, extracts its elevations, puts them in a list and pushes the list onto the stack.      \\n\\n@param `gts` The Geo Time Series™ from which to extract the elevations\\n\\n@param `lgts` The list of Geo Time Series™ from which to extract the elevations\\n\\n@param `elevations` The elevations of the given Geo Time Series™\\n\\n@param `lelevations` The list of elevations of the given Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  ELEVATIONS  elevations<LIST<LONG>>\\nlgts<LIST<GTS>>  ELEVATIONS  lelevations<LIST<LIST<LONG>>>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELEVATIONS\"},\"EMPTY\":{\"description\":\"Reject GTS instances with values.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with empty values\\n\\n\",\"signature\":\"gtsList<LIST<GTS>>  EMPTY  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"EMPTY\"},\"ENCODER->\":{\"description\":\"The `ENCODER->` functions convert an encoder into a list of ( timestamp, latitude, longitude, elevation, value ) list. It also pushes attributes, labels and name on the stack.\\nFunction also accepts wrapped or raw-wrapped encoders or gts.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedinput` Encoder or GTS after WRAP. \\n\\n@param `rawwrappedinput` Encoder or GTS after WRAPRAW.\\n\\n@param `output` List of list of ( timestamp, latitude, longitude, elevation, value ). Missing values in the encoder or GTS are replaced by NaN.\\n\\n@param `name` Name of encoder or GTS. If no name was defined, will be NULL.\\n\\n@param `attributes` Attributes of encoder or GTS input. If none defined, will be an empty map.\\n\\n@param `labels` Labels of encoder or GTS input. If none defined, will be an empty map.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\\nwrappedinput<STRING>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\\nrawwrappedinput<BYTES>  ENCODER->  name<STRING> attributes<MAP> labels<MAP> output<LIST>\",\"tags\":[\"encoder\",\"conversion\",\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"GJt2IoG4JXoy\"},\"ERROR\":{\"description\":\"Pushes onto the stack a list containing the current error (as caught by a [`TRY`](/doc/TRY)) and its causes. Each error is a map with the following fields:\\n\\n| Field | Description |\\n| --- | --- |\\n| type | Type of the error, the Java class of the underlying exception |\\n| message | The message associated with the error |\\n| stacktrace | A list of lists, each containing `filename`, `line number`, `class name`, `method name` |      \\n\\nThe current error is the first element of the list.\\n\\nIf there is no current error, the returned list will be empty.\\n\\n@param `error` List of maps describing the current error and its causes.\\n\\n\",\"signature\":\" ERROR  error<LIST<MAP>>\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ERROR\"},\"ESDTEST\":{\"description\":\"The `ESDTEST` function detects outliers in a GTS (or a **LIST** of GTS), by applying a [generalized extreme studentized deviate test](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm).\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nA [Grubbs’](/doc/GRUBBSTEST)test is done for one candidate at a time. Then, the candidate is removed from the set and another [Grubbs’](/doc/GRUBBSTEST)test\\nis performed. This process is iterated a given number of times. The detected outliers are the removed values and the current candidate of the last successful\\ntest.\\n\\nA **LIST** of ticks (or a **LIST** of **LIST** of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"signature\":\"gts<GTS> k<LONG> mad<BOOLEAN> alpha<DOUBLE>  ESDTEST  result<LIST<LONG>>\\ngts<GTS> k<LONG> mad<BOOLEAN>  ESDTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> k<LONG> mad<BOOLEAN> alpha<DOUBLE>  ESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> k<LONG> mad<BOOLEAN>  ESDTEST  resultList<LIST<LIST<LONG>>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ESDTEST\"},\"EVAL\":{\"description\":\"The `EVAL` function evaluates the statements contained in the string at the top of the stack as if they had been entered individually or runs the macro at the top os the stack.\\n\\n@param `string` String to evaluate\\n\\n@param `macro` Macro to run\\n\\n\",\"signature\":\"macro<MACRO>  EVAL \\nstring<STRING>  EVAL \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVAL\"},\"EVALSECURE\":{\"description\":\"The `EVALSECURE` function executes a secure script. The script must have been created on a platform with the same secure script cryptographic key as the current platform (note that this is not the *secret* set using [`SECUREKEY`](doc/SECUREKEY)).\\n\\n@param `secure` String containing the secure script to execute.\\n\\n@param `return` The return values depend on the actual code of the secure script.\\n\\n\",\"signature\":\"secure<STRING>  EVALSECURE  return<ANY>\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVALSECURE\"},\"EVERY\":{\"description\":\"When called via the `/mobius` endpoint, the `EVERY` function sets the repeat interval for the preceding macro.\\n\\nWhen called outside of `/mobius`, the `EVERY` function simply executes the macro.\\n\\n@param `repeat` The repeat interval to enforce, in milliseconds.\\n\\n@param `macro` The macro to execute.\\n\\n\",\"signature\":\"macro<MACRO> repeat<LONG>  EVERY \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVERY\"},\"EXP\":{\"description\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a floating point value x consumed from the top of the stack,\\n i.e. e<sup>x</sup>.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List where each value is e<sup>x</sup>\\n\\n\",\"signature\":\"value<NUMBER>  EXP  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  EXP  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXP\"},\"EXPM1\":{\"description\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a DOUBLE value x consumed from the top of the stack then subtracts one, i.e. e<sup>x</sup>-1.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>-1\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List of e<sup>x</sup>-1\\n\\n\",\"signature\":\"value<NUMBER>  EXPM1  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  EXPM1  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXPM1\"},\"EXPORT\":{\"description\":\"The `EXPORT` function allows you to set or update a list of symbols which will be dumped upon script termination. This proves handy when \\ndebugging a script as you can visualize, even in the case of errors, the value of specific symbols.\\n\\nThe function expects either a symbol name (a **STRING**) which will be added to the current list of exported symbols, a list of symbol \\nname which will replace the current list of exported symbols, an empty list to disable symbol export altogether, or a list with a single\\n**NULL** element to instruct the WarpScript engine to export all existing symbols.\\n\\nWhen symbols should be exported, the debug mode is implied (see [`DEBUGON`](/doc/DEBUGON)).\\n\\n@param `symbol` Symbol name\\n\\n@param `symbols` List of symbols\\n\\n\",\"signature\":\"symbol<STRING>  EXPORT \\nsymbols<LIST>  EXPORT \",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.2\",\"OPB64name\":\"EXPORT\"},\"EXTLOADED\":{\"description\":\"Checks if a WarpScript extension is loaded or not and therefore available.      \\n\\n@param `ext` Name of extension to check.\\n\\n@param `loaded` Boolean indicating whether or not the specified extension is loaded in the WarpScript environment.\\n\\n\",\"signature\":\"ext<STRING>  EXTLOADED  loaded<BOOLEAN>\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"EXTLOADED\"},\"F\":{\"description\":\"`F` stand for `false`. It is a boolean constant.\\n\\n\\n@param `b` false\\n\\n\",\"signature\":\" F  b<BOOLEAN>\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"F\"},\"FAIL\":{\"description\":\"The `FAIL` function stops the execution of the WarpScript scripts by throwing an exception.\\n\\n\",\"signature\":\"\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FAIL\"},\"FDWT\":{\"description\":\"The `FDWT` function performs a [Forward Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Fast_wavelet_transform#Forward_DWT) on a Geo Time Series™.\\n\\nA number of different [Wavelets](https://en.wikipedia.org/wiki/Wavelet) are available, the list is inspired by that available on \\nthe [Wavelet Browser](http://wavelets.pybytes.com/).\\n\\nThe list of Wavelets which can be used is the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\nThe FDWT can only be applied to Geo Time Series™ with a number of values which is a power of 2.\\n\\nAssuming the input GTS has 2<sup>n</sup> values, the result of the FDWT transformation is a GTS with 2<sup>n</sup> values (the wavelet coefficients) with timestamps from 0 to 2<sup>n</sup>-1.\\n\\nThe ticks of the `n` levels are contiguous, with the first tick being for level `n`, the next 2 for level `n-1`, the next 4 for level `n-2`, up to the last 2<sup>n-1</sup> for level 1.\\n\\nLevel 1 has the finest time resolution but the coarsest frequency resolution. Each level has half (coarser) the time resolution and double (finer) the frequency resolution as the previous level.\\n\\n@param `wavelet` Name of wavelet to use for the transformation.\\n\\n@param `gts` Geo Time Series™ instance on which to perform the FDWT.\\n\\n@param `lgts` List of Geo Time Series™ on which to apply the FDWT.\\n\\n@param `fdwt` Transformed Geo Time Series™.\\n\\n@param `lfdwt` List of transformed Geo Time Series™.\\n\\n\",\"signature\":\"gts<GTS> wavelet<STRING>  FDWT  fdwt<GTS>\\nlgts<LIST<GTS>> wavelet<STRING>  FDWT  lfdwt<LIST<GTS>>\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FDWT\"},\"FETCH\":{\"description\":\"The `FETCH` function interacts with the Warp 10 Storage Engine to retrieve data according to given criteria.\\n\\n`FETCH` either accepts a list of 5 parameters or a map with the parameters. Those are defining the **read access rights**, the **concerned Geo Time Series** and the **time window**. Other parameters in the map input are optional. \\n\\nThe list input is here to keep backward compatibility with old WarpScripts. The map input allows a great flexibility, as described below.\\n\\n### Access rights\\nA valid read token is needed to read data with fetch. If you use a [metaset](/doc/METASET) and also specify a token, the token included in the metaset will be ignored.\\n\\n### Concerned Geo Time Series\\n`FETCH` selects Geo Time Series according to:\\n+ The `selectors` parameter, which is a list of selector.\\n+ If `selectors` is not found, `FETCH` uses the `selector` parameter which is a single selector.\\n+ If `selector` is not found, `FETCH`  uses both `class` and `labels` parameters.  \\n\\n### Time window\\n`FETCH`  begins from the newest value and stop when the oldest value is collected. Thus, `end` must be defined in your request and defines the newest included value in your time window. If `end` is anterior to your oldest value, the result will be empty (no Geo Time Series). The span of the time window ending at `end` is then defined according to:\\n+ The `timespan` parameter.\\n+ If `timespan` is not defined, `FETCH` collects a maximum of `count` point.\\n+ If `count` is not defined, `FETCH` determines `timespan` with `start`. If `start` is more recent than `end`, `end` and `start` are permuted internally. Be careful, this means `end` is included but  **`start` is excluded from the time window**.\\n\\n### Boundaries\\nSince version 2.3.0, you can define *boundaries* around the requested data. When fetching data based on a time range, both a *pre* and *post* boundaries can be specified. When fetching by count, only a *pre* boundary can be requested.\\nBoundaries are a number of datapoints which are either before (*pre* boundary) or after (*post* boundary) the fetched data. Fetching boundaries is very useful when storing only the changes of values as they enable you to always fetch datapoints even if the requested time range does not contain any. They can also be used to fetch the first `N` datapoints after a given timestamp.\\nNote that fetching *post* boundaries is less efficient than fetching the requested range or a *pre* boundary as the data has to be scanned in reverse order which has an impact on I/Os and ultimately on performance.\\n\\n### Sampling options\\n+ Since version 2.3.0, you can randomly sample points with the `sample` parameter. If `sample` equals 0.1, `FETCH` will randomly return one point out of ten. This implementation is the fastest way to resample data.\\n+ Since version 2.3.0, you can `skip` the N newest datapoints in the time window specified.\\n\\n### Query without looking into directory\\nThe fetch time to read one gts among millions of gts recorded with the same classname, the same application and the same owner can take time. Use the `gts` parameter to select if you exactly know the classname and all the labels.\\n\\nIf you want to read only Geo Time Series attributes or labels, using [FIND](/doc/FIND) is more efficient than fetching the last value.\\n\\n@param `token` Read token to use to fetch the data.\\n\\n@param `class` Selector for the GTS classes. Can either be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `labels` Map of labels selectors. The key is the label name, the value a selector which can be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `start` Oldest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `end` Newest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n@param `metaset` A set of Geo Time Series™ produced by the [`METASET`](/doc/METASET) function.\\n\\n@param `type` Name of type to force for the GTS, either LONG, DOUBLE, BOOLEAN or STRING.\\n\\n@param `typeattr` Name of label to use for storing the GTS type. This option is incompatible with 'type', when set values of different types are ventilated in separate GTS with the same set of class and labels and an additional *type* label of the given name.\\n\\n@param `timespan` Depth to consider when fetching the datapoints. If the value is positive then it is interpreted as a duration in time units, if it is negative then as the maximum number of datapoints to fetch. If negative, incompatible with 'count'.\\n\\n@param `count` Maximum number of datapoints to fetch for each GTS. Incompatible with negative 'timespan'.\\n\\n@param `extra` List of extraneous classes to fetch. For each GTS matching the selection criteria, GTS with those extra class names will be fetched too (with the *exact* same set of labels).\\n\\n@param `active.after` Timestamp after which a GTS must have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `quiet.after` Timestamp after which a GTS must not have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `gts` Explicit list of Geo Time Series™ to fetch. The class and labels will be used as is and not serve as selectors.\\n\\n@param `boundary` Number of datapoints to include in both *pre* and *post* boundaries.\\n\\n@param `boundary.pre` Number of datapoints in the *pre* boundary.\\n\\n@param `boundary.post` Number of datapoints in the *post* boundary.\\n\\n@param `sampling.ratio` A probability between 0 (excluded, no datapoints returned) and 1.0 (all datapoints returned). The random sampling is done by the storage layer, which is the most efficient.\\n\\n@param `skip.count` Set fetch to ignore the N newest points in the time window you specified.\\n\\n\",\"signature\":\"[ token<STRING> class<STRING> labels<MAP> end<LONG> timespan<LONG> ]  FETCH  data<LIST<GTS>>\\n[ token<STRING> class<STRING> labels<MAP> start<STRING> end<STRING> ]  FETCH  data<LIST<GTS>>\\n{ token<STRING> class<STRING> labels<MAP> end<LONG> start<STRING> timespan<LONG> count<LONG> selector<STRING> selectors<LIST<STRING>> metaset<STRING> type<STRING> typeattr<STRING> extra<LIST<STRING>> active.after<LONG> quiet.after<LONG> gts<LIST<GTS>> boundary.post<LONG> boundary.pre<LONG> boundary<LONG> skip.count<LONG> sampling.ratio<DOUBLE>  } FETCH  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCH\"},\"FETCHBOOLEAN\":{\"description\":\"The `FETCHBOOLEAN` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type BOOLEAN.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"linput<LIST>  FETCHBOOLEAN  data<LIST<GTS>>\\nminput<MAP>  FETCHBOOLEAN  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHBOOLEAN\"},\"FETCHDOUBLE\":{\"description\":\"The `FETCHDOUBLE` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type DOUBLE.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"linput<LIST>  FETCHDOUBLE  data<LIST<GTS>>\\nminput<MAP>  FETCHDOUBLE  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHDOUBLE\"},\"FETCHLONG\":{\"description\":\"The `FETCHLONG` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type LONG.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"linput<LIST>  FETCHLONG  data<LIST<GTS>>\\nminput<MAP>  FETCHLONG  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHLONG\"},\"FETCHSTRING\":{\"description\":\"The `FETCHSTRING` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type STRING.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"linput<LIST>  FETCHSTRING  data<LIST<GTS>>\\nminput<MAP>  FETCHSTRING  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHSTRING\"},\"FFT\":{\"description\":\"The `FFT` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFT` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe real parts of the `FFT` coefficients, the second the imaginary parts. The scale factor is equal to X/(n * bucketspan) where n is the number\\nof elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the number\\nof values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFT` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the real parts of the `FFT` coefficients, the second the imaginary parts.\\n\\n\",\"signature\":\"gts<GTS>  FFT  result<LIST<GTS>>\\ngtsList<LIST<GTS>>  FFT  result<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFT\"},\"FFTAP\":{\"description\":\"The `FFTAP` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFTAP` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe amplitude of the coefficient at that frequency and the second the associated phase. The scale factor is equal to X/(n * bucketspan) where n is\\nthe number of elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the\\nnumber of values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFTAP` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the amplitude of the coefficient at that frequency and the second the associated phase.\\n\\n\",\"signature\":\"gts<GTS>  FFTAP  result<LIST<GTS>>\\ngtsList<LIST<GTS>>  FFTAP  result<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFTAP\"},\"FFTWINDOW\":{\"description\":\"The `FFTWINDOW` transforms Geo Time Series™ by applying a [window function](https://en.wikipedia.org/wiki/Window_function) to its values. The function supports the following windows:\\n\\n| Name | Window |\\n| --- | --- |\\n| `triangular` | [Triangular](https://en.wikipedia.org/wiki/Window_function#Triangular_window) |\\n| `parzen` | [Parzen](https://en.wikipedia.org/wiki/Window_function#Parzen_window) |\\n| `welch` | [Welch](https://en.wikipedia.org/wiki/Window_function#Welch_window) |\\n| `sine` | [Sine](https://en.wikipedia.org/wiki/Window_function#Sine_window) |\\n| `hann` | [Hann](https://en.wikipedia.org/wiki/Window_function#Hann_window) |\\n| `hamming` | [Hamming](https://en.wikipedia.org/wiki/Window_function#Hamming_window) |\\n| `blackman` | [Blackman](https://en.wikipedia.org/wiki/Window_function#Blackman_window) |\\n| `nuttall` | [Nuttall](https://en.wikipedia.org/wiki/Window_function#Nuttall_window,_continuous_first_derivative) | \\n| `blackman-nuttall` | [Blackman-Nuttall](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Nuttall_window) |\\n| `blackman-harris` | [Blackman-Harris](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Harris_window) |\\n| `flattop` | [Flat top](https://en.wikipedia.org/wiki/Window_function#Flat_top_window) |\\n| `rectangular` | [Rectangular](https://en.wikipedia.org/wiki/Window_function#Rectangular_window) |\\n\\n@param `window` Name of the window function to apply.\\n\\n@param `gts` Single Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `windowed` Tranformed Geo Time Series™.\\n\\n@param `lwindowed` List of transformed Geo Time Series™.\\n\\n\",\"signature\":\"gts<GTS> window<STRING>  FFTWINDOW  windowed<GTS>\\nlgts<LIST<GTS>> window<STRING>  FFTWINDOW  lwindowed<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"FFTWINDOW\"},\"FILL\":{\"description\":\"The `FILL` function fills missing values in two Geo Time Series™ so they end up with identical ticks.\\n\\nThe filling is done using a *filler* function which applies a given strategy. Filler functions can be created using macros via the [`MACROFILLER`](/doc/MACROFILLER) function.\\n\\n@param `gtsa` First Geo Time Series™ to fill.\\n\\n@param `gtsb` Second Geo Time Series™ to fill.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"gtsa<GTS> gtsb<GTS> filler<FILLER>  FILL  gtsa<GTS> gtsb<GTS>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"FILL\"},\"FILLNEXT\":{\"description\":\"The `FILLNEXT` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation of the \\nnext non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"signature\":\"gts<GTS>  FILLNEXT  result<GTS>\\ngtsList<LIST<GTS>>  FILLNEXT  resultList<LIST<GTS>>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLNEXT\"},\"FILLPREVIOUS\":{\"description\":\"The `FILLPREVIOUS` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation \\nof the previous non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"signature\":\"gts<GTS>  FILLPREVIOUS  result<GTS>\\ngtsList<LIST<GTS>>  FILLPREVIOUS  resultList<LIST<GTS>>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLPREVIOUS\"},\"FILLTICKS\":{\"description\":\"The `FILLTICKS` function add values to a Geo Time Series™ instance or a list thereof for ticks in the given **LIST**.\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n@param `data` List of (latitude, longitude, elevation, ticks) where ticks is a list of ticks.\\n\\n\",\"signature\":\"gts<GTS> data<LIST>  FILLTICKS  result<GTS>\\ngtsList<LIST<GTS>> data<LIST>  FILLTICKS  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLTICKS\"},\"FILLVALUE\":{\"description\":\"The `FILLVALUE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with a fixed value/location/elevation.\\n\\nIt expects a GTS or a list thereof on the top of the stack after having consumed a list of parameters (latitude, longitude, elevation, value)\\nsitting on top of the stack prior to the call.\\n\\nLocation must be floating point numbers (e.g. 0.0 not 0). Elevation must be an integer. If no location or elevation should be set, **NaN** can\\nbe used instead of specific value.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n\\n\\nThe value is cast to the type of the GTS value\\n\\n@param `gts` The Geo Time Series™ to fill\\n\\n@param `gtsList` The list of Geo Time Series™ to fill\\n\\n@param `result` The filled Geo Time Series™\\n\\n@param `resultList` The list of filled Geo Time Series™\\n\\n@param `data` The list of parameters (latitude, longitude, elevation, value)\\n\\n\",\"signature\":\"gts<GTS> data<LIST>  FILLVALUE  result<GTS>\\ngtsList<LIST<GTS>> data<LIST>  FILLVALUE  resultList<LIST<GTS>>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLVALUE\"},\"FILTER\":{\"description\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `FILTER` framework allows for advanced filtering using N-ary functions\\n(functions which accept N parameters).\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A single list containing only the selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `FILTER`.\\n\\n\",\"signature\":\"[ gtsList<LIST<GTS>> labels<LIST<STRING>> filter<FILTER> ]  FILTER  result<LIST<GTS>>\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILTER\"},\"FILTERBY\":{\"description\":\"The `FILTERBY` function selects elements of a list based on the boolean return value of a macro evaluated for each element.\\n\\n@param `macro` Macro used for filtering. This macro should consume the element of the list pushed on top of the stack and leave a boolean on the stack. If this boolean is `true`, the element will be retained.\\n\\n@param `list` List of elements to filter.\\n\\n@param `sublist` List with the selected elements from `list`.\\n\\n\",\"signature\":\"list<LIST> macro<MACRO>  FILTERBY  sublist<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"FILTERBY\"},\"FIND\":{\"description\":\"The `FIND` function finds Geo Time Series™ labels and attributes of GTS, not their values. It is the fastest way to read attributes of GTS. `FIND` ask only `directory` component of Warp&nbsp;10™, while [FETCH](/doc/FETCH) first ask `directory`, then ask `store` to read GTS values. \\n\\nSyntax is close to [FETCH](/doc/FETCH), without time boundaries or data point count.\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `data` List of fetched Geo Time Series™. These GTS does not contain any value.\\n\\n@param `uuidattribute` Setting this to true add `.uuid` attribute in the output data. This UUID is a hash of class and label.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n\",\"signature\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FIND  data<LIST<GTS>>\\n[ uuidattribute<BOOLEAN> token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FIND  data<LIST<GTS>>\\n{ token<STRING> classSelector<STRING> labelsSelector<MAP>  } FIND  data<LIST<GTS>>\\n{ token<STRING> selector<STRING>  } FIND  data<LIST<GTS>>\\n{ token<STRING> selectors<LIST<STRING>>  } FIND  data<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIND\"},\"FINDSETS\":{\"description\":\"The `FINDSETS` function returns sets of values for the classes, labels and attributes of the Geo Time Series™ which matched the selection criteria.\\n\\nThose results can be used for example to update a UI with lists of possible values for labels when exploring a corpus of GTS.\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label names to exact match or regular expression (if the value starts with a *~*) for matching labels and attributes.\\n\\n@param `attributes` Map of attribute names to value list.\\n\\n@param `labels` Map of label names to value list.\\n\\n@param `classes` List of class names.\\n\\n\",\"signature\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FINDSETS  classes<LIST<STRING>> labels<MAP> attributes<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSETS\"},\"FINDSTATS\":{\"description\":\"The `FINDSTATS` function computes statistics on matching Geo Time Series™. The estimations are based on the use of [HyperLogLogPlus](https://en.wikipedia.org/wiki/HyperLogLog) estimators.\\n\\nThe function returns a map containing information about the matching Geo Time Series. The fields of the map are the following:\\n\\n| Key | Value |\\n|-----|-------|\\n| `gts.estimate` | Estimation of the number of matching Geo Time Series™ |\\n| `classes.estimate` | Estimation of the number of distinct class names |\\n| `labelnames.estimate` | Estimation of the number of distinct label names |\\n| `labelvalues.estimate` | Estimation of the number of distinct label values |\\n| `per.class.estimate` | If the number of matching classes is below the `directory.stats.class.maxcardinality`, this key will be associated with a map containing per class estimate of number of GTS |\\n| `per.label.value.estimate` | If the number of label names in the matching GTS is below `directory.stats.labels.maxcardinality`, this key will be associated with a map containing an estimation of distinct label values per label name |\\n| `error.rate` | This is the error rate of the estimators used for computing the estimations |\\n| `partial.results` | When accessing a sharded Directory, this will be set to `true` if only partial results were collected |\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `result` Map containing stats such as error rate or whether estimates on classes, gts, or labels.\\n\\n\",\"signature\":\"[ token<STRING> classSelector<STRING> labelsSelector<MAP> ]  FINDSTATS  result<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSTATS\"},\"FIRSTTICK\":{\"description\":\"The `FIRSTTICK` function pushes on the stack the timestamp of the first tick of the Geo Time Series™ on top of the stack.\\n\\nWhen applied to a list of GTS, `FIRSTTICK` will return the lowest first tick found across all Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` Timestamp. If the GTS does not have values, **Long.MAX_VALUE** is pushed.\\n\\n\",\"signature\":\"gts<GTS>  FIRSTTICK  result<LONG>\\nlgts<LIST<GTS>>  FIRSTTICK  result<LONG>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIRSTTICK\"},\"FLATTEN\":{\"description\":\"The function `FLATTEN` inspects the top of the stack.\\n\\nIf it is a LIST of values,\\nit inspects each value and replaces each value which was a LIST with its content.\\n`FLATTEN` proceed recursively until all LISTs have been flattened.\\n\\nIf it is not a LIST, the function exits and let the stack in the same state.\\n\\n@param `input` Input is a list who may contains lists\\n\\n@param `notAList` An object which is not a list\\n\\n@param `output` Output list do not contains anymore nested lists\\n\\n\",\"signature\":\"input<LIST>  FLATTEN  output<LIST>\\nnotAList<ANY>  FLATTEN  notAList<ANY>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLATTEN\"},\"FLOATBITS->\":{\"description\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the 32 lower bits of the **LONG** value as the raw bits of a **FLOAT**.\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"input<LONG>  FLOATBITS->  result<DOUBLE>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"GZlEFKG1HKGIAIs\"},\"FLOOR\":{\"description\":\"The `FLOOR` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number smaller than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-down value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-down values, for each given value.\\n\\n\",\"signature\":\"value<NUMBER>  FLOOR  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  FLOOR  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLOOR\"},\"FLOORDIV\":{\"description\":\"The `FLOORDIV` function consumes two NUMBER values, convert them to LONGs and pushes back largest LONG value that is less than or equal to the algebraic quotient.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fDiv` The largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfDiv` List of largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n\",\"signature\":\"dividend<NUMBER> divisor<NUMBER>  FLOORDIV  fDiv<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  FLOORDIV  lfDiv<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  FLOORDIV  lfDiv<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORDIV\"},\"FLOORMOD\":{\"description\":\"The `FLOORMOD` function consumes two NUMBER values, convert them to LONGs and pushes back the floor modulus which is x - (floorDiv(x, y) * y).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fMod` The floor modulus x - (floorDiv(x, y) * y)\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfMod` List of floor modulus x - (floorDiv(x, y) * y)\\n\\n\",\"signature\":\"dividend<NUMBER> divisor<NUMBER>  FLOORMOD  fMod<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  FLOORMOD  lfMod<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  FLOORMOD  lfMod<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORMOD\"},\"FOR\":{\"description\":\"The `FOR` function implements a for loop. It takes three arguments from the stack: the initial and the final values of the loop index and a macro to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"initial<NUMBER> final<NUMBER> macro<MACRO>  FOR \\ninitial<NUMBER> final<NUMBER> macro<MACRO> index<BOOLEAN>  FOR \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOR\"},\"FOREACH\":{\"description\":\"The `FOREACH` function implements a for loop on a list or map.\\n\\nFor each iteration i on a list, the i-th element on the list is put on top of the stack, and the exec macro is then called.\\n\\nFor each iteration i on a map, the exec macro is called with the i-th value on top of the stack, and the i-th key just below on the stack.\\nYou can start your macro with `'value' STORE 'key' STORE`.\\n\\nSince release 2.1, `FOREACH` has the ability to iterate over Geo Time Series™ and GTS Encoders. When iterating over a GTS or Encoder, the macro is fed with a list of the form `[ tick lat lon elev value ]` where `lat`, `lon` and `elev` may be `NaN` if unset. In the case of an Encoder, `value` can be a byte array or a `BigDecimal` on top of `LONG`, `DOUBLE`, `STRING` or `BOOLEAN`.\\n\\nSince release 2.4.0, you can force FOREACH to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `exec` Macro to apply\\n\\n@param `list` List to iterate on\\n\\n@param `map` Map to iterate on\\n\\n@param `set` Set to iterate on\\n\\n@param `vector` Vector to iterate on\\n\\n@param `gts` GTS to iterate on\\n\\n@param `string` String to iterate on\\n\\n@param `encoder` GTSEncoder to iterate on\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"list<LIST> exec<MACRO>  FOREACH \\nmap<MAP> exec<MACRO>  FOREACH \\nset<SET> exec<MACRO>  FOREACH \\nvector<VLIST> exec<MACRO>  FOREACH \\nstring<STRING> exec<MACRO>  FOREACH \\ngts<GTS> exec<MACRO>  FOREACH \\nencoder<GTSENCODER> exec<MACRO>  FOREACH \\nlist<LIST> exec<MACRO> index<BOOLEAN>  FOREACH \\nmap<MAP> exec<MACRO> index<BOOLEAN>  FOREACH \\nset<SET> exec<MACRO> index<BOOLEAN>  FOREACH \\nvector<VLIST> exec<MACRO> index<BOOLEAN>  FOREACH \\nstring<STRING> exec<MACRO> index<BOOLEAN>  FOREACH \\ngts<GTS> exec<MACRO> index<BOOLEAN>  FOREACH \\nencoder<GTSENCODER> exec<MACRO> index<BOOLEAN>  FOREACH \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOREACH\"},\"FORGET\":{\"description\":\"Removes a symbol from the symbol table.      \\n\\n@param `symbol` Name of the symbol to remove.\\n\\n\",\"signature\":\"symbol<STRING>  FORGET \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORGET\"},\"FORSTEP\":{\"description\":\"The `FORSTEP` function implements for loop with an index step. It takes four arguments from the stack: the initial and the final values of the loop index,\\na macro step to evaluate after each iteration and an other one to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `step` Macro step to evaluate after each iteration, typically to compute index\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"initial<NUMBER> final<NUMBER> step<MACRO> macro<MACRO>  FORSTEP \\ninitial<NUMBER> final<NUMBER> step<MACRO> macro<MACRO> index<BOOLEAN>  FORSTEP \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORSTEP\"},\"FROMBIN\":{\"description\":\"Converts the binary representation on top of the stack into the corresponding long.\\n\\n@param `input` Binary representation of a signed long, 64 characters max.\\n\\n@param `output` Signed long of input.\\n\\n\",\"signature\":\"input<STRING>  FROMBIN  output<LONG>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBIN\"},\"FROMBITS\":{\"description\":\"**This function is deprecated. Replace it in your code by the [`DOUBLEBITS->`](/doc/G3xKFZl4FZ_JJmoy) function.**\\n\\nConverts the **LONG** on top of the stack into a **DOUBLE** by considering it a raw bit representation.\\n\\n@param `input` Raw bit representation to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"input<LONG>  FROMBITS  result<DOUBLE>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBITS\"},\"FROMHEX\":{\"description\":\"Converts an hexadecimal representation into a signed long. 64bits max.\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Signed long\\n\\n\",\"signature\":\"input<STRING>  FROMHEX  output<LONG>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMHEX\"},\"FUNCTIONS\":{\"description\":\"FUNCTIONS returns a list of every functions available in your Warp 10 environnment, including native and extension functions.\\n\\nIt could be useful when coding your own extension to check your new functions are correctly registered.\\n\\n\\nFUNCTIONS allow anyone to discover new extensions you created on the platform, so it is deactivated by default.\\n\\nYou must add `warpscript.extension.inventory=io.warp10.script.ext.inventory.InventoryWarpScriptExtension` in your configuration file for this function to be available.\\n\\n@param `functions` List of Warp 10 functions available on this instance\\n\\n\",\"signature\":\" FUNCTIONS  functions<LIST<STRING>>\",\"tags\":[\"platform\",\"extensions\"],\"since\":\"1.2.16\",\"OPB64name\":\"FUNCTIONS\"},\"FUSE\":{\"description\":\"Fuses Geo Time Series™ chunks. The fusion process attempts to keep the bucketization parameters if all chunks are bucketized with compatible `bucketspan` and `lastbucket` values.\\n\\nAll chunks must be of the same type.\\n\\nThe fused GTS will have the common class name of the chunks or no class name if some chunks have a different class name. The labels will be those common to all chunks, so when fusing chunks created with [`CHUNK`](/doc/CHUNK), the chunk id will be dropped.\\n\\n@param `chunks` List of Geo Time Series™ to fuse.\\n\\n@param `gts` Geo Time Series™ resulting from the fusion of `chunk`.\\n\\n\",\"signature\":\"chunks<LIST<GTS>>  FUSE  gts<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FUSE\"},\"GEO.BUFFER\":{\"description\":\"The `GEO.BUFFER` function allows to create [*buffer*](https://en.wikipedia.org/wiki/Buffer_(GIS)) **GEOSHAPE** objects. The function takes a `MAP` instance as input. This map can contain the following entries:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `dist` | Distance of the buffer, as a central angle expressed in degrees. |\\n| `mdist` | Distance of the buffer expressed in meters. This key is only taken into account if `dist` is not specified. |\\n| `cap` | The end cap style to consider, use `SQUARE`, `FLAT` or `ROUND` (default). |\\n| `join` | The join style to use, use `BEVEL`, `MITRE` or `ROUND` (default). |\\n| `limit` | The mitre limit to use. Defaults to 5.0. |\\n| `segments` | Number of segments to use per quadrant, defaults to 8. |\\n| `singlesided` | Set to `true` to compute a single sided buffer. If `true`, positive distance will indicate left-hand side and negative distance right-hand side. End cap is ignored for single sided buffers. |\\n| `wkb` | Byte array containing a [WKB](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary) definition of a geographic area. |\\n| `wkt` | String containing a [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) definition of a geographic area. |\\n| `geojson` | String containing a [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) definition of a geographic area. |\\n\\nIf a geographic area is defined, only one of `wkb`, `wkt` or `geojson` may be specified. The output of the function is a new definition of a geographic area with the buffer added to the original definition.\\n\\nIf no geographic area is defined, `GEO.BUFFER` will define a buffer which will be used by the next call to either [`GEO.WKT`](/doc/GEO.WKT), [`GEO.WKB`](/doc/GEO.WKB) or [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `params` Parameter map containing keys as defined above.\\n\\n@param `wkb` Area definition with the buffer added, if `params` had a value for key `wkb`.\\n\\n@param `area` Area definition with the buffer added, in WKT or GeoJSON depending on the presence of key `wkt` or `geojson` in `params`.\\n\\n\",\"signature\":\"params<MAP>  GEO.BUFFER  wkb<BYTES>\\nparams<MAP>  GEO.BUFFER  area<STRING>\\nparams<MAP>  GEO.BUFFER \",\"tags\":[\"geo\"],\"since\":\"2.7.0\",\"OPB64name\":\"GEO.BUFFER\"},\"GEO.COVER\":{\"description\":\"The `GEO.COVER` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* in which the input Geo Time Series™ or GTS Encoder had datapoints.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"signature\":\"gts<GTS> resolution<LONG>  GEO.COVER  geoshape<GEOSHAPE>\\nencoder<GTSENCODER> resolution<LONG>  GEO.COVER  geoshape<GEOSHAPE>\\nlist<LIST> resolution<LONG>  GEO.COVER  geoshapes<LIST<GEOSHAPE>>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER\"},\"GEO.COVER.RL\":{\"description\":\"The `GEO.COVER.RL` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* which cover the path of an input Geo Time Series™ or GTS Encoder. The path is considered to follow [rhumb lines](https://en.wikipedia.org/wiki/Rhumb_line), hence the function suffix `.RL`.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"signature\":\"gts<GTS> resolution<LONG>  GEO.COVER.RL  geoshape<GEOSHAPE>\\nencoder<GTSENCODER> resolution<LONG>  GEO.COVER.RL  geoshape<GEOSHAPE>\\nlist<LIST> resolution<LONG>  GEO.COVER.RL  geoshapes<LIST<GEOSHAPE>>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER.RL\"},\"GEO.DIFFERENCE\":{\"description\":\"The `GEO.DIFFERENCE` function computes the difference between two GEOSHAPE. The resulting GEOSHAPE instance contains cells which cover the part of the first GEOSHAPE which is not in the second. If you need to have cells up to a certain resolution, you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the result.\\n\\n@param `shapeA` GEOSHAPE instance from which to subtract the second shape.\\n\\n@param `shapeB` GEOSHAPE to subtract from 'shapeA'.\\n\\n@param `shape` GEOSHAPE containing 'shapeA' minus 'shapeB'.\\n\\n\",\"signature\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.DIFFERENCE  shape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.DIFFERENCE\"},\"GEO.INTERSECTION\":{\"description\":\"The `GEO.INTERSECTION` function computes the intersection of two GEOSHAPE instances. The intersection process will produce a GEOSHAPE whose cells are common to the two initial shapes. The common cells will be of various resolutions, depending on the resolutions of the cells from the initial shapes. If you need the resulting shape to contain cells up to a specific resolution, you can call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) either on the result or on the initial shapes.\\n\\n@param `shapeA` First GEOSHAPE instance.\\n\\n@param `shapeB` Second GEOSHAPE instance.\\n\\n@param `shapes` GEOSHAPE instances.\\n\\n@param `shape` Geographical area (GEOSHAPE) resulting from the intersection of the given shapes.\\n\\n\",\"signature\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.INTERSECTION  shape<GEOSHAPE>\\nshapes<LIST<GEOSHAPE>>  GEO.INTERSECTION  shape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTION\"},\"GEO.INTERSECTS\":{\"description\":\"The `GEO.INTERSECTS` function checks if a Geo Time Series or each GTS from a list has at least one data point with a position inside a given geographical area. Since `2.7.1`, the function can also check if two `GEOSHAPE` instances intersect.\\n\\n@param `shapeA` First `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shapeB` Second `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shape` Instance of GEOSHAPE containing the area which the Geo Time Series must intersect.\\n\\n@param `gts` Single instance of Geo Time Series.\\n\\n@param `lgts` List of Geo Time Series.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series had at least one datapoint in 'shape' or if the two shapes intersect.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had at least one datapoint in 'shape'.\\n\\n\",\"signature\":\"gts<GTS> shape<GEOSHAPE>  GEO.INTERSECTS  result<BOOLEAN>\\nlgts<LIST<GTS>> shape<GEOSHAPE>  GEO.INTERSECTS  results<LIST<BOOLEAN>>\\nshapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.INTERSECTS  result<BOOLEAN>\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTS\"},\"GEO.JSON\":{\"description\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GeoJSON<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.JSON  geoshape<GEOSHAPE>\\nGeoJSON<STRING> resolution<LONG> inside<BOOLEAN>  GEO.JSON  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.2.9\",\"OPB64name\":\"GEO.JSON\"},\"GEO.JSON.UNIFORM\":{\"description\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.JSON`](doc/GEO.JSON), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GeoJSON<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.JSON.UNIFORM  geoshape<GEOSHAPE>\\nGeoJSON<STRING> resolution<LONG> inside<BOOLEAN>  GEO.JSON.UNIFORM  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.JSON.UNIFORM\"},\"GEO.NORMALIZE\":{\"description\":\"The `GEO.NORMALIZE` function ensures that the intersection of two **GEOSHAPE**s is present in both as an identical set of cells.\\n\\n@param `shapeA` The first GEOSHAPE to normalize.\\n\\n@param `shapeB` The second GEOSHAPE to normalize.\\n\\n@param `normalizedA` A normalized copy of the first GEOSHAPE.\\n\\n@param `normalizedB` A normalized copy of the second GEOSHAPE.\\n\\n\",\"signature\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.NORMALIZE  normalizedA<GEOSHAPE> normalizedB<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEO.NORMALIZE\"},\"GEO.OPTIMIZE\":{\"description\":\"The `GEO.OPTIMIZE` function optimizes a GEOSHAPE instance by modifying its cells to either limit the finest resolution present in the shape or reduce the number of cells by merging cells which cover a whole cell at the coarser resolution.\\n\\n@param `shape` GEOSHAPE instance to optimize.\\n\\n@param `resolution` Finest resolution acceptable (even number from 2 to 32) or 0 to reduce the number of cells.\\n\\n@param `optimized` Optimized GEOSHAPE instance\\n\\n\",\"signature\":\"shape<GEOSHAPE> resolution<LONG>  GEO.OPTIMIZE  optimized<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.OPTIMIZE\"},\"GEO.REGEXP\":{\"description\":\"The `GEO.REGEXP` function converts a GEOSHAPE into a regular expression to select hexadecimal [HHCode](https://en.wikipedia.org/wiki/HHCode) STRINGs which are included in the GEOSHAPE.\\n\\n@param `shape` An instance of GEOSHAPE.\\n\\n@param `regexp` A regular expression for matching HHCodes covered by 'shape'.\\n\\n\",\"signature\":\"shape<GEOSHAPE>  GEO.REGEXP  regexp<STRING>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GEO.REGEXP\"},\"GEO.UNION\":{\"description\":\"The `GEO.UNION` function computes a GEOSHAPE which is the union of two other shapes. The resulting shape will have cells covering the two original shapes. If you need to have cells up to a certain resolution you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the resulting shape.\\n\\n@param `shapeA` First GEOSHAPE instance to merge.\\n\\n@param `shapeB` Second GEOSHAPE instance to merge.\\n\\n@param `shapes` GEOSHAPE instances to merge.\\n\\n@param `shape` Resulting GEOSHAPE which is the union of the given shapes.\\n\\n\",\"signature\":\"shapeA<GEOSHAPE> shapeB<GEOSHAPE>  GEO.UNION  shape<GEOSHAPE>\\nshapes<LIST<GEOSHAPE>>  GEO.UNION  shape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.UNION\"},\"GEO.WITHIN\":{\"description\":\"The `GEO.WITHIN` function checks whether a Geo Time Series™ or each GTS from a list have all its datapoints with a location inside a given geographical area.\\n\\n@param `shape` Instance of GEOSHAPE containing the area inside which the Geo Time Series™ must be contained.\\n\\n@param `gts` Single instance of Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series™ had all its datapoints with a location inside 'shape'.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had all its datapoints with a location inside 'shape'.\\n\\n\",\"signature\":\"gts<GTS> shape<GEOSHAPE>  GEO.WITHIN  result<BOOLEAN>\\nlgts<LIST<GTS>> shape<GEOSHAPE>  GEO.WITHIN  results<LIST<BOOLEAN>>\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WITHIN\"},\"GEO.WKB\":{\"description\":\"The `GEO.WKB` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"WKB<BYTES> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKB  geoshape<GEOSHAPE>\\nWKB<BYTES> resolution<LONG> inside<BOOLEAN>  GEO.WKB  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB\"},\"GEO.WKB.UNIFORM\":{\"description\":\"The `GEO.WKB.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKB`](doc/GEO.WKB), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"signature\":\"WKB<BYTES> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKB.UNIFORM  geoshape<GEOSHAPE>\\nWKB<BYTES> resolution<LONG> inside<BOOLEAN>  GEO.WKB.UNIFORM  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB.UNIFORM\"},\"GEO.WKT\":{\"description\":\"The `GEO.WKT` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"WKT<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKT  geoshape<GEOSHAPE>\\nWKT<STRING> resolution<LONG> inside<BOOLEAN>  GEO.WKT  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WKT\"},\"GEO.WKT.UNIFORM\":{\"description\":\"The `GEO.WKT.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKT`](doc/GEO.WKT), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"signature\":\"WKT<STRING> percentage<DOUBLE> inside<BOOLEAN>  GEO.WKT.UNIFORM  geoshape<GEOSHAPE>\\nWKT<STRING> resolution<LONG> inside<BOOLEAN>  GEO.WKT.UNIFORM  geoshape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.2.11\",\"OPB64name\":\"GEO.WKT.UNIFORM\"},\"GEOCELL->\":{\"description\":\"The `GEOCELL->` function converts a **LONG** geocell to a **STRING** HHCode prefix. The resulting string length is half the resolution of the geocell.\\n\\nThis function cannot convert to **BYTES** because this representation is limited to resolutions multiple of 4.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `geocell` A geocell.\\n\\n@param `hhPrefix` A HHCode prefix representing the given cell.\\n\\n\",\"signature\":\"geocell<LONG>  GEOCELL->  hhPrefix<STRING>\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEFoKBI1oy\"},\"GEOHASH->\":{\"description\":\"The `GEOHASH->` converts a [Geohash](https://en.wikipedia.org/wiki/Geohash), exposing the latitude and longitude it contains, or transforms a list of Geohashes into a `GEOSHAPE`.\\n\\n@param `geohash` Geohash to unpack.\\n\\n@param `geohashes` List of Geohashes defining a geographical area.\\n\\n@param `lat` Unpacked latitude.\\n\\n@param `lon` Unpacked longitude.\\n\\n@param `toHHCodeString` Set to `true` to convert the GeoHash to a HHCode STRING or to `false` to convert it to a LONG HHCode instead of extracting its latitude and longitude.\\n\\n@param `hhcode` The HHCode for `geohash`, as a LONG or STRING.\\n\\n@param `shape` Warp 10 `GEOSHAPE` covering the same geographic area as the Geohashes in `geohashes`.\\n\\n\",\"signature\":\"geohash<STRING>  GEOHASH->  lat<DOUBLE> lon<DOUBLE>\\ngeohash<STRING> toHHCodeString<BOOLEAN>  GEOHASH->  hhcode<ANY>\\ngeohashes<LIST<STRING>>  GEOHASH->  shape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GoKEH34IH1oy\"},\"GEOPACK\":{\"description\":\"The `GEOPACK` function takes a **GEOSHAPE** and packs it into a String.\\n\\n@param `shape` The GEOSHAPE instance to pack.\\n\\n@param `packed` The packed string representation of the GEOSHAPE.\\n\\n\",\"signature\":\"shape<GEOSHAPE>  GEOPACK  packed<STRING>\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOPACK\"},\"GEOSHAPE->\":{\"description\":\"The `GEOSHAPE->` function converts **GEOSHAPE** to a list of **LONG** geocells or **STRING** HHCode prefixes. Conversion to list of **BYTES** is not supported, because this representation only supports resolution multiple of 4.\\n\\n@param `geoshape` The geoshape to get the cells from.\\n\\n@param `toString` Whether to convert the cells to **STRING** HHCode prefix (true) or geocells (false).\\n\\n@param `geocells` List of geocells.\\n\\n@param `geocellsOrHHPrefixes` List of **LONG** geocells or **STRING** HHCode prefixes.\\n\\n\",\"signature\":\"geoshape<GEOSHAPE>  GEOSHAPE->  geocells<LIST<LONG>>\\ngeoshape<GEOSHAPE> toString<BOOLEAN>  GEOSHAPE->  geocellsOrHHPrefixes<LIST<ANY>>\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEJoW0J3JhEV\"},\"GEOSHIFT\":{\"description\":\"`GEOSHIFT` functions shifts a geoshape on the earth. It is able to safely overlap the poles or the 180th meridian.\\n- Longitude shift keeps distances.\\n- Latitude shift keeps angles, not distances.\\n- When doing latitude shift, you can specify a meridian to shift along this meridian. It means a positive shift became a negative shift behind this meridian +/- 90°.\\n\\nSet precision parameter to zero for safe shifting operation. See [`GEO.WKT`](/doc/GEO.WKT) for precision encoding.\\n\\nUse [`->GEOJSON`](/doc/AIt6GJx9JoxD) to visualize shapes and the results. GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `lon` degrees of longitude to shift (-360 to 360).\\n\\n@param `lat` degrees of latitude to shift (-180 to 180).\\n\\n@param `precision` even number from 0 to 30. Set to 0 for automatic resolution. Force to another value if you know the input resolution to be finer and you want a coarser resolution.\\n\\n@param `shape` The input geoshape.\\n\\n@param `output` The shifted geoshape.\\n\\n@param `meridian` When doing latitude shift, you can specify a meridian to shift along this meridian. (-180 to 180)\\n\\n\",\"signature\":\"shape<GEOSHAPE> lat<DOUBLE> lon<DOUBLE> precision<LONG>  GEOSHIFT  output<GEOSHAPE>\\nshape<GEOSHAPE> meridian<DOUBLE> lat<DOUBLE> lon<DOUBLE> precision<LONG>  GEOSHIFT  output<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSHIFT\"},\"GEOSPLIT\":{\"description\":\"The `GEOSPLIT` function splits a **GEOSHAPE** into a set of **GEOSHAPE**s which have no adjacent cells (each shape is a connected space).\\n\\nAdjacent cells share part of their side. Adjacency is not provided by corners and cells on each side of the international date line are not considered adjacent either.\\n\\n@param `shape` The GEOSHAPE instance to split.\\n\\n@param `subshapes` The shapes whose union form `shape` and which each form a connected space.\\n\\n\",\"signature\":\"shape<GEOSHAPE>  GEOSPLIT  subshapes<LIST<GEOSHAPE>>\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSPLIT\"},\"GEOUNPACK\":{\"description\":\"The `GEOUNPACK` function unpacks a GEOSHAPE previously packed using [`GEOPACK`](/doc/GEOPACK).\\n\\n@param `packed` A packed string representation of a GEOSHAPE.\\n\\n@param `packedbytes` A byte array representation of a GEOSHAPE.\\n\\n@param `shape` The decoded instance of GEOSHAPE.\\n\\n\",\"signature\":\"packed<STRING>  GEOUNPACK  shape<GEOSHAPE>\\npackedbytes<BYTES>  GEOUNPACK  shape<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOUNPACK\"},\"GET\":{\"description\":\"Retreive a value in a **MAP** or a **list**.\\n\\nThe `GET` function consumes on the top of the stack a list, a byte array, or a map, and the index (or the key), \\nthen put the result on the stack. \\n\\nIf key is not found, it returns NULL on the stack.\\n\\nIf index is out of bound, `GET` raises an error.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, GET can operate recursively on nested lists. In this case, the index is a list.\\n\\n@param `map` The input MAP.\\n\\n@param `key` Depending on map construction, could be a number, a string, a list, another map, a GTS, a boolean.\\n\\n@param `mapvalue` The value for the requested key. If key do not exists in map, returns NULL\\n\\n@param `index` The index number in the list. Valid values in [-size; size-1]\\n\\n@param `list` The input LIST.\\n\\n@param `value` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `array` Byte array from which to read a byte.\\n\\n@param `bytevalue` The value of the byte, always unsigned (from 0 to 255).\\n\\n\",\"signature\":\"map<MAP> key<ANY>  GET  mapvalue<ANY>\\nlist<LIST> index<LONG>  GET  value<ANY>\\nlist<LIST> index<LIST>  GET  value<ANY>\\narray<BYTES> index<LONG>  GET  bytevalue<LONG>\",\"tags\":[\"lists\",\"maps\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"GET\"},\"GETEXPONENT\":{\"description\":\"The `GETEXPONENT` function consumes a DOUBLE, a LONG casted as a DOUBLE or a COUNTER caster as DOUBLE and pushes back the unbiased exponent used in the representation of this DOUBLE.\\n\\n@param `n` The decimal value to get the exponent from, will be converted to DOUBLE if not already the case.\\n\\n@param `exponent` the unbiased exponent of the argument\\n\\n\",\"signature\":\"n<NUMBER>  GETEXPONENT  exponent<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"GETEXPONENT\"},\"GETHOOK\":{\"description\":\"Extracts the macro associated with a token hook and pushes it onto the stack wrapped as a secure script.\\n\\nIf the token does not contain the given hook, an empty macro will be wrapped.\\n\\n@param `hook` Name of the hook to extract from the token.\\n\\n@param `token` Read token from which to extract the hook.\\n\\n@param `secure` Hook macro wrapped in a secure script.\\n\\n\",\"signature\":\"token<STRING> hook<STRING>  GETHOOK  secure<STRING>\",\"tags\":[\"platform\"],\"since\":\"1.0.8\",\"OPB64name\":\"GETHOOK\"},\"GETSECTION\":{\"description\":\"The `GETSECTION` function pushes onto the stack the name of the current section.\\n\\n@param `section` Name of the current section.\\n\\n\",\"signature\":\" GETSECTION  section<STRING>\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"GETSECTION\"},\"GOLDWRAP\":{\"description\":\"The `GOLDWRAP` function wraps a Geo Time Series™ or a GTS Encoder in a deterministic way, by sorting on timestamps but also on values, locations and elevations.\\n\\nThis version of a `WRAP` like function is meant to create a *gold standard* blob from its input. In order to ensure reproducibility of the processs, attributes should be dropped prior to calling `GOLDWRAP`.\\n\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `wrap` Wrapped Geo Time Series™ instance to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders to wrap.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  GOLDWRAP  wrapped<BYTES>\\ngts<GTS>  GOLDWRAP  wrapped<BYTES>\\nwrap<BYTES>  GOLDWRAP  wrapped<BYTES>\\nlist<LIST<GTS>>  GOLDWRAP  lwrapped<LIST<BYTES>>\\nlist<LIST<GTSENCODER>>  GOLDWRAP  lwrapped<LIST<BYTES>>\\nlist<LIST<BYTES>>  GOLDWRAP  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"GOLDWRAP\"},\"GROUPBY\":{\"description\":\"The `GROUPBY` function groups the elements of a list according to the value returned by a macro.\\n\\n@param `macro` Macro used for grouping, consumes an element off the stack and produces a value on the stack.\\n\\n@param `list` List of elements to group.\\n\\n@param `grouped` List of groups, each group is a list whose first element is the group key and whose second element is the sublist of `list` for which `macro` produced the same value.\\n\\n\",\"signature\":\"list<LIST> macro<MACRO>  GROUPBY  grouped<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"GROUPBY\"},\"GRUBBSTEST\":{\"description\":\"The `GRUBBSTEST` function detects an outlier in a GTS (or a LIST of GTS), by applying a \\n[Grubbs’](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h1.htm) test.\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nIt tests whether there is exactly a single outlier in a GTS or not. For an iterative version which can detect multiple outliers, use instead\\n[`ESDTEST`](/doc/ESDTEST).\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> ### Reference \\n> Grubbs, Frank (February 1969). “Procedures for Detecting Outlying Observations in Samples”. Technometrics (Technometrics, Vol. 11, No. 1).\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"signature\":\"gts<GTS> mad<BOOLEAN> alpha<DOUBLE>  GRUBBSTEST  result<LIST<LONG>>\\ngts<GTS> mad<BOOLEAN>  GRUBBSTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> mad<BOOLEAN> alpha<DOUBLE>  GRUBBSTEST  resultList<LIST>\\ngtsList<LIST<GTS>> mad<BOOLEAN>  GRUBBSTEST  resultList<LIST<LIST<LONG>>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"GRUBBSTEST\"},\"GTSHHCODE->\":{\"description\":\"The `GTSHHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude. This function is very similar to [`HHCODE->`](/doc/H3W2IoG4AIs) except that when given the internal value used by Geo Time Series™ for a missing location it pushes back `NaN NaN`.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"signature\":\"hhcode<LONG>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<STRING>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<BYTES>  GTSHHCODE->  lat<DOUBLE> lon<DOUBLE>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GpGIH3W2IoG4AIs\"},\"GZIP\":{\"description\":\"The `GZIP` function compresses a STRING or a byte array using the [gzip](https://en.wikipedia.org/wiki/Gzip) algorithm. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"signature\":\"string<STRING>  GZIP  compressed<BYTES>\\nbytes<BYTES>  GZIP  compressed<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"GZIP\"},\"HASH\":{\"description\":\"Computes a 64 bits hash of the string or byte array on top of the stack.\\n\\n@param `str` String to hash\\n\\n@param `bytes` Bytes to hash\\n\\n@param `result` 64bit hash\\n\\n\",\"signature\":\"str<STRING>  HASH  result<LONG>\\nbytes<BYTES>  HASH  result<LONG>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"HASH\"},\"HAVERSINE\":{\"description\":\"The `HAVERSINE` function consumes two coordinates and pushes back a **DOUBLE** [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance) in meters.\\n\\n@param `p2_longitude` Point 2 longitude.\\n\\n@param `p2_latitude` Point 2 latitude.\\n\\n@param `p1_longitude` Point 1 longitude.\\n\\n@param `p1_latitude` Point 1 latitude.\\n\\n@param `haversineDistance` Great circle distance using the haversine fonction.\\n\\n\",\"signature\":\"p1_latitude<NUMBER> p1_longitude<NUMBER> p2_latitude<NUMBER> p2_longitude<NUMBER>  HAVERSINE  haversineDistance<DOUBLE>\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"HAVERSINE\"},\"HEADER\":{\"description\":\"The `HEADER` function allows you to set custom headers which should be returned in the HTTP response. This obviously works only for the `/exec` Warp 10 endpoint.\\n\\n@param `name` Name of HTTP header to return, MUST start with `X-`, *i.e.* be a custom header.\\n\\n@param `value` Value to return for the `name` header. If `NULL`, the specified header is removed from the list of headers to return.\\n\\n\",\"signature\":\"name<STRING> value<STRING>  HEADER \",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"HEADER\"},\"HEX->\":{\"description\":\"Converts a hexadecimal string representation into a bytes array.\\nBytes array cannot be represented on the stack.\\n\\n@param `input` A valid hexadecimal string.\\n\\n@param `output` Bytes Array from input. Seen as null on the stack.\\n\\n\",\"signature\":\"input<STRING>  HEX->  output<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H3KNAIs\"},\"HEXTOB64\":{\"description\":\"Decodes the hex encoded content on top of the stack and \\nimmediately re-encode it in base64. This enables you to \\nconvert encoded content which would not be valid UTF-8 encoding \\nfrom hexadecimal to base64.      \\n\\n@param `input` A valid hexadecimal string\\n\\n@param `output` Base64 representation of input\\n\\n\",\"signature\":\"input<STRING>  HEXTOB64  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOB64\"},\"HEXTOBIN\":{\"description\":\"Converts a string representing a hexadecimal number into a string representing a binary number.\\n\\nThe `HEXTOBIN` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from hexadecimal to binary.\\n\\n@param `input` The string representing a hexadecimal number\\n\\n@param `output` The string representing a binary number\\n\\n\",\"signature\":\"input<STRING>  HEXTOBIN  output<STRING>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOBIN\"},\"HHCODE->\":{\"description\":\"The `HHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"signature\":\"hhcode<LONG>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<STRING>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\\nhhcode<BYTES>  HHCODE->  lat<DOUBLE> lon<DOUBLE>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"H3W2IoG4AIs\"},\"HHCODE.BBOX\":{\"description\":\"The `HHCODE.BBOX` function returns the bounding box of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the bounding box representing the lat/lon of North-Easth and South-West corners of the bbox.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `latSW` Latitude of the south west corner of the bounding box\\n\\n@param `lonSW` Longitude of the south west corner of the bounding box\\n\\n@param `latNE` Latitude of the north east corner of the bounding box\\n\\n@param `lonNE` Longitude of the north east corner of the bounding box\\n\\n\",\"signature\":\"hhCode<STRING> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<LONG> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<BYTES> resolution<LONG>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<STRING>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\\nhhCode<BYTES>  HHCODE.BBOX  latSW<DOUBLE> lonSW<DOUBLE> latNE<DOUBLE> lonNE<DOUBLE>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.BBOX\"},\"HHCODE.CENTER\":{\"description\":\"The `HHCODE.CENTER` function returns the center of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the center and returns its lat/lon.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `lat` Latitude of the center of the given HHCode\\n\\n@param `lon` Longitude of the center of the given HHCode\\n\\n\",\"signature\":\"hhCode<STRING> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<LONG> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<BYTES> resolution<LONG>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<STRING>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\\nhhCode<BYTES>  HHCODE.CENTER  lat<DOUBLE> lon<DOUBLE>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.CENTER\"},\"HHCODE.EAST\":{\"description\":\"The `HHCODE.EAST` function returns the cell east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.EAST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.EAST\"},\"HHCODE.NORTH\":{\"description\":\"The `HHCODE.NORTH` function returns the cell north of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH\"},\"HHCODE.NORTH.EAST\":{\"description\":\"The `HHCODE.NORTH.EAST` function returns the cell north east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH.EAST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.EAST\"},\"HHCODE.NORTH.WEST\":{\"description\":\"The `HHCODE.NORTH.WEST` function returns the cell north west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.NORTH.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.NORTH.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.NORTH.WEST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.WEST\"},\"HHCODE.SOUTH\":{\"description\":\"The `HHCODE.SOUTH` function returns the cell south of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH\"},\"HHCODE.SOUTH.EAST\":{\"description\":\"The `HHCODE.SOUTH.EAST.EAST` function returns the cell south east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH.EAST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH.EAST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH.EAST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.EAST\"},\"HHCODE.SOUTH.WEST\":{\"description\":\"The `HHCODE.SOUTH.WEST` function returns the cell south west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.SOUTH.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.SOUTH.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.SOUTH.WEST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.WEST\"},\"HHCODE.WEST\":{\"description\":\"The `HHCODE.WEST` function returns the cell west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"inputHHCode<STRING> resolution<LONG>  HHCODE.WEST  outputHHCode<STRING>\\ninputHHCode<LONG> resolution<LONG>  HHCODE.WEST  outputHHCode<LONG>\\ninputHHCode<BYTES> resolution<LONG>  HHCODE.WEST  outputHHCode<BYTES>\\ninputHHCode<STRING>  HHCODE.WEST  outputHHCode<STRING>\\ninputHHCode<BYTES>  HHCODE.WEST  outputHHCode<BYTES>\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.WEST\"},\"HIDE\":{\"description\":\"The `HIDE` function hides some levels of the stack to the rest of the executing code. This allows a kind of protection for levels which should not be accessed by a macro call for example. Note that this is not a real protection since a call to [`SHOW`](/doc/SHOW) could reveal the hidden levels.\\n\\nThe hidden levels are always the deepest. Depending on the `levels` parameter to the call to `HIDE`, the hidden levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there remains at most a certain number ((*abs(`levels`)*) with `levels` < 0).\\n\\nWhen called with `NULL` as parameter, `HIDE` will hide all the visible levels.\\n\\nThe number of newly hidden levels is returned.\\n\\n@param `levels` Number of levels to hide or to remain visible, or `NULL` to hide them all.\\n\\n@param `hidden` Number of levels actually hidden.\\n\\n\",\"signature\":\"levels<LONG>  HIDE  hidden<LONG>\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"HIDE\"},\"HLOCATE\":{\"description\":\"The `HLOCATE` function locates the HBase regions containing a list of Geo Time Series™.\\n\\nThis function only works with the distributed version of Warp 10™.\\n\\nIt outputs a list of lists containing a GTS selector, the host and port of the RegionServer currently serving the region and the region id of a region containing data for this GTS.\\n\\n@param `gts` List of Geo Time Series™ to locate.\\n\\n@param `result` List of GTS, RegionServer, region tuples.\\n\\n\",\"signature\":\"gts<LIST<GTS>>  HLOCATE  result<LIST>\",\"tags\":[\"extensions\"],\"since\":\"1.2.13\",\"OPB64name\":\"HLOCATE\"},\"HULLSHAPE\":{\"description\":\"Return the shape of a tensor (or multidimensional array) that would be able to contain all the values of an input nested list. The size of the returned shape is equal to the deepest level of nesting plus one. Its i-th value is equal to the size of the largest list that is nested i levels deep.\\n\\n@param `list` The input list.\\n\\n@param `shape` The hull shape of the input list.\\n\\n\",\"signature\":\"list<LIST>  HULLSHAPE  shape<LIST>\\n{ list<LIST>  } HULLSHAPE  shape<LIST>\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"HULLSHAPE\"},\"HUMANDURATION\":{\"description\":\"The `HUMANDURATION` function consumes a **LONG** duration and push back an easily readable **STRING** representation of this duration.\\n\\nThe format of the pushed back **STRING** is **[Dd][Hh][Mm]S.XXXXXXs** with D as days, H as hours, M as minutes, S as seconds and XXXXXX the number of ms (3 digits), us (6 digits) or ns (9 digits) depending on the platform configuration. If the duration is less than a day, Dd is omitted, sames goes with Hh and Mm.\\n\\n@param `duration` Duration expressed in the platform time unit.\\n\\n@param `humanReadableDuration`  A representation of the duration, easily readable for a human.\\n\\n\",\"signature\":\"duration<LONG>  HUMANDURATION  humanReadableDuration<STRING>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"HUMANDURATION\"},\"HYBRIDTEST\":{\"description\":\"The `HYBRIDTEST` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\nLike [`STLESDTEST`](/doc/STLESDTEST), `HYBRIDTEST` performs an [`ESDTEST`](/doc/ESDTEST) onto a GTS that have been relieved of its seasonal and trend part. \\nBut unlike the mentioned test, [`STL`](/doc/STL) and [`ESDTEST`](/doc/ESDTEST) are performed piecewise. Plus, the trend is approximated with the piecewise \\nmedian instead of the trend part of the [`STL`](/doc/STL) decomposition.\\n\\nA LIST of ticks (or a LIST of LIST of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis technique was first developped at [Twitter](https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series).\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ## References\\n> - Owen Vallis, Jordan Hochenbaum, Arun Kejariwal. “A Novel Technique for Long-Term Anomaly Detection in the Cloud”, Twitter Inc (2014).\\n> - Cleveland, Robert B., et al. “STL: A seasonal-trend decomposition procedure based on loess.” Journal of Official Statistics 6.1 (1990): 3-73.\\n> - Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n\\n@param `parameters` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `lgts` List of [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n\",\"signature\":\"gts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE> parameters<MAP>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG> parameters<MAP>  HYBRIDTEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE> parameters<MAP>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST  result<LIST<LIST<LONG>>>\\nlgts<LIST<GTS>> period<LONG> piece<LONG> k<LONG> parameters<MAP>  HYBRIDTEST  result<LIST<LIST<LONG>>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST\"},\"HYBRIDTEST2\":{\"description\":\"The `HYBRIDTEST2` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\n`HYBRIDTEST2` is almost the same procedure than [`HYBRIDTEST`](/doc/HYBRIDTEST) except that it does not use [`STL`](/doc/STL) decomposition for the \\nseasonal extract.\\n\\nThe seasonal part is approximated by pondering each value with the [entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29) of the \\n[modified Z-score](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm) of its seasonal subseries (series with only the values of the \\nsame season).\\n\\nThis test is usually preferred when it is meaningful to think in term of entropy, for example when the GTS represents counters of events. Also as it \\ndoes not use [`STL`](/doc/STL) decomposition, it is not prone to border effects, but at the cost of not detecting slight outliers.\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n@param `gtsList` List of GTS\\n\\n\",\"signature\":\"gts<GTS> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST2  result<LIST<LONG>>\\ngts<GTS> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST2  result<LIST<LONG>>\\ngtsList<LIST<GTS>> period<LONG> piece<LONG> k<LONG> alpha<DOUBLE>  HYBRIDTEST2  result<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> period<LONG> piece<LONG> k<LONG>  HYBRIDTEST2  result<LIST<LIST<LONG>>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST2\"},\"HYPOT\":{\"description\":\"HYPOT function returns the radius r from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta), r = sqrt(x²+y²).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `result` radius r in polar coordinates\\n\\n@param `lresult` List of radiuses r in polar coordinates\\n\\n\",\"signature\":\"x<NUMBER> y<NUMBER>  HYPOT  result<DOUBLE>\\nx<NUMBER> ly<LIST<NUMBER>>  HYPOT  lresult<LIST<DOUBLE>>\\nlx<LIST<NUMBER>> y<NUMBER>  HYPOT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYPOT\"},\"IDENT\":{\"description\":\"The `IDENT` function pushes onto the stack the value of the system property `warp.ident`.\\n\\n@param `ident` The value of the `warp.ident` property.\\n\\n\",\"signature\":\" IDENT  ident<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDENT\"},\"IDWT\":{\"description\":\"The `IDWT` function computes an Inverse [Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Discrete_wavelet_transform) on a Geo Time Series™.\\n\\nThe names of the available Wavelet are the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\n\\n@param `wavelet` Wavelet to consider\\n\\n@param `gts` Geo Time Series™ which contains the wavelet coefficients as is returned by [`FDWT`](/doc/FDWT).\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> wavelet<STRING>  IDWT  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDWT\"},\"IEEEREMAINDER\":{\"description\":\"The `IEEEREMAINDER` function consumes two parameters, a dividend f1 and a divisor f2. This function push the remainder onto the stack as\\nprescribed by the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_754-1985).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` Dividend, converted as DOUBLE if not already the case.\\n\\n@param `divisor` Divisor, converted as DOUBLE if not already the case.\\n\\n@param `result` Remainder\\n\\n@param `ldividend` List of dividends, converted as DOUBLE if not already the case.\\n\\n@param `ldivisor` List of divisors, converted as DOUBLE if not already the case.\\n\\n@param `lresult` List of remainders\\n\\n\",\"signature\":\"dividend<NUMBER> divisor<NUMBER>  IEEEREMAINDER  result<LONG>\\ndividend<NUMBER> ldivisor<LIST<NUMBER>>  IEEEREMAINDER  lresult<LIST<LONG>>\\nldividend<LIST<NUMBER>> divisor<NUMBER>  IEEEREMAINDER  lresult<LIST<LONG>>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"IEEEREMAINDER\"},\"IFFT\":{\"description\":\"The `IFFT` function computes an Inverse [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) of two Geo Time Series™ \\nrepresenting real and imaginary parts of FFT coefficients.\\n\\nThe result is the reconstructed Geo Time Series™. The ticks of this reconstructed GTS are the coefficient indices. They must be multipled by the original \\nbucketspan to space the ticks according to the decomposed Geo Time Series™. The bucketspan is equal to `X / (n * factor)` where `X` is the number of time \\nunits in a second, `n` is the number of coefficients and `factor` is the scale factor returned by `FFT`.\\n\\n@param `im` GTS containing the imaginary part\\n\\n@param `real` GTS containing the real parts of the `FFT` coefficients\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"signature\":\"real<GTS> im<GTS>  IFFT  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFFT\"},\"IFT\":{\"description\":\"The `IFT` function is a conditional construct which will run a macro only if a boolean condition is true. The condition can either be a boolean on the stack or the result of a macro run.\\n\\n@param `check` Boolean which will be checked as the conditional test.\\n\\n@param `if` Macro which will be executed to determine the conditional test. This macro must leave a boolean on the stack.\\n\\n@param `then` Macro which is executed if the conditional test is `true`.\\n\\n@param `result` State of the stack after the `then` macro is executed.\\n\\n\",\"signature\":\"if<MACRO> then<MACRO>  IFT  result<ANY*>\\ncheck<BOOLEAN> then<MACRO>  IFT  result<ANY*>\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFT\"},\"IFTE\":{\"description\":\"The `IFTE` function is a conditional construct which evaluates a condition and executes one of two macros depending on the condition (`true` or `false`). The condition can either be a BOOLEAN value on the stack or a macro which will be executed and must leave a BOOLEAN on the stack.\\n\\n@param `else` Macro executed if the condition is `false`.\\n\\n@param `then` Macro executed if the condition is `true`.\\n\\n@param `if` Macro executed to evaluate the condition. Must leave a BOOLEAN on top of the stack.\\n\\n@param `condition` Boolean value used as the condition.\\n\\n@param `result` Result of the execution of either the `then` or `else` macro.\\n\\n\",\"signature\":\"if<MACRO> then<MACRO> else<MACRO>  IFTE  result<ANY*>\\ncondition<BOOLEAN> then<MACRO> else<MACRO>  IFTE  result<ANY*>\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFTE\"},\"IMMUTABLE\":{\"description\":\"Transforms a collection (**LIST**, **MAP**, **VLIST**, **SET**) into an immutable one. Any attempt to modify the immutable collection will fail. The original collection is not modified.\\n\\n@param `list` List to wrap into an immutable wrapper.\\n\\n@param `map` Map to wrap into an immutable wrapper.\\n\\n@param `set` Set to wrap into an immutable wrapper.\\n\\n@param `vector` Vector to wrap into an immutable wrapper.\\n\\n@param `immutableList` Immutable version of 'list'.\\n\\n@param `immutableMap` Immutable version of 'map'.\\n\\n@param `immutableSet` Immutable version of 'set'.\\n\\n@param `immutableVector` Immutable version of 'vector'.\\n\\n\",\"signature\":\"list<LIST>  IMMUTABLE  immutableList<LIST>\\nmap<MAP>  IMMUTABLE  immutableMap<MAP>\\nset<SET>  IMMUTABLE  immutableSet<SET>\\nvector<VLIST>  IMMUTABLE  immutableVector<VLIST>\",\"tags\":[\"lists\",\"maps\",\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"IMMUTABLE\"},\"IMPORT\":{\"description\":\"The `IMPORT` function allows to create aliases for macro name prefixes. This is handy when accessing macros from WarpFleet™ repositories which might have multiple versions and/or long group and artifact ids. When fetching a macro, the *imported* prefixes will be scanned and the longest matching one will be replaced by the associated alias.\\n\\n@param `prefix` Original prefix to *import*.\\n\\n@param `as` Name under which `prefix` will be imported.\\n\\n\",\"signature\":\"prefix<STRING> as<STRING>  IMPORT \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"IMPORT\"},\"INCREMENTEXACT\":{\"description\":\"The `INCREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value incremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be incremented by one\\n\\n@param `result` The incremented value\\n\\n@param `lvalue` List of values to be incremented by one\\n\\n@param `lresult` List of incremented values\\n\\n\",\"signature\":\"value<NUMBER>  INCREMENTEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  INCREMENTEXACT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"INCREMENTEXACT\"},\"INFLATE\":{\"description\":\"Decompresses a byte array containing data compressed by [`DEFLATE`](doc/DEFLATE).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"signature\":\"compressed<BYTES>  INFLATE  uncompressed<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"INFLATE\"},\"INFO\":{\"description\":\"Generate documentation of a function or a macro.\\n\\n@param `conf` String list of related configuration keys existing in the Warp 10 configuration.\\n\\n@param `examples` String list of WarpScript examples.\\n\\n@param `related` String list of related functions.\\n\\n@param `params` Map describing the parameters defined in `sig`.\\n\\n@param `sig` List of signatures. Each signature is a **LIST** with 2 lists (input and output) which contain parameter definitions: *eg* `param1:STRING` in stack order (top first)\\n\\n@param `desc` Description of the function or macro.\\n\\n@param `tags` String list tags (*eg* categories).\\n\\n@param `version` Version of the Warp 10 distribution on which this funcion is available (`standalone` | `distributed` | `all` | `pkg` | `ext` | `plugin`)\\n\\n@param `deleted` Version's number of Warp 10 where this function (or macro) was deleted.\\n\\n@param `deprecated` Version's number of Warp 10 where this function (or macro) was deprecated.\\n\\n@param `since` Version's number of Warp 10 where this function (or macro) was included.\\n\\n@param `name` Name of the function or macro.\\n\\n@param `ext` Fully qualified class name of the WarpScript Extension defining the function.\\n\\n@param `plugin` Fully qualified class name of the WarpScript Plugin defining the function.\\n\\n\",\"signature\":\"{ plugin<STRING> ext<STRING> name<STRING> since<STRING> deprecated<STRING> deleted<STRING> version<STRING> tags<LIST> desc<STRING> sig<LIST> params<MAP> related<LIST> examples<LIST> conf<LIST>  } INFO \",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFO\"},\"INFOMODE\":{\"description\":\"Toggles the info mode ON or OFF depending on its current state. Default is OFF when the stack is created.\\n\\nWhen info mode is ON, the [`INFO`](/doc/INFO) function pushes its map parameter on the stack and stops the current execution as [`STOP`](/doc/STOP) would do.\\n\\n\",\"signature\":\" INFOMODE \",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFOMODE\"},\"INTEGRATE\":{\"description\":\"The `INTEGRATE` function takes a GTS or a list thereof and integrates it/them, considering the value at each tick is a rate of change per second.\\n\\n@param `initial` Initial value\\n\\n@param `gts` GTS to integrate\\n\\n@param `lgts` List of GTS to integrate\\n\\n@param `result` Integrated GTS\\n\\n@param `lresult` List of integrated GTS\\n\\n\",\"signature\":\"gts<GTS> initial<NUMBER>  INTEGRATE  result<GTS>\\nlgts<LIST<GTS>> initial<NUMBER>  INTEGRATE  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTEGRATE\"},\"INTERPOLATE\":{\"description\":\"The `INTERPOLATE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with by interpolating linearly. \\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled bucketized GTS\\n\\n@param `resultList` list of filled bucketized GTS\\n\\n\",\"signature\":\"gts<GTS>  INTERPOLATE  result<GTS>\\ngtsList<LIST<GTS>>  INTERPOLATE  resultList<LIST<GTS>>\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERPOLATE\"},\"INTERSECTION\":{\"description\":\"Computes the intersection &#x2229; of two sets.\\n\\nThe `INTERSECTION` function consumes two sets from the top of the stack and pushes back its mathematical intersection (ie: the elements in common).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x2229; *B*\\n\\n\",\"signature\":\"setA<SET> setB<SET>  INTERSECTION  output<SET>\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERSECTION\"},\"INV\":{\"description\":\"Inverts a matrix. The inversion is attempted using the [LU Decomposition](https://en.wikipedia.org/wiki/LU_decomposition) algorithm.\\n\\nIf the matrix is singular or not square an error will be raised.\\n\\n@param `matrix` Matrix to invert.\\n\\n@param `inverse` Inverse of the original matrix.\\n\\n\",\"signature\":\"matrix<MATRIX>  INV  inverse<MATRIX>\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"INV\"},\"ISAUTHENTICATED\":{\"description\":\"Returns true or false whether or not the stack is authenticated\\n\\n@param `result` True if the stack is authenticated, false otherwise\\n\\n\",\"signature\":\" ISAUTHENTICATED  result<BOOLEAN>\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ISAUTHENTICATED\"},\"ISNULL\":{\"description\":\"The `ISNULL` function consumes a parameter p from the top of the stack and pushes onto the stack true if p is null, else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p is null\\n\\n\",\"signature\":\"p<ANY>  ISNULL  result<BOOLEAN>\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNULL\"},\"ISNaN\":{\"description\":\"The `ISNaN` function consumes a numeric parameter p from the top of the stack and pushes onto the stack true if p is Not a Number (NaN), else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p a Double and is NaN, false  otherwise\\n\\n\",\"signature\":\"p<ANY>  ISNaN  result<BOOLEAN>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNaN\"},\"ISO8601\":{\"description\":\"The `ISO8601` function consumes an optional **STRING** timezone and a **LONG** UTC timestamp and pushes back a **STRING** representing the date and time according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\\n\\nDepending on the platform time unit, the part representing seconds can have 3, 6 or 9 significant figures respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time representation.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `iso8601dateAndTime` Representation of the date and time of the given timestamp for the givent timezone according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard\\n\\n\",\"signature\":\"timestamp<LONG>  ISO8601  iso8601dateAndTime<STRING>\\ntimestamp<LONG> timezone<STRING>  ISO8601  iso8601dateAndTime<STRING>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISO8601\"},\"ISODURATION\":{\"description\":\"The `ISODURATION` function consumes a **LONG** duration in platform unit and pushes back a **STRING** reresenting an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Whatever the platform time unit is, the representation maximum resolution is milliseconds.\\n\\nThe format of the ISO 8601 representation is `PThHmMs.xS` with `h` as hours, `m` as minutes, `s` as seconds and `x` as milliseconds. If any of these value is zero, the value and unit are omitted. The only exception is for a duration of 0 which is represented as `PT0S`. If the duration is negative, `h`, `m` and `s`, if displayed, are negative numbers. \\n\\n@param `duration` A duration expressed in platform time unit.\\n\\n@param `iso8601duration` A representation of the consumed duration according to ISO 8601.\\n\\n\",\"signature\":\"duration<LONG>  ISODURATION  iso8601duration<STRING>\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISODURATION\"},\"ISONORMALIZE\":{\"description\":\"The `ISONORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between -1 and 1 (i.e. it replaces X by \\n(X - mean)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"signature\":\"gts<GTS>  ISONORMALIZE  result<GTS>\\ngtsList<LIST<GTS>>  ISONORMALIZE  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISONORMALIZE\"},\"JOIN\":{\"description\":\"Join N strings with the given separator.\\n\\n@param `n` Number of elements to join that it needs to take from the top of the stack.\\n\\n@param `sep` Separator used to join the strings.\\n\\n@param `string` One or more string on the stack.\\n\\n@param `objects` List of objects whose string representations are to be joined.\\n\\n@param `result` Joined string.\\n\\n\",\"signature\":\"string<STRING*> sep<STRING> n<LONG>  JOIN  result<STRING>\\nobjects<LIST> sep<STRING>  JOIN  result<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"JOIN\"},\"JSON->\":{\"description\":\"The `JSON->` function parses a string as [JSON](http://json.org/) from the top of the stack and pushes the result onto the stack.\\n\\n@param `json` String JSON representation\\n\\n@param `resultMap` Map JSON representation if it is a JSON object\\n\\n@param `resultList` List JSON representation if it is a JSON array\\n\\n\",\"signature\":\"json<STRING>  JSON->  resultMap<MAP>\\njson<STRING>  JSON->  resultList<LIST>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H_CEIXoy\"},\"JSONLOOSE\":{\"description\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONLOOSE` function configures the stack to send results in a loose [JSON](http://json.org/) format where `NaN` and `Infinite` are valid values.\\n\\nIf the [JSON](http://json.org/) parser you’re using is strict, you should either configurate the [`JSONSTRICT`](/doc/JSONSTRICT) mode or dealing with \\n`NaN` and `Infinite` values outside the parser.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONLOOSE\"},\"JSONSTACK\":{\"description\":\"Select the JSON format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" JSONSTACK \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"JSONSTACK\"},\"JSONSTRICT\":{\"description\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONSTRICT` function configures the stack to send results in strict [JSON](http://json.org/) format.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONSTRICT\"},\"KEYLIST\":{\"description\":\"Gets keys from a **MAP**.\\n\\nThe function `KEYLIST` extracts the keys of a map on the top of the stack and pushes on the stack a list with those keys. The map is consumed.      \\n\\n@param `map` Map from which you want to extract keys\\n\\n@param `result` List of keys\\n\\n\",\"signature\":\"map<MAP>  KEYLIST  result<LIST>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"KEYLIST\"},\"KURTOSIS\":{\"description\":\"The `KURTOSIS` function computes the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a Geo Time Series™ or a list thereof.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the kurtosis.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `kurtosis` Computed kurtosis of the Geo Time Series™ instance.\\n\\n@param `lkurtosis` List of computed kurtosis of the Geo Time Series™ instances.\\n\\n\",\"signature\":\"gts<GTS> bessel<BOOLEAN>  KURTOSIS  kurtosis<DOUBLE>\\nlgts<LIST<GTS>> bessel<BOOLEAN>  KURTOSIS  lkurtosis<LIST<DOUBLE>>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.2.13\",\"OPB64name\":\"KURTOSIS\"},\"LABELS\":{\"description\":\"The `LABELS` function consumes a GTS from the stack, extracts its labels, puts them in a map and pushes the map onto the stack.\\n\\n@param `gts` The Geo Time Series™ to get the labels from.\\n\\n@param `encoder` The Geo Time Series™ Encoder to get the labels from.\\n\\n@param `return` Labels MAP\\n\\n\",\"signature\":\"gts<GTS>  LABELS  return<MAP>\\nencoder<GTSENCODER>  LABELS  return<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LABELS\"},\"LASTACTIVITY\":{\"description\":\"Extracts the timestamp of last activity recorded in the Geo Time Series™ metadata.\\n\\nThe timestamp is expressed as platform time units elapsed since the Unix Epoch.\\n\\n@param `gts` Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `encoder` Geo Time Series™ encoder from which to extract the last activity timestamp.\\n\\n@param `lgts` List of Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `lencoder` List of Geo Time Series™ encoders from which to extract the last activity timestamp.\\n\\n@param `lastactivity` Timestamp of last activity.\\n\\n@param `llastactivity` List of timestamps of last activity.\\n\\n\",\"signature\":\"gts<GTS>  LASTACTIVITY  lastactivity<LONG>\\nencoder<GTSENCODER>  LASTACTIVITY  lastactivity<LONG>\\nlgts<LIST<GTS>>  LASTACTIVITY  llastactivity<LONG>\\nlencoder<LIST<GTSENCODER>>  LASTACTIVITY  llastactivity<LONG>\",\"tags\":[\"gts\"],\"since\":\"2.0.0\",\"OPB64name\":\"LASTACTIVITY\"},\"LASTBUCKET\":{\"description\":\"The function `LASTBUCKET` consumes a GTS off the stack and pushes its lastbucket onto the stack.\\n\\nNote: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Last bucket timestamp\\n\\n\",\"signature\":\"gts<GTS>  LASTBUCKET  result<LONG>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTBUCKET\"},\"LASTSORT\":{\"description\":\"Sorts a list of Geo Time Series™ according to their most recent value. If most recent values are identical, ticks will be compared, the most recent \\nappearing first. If the ticks are also identical, then metadata (class and labels) will be compared.\\n\\nUse this function to compute Top N queries.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Sorted list of Geo Time Series™\\n\\n\",\"signature\":\"gtsList<LIST<GTS>>  LASTSORT  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTSORT\"},\"LASTTICK\":{\"description\":\"The `LASTTICK` function pushes on the stack the newest tick of the Geo Time Series™ on top of the stack or, if the GTS is bucketized, its last bucket.\\n\\nWhen applied to a list of GTS, `LASTTICK` will return the greatest last tick found across all Geo Time Series™.\\n\\nIf the GTS does not have values, `Long.MIN_VALUE` is pushed.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `result` Last tick value.\\n\\n\",\"signature\":\"gts<GTS>  LASTTICK  result<LONG>\\nlgts<LIST<GTS>>  LASTTICK  result<LONG>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTTICK\"},\"LBOUNDS\":{\"description\":\"The `LBOUNDS` function computes bounds which divide a specified interval into `n` intervals of equal length.\\n\\nThe result of `LBOUNDS` is a list of `n+1` bounds, defining `n` intervals inside the specified range plus the two bounds of this range which define the intervals before and after the range.\\n\\n@param `n` Number of intervals to generate.\\n\\n@param `upper` Upper bound of the range to subdivide.\\n\\n@param `lower` Lower bound of the range to subdivide.\\n\\n@param `bounds` List of computed bounds.\\n\\n\",\"signature\":\"lower<DOUBLE> upper<DOUBLE> n<LONG>  LBOUNDS  bounds<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LBOUNDS\"},\"LFLATMAP\":{\"description\":\"The `LFLATMAP` function applies a macro on each element of a list, producing a list \\nwith the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the list index on top and the element \\nat that particular index below it. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\nDifference with `LMAP`: if the macro returns a list, then LFLATMAP will produce a \\nlist with the elements of the macro output list (_i.e._ it will _flatten_ the list). \\n\\nDifference with `LMAP FLATTEN`: flatten will do the list flattening recursively. \\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count -1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"inputlist<LIST> macro<MACRO>  LFLATMAP  results<LIST>\\ninputlist<LIST> macro<MACRO> index<BOOLEAN>  LFLATMAP  results<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LFLATMAP\"},\"LIMIT\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and \\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `LIMIT` function modifies the maximum number of datapoints which can be fetched during a script execution by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call `AUTHENTICATE` with a valid token.\\n\\n@param `maxDataPoints` Maximal data points retrieved from database in a single FETCH\\n\\n\",\"signature\":\"maxDataPoints<LONG>  LIMIT \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"LIMIT\"},\"LINEOFF\":{\"description\":\"The `LINEOFF` function disables the automatic labelling of WarpScript code as enabled by `LINEON`.      \\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEOFF\"},\"LINEON\":{\"description\":\"The `LINEON` function enables the automatic section labelling at the beginning of each line of the input WarpScript code. This handy feature greatly simplifies the debug process as the exact line number where an error happens will appear in the error message embedded as a section name of the form `[Line #xx]`.\\n\\nThis automatic labelling only works with the `/exec` endpoint of Warp 10.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEON\"},\"LIST->\":{\"description\":\"The `LIST->` function extracts the elements of the **LIST** at the top of the stack\\nand pushes them onto the stack one by one. The function then pushes\\nonto the stack the number of elements that were in the **LIST**.\\n\\n@param `input` The input list, will be consumbed\\n\\n@param `listlength` The length N of input\\n\\n@param `elements` N elements pushed on the stack\\n\\n\",\"signature\":\"input<LIST>  LIST->  elements<ANY*> listlength<LONG>\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"I3_IK1oy\"},\"LMAP\":{\"description\":\"The `LMAP` function applies a macro on each element of a **LIST**, producing a **LIST** with the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **LIST** index on top and the element at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"inputlist<LIST> macro<MACRO>  LMAP  results<LIST>\\ninputlist<LIST> macro<MACRO> index<BOOLEAN>  LMAP  results<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LMAP\"},\"LOAD\":{\"description\":\"The `LOAD` function pushes onto the stack the value currently associated with a symbol name.      \\n\\nIf the symbol is not defined, an error will be raised.\\n\\n@param `name` Name of symbol whose value should be retrieved.\\n\\n@param `register` Register number whose value should be retrieved.\\n\\n@param `value` Retrieved value.\\n\\n\",\"signature\":\"name<STRING>  LOAD  value<ANY>\\nregister<LONG>  LOAD  value<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOAD\"},\"LOCATIONOFFSET\":{\"description\":\"The `LOCATIONOFFSET` function downsamples a Geo Time Series™ by retaining the first and last datapoints and only those datapoints which are \\nmore than a given distance away.\\n\\n@param `distance` Distance in meters\\n\\n@param `gts` Geo Time Series™ to downsample\\n\\n@param `gtsList` List of Geo Time Series™ to downsample\\n\\n@param `result` Downsampled Geo Time Series™\\n\\n@param `resultList` List of downsampled Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> distance<NUMBER>  LOCATIONOFFSET  result<GTS>\\ngtsList<LIST<GTS>> distance<NUMBER>  LOCATIONOFFSET  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONOFFSET\"},\"LOCATIONS\":{\"description\":\"The `LOCATIONS` function consumes a Geo Time Series™ from the stack, extracts the locations of a Geo Time Series™, puts them in two lists \\n(a list of latitudes and a list of longitudes) and pushes the two lists onto the stack.\\n\\n@param `gts` GTS\\n\\n@param `longitudes` List of longitudes\\n\\n@param `latitudes` List of latitudes\\n\\n\",\"signature\":\"gts<GTS>  LOCATIONS  latitudes<LIST<DOUBLE>> longitudes<LIST<DOUBLE>>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONS\"},\"LOCSTRINGS\":{\"description\":\"The `LOCSTRINGS` function extract the locations from a Geo Time Series™ and builds a list of the 64 bits hexadecimal representation of their \\n[HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` List of [HHCode](https://en.wikipedia.org/wiki/HHCode)\\n\\n\",\"signature\":\"gts<GTS>  LOCSTRINGS  result<LIST<STRING>>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCSTRINGS\"},\"LOG\":{\"description\":\"The `LOG` function consumes a floating point number x from the top of the stack and pushes back its natural logarithm, log<sub>e</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Natural logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of natural logarithms of the given values\\n\\n\",\"signature\":\"value<NUMBER>  LOG  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG\"},\"LOG10\":{\"description\":\"The `LOG10` function consumes a floating point number x from the top of the stack and pushes back its common logarithm, log<sub>10</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Common logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of common logarithms of the given values\\n\\n\",\"signature\":\"value<NUMBER>  LOG10  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG10  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG10\"},\"LOG1P\":{\"description\":\"Returns the natural logarithm of the sum of the argument and 1.\\n\\nThe `LOG1P` function consumes a number from the top of the stack and pushes back the natural logarithm for (arg + 1).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Logarithm of (value + 1)\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of logarithm of (value + 1)\\n\\n\",\"signature\":\"value<NUMBER>  LOG1P  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  LOG1P  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG1P\"},\"LOGEVENT->\":{\"description\":\"Warp&nbsp;10™ runner execution logs are encrypted. See [this documentation](/content/03_Documentation/06_Operations/05_Logs/).\\n\\nThe easiest way to read logs is to copy the log output and use this function.\\n\\n\\n@param `logline` The opb64 representation of the aes encrypted log line\\n\\n@param `decodedlog` The decoded logs.\\n\\n\",\"signature\":\"logline<STRING>  LOGEVENT->  decodedlog<STRING>\",\"tags\":[\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"I3x6GKO4I_FhEV\"},\"LOGMSG\":{\"description\":\"`LOGMSG` function prints millisecond timestamp and input text on the standard output.\\n\\nThe `LOGMSG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"signature\":\"msg<STRING>  LOGMSG \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOGMSG\"},\"LOWESS\":{\"description\":\"The `LOWESS` function consumes a bandwidth (a **LONG**) from the top of the stack, then smooths a GTS or a **LIST** of GTS that are below by using \\nlocal regression.\\n\\nTo obtain a good smoothing, it is advised to choose an odd number of at least 5 as the bandwidth parameter.\\n\\n@param `bandwidth` The bandwitdth parameter is the number of nearest neighbours to consider when applying the local regression.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `gtsList` List of Geo Time Series™.\\n\\n@param `lresult` List of Geo Time Series™ result.\\n\\n@param `result` Geo Time Series™ result.\\n\\n\",\"signature\":\"gts<GTS> bandwidth<LONG>  LOWESS  result<GTS>\\ngtsList<LIST<GTS>> bandwidth<LONG>  LOWESS  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOWESS\"},\"LR\":{\"description\":\"Compute the [simple linear regression](https://en.wikipedia.org/wiki/Linear_regression) parameters `alpha` (y-intercept) and `beta` (line slope) for the given numerical Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ on which to compute linear regression.\\n\\n@param `beta` The slope of the line fitted on the GTS values.\\n\\n@param `alpha` The y-intercept of the lined fitted on the GTS values.\\n\\n\",\"signature\":\"gts<GTS>  LR  alpha<DOUBLE> beta<DOUBLE>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.13\",\"OPB64name\":\"LR\"},\"LSORT\":{\"description\":\"The `LSORT` function sorts the list on the top of the stack.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `inputlist` The reference of the list to sort\\n\\n@param `sortedlist` The original list sorted, this is not a new list object\\n\\n\",\"signature\":\"inputlist<LIST>  LSORT  sortedlist<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LSORT\"},\"LTTB\":{\"description\":\"The `LTTB` function downsamples a Geo Time Series™ or list thereof using the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"signature\":\"gts<GTS> samples<LONG>  LTTB  downsampled<GTS>\\nlgts<LIST<GTS>> samples<LONG>  LTTB  ldownsampled<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"LTTB\"},\"MACROBUCKETIZER\":{\"description\":\"`MACROBUCKETIZER` converts a macro into a bucketizer which can be used with the [`BUCKETIZE`](/doc/BUCKETIZE) framework.\\n\\nFor each tick in the mapped GTS, the macro will be called with a list containing the following elements on the stack:\\n\\n```js\\n[tick_of_computation,[gts_classes],[label_bucketize],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n@param `macro` Macro used as a bucketizer\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"signature\":\"macro<MACRO>  MACROBUCKETIZER  result<AGGREGATOR>\",\"tags\":[\"bucketize\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROBUCKETIZER\"},\"MACROCONFIG\":{\"description\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration keys looked up are those built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIG`.\\n\\n`MACROCONFIG` will check if the keys exists, if not it will remove the part of the macro name after the last `/` and will try that new key. It will successively try all names up to the last part of the macro name.\\n\\nIf none of those keys existed, the call will end in error.\\n\\nSo for example, if `MACROCONFIG` is called from a macro `my/test/macro` to retrieve the value associated with `mykey`, it will look up the following keys in the configuration:\\n\\n```\\nmykey@my/test/macro\\nmykey@my/test\\nmykey@my\\n```\\n\\n@param `key` Configuration key to look up.\\n\\n\",\"signature\":\"key<STRING>  MACROCONFIG \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIG\"},\"MACROCONFIGDEFAULT\":{\"description\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration key looked is built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIGDEFAULT`.\\n\\n`MACROCONFIGDEFAULT` will check if the keys exists, if not it will push the provided default value onto the stack, or fail with an error if the default was `NULL`. If the key is found, the associated value is pushed on the stack.\\n\\n@param `key` Configuration key to look up.\\n\\n@param `default` Default value to use if the key was not found, or `NULL` to fail if the key is absent.\\n\\n\",\"signature\":\"key<STRING> default<STRING>  MACROCONFIGDEFAULT \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGDEFAULT\"},\"MACROCONFIGSECRET\":{\"description\":\"The `MACROCONFIGSECRET` macro consumes 2 elements on the stack, the current and new secret to be set. If no secret has been set, the function will throw an error.\\n\\nThe secret set by this function is the secret used by [`SETMACROCONFIG`](/doc/SETMACROCONFIG).\\n\\n@param `newSecret` New secret to override the current one.\\n\\n@param `oldSecret` Currently set secret.\\n\\n\",\"signature\":\"oldSecret<STRING> newSecret<STRING>  MACROCONFIGSECRET \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGSECRET\"},\"MACROFILLER\":{\"description\":\"`MACROFILLER` converts a macro into a *filler* which can be used with the [`FILL`](/doc/FILL) function.\\n\\nThe macro will find the following elements on the stack when it is called:\\n\\n```\\n6: Geo Time Series™ to fill. Both this GTS and the one above are only meant to expose the metadata\\n5: Geo Time Series™ of the *other* GTS with a value at the current tick\\n4: list of [ tick latitude longitude elevation value ] for the pre window\\n3: [ tick latitude longitude elevation value ] of the *other* Geo Time Series™\\n2: list of [ tick latitude longitude elevation value ] for the post window\\nTOP: tick which is being filled\\n```\\n\\nIt must leave on the stack a list containing the following elements, in this order:\\n\\n*tick*, *latitude* or `NaN`, *longitude* or `NaN`, *elevation* or `NaN`, *value*\\n\\n\\n@param `macro` Macro to wrap.\\n\\n@param `prewindow` Number of datapoints needed ahead of the missing datapoint.\\n\\n@param `postwindow` Number of datapoints needed after the missing datapoint.\\n\\n@param `filler` Filler instance.\\n\\n\",\"signature\":\"macro<MACRO> prewindow<LONG> postwindow<LONG>  MACROFILLER  filler<FILLER>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"MACROFILLER\"},\"MACROFILTER\":{\"description\":\"`MACROFILTER` converts a macro into a filter which can be used with the [`FILTER`](/doc/FILTER) framework\\n\\nFor each equivalence classes in the filter set of Geo Time Series™, the macro will be called with the following elements on the stack:\\n\\n```\\n[gts], {labels_equivalence_class}\\n```\\n\\nAfter each call the macro is expected to leave a list on the stack.\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"macro<MACRO>  MACROFILTER  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROFILTER\"},\"MACROMAPPER\":{\"description\":\"`MACROMAPPER` converts a macro into a mapper which can be used with the [`MAP`](/doc/MAP) framework.\\n\\nFor each tick in the mapped Geo Time Series™, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROMAPPER` can also create a multivariate mapper, that is, a mapper that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate mapper with MAP, each input GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n\\n@param `macro` Macro to convert\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"macro<MACRO>  MACROMAPPER  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROMAPPER\"},\"MACROREDUCER\":{\"description\":\"`MACROREDUCER` converts a macro into a reducer which can be used with the [`REDUCE`](/doc/REDUCE) framework\\n\\nFor each tick in the Geo Time Series™ to reduce, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nEach list have a length of the number of GTSs in the partition. Each missing value are replaced by `null`, each missing tick by the minimum value of long and each missing latitude, longitude or elevation by NaN. The `label_maps` list as one more element at the end compared to the other lists: the common labels for the GTSs of the partition.\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROREDUCER` can also create a multivariate reducer, that is, a reducer that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate reducer with REDUCE, each input List of GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Reducer to apply\\n\\n\",\"signature\":\"macro<MACRO>  MACROREDUCER  result<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROREDUCER\"},\"MACROTTL\":{\"description\":\"In a file defining a server side macro, the `MACROTTL` function defines the time to live of the macro code. If the macro is accessed after this delay has expired and ondemand loading of macros is enabled, it will unconditionnaly be reloaded from disk.\\n\\nThis feature is very useful when you have macros generated dynamically on the server side which change frequently. Using `MACROTTL` you can ensure the newest code is loaded regardless of the rescan interval of the macro directory.\\n\\nIn a the file defining a server side macro, the call to `MACROTTL` should appear before or after the actual macro definition but not within.\\n\\nThe time after which the macro will no longer be valid is the time of the call to `MACROTTL` plus its parameter.\\n\\n@param `ttl` The time to live to apply to the macro, in ms.\\n\\n\",\"signature\":\"ttl<LONG>  MACROTTL \",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MACROTTL\"},\"MAKEGTS\":{\"description\":\"The `MAKEGTS` function builds a Geo Time Series™ from **LIST**s.\\n\\nThe timestamp and values lists must be of the exact same size.\\nHowever, as latitudes, longitudes and elevations are optional in a Geo Time Series™, these lists can be shorter than the timestamps lists or even empty. If there are missing latitudes, longitudes and elevations, use [`NaN`](/doc/NaN).\\n\\n@param `values` Values of the GTS\\n\\n@param `elevations` Elevations of the GTS\\n\\n@param `longitudes` Longitudes of the GTS\\n\\n@param `latitudes` Latitudes of the GTS\\n\\n@param `timestamps` Timestamps of the GTS\\n\\n@param `result` Geo Time Series™\\n\\n\",\"signature\":\"timestamps<LIST> latitudes<LIST> longitudes<LIST> elevations<LIST> values<LIST>  MAKEGTS  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAKEGTS\"},\"MAN\":{\"description\":\"The `MAN` function returns the help link for a function name.\\n\\nIf the function does not exists, it returns http://www.warp10.io/\\n\\n\\n@param `function` The function name\\n\\n@param `any` Anything except a function name\\n\\n@param `url` URL of the online help\\n\\n\",\"signature\":\"function<STRING>  MAN  url<STRING>\\nany<ANY>  MAN  url<STRING>\\n MAN  url<STRING>\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.2.18\",\"OPB64name\":\"MAN\"},\"MAP\":{\"description\":\"The `MAP` framework applies a function on values of a Geo Time Series™ that fall into a sliding window.\\n\\nThe `MAP` framework is designed to use an existing MAPPER or a custom MACROMAPPER. It could also accept a macro: the current window is passed as a GTS to the macro. See examples below.\\n\\n@param `result` List of Geo Time Series™, one for each input, whose values are the results of the function application on each sliding window. If the input series is bucketized, the result series will be too unless outputTicks is non null.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `mapper` Mapper function to apply\\n\\n@param `pre` Width of the sliding window before the current tick. This parameter is interpreted as a number of ticks if its value is positive, and as a number of time units if its value is negative. A value of 0 means the sliding window does not cover the past. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the past. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `post` Width of the sliding window after the current tick. Values have the same semantics as for the `pre` parameter. A value of 0 means the sliding window does not cover the future. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the future. Defaults to 0.\\n\\n@param `occurrences` Limit the number of computations to that number. If the value is 0, compute a value for each tick of the input Geo Time Series™. If it is non-negative, compute that many values starting from the oldest to the most recent tick. In the other case, do that many computations in the reverse order. This is useful when you are interested in a single result, like the max or sum of all values. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `step` The step size in number of ticks. The mapper beggins at the oldest tick and goes to the tick `step` after the current one and so on. Defaults to 1.\\n\\n@param `overrideTick` If set to true, the tick value returned by the mapper is used to update the current tick, else it is ignored and the original tick is kept. Defaults to false.\\n\\n@param `outputTicks` If non null, it sets the list of ticks that is traversed to anchor the sliding windows (instead of the ticks of the input Geo Time Series™). In that case, a tick of the input Geo Time Series™ that would be equal to one of these anchor points is counted by a positive `post` if `occurences` is non-negative, or by a positive `pre` if `occurences` is negative.\\n\\n\",\"signature\":\"[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> ]  MAP  result<LIST<GTS>>\\n[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> ]  MAP  result<LIST<GTS>>\\n[ gts<GTS+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> ]  MAP  result<LIST<GTS>>\\n[ gtsList<LIST<GTS>+> mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> ]  MAP  result<LIST<GTS>>\\ngts<GTS+> { mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> outputTicks<LIST<LONG>>  } MAP  result<LIST<GTS>>\\ngtsList<LIST<GTS>+> { mapper<AGGREGATOR> pre<LONG> post<LONG> occurrences<LONG> step<LONG> overrideTick<BOOLEAN> outputTicks<LIST<LONG>>  } MAP  result<LIST<GTS>>\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAP\"},\"MAP->\":{\"description\":\"The `MAP->` function expands the **MAP** on top of the stack into pairs of elements followed by the number of elements extracted. If the **MAP** was \\ncreated by a call to `->MAP`, the order of the elements will be the same as prior to calling `->MAP`.\\n\\n@param `map` Map to expand\\n\\n@param `key` Key of the pair\\n\\n@param `value` Value of the pair\\n\\n@param `mapsize` The number of key value pushed on the stack.\\n\\n\",\"signature\":\"map<MAP>  MAP->  key<ANY*> value<ANY*> mapsize<LONG>\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"IJ4FAIs\"},\"MAPID\":{\"description\":\"Generates a fingerprint of a map.\\n\\n@param `input` Input map\\n\\n@param `result` Fingerprint of the map\\n\\n\",\"signature\":\"input<MAP>  MAPID  result<STRING>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAPID\"},\"MARK\":{\"description\":\"Pushes a mark onto the stack.\\n\\n@param `mark` A MARK instance.\\n\\n\",\"signature\":\" MARK  mark<MARK>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MARK\"},\"MAT->\":{\"description\":\"The `MAT->` function converts a Matrix into nested lists.\\n\\n\\n@param `input` Matrix to convert\\n\\n@param `result` Nested list of values\\n\\n\",\"signature\":\"input<MATRIX>  MAT->  [  result<LIST<LIST<DOUBLE>>>  ]\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"IJ4JAIs\"},\"MATCH\":{\"description\":\"The `MATCH` function applies a regular expression (regexp) to a string.\\n\\nIt consumes two parameters from the top of the stack: the regexp pattern and the string to test matching with.\\n\\nIf the string doesn’t match the regexp, the function return an empty list. If it matches, the function will return a list of every matching group.\\n\\nInstead of using a regular expression **STRING**, you can also use the result of [`MATCHER`](/doc/MATCHER) for improved performance.\\n\\n@param `regexp` Regular expression to apply\\n\\n@param `string` String to evaluate\\n\\n@param `result` List of every matching group.\\n\\n\",\"signature\":\"string<STRING> regexp<STRING>  MATCH  result<LIST<STRING>>\\nstring<STRING> regexp<MATCHER>  MATCH  result<LIST<STRING>>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCH\"},\"MATCHER\":{\"description\":\"The `MATCHER` function will compile a regular expression into an efficient object which can be used by [`MATCH`](/doc/MATCH).\\n\\n@param `regexp` Regular expression to compile\\n\\n@param `result` Compiled regula expression\\n\\n\",\"signature\":\"regexp<STRING>  MATCHER  result<MATCHER>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCHER\"},\"MAX\":{\"description\":\"Returns the greater of two numeric values.\\n\\nThe `MAX` function consumes two numeric parameters from the top of the stack and pushes back the greatest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The larger of p1 and p2.\\n\\n@param `sresult` The larger of the elements in the given list.\\n\\n@param `lresult` A list where each value is the max between the element in the list and the given value.\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  MAX  result<LONG>\\np1<LONG> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  MAX  result<LONG>\\np1<COUNTER> p2<DOUBLE>  MAX  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  MAX  result<DOUBLE>\\np1<COUNTER> p2<LONG>  MAX  result<DOUBLE>\\np1<LONG> p2<COUNTER>  MAX  result<DOUBLE>\\nllist<LIST<LONG>>  MAX  sresult<LONG>\\ndlist<LIST<DOUBLE>>  MAX  sresult<DOUBLE>\\nclist<LIST<COUNTER>>  MAX  sresult<LONG>\\nllist<LIST<LONG>> value<LONG>  MAX  lresult<LIST<LONG>>\\nclist<LIST<COUNTER>> value<COUNTER>  MAX  lresult<LIST<LONG>>\\ndlist<LIST<DOUBLE>> value<DOUBLE>  MAX  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAX\"},\"MAXBUCKETS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXBUCKETS` function modifies the maximum number of buckets which can be created by a call to [`BUCKETIZE`](/doc/BUCKETIZE) by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXBUCKETS \",\"tags\":[\"platform\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXBUCKETS\"},\"MAXDEPTH\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXDEPTH` function modifies the maximum depth (number of levels) of the execution stack by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXDEPTH \",\"tags\":[\"platform\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXDEPTH\"},\"MAXGEOCELLS\":{\"description\":\"Modifies the maximum number of cells a **GEOSHAPE** created by [`GEO.WKT`](/doc/GEO.WKT) or [`GEO.JSON`](/doc/GEO.JSON) can have. The limit can be modified up to the configured value for `warpscript.maxgeocells.hard`.\\n\\n@param `maxcells` New limit to set.\\n\\n\",\"signature\":\"maxcells<LONG>  MAXGEOCELLS \",\"tags\":[\"platform\"],\"since\":\"1.2.11\",\"OPB64name\":\"MAXGEOCELLS\"},\"MAXGTS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard limit \\nwhich can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXGTS` function modifies the maximum number of Geo Time Series™ which can be fetched by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXGTS \",\"tags\":[\"platform\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXGTS\"},\"MAXJSON\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to\\nthe hard limit value.\\n\\nThe `MAXJSON` function modifies the maximum number of characters in a json produced by [`->JSON`](/doc/AIt9JoxD).\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXJSON \",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"MAXJSON\"},\"MAXLONG\":{\"description\":\"Pushes [Long.MAX_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MAX_VALUE) onto the stack.\\n\\n@param `result` Long.MAX_LONG\\n\\n\",\"signature\":\" MAXLONG  result<LONG>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLONG\"},\"MAXLOOP\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard\\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe MAXLOOP function modifies the maximum number of milliseconds which can be spent in a loop setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXLOOP \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLOOP\"},\"MAXOPS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXOPS` function modifies the maximum number of operations which can be performed during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXOPS \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXOPS\"},\"MAXPIXELS\":{\"description\":\"Modifies the maximum size (in pixels) of images which can be created by [`PGraphics`](/doc/PGraphics). The limit can be modified up to the value configured in `warpscript.maxpixels.hard`.\\n\\n@param `pixels` Maximum size (in pixels).\\n\\n\",\"signature\":\"pixels<LONG>  MAXPIXELS \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXPIXELS\"},\"MAXRECURSION\":{\"description\":\"Modifies the maximum nesting depth of macro calls. The limit can be modified up to the value configured in `warpscript.maxrecursion.hard`.\\n\\n@param `depth` Maximum nesting depth.\\n\\n\",\"signature\":\"depth<LONG>  MAXRECURSION \",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MAXRECURSION\"},\"MAXSYMBOLS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a \\nhard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXSYMBOLS` function modifies the maximum number of simultaneous symbols which can be defined on the stack during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"limit<LONG>  MAXSYMBOLS \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXSYMBOLS\"},\"MAXURLFETCHCOUNT\":{\"description\":\"The `MAXURLFETCHCOUNT` function modifies the maximum number of URLs which can be fetched with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.MAXURLFETCHCOUNT.limit.hard`.\\n\\n@param `limit` The maximum number of URLs which can be fetched.\\n\\n\",\"signature\":\"limit<LONG>  MAXURLFETCHCOUNT \",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHCOUNT\"},\"MAXURLFETCHSIZE\":{\"description\":\"The `MAXURLFETCHSIZE` function modifies the maximum cumulative size of fetched payloads with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.urlfetch.maxsize.hard` and is expressed as a number of bytes.\\n\\n@param `limit` The maximum cumulative size of fetched payloads.\\n\\n\",\"signature\":\"limit<LONG>  MAXURLFETCHSIZE \",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHSIZE\"},\"MD5\":{\"description\":\"The `MD5` function digests a byte array on the stack with the cryptographic hash function [`MD5`](https://en.wikipedia.org/wiki/MD5).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"input<BYTES>  MD5  result<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"MD5\"},\"MERGE\":{\"description\":\"Merge several Geo Time Series™ together.\\n\\nThe `MERGE` function expects a **LIST** of Geo Time Series™ on the top of the stack. It will consume these GTS and push onto the stack a single GTS instance\\nwith all measurements found in the GTS instances present in the **LIST**. The name and labels of the resulting GTS instance are those of the first one of the\\n**LIST**.\\n\\n`MERGE` do not override values on the same timestamp, they are appenned.\\n\\n@param `gtsList` The list of Geo Time Series™\\n\\n@param `result` The merged Geo Time Series™\\n\\n\",\"signature\":\"gtsList<LIST<GTS>>  MERGE  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MERGE\"},\"META\":{\"description\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `META` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"signature\":\"gtsList<LIST<GTS>> writeToken<STRING>  META \",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"META\"},\"METADIFF\":{\"description\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend in an incremental manner. New attributes are added and already existing attributes are updated or removed if their value is an empty string.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `METADIFF` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"signature\":\"gtsList<LIST<GTS>> writeToken<STRING>  METADIFF \",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"METADIFF\"},\"METAOFF\":{\"description\":\"Disables meta operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a meta operation is attempted.\\n\\n\",\"signature\":\"message<STRING> secret<STRING>  METAOFF \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAOFF\"},\"METAON\":{\"description\":\"Enables meta operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"secret<STRING>  METAON \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAON\"},\"METASET\":{\"description\":\"Performs a [`FIND`](/doc/FIND), retrieving a list of Geo Time Series™ and builds a *metaset* which can be distributed to allow access to those GTS without having to give away credentials.\\n\\nMetaset support is only available if a key has been set for `warp.aes.metasets`.\\n\\n@param `ttl` Time to live of the produces metaset. It will not be usable after that much time has elapsed since the current time. The ttl is specified in time units.\\n\\n@param `maxduration` The maximum span of data which can be retrieved using this metaset, in time units.\\n\\n@param `notafter` Most recent timestamp of the data this metaset can retrieve.\\n\\n@param `notbefore` Most ancient timestamp of the data this meataset can retrieve.\\n\\n@param `labels` Map of label selectors.\\n\\n@param `class` Geo Time Series™ class selector.\\n\\n@param `token` Read token to use for retrieving the GTS.\\n\\n@param `metaset` Encrypted metaset which can be used with a [`FETCH`](/doc/FETCH).\\n\\n\",\"signature\":\"[ token<STRING> class<STRING> labels<MAP> notbefore<LONG> notafter<LONG> maxduration<LONG> ttl<LONG> ]  METASET  metaset<STRING>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"METASET\"},\"METASORT\":{\"description\":\"Sorts a list of Geo Time Series™ according to elements of their metadata. The list of elements to consider for sorting can contain label names or NULL to consider the classname. Elements will be considered in the order in which they appear in the list.\\n\\n@param `gts` List of Geo Time Series™ to sort.\\n\\n@param `elements` Metadata elements to consider for sorting.\\n\\n@param `sorted` Sorted list of GTS.\\n\\n\",\"signature\":\"gts<LIST<GTS>> elements<LIST>  METASORT  sorted<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"METASORT\"},\"MIN\":{\"description\":\"Returns the smaller of two numeric values.\\n\\nThe `MIN` function consumes two numeric parameters from the top of the stack and pushes back the smallest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The smaller of p1 and p2.\\n\\n@param `sresult` The smaller of the elements in the given list.\\n\\n@param `lresult` A list where each value is the min between the element in the list and the given value.\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  MIN  result<LONG>\\np1<LONG> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<LONG>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<COUNTER> p2<COUNTER>  MIN  result<LONG>\\np1<COUNTER> p2<DOUBLE>  MIN  result<DOUBLE>\\np1<DOUBLE> p2<COUNTER>  MIN  result<DOUBLE>\\np1<COUNTER> p2<LONG>  MIN  result<DOUBLE>\\np1<LONG> p2<COUNTER>  MIN  result<DOUBLE>\\nllist<LIST<LONG>>  MIN  sresult<LONG>\\ndlist<LIST<DOUBLE>>  MIN  sresult<DOUBLE>\\nclist<LIST<COUNTER>>  MIN  sresult<LONG>\\nllist<LIST<LONG>> value<LONG>  MIN  lresult<LIST<LONG>>\\nclist<LIST<COUNTER>> value<COUNTER>  MIN  lresult<LIST<LONG>>\\ndlist<LIST<DOUBLE>> value<DOUBLE>  MIN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MIN\"},\"MINLONG\":{\"description\":\"Pushes [Long.MIN_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MIN_VALUE) onto the stack.\\n\\n@param `result` Long.MIN_VALUE\\n\\n\",\"signature\":\" MINLONG  result<LONG>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MINLONG\"},\"MINREV\":{\"description\":\"The `MINREV` function consumes a string representing a revision on the stack and puts back a boolean indicating if the revision of the current Warp 10™ platform is newer or equal.\\n\\n@param `revision` A string representing a revision (semantic versioning). Given a version number MAJOR.MINOR.PATCH, .MINOR or .MINOR.PATCH can be omitted.\\n\\n@param `newer` A boolean indicating wether the revision of the current Warp 10™ platform is newer or equal to the given revision.\\n\\n\",\"signature\":\"revision<STRING>  MINREV  newer<BOOLEAN>\",\"tags\":[\"platform\"],\"since\":\"1.2.23\",\"OPB64name\":\"MINREV\"},\"MMAP\":{\"description\":\"The `MMAP` function applies a macro on each key/value pair of a **MAP**, producing a **MAP** with the two elements on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **MAP** index on top and the key/value pair at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each entry in inputmap.\\n\\n@param `inputmap` Map to iterate on.\\n\\n@param `results` Map of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"inputmap<MAP> macro<MACRO>  MMAP  results<MAP>\\ninputmap<MAP> macro<MACRO> index<BOOLEAN>  MMAP  results<MAP>\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"MMAP\"},\"MODE\":{\"description\":\"The `MODE` function computes the mode(s) for a given Geo Time Series™ or a GTS **LIST**. Foreach Geo Time Series™ pushes back on the stack a list containing \\ntheir mode(s).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Mode of the list (the items that occurs most often)\\n\\n\",\"signature\":\"gts<GTS>  MODE  result<LIST>\\ngtsList<LIST<GTS>>  MODE  [  result<LIST<LIST>>  ]\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"MODE\"},\"MONOTONIC\":{\"description\":\"Produces a new Geo Time Series™ from an input by modifying the value so the result is monotonous. This is technically applying a ratchet effect on values.\\n\\nThe `MONOTONIC` function expects a boolean on top of the stack and a Geo Time Series™ or list thereof below the boolean. The boolean indicates whether the\\nresult should be monotonically increasing (false) or decreasing (true).\\n\\n@param `trend` Whether the result should be monotonically increasing (false) or decreasing (true)\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` New Geo Time Series™\\n\\n@param `resultList` List of new Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> trend<BOOLEAN>  MONOTONIC  result<GTS>\\ngtsList<LIST<GTS>> trend<BOOLEAN>  MONOTONIC  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MONOTONIC\"},\"MOTIONSPLIT\":{\"description\":\"The `MOTIONSPLIT` function splits Geo Time Series™ instances based on several possible motion criteria. Split parameters can be combined to split on multiple criteria.\\n\\n`MOTIONSPLIT` can split on:\\n- stopped state detection\\n- moving to stopped transition\\n- time difference between two ticks (just as [`TIMESPLIT`](/doc/TIMESPLIT) does).\\n- maximal distance between two consecutive positions.\\n\\n`MOTIONSPLIT` parameters:\\n- **timesplit**: LONG value, time in platform time unit. Splits if the time difference between two consecutive ticks is strictly greater than this parameter. If defined, the split type label will be \\\"timesplit\\\".\\n- **distance.split**: DOUBLE value, distance in meter. Splits if the orthodromic distance between two consecutive locations is strictly greater than this parameter. If defined, the split type label will be \\\"distancesplit\\\".\\n- **stopped.min.time**: LONG value, time in platform time unit. This is the minimum time the consecutive locations should stay in the stopped zone radius to consider a stop state. If defined, the split type label will be \\\"stopped\\\".\\n- **stopped.max.radius**: DOUBLE value, distance in meter. As long as consecutive positions remains in the radius during stopped.min.time, `MOTIONSPLIT` detect a stopped state.\\n- **stopped.max.speed**: DOUBLE value, speed in m/s. If the speed is greater than this value while in stopped state, `MOTIONSPLIT` exits the stopped state.\\n- **stopped.max.mean.speed**: DOUBLE value, speed in m/s. Maximum mean speed in the proximity zone that prevent the split. `MOTIONSPLIT` will split only if there is a full stop during the given time and radius, and if the mean speed in the proximity zone is less than this parameter.\\n- **stopped.split**: BOOLEAN value. If true, `MOTIONSPLIT` also splits between stopped and moving sequences. If defined, the split type label will be \\\"stopped\\\" or \\\"moving\\\".\\n- **label.stopped.time**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the time in stopped state. If the split source is not a stop detection, this label won't be set.\\n- **label.split.number**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the split number, starting from 1.\\n- **label.split.type**: STRING value. If defined, `MOTIONSPLIT` will add an extra label that contains the split reason. It could be \\\"timesplit\\\", \\\"distancesplit\\\", \\\"end\\\", \\\"stopped\\\" or \\\"moving\\\".\\n\\n`MOTIONSPLIT` split type priorities:\\n- If stopped.min.time and stopped.max.radius are set, the stop detection has the first priority.\\n- If `MOTIONSPLIT` does not detect a stopped state, it looks for a distance split.\\n- If `MOTIONSPLIT` does not detect a stopped state or a distance split, it looks for a time split.\\n\\n\\n@param `parameters` List of splitting parameters. See the function description.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"gts<GTS> parameters<MAP>  MOTIONSPLIT  splits<LIST<GTS>>\\nlgts<LIST<GTS>> parameters<MAP>  MOTIONSPLIT  lsplits<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"MOTIONSPLIT\"},\"MSGFAIL\":{\"description\":\"The `MSGFAIL` function stops the execution of WarpScript code by throwing an exception. \\n\\n@param `message` The exception message\\n\\n\",\"signature\":\"message<STRING>  MSGFAIL \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSGFAIL\"},\"MSORT\":{\"description\":\"The function `MSORT` inspects the top of the stack. If it is a **MAP**, it sorts the **MAP** according to its keys. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\n@param `map` Map to sort\\n\\n@param `result` Sorted map\\n\\n\",\"signature\":\"map<MAP>  MSORT  result<MAP>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSORT\"},\"MSTU\":{\"description\":\"The `MSTU` function pushes onto the stack the number of platform time units in one millisecond. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one millisecond.\\n\\n\",\"signature\":\" MSTU  numberTimeUnits<LONG>\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSTU\"},\"MULTIPLYEXACT\":{\"description\":\"The `MULTIPLYEXACT` function consumes two LONGs from the top of the stack and puts back the product. If the product overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `prod` The product of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sprod` The product of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lprod` List of **LONG** where each value is the product of y and an element in lx\\n\\n\",\"signature\":\"x<NUMBER> y<NUMBER>  MULTIPLYEXACT  prod<LONG>\\nlist<LIST<NUMBER>>  MULTIPLYEXACT  sprod<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  MULTIPLYEXACT  lprod<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"MULTIPLYEXACT\"},\"MUSIGMA\":{\"description\":\"The `MUSIGMA` function calculates the mean and the standard deviation of a Geo Time Series. It consumes two parameters from the top of the stack: a boolean \\n(to choose if [Bessel's correction](https://en.wikipedia.org/wiki/Bessel%27s_correction) should be applied on the standard deviation) and a numeric GTS, and \\nit pushes onto the stack its mean (mu) and its standard deviation (sigma).\\n\\n@param `bessel` True if apply a [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `sigma` Standard deviation\\n\\n@param `mu` Mean\\n\\n@param `gts` A single Geo Time Series\\n\\n\",\"signature\":\"gts<GTS> bessel<BOOLEAN>  MUSIGMA  mu<DOUBLE> sigma<DOUBLE>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MUSIGMA\"},\"MUTEX\":{\"description\":\"Attempts to hold a named lock, creating it if needed, and execute a macro while holding the lock. When the macro execution terminates, either normally or with an error, the lock is released.\\n\\n@param `mutex` Name of lock to hold.\\n\\n@param `macro` Macro to execute while holding the lock.\\n\\n\",\"signature\":\"macro<MACRO> mutex<STRING>  MUTEX \",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"MUTEX\"},\"MVELEVATIONS\":{\"description\":\"The `MVELEVATIONS` function extracts elevations from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVELEVATIONS` function will emit a list with two elements (a pair), the first element will be the elevation associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the elevations of the Multivariate value itself.\\n\\nIf a tick has no associated elevation, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted elevations.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVELEVATIONS  output<LIST>\\ninput<GTS>  MVELEVATIONS  output<LIST>\\nlinput<LIST>  MVELEVATIONS  output<LIST>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVELEVATIONS\"},\"MVHHCODES\":{\"description\":\"The `MVHHCODES` function extracts [`HHCodes`](https://en.wikipedia.org/wiki/HHCode) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVHHCODES` function will emit a list with two elements (a pair), the first element will be the HHCode associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the HHCodes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted HHCodes.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVHHCODES  output<LIST>\\ninput<GTS>  MVHHCODES  output<LIST>\\nlinput<LIST>  MVHHCODES  output<LIST>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVHHCODES\"},\"MVINDEXSPLIT\":{\"description\":\"The `MVINDEXSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVINDEXSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element index (first element being at index 0).\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:INDEX` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of indices or indices ranges can be specified to only produce encoders for the indices which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `indices` List of indices or indices ranges (list of two indices), used to restrict which indices to consider.\\n\\n@param `renaming` Map of index (LONG) to parameter to `RENAME`. If no entry is present for an index, `+:INDEX` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> indices<LIST>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> indices<LIST> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> indices<LIST>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> indices<LIST> renaming<MAP>  MVINDEXSPLIT  output<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> indices<LIST>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTSENCODER>> indices<LIST> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> indices<LIST>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\\nlinput<LIST<GTS>> indices<LIST> renaming<MAP>  MVINDEXSPLIT  loutput<LIST<LIST<GTSENCODER>>>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVINDEXSPLIT\"},\"MVLOCATIONS\":{\"description\":\"The `MVLOCATIONS` function extracts location (latitude, longitude) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVLOCATIONS` function will emit a list with two elements (a pair), the first element will be the latitude and longitude (a list) associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the latitudes and longitudes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `[ NaN NaN ]` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted locations.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVLOCATIONS  output<LIST>\\ninput<GTS>  MVLOCATIONS  output<LIST>\\nlinput<LIST>  MVLOCATIONS  output<LIST>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVLOCATIONS\"},\"MVTICKS\":{\"description\":\"The `MVTICKS` function extracts ticks from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVTICKS` function will emit a list with two elements (a pair), the first element will be the tick at which the Multivariate value was encountered, the second element will be a list containing the ticks of the Multivariate value itself.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted ticks.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVTICKS  output<LIST>\\ninput<GTS>  MVTICKS  output<LIST>\\nlinput<LIST>  MVTICKS  output<LIST>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKS\"},\"MVTICKSPLIT\":{\"description\":\"The `MVTICKSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVTICKSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element timestamp.\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:TIMESTAMP` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of timestamps or timestamp ranges can be specified to only produce encoders for the timestamps which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `timestamps` List of timestamps or timestamps ranges (list of two timestamps), used to restrict which timestamps to consider.\\n\\n@param `renaming` Map of timestamp (LONG) to parameter to `RENAME`. If no entry is present for a timestamp, `+:TIMESTAMP` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> timestamps<LIST>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTSENCODER> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> timestamps<LIST>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\ninput<GTS> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  output<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> timestamps<LIST>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTSENCODER>> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> timestamps<LIST>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\\nlinput<LIST<GTS>> timestamps<LIST> renaming<MAP>  MVTICKSPLIT  loutput<LIST<GTSENCODER>>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKSPLIT\"},\"MVVALUES\":{\"description\":\"The `MVVALUES` function extracts values from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted values.\\n\\n\",\"signature\":\"input<GTSENCODER>  MVVALUES  output<LIST>\\ninput<GTS>  MVVALUES  output<LIST>\\nlinput<LIST>  MVVALUES  output<LIST>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVVALUES\"},\"NAME\":{\"description\":\"The `NAME` function consumes a Geo Time Series™ from the stack, extracts its class name, and pushes it onto the stack.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `encoder` Geo Time Series™ Encoder\\n\\n@param `result` Class name\\n\\n\",\"signature\":\"gts<GTS>  NAME  result<STRING>\\nencoder<GTSENCODER>  NAME  result<STRING>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NAME\"},\"NBOUNDS\":{\"description\":\"The `NBOUNDS` function computes bounds defining a specified number of intervals which have the same area under the curve of a normal distribution with a given mean and standard deviation.\\n\\n@param `n` Number of desired intervals.\\n\\n@param `sigma` Positive standard deviation to use for the normal distribution.\\n\\n@param `mu` Mean to use for the normal distribution.\\n\\n@param `bounds` List of `n`-1 bounds defining the `n` intervals.\\n\\n\",\"signature\":\"mu<NUMBER> sigma<NUMBER> n<LONG>  NBOUNDS  bounds<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NBOUNDS\"},\"NDEBUGON\":{\"description\":\"Turns on stack debugging so up to the given number of stack levels will be returned in case of error. Stack debugging is off by default.\\n\\n@param `n` Maximum number of stack levels to return in case of error.\\n\\n\",\"signature\":\"n<NUMBER>  NDEBUGON \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NDEBUGON\"},\"NEGATEEXACT\":{\"description\":\"The `NEGATEEXACT` function consumes one LONG from the top of the stack and puts back the negated value. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be negated\\n\\n@param `result` The negated value\\n\\n@param `lvalue` List of values to be negated\\n\\n@param `lresult` List of negated values\\n\\n\",\"signature\":\"value<NUMBER>  NEGATEEXACT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEGATEEXACT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEGATEEXACT\"},\"NEWENCODER\":{\"description\":\"The `NEWENCODER` function creates an empty encoder and pushes it onto the stack. An encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` A newly created empty encoder instance.\\n\\n\",\"signature\":\" NEWENCODER  encoder<GTSENCODER>\",\"tags\":[\"encoder\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"NEWENCODER\"},\"NEWGTS\":{\"description\":\"The `NEWGTS` function pushes onto the stack an empty Geo Time Series™ instance.\\n\\n@param `gts` A newly created empty GTS instance.\\n\\n\",\"signature\":\" NEWGTS  gts<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEWGTS\"},\"NEXTAFTER\":{\"description\":\"The `NEXTAFTER` function consumes two numeric parameter from the top of the stack and pushes back the **DOUBLE** adjacent to the first argument in the direction of the second argument. In other words, the result is between *from* and *to* and adjacent to *from*.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `from` Starting value\\n\\n@param `to` Direction used to calculate the adjacent value\\n\\n@param `result` Next **DOUBLE** from *from* to *to*\\n\\n@param `lfrom` List of starting values\\n\\n@param `lto` List of directions used to calculate the adjacent value\\n\\n@param `lresult` List of next **DOUBLE** from *from* to *to*\\n\\n\",\"signature\":\"from<NUMBER> to<NUMBER>  NEXTAFTER  result<DOUBLE>\\nfrom<NUMBER> lto<LIST<NUMBER>>  NEXTAFTER  lresult<LIST<DOUBLE>>\\nlfrom<LIST<NUMBER>> to<NUMBER>  NEXTAFTER  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTAFTER\"},\"NEXTDOWN\":{\"description\":\"The `NEXTDOWN` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of negative infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of negative infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of negative infinity\\n\\n\",\"signature\":\"value<NUMBER>  NEXTDOWN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEXTDOWN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEXTDOWN\"},\"NEXTUP\":{\"description\":\"The `NEXTUP` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of positive infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of positive infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of positive infinity\\n\\n\",\"signature\":\"value<NUMBER>  NEXTUP  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  NEXTUP  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTUP\"},\"NOLOG\":{\"description\":\"The `NOLOG` function resets java.util.logging.LogManager.\\n\\nIt can be useful to do this during developments and tests of an extension.\\n\\nThe `NOLOG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n\",\"signature\":\" NOLOG \",\"tags\":[\"extensions\"],\"since\":\"1.2.19\",\"OPB64name\":\"NOLOG\"},\"NONEMPTY\":{\"description\":\"Filter a list of Geo Time Series™ in order to retain only those that have at least one value.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `results` Filtered list of Geo Time Series™\\n\\n\",\"signature\":\"gtsList<LIST<GTS>>  NONEMPTY  results<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NONEMPTY\"},\"NONNULL\":{\"description\":\"The `NONNULL` function consumes a list and produces a list containing only the non NULL elements of the argument list.\\n\\n@param `list` The argument list to filter\\n\\n@param `nonnulls` A new list with only those elements from `list` which are not NULL\\n\\n\",\"signature\":\"list<LIST>  NONNULL  nonnulls<LIST>\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.2.7\",\"OPB64name\":\"NONNULL\"},\"NOOP\":{\"description\":\"It does nothing.\\n\\nWhile it does not have a usefulness of its own, it can be used when generating code from within WarpScript code prior to executing it with [`EVAL`](/doc/EVAL).\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOOP\"},\"NORMALIZE\":{\"description\":\"The `NORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between 0 and 1 (i.e. it replaces X by \\n(X - min)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"signature\":\"gts<GTS>  NORMALIZE  result<GTS>\\ngtsList<LIST<GTS>>  NORMALIZE  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NORMALIZE\"},\"NOT\":{\"description\":\"Negates a boolean.\\n\\nThe `NOT` function is synonymous for [`!`](/doc/7F). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gts` A boolean Geo Time Series™\\n\\n@param `negatedgts` A boolean Geo Time Series™\\n\\n\",\"signature\":\"input<BOOLEAN>  NOT  result<BOOLEAN>\\ngts<GTS>  NOT  negatedgts<GTS>\",\"tags\":[\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOT\"},\"NOTAFTER\":{\"description\":\"Checks that the current time is not after the provided timestamp.\\n\\nThe `NOTAFTER` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not after the provided timestamp.\\nIf it is not after the WarpScript execution continues, otherwise it throws an exception.\\n\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"signature\":\"timestamp<LONG>  NOTAFTER \\ndate<STRING>  NOTAFTER \",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTAFTER\"},\"NOTBEFORE\":{\"description\":\"Checks that the current time is not before the provided timestamp.\\n\\nThe `NOTBEFORE` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not before the provided timestamp.\\nIf it is not before the WarpScript execution continues, otherwise it throws an exception.\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"signature\":\"timestamp<LONG>  NOTBEFORE \\ndate<STRING>  NOTBEFORE \",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTBEFORE\"},\"NOTIMINGS\":{\"description\":\"Use of the `NOTIMINGS` function disables the collection of timing information for each line of the input script. Use [`TIMINGS`](/doc/TIMINGS) to enable it again.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTIMINGS\"},\"NOW\":{\"description\":\"The `NOW` function pushes onto the stack the current **LONG** timestamp expressed in the platform time unit. This timestamp is the number of platform time unit elapsed since 00:00:00 on 1 January 1970 UTC minus the number of leap seconds, see [Unix time](https://en.wikipedia.org/wiki/Unix_time).\\n\\nThis function is mostly linear with time but this property is violated when the OS resynchronises its clock (ie consecutive calls to `NOW` may 'jump' or 'go backward').\\n\\n@param `timestamp` The current timestamp in platform time unit.\\n\\n\",\"signature\":\" NOW  timestamp<LONG>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOW\"},\"NPDF\":{\"description\":\"The `NPDF` function builds a function which outputs the probability of occurrence of a given value under a specified normal distribution.\\n\\nThe normal distribution is defined by its mean and standard deviation. The result of the `NPDF` function is itself a function which can be invoked via [`EVAL`](doc/EVAL).\\n\\n*NPDF* stands for Normal (Gaussian) distribution Probability Density Function.\\n\\n@param `sigma` Standard deviation of the normal distribution to consider.\\n\\n@param `mu` Mean of the normal distribution to consider.\\n\\n@param `npdf` Function which given an input number outputs the probability of its occurence under the given normal distribution.\\n\\n\",\"signature\":\"mu<NUMBER> sigma<NUMBER>  NPDF  npdf<FUNCTION>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NPDF\"},\"NPEEK\":{\"description\":\"Displays a given number of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of stack levels to display.\\n\\n\",\"signature\":\"levels<NUMBER>  NPEEK \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"NPEEK\"},\"NRETURN\":{\"description\":\"Immediately exit a certain number of macros being executed. The `NRETURN` function expects a number of levels on top of the stack.\\n\\n@param `levelnumber` Number of levels of macro to exit.\\n\\n\",\"signature\":\"levelnumber<LONG>  NRETURN \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"NRETURN\"},\"NSUMSUMSQ\":{\"description\":\"Computes the cardinality, sum of values and sum of squared values of a Geo Time Series™. Pushes those results on the stack in the order they were mentioned.\\n\\nOnly numeric series are allowed.\\n\\n@param `square` Sum of squared values\\n\\n@param `sum` Sum of values\\n\\n@param `cardinality` Values count\\n\\n@param `gts` Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  NSUMSUMSQ  cardinality<LONG> sum<DOUBLE> square<DOUBLE>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NSUMSUMSQ\"},\"NULL\":{\"description\":\"The `NULL` function pushes the symbolic value *null* onto the stack.\\n\\n@param `result` Symbolic value *null*\\n\\n\",\"signature\":\" NULL  result<NULL>\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NULL\"},\"NaN\":{\"description\":\"Pushes the double value *NaN* (Not a Number) onto the stack.\\n\\n@param `result` Value *NaN*\\n\\n\",\"signature\":\" NaN  result<DOUBLE>\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NaN\"},\"ONLYBUCKETS\":{\"description\":\"Only retains ticks from Geo Time Series™ with timestamps which are bucket ends. If an input GTS is not bucketized, a clone of the GTS will be returned.\\n\\nThe `ONLYBUCKETS` function does not remove duplicate ticks, please consider using [`DEDUP`](/doc/DEDUP) for that purpose.\\n\\n@param `gts` Single instance of Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `result` Transformed GTS.\\n\\n@param `lresult` List of transformed GTS.\\n\\n\",\"signature\":\"gts<GTS>  ONLYBUCKETS  result<GTS>\\nlgts<LIST<GTS>>  ONLYBUCKETS  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ONLYBUCKETS\"},\"OPB64->\":{\"description\":\"Decode a String in order preserving base64 into a byte array.\\n\\nBytes array cannot be represented on the stack.\\n\\n@param `input` Any valid opbbase64 string.\\n\\n@param `output` Byte array of the input decoded input.\\n\\n\",\"signature\":\"input<STRING>  OPB64->  output<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.7\",\"OPB64name\":\"Ip01CYFhEV\"},\"OPB64TOHEX\":{\"description\":\"The OPB64TOHEX function decodes the order preserving base64 string on top of the stack and immediately re-encode it in hex string.\\n\\n\\n@param `input` OPBase64 encoded string\\n\\n@param `output` hexadecimal representation\\n\\n\",\"signature\":\"input<STRING>  OPB64TOHEX  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.2\",\"OPB64name\":\"OPB64TOHEX\"},\"OPS\":{\"description\":\"Pushes onto the stack the current number of operations which were performed by the WarpScript code execution.\\n\\n@param `ops` number of operations\\n\\n\",\"signature\":\" OPS  ops<LONG>\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPS\"},\"OPTDTW\":{\"description\":\"The `OPTDTW` function finds the top subsequence matches in a sequence for a given query sequence. The function uses [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping)\\nto assess the subsequence similarity with the query.\\n\\n@param `match` Number of top matches. Use 0 as the number of matches to return to return them all.\\n\\n@param `query` Query numerical sequence, thr shortest\\n\\n@param `data` Data sequence in which to find matches\\n\\n@param `result` List of matches, each match being a pair of (index, distance).\\n\\n\",\"signature\":\"data<LIST> query<LIST> match<LONG>  OPTDTW  result<LIST>\",\"tags\":[\"math\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPTDTW\"},\"OPTIMIZE\":{\"description\":\"Optimizes the memory footprint of Geo Time Series™ and GTS Encoder instances.\\n\\n@param `ratio` Ratio of memory footprint to number of values, if this ratio is not exceeded, no optimization will take place. As a result, optimization is always done when ratio <= 1 or ratio is NaN.\\n\\n@param `gts` Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `encoder` Instance of GTS Encoder to optimize.\\n\\n@param `optencoder` Optimized version of the encoder, or the original instance if no optimization occurred.\\n\\n@param `lgts` List of Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `lencoder` List of instances of GTS Encoder to optimize.\\n\\n@param `loptencoder` List of optimized version of the encoders or the original instances if no optimization occurred.\\n\\n\",\"signature\":\"gts<GTS> ratio<NUMBER>  OPTIMIZE  gts<GTS>\\nencoder<GTSENCODER> ratio<NUMBER>  OPTIMIZE  optencoder<GTSENCODER>\\nlgts<LIST<GTS>> ratio<NUMBER>  OPTIMIZE  lgts<LIST<GTS>>\\nlencoder<LIST<GTSENCODER>> ratio<NUMBER>  OPTIMIZE  loptencoder<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"OPTIMIZE\"},\"OR\":{\"description\":\"The `OR` operator is a synonymous for [`||`](/doc/U6k).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `OR` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"signature\":\"p1<BOOLEAN> p2<BOOLEAN>  OR  result<BOOLEAN>\\nl<LIST>  OR  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  OR  gtsresult<GTS>\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"OR\"},\"PACK\":{\"description\":\"The `PACK` function packs a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n@param `input` List to pack\\n\\n@param `format` Format used to pack\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"input<LIST> format<STRING>  PACK  result<BYTES>\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"PACK\"},\"PAPPLY\":{\"description\":\"The `PAPPLY` function performs operations in a way identical to the [`APPLY`](/doc/APPLY) framework but produces a map of results keyed by the label map of each equivalence class.\\n\\nAs [`APPLY`](/doc/APPLY), `PAPPLY` provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can due. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` Map of resulting GTS, one per equivalence class, keyed with the equivalence class labels.\\n\\n@param `op` Operation to perform.\\n\\n\",\"signature\":\"[ op<OPERATOR> labels<LIST> gts<LIST<GTS>+> ]  PAPPLY  result<MAP>\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"PAPPLY\"},\"PARSE\":{\"description\":\"The `PARSE` function parses an input **STRING** containing datapoints in the [Geo Time Series™ input format](/content/03_Documentation/03_Interacting_with_Warp_10/03_Ingesting_data/02_GTS_input_format) and pushes onto the stack the parsed Geo Time Series™.\\n\\n@param `data` Datapoints in the Geo Time Series™ input format\\n\\n@param `result` List of parsed Geo Time Series™\\n\\n\",\"signature\":\"data<STRING>  PARSE  result<LIST<GTS>>\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.0.11\",\"OPB64name\":\"PARSE\"},\"PARSESELECTOR\":{\"description\":\"The `PARSESELECTOR` function parses a GTS Selector (STRING) returnss the class selector and labels selectors.\\n\\nIn order for `PARSESELECTOR` to parse correctly a selector, the following characters MUST appear percent-encoded in the `STRING` to parse, the equal sign (`=`, `%3D`), the comma (`,` `%2C`) and closing curly brace (`}` `%7D`). Due to the way WarpScript parses `STRING` constants, the `%` sign MUST be percent-encoded (`%25`) in the `STRING` if it appears in WarpScript code:\\n\\nThe `STRING` `class{label=comm%2Cequal%3Dsign}` must appear in WarpScript as:\\n\\n```\\n'class{label=comm%252Cequal%253Dsign'\\n```\\n\\nCombined with `TOSELECTOR`, it can be used to build a selector from a subset of GTS.\\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature'\\n  { 'sensorId' '=01' }\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\nFETCH\\n\\n```\\nThis can be used to simplify the syntax of a FETCH or FIND request. \\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature{sensorId=01}' PARSESELECTOR\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\n\\nFETCH\\n```\\n\\n\\n\\n@param `selector` String selector.\\n\\n@param `labelselector` MAP of label selectors.\\n\\n@param `classselector` Class name selector.\\n\\n\",\"signature\":\"selector<STRING>  PARSESELECTOR  classselector<STRING> labelselector<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARSESELECTOR\"},\"PARSEVALUE\":{\"description\":\"The `PARSEVALUE` function parses a STRING representing a valid value in the Geo Time Series™ input format.\\n\\nThe underlying implementation being the internal WarpScript function, some of the returned types might not be easily handled in the rest of the calling script. Most notably, some floating point representations might lead to BigDecimal instances being produced.\\n\\n@param `input` String representation of the value to parse.\\n\\n@param `value` Parsed value, could be a STRING, LONG, DOUBLE, BIGDECIMAL, BOOLEAN or BYTES elements.\\n\\n\",\"signature\":\"input<STRING>  PARSEVALUE  value<ANY>\",\"tags\":[\"gts\"],\"since\":\"2.1.0\",\"OPB64name\":\"PARSEVALUE\"},\"PARTITION\":{\"description\":\"The `PARTITION` function splits a Geo Time Series™ list in equivalence classes based on label values.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels` plus all labels with common values among the GTS in the equivalence class.\\n\\n\",\"signature\":\"lgts<LIST<GTS>> labels<LIST<STRING>>  PARTITION  result<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARTITION\"},\"PATTERNDETECTION\":{\"description\":\"The `PATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"gts<GTS> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNDETECTION  result<GTS>\\nlgts<LIST<GTS>> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNDETECTION  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNDETECTION\"},\"PATTERNS\":{\"description\":\"The `PATTERNS` function extracts symbolic patterns (or motifs) from a Geo Time Series™. Those patterns are similar to [iSAX](http://www.cs.ucr.edu/~eamonn/iSAX/iSAX.html) symbols.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNS` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"gts<GTS> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNS  result<GTS>\\nlgts<LIST<GTS>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  PATTERNS  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNS\"},\"PEEK\":{\"description\":\"Displays the top of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" PEEK \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEK\"},\"PEEKN\":{\"description\":\"Displays the content of the level of the stack at the given distance from the top.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `distance` Distance (in stack levels) between the top of the stack and the level to display.\\n\\n\",\"signature\":\"distance<NUMBER>  PEEKN \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEKN\"},\"PERMUTE\":{\"description\":\"Permute the dimensions of a nested LIST as if it were a tensor or a multidimensional array.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent before operating. Default to false.\\n\\n@param `pattern` The permutation pattern (a LIST of LONG).\\n\\n@param `tensor` The resulting nested LIST.\\n\\n\",\"signature\":\"tensor<LIST> pattern<LIST>  PERMUTE  tensor<LIST>\\n{ tensor<LIST> pattern<LIST> fast<BOOLEAN>  } PERMUTE  tensor<LIST>\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"PERMUTE\"},\"PFILTER\":{\"description\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `PFILTER framework allows for advanced filtering using N-ary functions \\n(functions which accept N parameters). Returned GTS are grouped by equivalence classes.\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A map keyed by the label set of each equivalence class whose values are lists of selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `PFILTER`.\\n\\n\",\"signature\":\"[ gtsList<LIST<GTS>> labels<LIST<STRING>> filter<FILTER> ]  PFILTER  result<MAP>\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"PFILTER\"},\"PGraphics\":{\"description\":\"Warp 10 includes a large subset of the [Processing](http://www.processing.org) drawing library. You can create and manipulate images, then push a base64 encoded png onto the stack.\\n\\n+ Step 1: create a processing graphic object with `PGraphics` function.\\n+ Step 2: manipulate this object with Processing functions.\\n+ Step 3: render the processing graphic with `Pencode` function.\\n\\nDocumentation of every function has a link to original Processing website. Original website includes more examples for each function.\\n\\nProcessing functions offers a lot of different signatures for colors. The most efficient is to keep the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n\\nUp to Warp 10 1.2.18, antialiasing was not available. It is now available, by appending a digit to the **imgtype** string argument. The maximum anti-aliasing level is determined by the hardware of the machine that is running the software, so 2D4 and 2D8 mode will not work with every computer.\\n\\n+ \\\"2D\\\": no antialiasing\\n+ \\\"2D2\\\": bilinear smoothing\\n+ \\\"2D3\\\": bicubic smoothing\\n+ \\\"2D4\\\": 4x antialiasing\\n+ \\\"2D8\\\": 8x antialiasing\\n\\n\\nYou can adjust the maximal number of pixel allowed in Warp 10 configuration file.\\n\\n@param `imgtype` '2D', '3D', or '2Dx', where x is the level of anti aliasing (2, 3, 4, or 8).\\n\\n@param `width` Pixel width of the image.\\n\\n@param `height` Pixel height of the image.\\n\\n@param `pg` Processing graphic object.\\n\\n\",\"signature\":\"width<LONG> height<LONG> imgtype<STRING>  PGraphics  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PGraphics\"},\"PI\":{\"description\":\"Alias of [pi](/doc/R5Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"signature\":\" PI  pi<DOUBLE>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"J3Z\"},\"PICK\":{\"description\":\"The `PICK` function copies on top of the stack the element at level N. Parameter N is consumed off the top of the stack when `PICK` is called.\\n\\n@param `level` Level of the stack\\n\\n@param `result` What is on stack at *level*\\n\\n\",\"signature\":\"level<NUMBER>  PICK  result<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"PICK\"},\"PICKLE->\":{\"description\":\"The `PICKLE->` function decodes some Pickle encoded content contained in a byte array.\\nThe conversion is done using [Pyrolite v4](https://github.com/irmen/pickle).\\n\\nIt can read all pickle protocol versions (0 to 4, so this includes\\nthe latest additions made in Python 3.4).\\n\\n```python\\n>>> myobject={ 'apple':3.5,'banana':18 }\\n>>> pickle.dumps(myobject).encode(\\\"hex\\\")\\n'286470300a53276170706c65270a70310a46332e350a73532762616e616e61270a70320a4931380a732e'\\n```\\n\\n@param `input` Byte array of a pickle encoded content\\n\\n@param `output` Warp 10 object\\n\\n\",\"signature\":\"input<BYTES>  PICKLE->  output<ANY>\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"J3_2Hol4AIs\"},\"PIGSCHEMA\":{\"description\":\"The `PIGSCHEMA` function produces on top of the stack a STRING representing the [Pig](https://en.wikipedia.org/wiki/Pig_(programming_tool)) schema definition for the current stack content.\\n\\n@param `elt` Stack content.\\n\\n@param `schema` Schema for the current stack, usable when working with WarpScript in Pig.\\n\\n\",\"signature\":\"elt<ANY*>  PIGSCHEMA  elt<ANY*> schema<STRING>\",\"tags\":[\"pig\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"PIGSCHEMA\"},\"PIVOT\":{\"description\":\"The `PIVOT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick of GTS from the first list, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n1// C3{C1=C} 2\\n2// C4{C2=F} 30\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n4// C3{} 5\\n4// C4{} 50\\n```\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"signature\":\"input<LIST<GTS>> pivot<LIST<GTS>>  PIVOT  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOT\"},\"PIVOTSTRICT\":{\"description\":\"The `PIVOTSTRICT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™ in a way similar to what [`PIVOT`](/doc/PIVOT) does.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick common to Geo Time Series™ of both lists, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOTSTRICT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n```\\n\\nOnly ticks 0 and 3 appear in the result as those are the only ticks present in both `C1` and `C2`.\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"signature\":\"input<LIST<GTS>> pivot<LIST<GTS>>  PIVOTSTRICT  result<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOTSTRICT\"},\"POPR\":{\"description\":\"Pops a value from the top of the stack and stores it into the designated register.\\n\\nThe `POPR` function is really a family of functions named `POPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"signature\":\"value<ANY>  POPR \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"POPR\"},\"PREDUCE\":{\"description\":\"Behaves as [`REDUCE`](/doc/REDUCE) but produces a map of results keyed by the label map of each equivalence class.\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` Map keyed by the label map of each equivalence class and whose values are the Geo Time Series™ produced for each class.\\n\\n\",\"signature\":\"[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> ]  PREDUCE  result<MAP>\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.5\",\"OPB64name\":\"PREDUCE\"},\"PRNG\":{\"description\":\"The `PRNG` function initializes the stack's seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator). This PRNG can later be used by the [`SRAND`](/doc/SRAND) function to produce random numbers in a deterministic way (!).\\n\\n@param `seed` The seed to use for initializing the PRNG.\\n\\n\",\"signature\":\"seed<LONG>  PRNG \",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"PRNG\"},\"PROB\":{\"description\":\"Computes probability for each value of the input Geo Time Series™.\\n\\nThe function `PROB` consumes a GTS or a list of the GTS from the top of the stack. It pushes back the probability for each value.\\n\\nThe probabilities are computed using the value histogram.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `gtslist` The input list of Geo Time Series™\\n\\n@param `result` The Geo Time Series™ wit probability for each value\\n\\n@param `resultList` The List of Geo Time Series™ with probability for each value\\n\\n\",\"signature\":\"gts<GTS>  PROB  result<GTS>\\ngtslist<LIST<GTS>>  PROB  resultList<LIST<GTS>>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.6\",\"OPB64name\":\"PROB\"},\"PROBABILITY\":{\"description\":\"Pushes on the stack a function which computes probabilities according to a provided value histogram.\\n\\nTo use the function pushed by `PROBABILITY` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function expects a value on top of the stack and will output the probability of occurrence of this value.\\n\\n\",\"signature\":\"valueHistogram<MAP>  PROBABILITY  result<STRING>\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"PROBABILITY\"},\"PSTACK\":{\"description\":\"When in interactive (REPL) mode, prints the content of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PSTACK\"},\"PUSHR\":{\"description\":\"Pushes onto the stack the value currently contained in the designated register.\\n\\nThe `PUSHR` function is really a family of functions named `PUSHRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"signature\":\" PUSHR  value<ANY>\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PUSHR\"},\"PUT\":{\"description\":\"The `PUT` function inserts a new key-value pair in a map.\\nIf the key already exists in the input MAP, the value is replaced by the new one.\\n\\n`PUT` function puts the reference of the MAP on top of the stack.\\n\\n@param `newkey` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `newvalue` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `inputmap` reference to the map to be modified\\n\\n@param `outputmap` copy of input map reference. Useful to chain other instructions on the same map.\\n\\n\",\"signature\":\"inputmap<MAP> newvalue<ANY> newkey<ANY>  PUT  outputmap<MAP>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"PUT\"},\"Palpha\":{\"description\":\"Extracts the alpha value from a color.\\n\\nThe `Palpha` function is easy to use and understand, but it is slower than bit shifting... \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/alpha_.html)\\n\\n@param `color` Any value of the color datatype\\n\\n@param `alpha` Alpha component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> color<NUMBER>  Palpha  pg<PGRAPHICS> alpha<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Palpha\"},\"Parc\":{\"description\":\"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined by the **a**, **b**, **c**, and **d** parameters. The origin of the arc's ellipse may be changed with the [`PellipseMode`](/doc/PellipseMode) function. Use the **start** and **stop** parameters to specify the angles (in radians) at which to draw the arc.\\n\\n\\n\\nThere are three ways to draw an arc; the rendering technique used is defined by the optional seventh parameter. The three options, depicted in the examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with a PIE fill.\\n\\n\\n\\nIn some cases, the `Parc` function isn't accurate enough for smooth drawing. For example, the shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are rendered, you'll need to draw the arc yourself with [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) or a **PShape**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/arc_.html)\\n\\n@param `b` y-coordinate of the arc's ellipse\\n\\n@param `a` x-coordinate of the arc's ellipse\\n\\n@param `c` width of the arc's ellipse by default\\n\\n@param `d` height of the arc's ellipse by default\\n\\n@param `start` angle to start the arc, specified in radians\\n\\n@param `stop` angle to stop the arc, specified in radians\\n\\n@param `mode` closing mode. either PIE, OPEN, or CHORD\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> start<DOUBLE> stop<DOUBLE>  Parc  pg<PGRAPHICS>\\npg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> start<DOUBLE> stop<DOUBLE> mode<STRING>  Parc  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Parc\"},\"Pbackground\":{\"description\":\"The `Pbackground` function sets the color used for the background of the processing graphics object. \\n\\nAn image object can also be used as the background for a sketch, although the image's width and height must match that of the processing object. Images used with `Pbackground` will ignore the current [`Ptint`](/doc/Ptint) setting. \\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pbackground` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/background_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `rgb` any rgb color value.\\n\\n@param `alpha` opacity of the background. 0 = transparent, 255 = opaque.\\n\\n@param `gray` a value between white (255) and black (0)\\n\\n@param `image` PImage to set as background (must be same size as pg)\\n\\n@param `v1` red or hue value (depending on the current color mode)\\n\\n@param `v2` green or saturation value (depending on the current color mode)\\n\\n@param `v3` blue or brightness value (depending on the current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> argb<LONG>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> image<PIMAGE>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> rgb<LONG> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pbackground  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pbackground  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbackground\"},\"PbeginContour\":{\"description\":\"Use the `PbeginContour` and [`PendContour`](/doc/PendContour) function to create negative shapes within shapes such as the center of the letter 'O'. `PbeginContour` begins recording vertices for the shape and [`PendContour`](/doc/PendContour) stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\n\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a `PbeginContour`/[`PendContour`](/doc/PendContour) pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PbeginContour  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginContour\"},\"PbeginShape\":{\"description\":\"Using the `PbeginShape` and [`PendShape`](/doc/PendShape) functions allow creating more complex forms. `PbeginShape` begins recording vertices for a shape and [`PendShape`](/doc/PendShape) stops recording. \\n\\nThe value of the **kind** parameter tells it which types of shapes to create from the provided vertices. The parameters available for beginShape() are POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the `PbeginShape` function, a series of [`Pvertex`](/doc/Pvertex) commands must follow. To stop drawing the shape, call [`PendShape`](/doc/PendShape). The [`Pvertex`](/doc/Pvertex) function with two parameters specifies a position in 2D. Each shape will be outlined with the current stroke color and filled with the fill color. \\n\\n\\nTransformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within `PbeginShape`. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within `PbeginShape`. \\n\\n\\nThe P2D and P3D renderers allow [`Pstroke`](/doc/Pstroke) and [`Pfill`](/doc/Pfill) to be altered on a per-vertex group basis. Settings such as [`PstrokeWeight`](/doc/PstrokeWeight), [`PstrokeCap`](/doc/PstrokeCap), and [`PstrokeJoin`](/doc/PstrokeJoin) cannot be changed while inside a `PbeginShape`/[`PendShape`](/doc/PendShape) block with any renderer.\\n\\nUp to Warp 10 1.2.18, `PbeginShape` could be called without the **kind** parameter. It defaults to POLYGON.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginShape_.html)\\n\\n@param `kind` Either POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> kind<STRING>  PbeginShape  pg<PGRAPHICS>\\npg<PGRAPHICS>  PbeginShape  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginShape\"},\"Pbezier\":{\"description\":\"Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezier_.html)\\n\\n@param `x1` coordinates for the first anchor point\\n\\n@param `y1` coordinates for the first anchor point\\n\\n@param `z1` coordinates for the first anchor point\\n\\n@param `x2` coordinates for the first control point\\n\\n@param `y2` coordinates for the first control point\\n\\n@param `z2` coordinates for the first control point\\n\\n@param `x3` coordinates for the second control point\\n\\n@param `y3` coordinates for the second control point\\n\\n@param `z3` coordinates for the second control point\\n\\n@param `x4` coordinates for the second anchor point\\n\\n@param `y4` coordinates for the second anchor point\\n\\n@param `z4` coordinates for the second anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pbezier  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE> x3<DOUBLE> y3<DOUBLE> z3<DOUBLE> x4<DOUBLE> y4<DOUBLE> z4<DOUBLE>  Pbezier  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbezier\"},\"PbezierDetail\":{\"description\":\"Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the **P3D** renderer; the default **P2D** renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierDetail_.html)\\n\\n@param `detail` resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> detail<NUMBER>  PbezierDetail  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierDetail\"},\"PbezierPoint\":{\"description\":\"Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierPoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PbezierPoint  pg<PGRAPHICS> out<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierPoint\"},\"PbezierTangent\":{\"description\":\"Calculates the tangent of a point on a Bezier curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PbezierTangent  pg<PGRAPHICS> out<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierTangent\"},\"PbezierVertex\":{\"description\":\"Specifies vertex coordinates for Bezier curves. Each call to `PbezierVertex` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PbezierVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only with POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierVertex_.html)\\n\\n@param `x2` The x-coordinate of the 1st control point\\n\\n@param `y2` The y-coordinate of the 1st control point\\n\\n@param `x3` The x-coordinate of the 2nd control point\\n\\n@param `y3` The y-coordinate of the 2nd control point\\n\\n@param `x4` The x-coordinate of the anchor point\\n\\n@param `y4` The y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  PbezierVertex  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierVertex\"},\"Pblend\":{\"description\":\"Blends a region of pixels from one image into another (or in itself again) with full alpha channel support.\\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels in the destination image (B):\\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - Multiply the colors, result will always be darker.\\n+ SCREEN - Opposite multiply, uses inverse values of the colors.\\n+ OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,and screens light values.\\n+ HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.\\n+ SOFT_LIGHT - Mix of DARKEST and LIGHTEST. Works like OVERLAY, but not as harsh.\\n+ DODGE - Lightens light tones and increases contrast, ignores darks.Called \\\"Color Dodge\\\" in Illustrator and Photoshop.\\n+ BURN - Darker areas are applied, increasing contrast, ignores lights.Called \\\"Color Burn\\\" in Illustrator and Photoshop.\\n\\nAll modes use the alpha information (highest byte) of source image pixels as the blending factor. If the source and destination regions are different sizes, the image will be automatically resized to match the destination size. If the **src** parameter is not used, the display window is used as the source image.\\n\\n[Link to original Processing doc](https://processing.org/reference/blend_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `mode` Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> src<PIMAGE> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG> mode<STRING>  Pblend  pg<PGRAPHICS>\\npg<PGRAPHICS> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG> mode<STRING>  Pblend  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblend\"},\"PblendMode\":{\"description\":\"Blends the pixels in the display window according to a defined mode. \\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels already in the display window (B). \\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B. This is the default blending mode.\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - multiply the colors, result will always be darker.\\n+ SCREEN - opposite multiply, uses inverse values of the colors.\\n+ REPLACE - the pixels entirely replace the others and don't utilize alpha (transparency) values\\n\\nA pixel's final color is the result of applying one of the above blend modes with each channel of (A) and (B) independently. For example, red is compared with red, green with green, and blue with blue.\\n\\nWe recommend using `PblendMode` and not the previous [`Pblend`](/doc/Pblend) function. However, unlike [`Pblend`](/doc/Pblend), the `PblendMode` function does not support the following: HARD_LIGHT, SOFT_LIGHT, OVERLAY, DODGE, BURN. On older hardware, the LIGHTEST, DARKEST, and DIFFERENCE modes might not be available as well. \\n\\n[Link to original Processing doc](https://processing.org/reference/blendMode_.html)\\n\\n@param `mode` The blending mode to use\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PblendMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PblendMode\"},\"Pblue\":{\"description\":\"Extracts the blue value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pblue` function is easy to use and understand, but it is slower than bit masking. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/blue_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `blue` Blue component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Pblue  pg<PGRAPHICS> blue<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblue\"},\"Pbox\":{\"description\":\"A box is an extruded rectangle. A box with equal dimensions on all sides is a cube.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/box_.html)\\n\\n@param `size` dimension of the box in all dimensions (creates a cube)\\n\\n@param `w` dimension of the box in the x-dimension\\n\\n@param `h` dimension of the box in the y-dimension\\n\\n@param `d` dimension of the box in the z-dimension\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> size<NUMBER>  Pbox  pg<PGRAPHICS>\\npg<PGRAPHICS> w<NUMBER> h<NUMBER> d<NUMBER>  Pbox  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbox\"},\"Pbrightness\":{\"description\":\"Extracts the brightness value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/brightness_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `brightness` Brightness component of input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Pbrightness  pg<PGRAPHICS> brightness<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbrightness\"},\"Pclear\":{\"description\":\"Clears the pixels. This function clears everything in a **PGraphics** object to make all of the pixels 100% transparent.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clear_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  Pclear  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclear\"},\"Pclip\":{\"description\":\"Limits the rendering to the boundaries of a rectangle defined by the parameters. The boundaries are drawn based on the state of the [`PimageMode`](/doc/PimageMode) function, either CORNER, CORNERS, or CENTER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clip_.html)\\n\\n@param `a` x-coordinate of the rectangle, by default\\n\\n@param `b` y-coordinate of the rectangle, by default\\n\\n@param `c` width of the rectangle, by default\\n\\n@param `d` height of the rectangle, by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pclip  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclip\"},\"Pcolor\":{\"description\":\"`Pcolor` creates colors for storing in ARGB LONG datatype.\\n\\n+ RGB: The most efficient is to skip Pcolor function, using the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n+ HSB: For Hue Saturation Brightness to RGB conversion, use [`PcolorMode`](/doc/PcolorMode) to specify HSB, then use Pcolor to convert to ARGB.\\n\\nThe parameters are interpreted as RGB or HSB values depending on the current [`PcolorMode`](/doc/PcolorMode). The default mode is RGB values from 0 to 255.\\n\\nNote that if only one value is provided to `Pcolor`, it will be interpreted as a grayscale value. Add a second value, and it will be used for alpha transparency. When three values are specified, they are interpreted as either RGB or HSB values. Adding a fourth value applies alpha transparency.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/color_.html)\\n\\n@param `gray` int: number specifying value between white and black\\n\\n@param `alpha` float, or int: relative to current color range\\n\\n@param `v1` float, or int: red or hue values relative to the current color range\\n\\n@param `v2` float, or int: green or saturation values relative to the current color range\\n\\n@param `v3` float, or int: blue or brightness values relative to the current color range\\n\\n@param `color` ARGB color.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> gray<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> gray<NUMBER> alpha<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pcolor  pg<PGRAPHICS> color<LONG>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcolor\"},\"PcolorMode\":{\"description\":\"Changes the way Processing interprets color data. By default, the parameters for [`Pfill`](/doc/Pfill), [`Pstroke`](/doc/Pstroke), [`Pbackground`](/doc/Pbackground), and [`Pcolor`](/doc/Pcolor) are defined by values between 0 and 255 using the RGB color model. The `PcolorMode` function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling **colorMode(RGB, 1.0)** will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters **max**, **max1**, **max2**, **max3**, and **maxA**.\\n\\nWhen using max different from default values, do not work with grayscale.\\n\\nAfter changing the range of values for colors with code like **colorMode(HSB, 360, 100, 100)**, those ranges remain in use until they are explicitly changed again. For example, after running **colorMode(HSB, 360, 100, 100)** and then changing back to **colorMode(RGB)**, the range for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid this, be explicit about the ranges when changing the color mode. For instance, instead of **colorMode(RGB)**, write **colorMode(RGB, 255, 255, 255)**. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/colorMode_.html)\\n\\n@param `mode` Either 'RGB' or 'HSB', corresponding to Red/Green/Blue and Hue/Saturation/Brightness\\n\\n@param `max` range for all color elements\\n\\n@param `max1` range for the red or hue depending on the current color mode\\n\\n@param `max2` range for the green or saturation depending on the current color mode\\n\\n@param `max3` range for the blue or brightness depending on the current color mode\\n\\n@param `maxA` range for the alpha\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max<DOUBLE>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max1<DOUBLE> max2<DOUBLE> max3<DOUBLE>  PcolorMode  pg<PGRAPHICS>\\npg<PGRAPHICS> mode<STRING> max1<DOUBLE> max2<DOUBLE> max3<DOUBLE> maxA<DOUBLE>  PcolorMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcolorMode\"},\"Pconstrain\":{\"description\":\"Constrains a value to not exceed a maximum and minimum value. Also known as clamping a value. \\n\\nIt could be done with warpscript MIN MAX functions, see example.\\n\\n[Link to original Processing doc](https://processing.org/reference/constrain_.html)\\n\\n@param `x` The value to clamp.\\n\\n@param `low` Minimum limit.\\n\\n@param `high` Maximum limit.\\n\\n@param `clamped` Clamped value of x in [low high] range.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<DOUBLE> low<DOUBLE> high<DOUBLE>  Pconstrain  pg<PGRAPHICS> clamped<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pconstrain\"},\"Pcopy\":{\"description\":\"Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the **src** parameter into the display window. If the source and destination regions are not the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/copy_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `img` PIMAGE object, copy of pg\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> src<PIMAGE> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG>  Pcopy  pg<PGRAPHICS>\\npg<PGRAPHICS> sx<LONG> sy<LONG> sw<LONG> sh<LONG> dx<LONG> dy<LONG> dw<LONG> dh<LONG>  Pcopy  pg<PGRAPHICS>\\npg<PGRAPHICS>  Pcopy  pg<PGRAPHICS> img<PIMAGE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcopy\"},\"PcreateFont\":{\"description\":\"Dynamically converts a font to the format used by Processing from a font that is installed on the computer.  Not all fonts can be used and some might work with one operating system and not others.\\n\\nThe **size** parameter states the font size you want to generate. The **smooth** parameter specifies if the font should be antialiased or not.\\n\\nSince the 2.5.0 version, the name of the font can be a URI to a OpenType or Type1 font which will be resolved by a macro defined by the `processing.font.resolver` configuration.\\n\\n[Link to original Processing doc](https://processing.org/reference/createFont_.html)\\n\\n@param `name` Name of the font to load or URI from where to load the font.\\n\\n@param `size` Point size of the font\\n\\n@param `smooth` True for an antialiased font, false for aliased\\n\\n@param `charset` subset of ascii characters to be generated.\\n\\n@param `font` Processing font object compatible with PtextFont.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> name<STRING>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER> smooth<BOOLEAN>  PcreateFont  pg<PGRAPHICS> font<PFONT>\\npg<PGRAPHICS> name<STRING> size<NUMBER> smooth<BOOLEAN> charset<STRING>  PcreateFont  pg<PGRAPHICS> font<PFONT>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcreateFont\"},\"Pcurve\":{\"description\":\"Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of `Pcurve` functions together or using [`PcurveVertex`](/doc/PcurveVertex). An additional function called [`PcurveTightness`](/doc/PcurveTightness) provides control for the visual quality of the curve. The `Pcurve` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n[Link to original Processing doc](https://processing.org/reference/curve_.html)\\n\\n@param `x1` float: coordinates for the beginning control point\\n\\n@param `y1` float: coordinates for the beginning control point\\n\\n@param `x2` float: coordinates for the first point\\n\\n@param `y2` float: coordinates for the first point\\n\\n@param `x3` float: coordinates for the second point\\n\\n@param `y3` float: coordinates for the second point\\n\\n@param `x4` float: coordinates for the ending control point\\n\\n@param `y4` float: coordinates for the ending control point\\n\\n@param `z1` float: coordinates for the beginning control point\\n\\n@param `z2` float: coordinates for the first point\\n\\n@param `z3` float: coordinates for the second point\\n\\n@param `z4` float: coordinates for the ending control point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pcurve  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE> x3<DOUBLE> y3<DOUBLE> z3<DOUBLE> x4<DOUBLE> y4<DOUBLE> z4<DOUBLE>  Pcurve  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcurve\"},\"PcurveDetail\":{\"description\":\"Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D renderer as the default P2D renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveDetail_.html)\\n\\n@param `detail` Resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> detail<NUMBER>  PcurveDetail  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveDetail\"},\"PcurvePoint\":{\"description\":\"Evaluates the curve at point **t** for points **a**, **b**, **c**, **d**. The parameter **t** may range from 0 (the start of the curve) and 1 (the end of the curve). **a** and **d** are points on the curve, and **b** and **c** are the control points. This can be used once with the **x** coordinates and a second time with the **y** coordinates to get the location of a curve at **t**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curvePoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of second point on the curve\\n\\n@param `c` coordinate of third point on the curve\\n\\n@param `d` coordinate of fourth point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PcurvePoint  pg<PGRAPHICS> out<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurvePoint\"},\"PcurveTangent\":{\"description\":\"Calculates the tangent of a point on a curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE> t<DOUBLE>  PcurveTangent  pg<PGRAPHICS> out<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTangent\"},\"PcurveTightness\":{\"description\":\"Modifies the quality of forms created with [`Pcurve`](/doc/Pcurve) and [`PcurveVertex`](/doc/PcurveVertex). The parameter **tightness** determines how the curve fits to the vertex points. The value 0.0 is the default value for **tightness** (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTightness_.html)\\n\\n@param `tightness` Amount of deformation from the original vertices\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> tightness<NUMBER>  PcurveTightness  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTightness\"},\"PcurveVertex\":{\"description\":\"Specifies vertex coordinates for curves. This function may only be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). The first and last points in a series of `PcurveVertex` lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with `PcurveVertex` will draw the curve between the second, third, and fourth points. The `PcurveVertex` function is an implementation of Catmull-Rom splines. \\n\\n[Link to original Processing doc](https://processing.org/reference/curveVertex_.html)\\n\\n@param `x` The x-coordinate of the vertex\\n\\n@param `y` The y-coordinate of the vertex\\n\\n@param `z` The z-coordinate of the vertex\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  PcurveVertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  PcurveVertex  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveVertex\"},\"Pdecode\":{\"description\":\"`Pdecode` takes the image representation on the stack and pushes a Pimage object on the stack. This object can only be used as an input for [`Pset`](/doc/Pset), [`Pimage`](/doc/Pimage), [`Pbackground`](/doc/Pbackground).\\n\\nInput string must start with the header `data:image/png;base64,`.\\n\\nSupported input types: PNG, GIF, JPG.\\n\\n@param `img` Processing Pimage object.\\n\\n@param `rawimg` Image bytes.\\n\\n@param `b64img` Base64 encoded image string\\n\\n\",\"signature\":\"b64img<STRING>  Pdecode  img<PIMAGE>\\nrawimg<BYTES>  Pdecode  img<PIMAGE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdecode\"},\"Pdist\":{\"description\":\"Calculates the distance between two points, in 2D or 3D space.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/dist_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> z1<DOUBLE> x2<DOUBLE> y2<DOUBLE> z2<DOUBLE>  Pdist  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE>  Pdist  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdist\"},\"Pellipse\":{\"description\":\"Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the [`PellipseMode`](/doc/PellipseMode) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipse_.html)\\n\\n@param `a` float: x-coordinate of the ellipse\\n\\n@param `b` float: y-coordinate of the ellipse\\n\\n@param `c` float: width of the ellipse by default\\n\\n@param `d` float: height of the ellipse by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pellipse  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pellipse\"},\"PellipseMode\":{\"description\":\"Modifies the location from which ellipses are drawn by changing the way in which parameters given to [`Pellipse`](/doc/Pellipse) are intepreted.\\n\\nThe default mode is **ellipseMode(CENTER)**, which interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(RADIUS)** also uses the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\n**ellipseMode(CORNER)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(CORNERS)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipseMode_.html)\\n\\n@param `mode` Either CENTER, RADIUS, CORNER, or CORNERS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PellipseMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PellipseMode\"},\"Pencode\":{\"description\":\"`Pencode` function takes a processing graphic object on the top of the stack, render it to a png file, encode it in base64, prefix the result with the standard png header \\\"data:image/png;base64,\\\".\\n\\nThe resulting string is ready to use in an html document.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `b64img` Base64 encoded image string, ready to use in an html page.\\n\\n@param `metadata` Map of metadata to add to the PNG. Accepted keys are 'tEXt', 'zTXt' and 'iTXt', while values are lists of maps with 'keyword' and 'text' keys.\\n\\n\",\"signature\":\"pg<PGRAPHICS>  Pencode  b64img<STRING>\\npg<PGRAPHICS> metadata<MAP>  Pencode  b64img<STRING>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pencode\"},\"PendContour\":{\"description\":\"Use the [`PbeginContour`](/doc/PbeginContour) and `PendContour` function to create negative shapes within shapes such as the center of the letter 'O'. [`PbeginContour`](/doc/PbeginContour) begins recording vertices for the shape and `PendContour` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a [`PbeginContour`](/doc/PbeginContour)/`PendContour` pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n[Link to original Processing doc](https://processing.org/reference/endContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PendContour  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendContour\"},\"PendShape\":{\"description\":\"The `PendShape` function is the companion to [`PbeginShape`](/doc/PbeginShape) and may only be called after [`PbeginShape`](/doc/PbeginShape). When `Pendshape` is called, all of image data defined since the previous call to [`PbeginShape`](/doc/PbeginShape) is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end). \\n\\nUp to Warp 10 1.2.18, `PendShape` could be called without the **mode** parameter. It defaults to OPEN.\\n\\n[Link to original Processing doc](https://processing.org/reference/endShape_.html)\\n\\n@param `mode` Use CLOSE to close the shape, OPEN otherwise.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PendShape  pg<PGRAPHICS>\\npg<PGRAPHICS>  PendShape  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendShape\"},\"Pfill\":{\"description\":\"Sets the color used to fill shapes. For example, if you run **fill(204, 102, 0)**, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current [`PcolorMode`](/doc/PcolorMode). The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\nThe value for the \\\"gray\\\" parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\nTo change the color of an image or a texture, use [`Ptint`](/doc/Ptint).\\n\\n[Link to original Processing doc](https://processing.org/reference/fill_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> argb<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<LONG> alpha<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<LONG> v2<LONG> v3<LONG>  Pfill  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<LONG> v2<LONG> v3<LONG> alpha<LONG>  Pfill  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pfill\"},\"Pfilter\":{\"description\":\"Filters the display window using a preset filter or with a custom shader. Using a shader with `Pfilter` is much faster than without. Shaders require the P2D or P3D renderer in size().\\n\\n\\nThe presets options are:\\n\\n+ **THRESHOLD** Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n+ **GRAY** Converts any colors in the image to grayscale equivalents. No parameter is used.\\n+ **OPAQUE** Sets the alpha channel to entirely opaque. No parameter is used.\\n+ **INVERT** Sets each pixel to its inverse value. No parameter is used.\\n+ **POSTERIZE** Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.\\n+ **BLUR** Executes a Guassian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Guassian blur of radius 1. Larger values increase the blur.\\n+ **ERODE** Reduces the light areas. No parameter is used.\\n+ **DILATE** Increases the light areas. No parameter is used.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/filter_.html)\\n\\n@param `kind` Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, or DILATE\\n\\n@param `param` unique for each, see above\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> kind<STRING>  Pfilter  pg<PGRAPHICS>\\npg<PGRAPHICS> kind<STRING> param<DOUBLE>  Pfilter  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.2.17\",\"OPB64name\":\"J5OdQ6G_RV\"},\"Pget\":{\"description\":\"Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned (same as `Pcopy`). Use the **x** and **y** parameters to get the value of one pixel. Get a section of the display window by specifying additional **w** and **h** parameters. When getting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\nIf the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with **colorMode(HSB)**, the numbers returned will be in RGB format.\\n\\nGetting the color of a single pixel with **get(x, y)** is easy, but not as fast as grabbing the data directly from [`Ppixels`](/doc/Ppixels).\\n\\n[Link to original Processing doc](https://processing.org/reference/get_.html)\\n\\n@param `x` int: x-coordinate of the pixel\\n\\n@param `y` int: y-coordinate of the pixel\\n\\n@param `w` int: width of pixel rectangle to get\\n\\n@param `h` int: height of pixel rectangle to get\\n\\n@param `img` PIMAGE object\\n\\n@param `color` Color of the pixel, 32bits ARGB format.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  Pget  pg<PGRAPHICS> img<PIMAGE>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pget  pg<PGRAPHICS> color<LONG>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> w<NUMBER> h<NUMBER>  Pget  pg<PGRAPHICS> img<PIMAGE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pget\"},\"Pgreen\":{\"description\":\"Extracts the green value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pgreen` function is easy to use and understand, but it is slower than bit shifting. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/green_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `green` Green component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Pgreen  pg<PGRAPHICS> green<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pgreen\"},\"Phue\":{\"description\":\"Extracts the hue value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/hue_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `hue` Hue component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Phue  pg<PGRAPHICS> hue<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Phue\"},\"Pimage\":{\"description\":\"The `Pimage` function draws a Pimage (see [`Pdecode`](/doc/Pdecode)) on a PGraphic object.\\n\\nThe **img** parameter specifies the image to display and by default the **a** and **b** parameters define the location of its upper-left corner. The image is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PimageMode`](/doc/PimageMode) function can be used to change the way these parameters draw the image.\\n\\nThe color of an image may be modified with the [`Ptint`](/doc/Ptint) function. This function will maintain transparency for GIF and PNG images.\\n\\n[Link to original Processing doc](https://processing.org/reference/image_.html)\\n\\n@param `img` PImage: the image to display\\n\\n@param `a` float: x-coordinate of the image by default\\n\\n@param `b` float: y-coordinate of the image by default\\n\\n@param `c` float: width to display the image by default\\n\\n@param `d` float: height to display the image by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> img<PIMAGE> a<NUMBER> b<NUMBER>  Pimage  pg<PGRAPHICS>\\npg<PGRAPHICS> img<PIMAGE> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Pimage  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pimage\"},\"PimageMode\":{\"description\":\"Modifies the location from which images are drawn by changing the way in which parameters given to [`Pimage`](/doc/Pimage) are intepreted.\\n\\nThe default mode is **imageMode(CORNER)**, which interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n**imageMode(CENTER)** interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/imageMode_.html)\\n\\n@param `mode` could be CORNER or CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PimageMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PimageMode\"},\"Plerp\":{\"description\":\"Calculates a number between two numbers at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines, or any linear interpolation.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerp_.html)\\n\\n@param `start` first value\\n\\n@param `stop` second value\\n\\n@param `amt` float between 0.0 and 1.0\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> start<NUMBER> stop<NUMBER> amt<NUMBER>  Plerp  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Plerp\"},\"PlerpColor\":{\"description\":\"Calculates a color between two colors at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is halfway in between, etc. \\n\\nAn amount below 0 will be treated as 0. Likewise, amounts above 1 will be capped at 1. This is different from the behavior of `Plerp`, but necessary because otherwise numbers outside the range will produce strange and unexpected colors.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerpColor_.html)\\n\\n@param `c1` interpolate from this color\\n\\n@param `c2` interpolate to this color\\n\\n@param `amt` between 0.0 and 1.0\\n\\n@param `outcolor` the interpolated result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> c1<NUMBER> c2<NUMBER> amt<NUMBER>  PlerpColor  pg<PGRAPHICS> outcolor<LONG>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PlerpColor\"},\"Pline\":{\"description\":\"Draws a line (a direct path between two points) to the screen. The version of `Pline` with four parameters draws the line in 2D.  To color a line, use the [`Pstroke`](/doc/Pstroke) function. A line cannot be filled, therefore the [`Pfill`](/doc/Pfill) function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the [`PstrokeWeight`](/doc/PstrokeWeight) function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the **z** parameter requires the P3D parameter.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/line_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<NUMBER> y1<NUMBER> x2<NUMBER> y2<NUMBER>  Pline  pg<PGRAPHICS>\\npg<PGRAPHICS> x1<NUMBER> y1<NUMBER> z1<NUMBER> x2<NUMBER> y2<NUMBER> z2<NUMBER>  Pline  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pline\"},\"PloadShape\":{\"description\":\"`PloadShape` can load a [SVG image](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) and return a PSHAPE object. WarpScript does not support [OBJ files](https://en.wikipedia.org/wiki/Wavefront_.obj_file) yet. \\n\\nThis feature is experimental, some files may render empty. \\n\\n@param `svg` A one line or a multiline SVG string.\\n\\n@param `Pshape` A PSHAPE object which can be used with Pshape.\\n\\n\",\"signature\":\"svg<STRING>  PloadShape  Pshape<PSHAPE>\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"PloadShape\"},\"Pmag\":{\"description\":\"Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \\\"start\\\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, `Pmag` is a shortcut for writing **0 0 x y Pdist**. It is exactly the same as warpscript function [`HYPOT`](/doc/HYPOT).\\n\\n3D is not yet supported.\\n\\n[Link to original Processing doc](https://processing.org/reference/mag_.html)\\n\\n@param `a` first value\\n\\n@param `b` second value\\n\\n@param `mag` result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER>  Pmag  pg<PGRAPHICS> mag<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmag\"},\"Pmap\":{\"description\":\"Re-maps a number from one range to another.\\n\\nIn the first example, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width).\\n\\n\\nAs shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/map_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start1` lower bound of the value's current range\\n\\n@param `stop1` upper bound of the value's current range\\n\\n@param `start2` lower bound of the value's target range\\n\\n@param `stop2` upper bound of the value's target range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> value<DOUBLE> start1<DOUBLE> stop1<DOUBLE> start2<DOUBLE> stop2<DOUBLE>  Pmap  pg<PGRAPHICS> output<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmap\"},\"Pmask\":{\"description\":\"The `Pmask` function copies the blue channel of an image to the alpha channel of an other.\\n\\nAs **PGRAPHICS** intances are alse **PIMAGE** instances, you can use this fonction with **PGRAPHICS**.\\n\\n@param `orginal_img` PImage to be masked\\n\\n@param `mask_image` Pimage to serve as mask\\n\\n@param `masked_image` Masked Pimage\\n\\n@param `orginal_grp` PGraphics to be masked\\n\\n@param `mask_grp` PGraphics to serve as mask\\n\\n@param `masked_grp` Masked PGraphics\\n\\n\",\"signature\":\"mask_image<PIMAGE> orginal_img<PIMAGE>  Pmask  masked_image<PIMAGE>\\nmask_image<PIMAGE> orginal_grp<PGRAPHICS>  Pmask  masked_grp<PGRAPHICS>\\nmask_grp<PGRAPHICS> orginal_img<PIMAGE>  Pmask  masked_image<PIMAGE>\\nmask_grp<PGRAPHICS> orginal_grp<PGRAPHICS>  Pmask  masked_grp<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"2.7.0\",\"OPB64name\":\"Pmask\"},\"PnoClip\":{\"description\":\"Disables the clipping previously started by the [`Pclip`](/doc/Pclip) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noClip_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PnoClip  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoClip\"},\"PnoFill\":{\"description\":\"Disables filling geometry. If both [`PnoStroke`](/doc/PnoStroke) and `PnoFill` are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noFill_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PnoFill  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoFill\"},\"PnoStroke\":{\"description\":\"Disables drawing the stroke (outline). If both `PnoStroke` and [`PnoFill`](/doc/PnoFill) are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noStroke_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PnoStroke  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoStroke\"},\"PnoTint\":{\"description\":\"Removes the current fill value for displaying images and reverts to displaying images with their original hues.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noTint_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PnoTint  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoTint\"},\"Pnorm\":{\"description\":\"Normalizes a number from another range into a value between 0 and 1. Identical to `value low high 0 1 Pmap`.\\n\\nNumbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/norm_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start` lower bound of the value's current range\\n\\n@param `stop` upper bound of the value's current range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> value<NUMBER> start<NUMBER> stop<NUMBER>  Pnorm  pg<PGRAPHICS> output<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pnorm\"},\"Ppixels\":{\"description\":\"Returns an array containing the values for all the pixels in the display window. These values are of the color datatype. This array is the size of the display window. For example, if the image is 100x100 pixels, there will be 10000 values and if the window is 200x300 pixels, there will be 60000 values. After **pixels** has been modified, the [`PupdatePixels`](/doc/PupdatePixels) function must be run to update the content of the display window.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pixels.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  Ppixels  pg<PGRAPHICS> pixels<LIST<LONG>>\\nimg<PIMAGE>  Ppixels  img<PIMAGE> pixels<LIST<LONG>>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppixels\"},\"Ppoint\":{\"description\":\"Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point.\\n\\nUse [`Pstroke`](/doc/Pstroke) to set the color of a `Ppoint`.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/point_.html)\\n\\n@param `x` x-coordinate of the point\\n\\n@param `y` y-coordinate of the point\\n\\n@param `z` z-coordinate of the point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Ppoint  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Ppoint  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppoint\"},\"PpopMatrix\":{\"description\":\"Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The [`PpushMatrix`](/doc/PpushMatrix) function saves the current coordinate system to the stack and `PpopMatrix` restores the prior coordinate system. [`PpushMatrix`](/doc/PpushMatrix) and `PpopMatrix` are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PpopMatrix  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopMatrix\"},\"PpopStyle\":{\"description\":\"The [`PpushStyle`](/doc/PpushStyle) function saves the current style settings and `PpopStyle` restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with [`PpushStyle`](/doc/PpushStyle), it builds on the current style information. The [`PpushStyle`](/doc/PpushStyle) and `PpopStyle` functions can be nested to provide more control (see example for a demonstration.)\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PpopStyle  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopStyle\"},\"PpushMatrix\":{\"description\":\"Pushes the current transformation matrix onto the matrix stack. Understanding `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) requires understanding the concept of a matrix stack. The `PpushMatrix` function saves the current coordinate system to the stack and [`PpopMatrix`](/doc/PpopMatrix) restores the prior coordinate system. `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PpushMatrix  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushMatrix\"},\"PpushStyle\":{\"description\":\"The `PpushStyle` function saves the current style settings and [`PpopStyle`](/doc/PpopStyle) restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `PpushStyle`, it builds on the current style information. The `PpushStyle` and [`PpopStyle`](/doc/PpopStyle) functions can be nested to provide more control. (See example for a demonstration.)\\n\\n\\nThe style information controlled by the following functions are included in the style:fill, stroke, tint, strokeWeight, strokeCap, strokeJoin, imageMode, rectMode, ellipseMode, shapeMode, colorMode, textAlign, textFont, textMode, textSize, textLeading, emissive, specular, shininess, ambient.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PpushStyle  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushStyle\"},\"Pquad\":{\"description\":\"A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quad_.html)\\n\\n@param `x1` float: x-coordinate of the first corner\\n\\n@param `y1` float: y-coordinate of the first corner\\n\\n@param `x2` float: x-coordinate of the second corner\\n\\n@param `y2` float: y-coordinate of the second corner\\n\\n@param `x3` float: x-coordinate of the third corner\\n\\n@param `y3` float: y-coordinate of the third corner\\n\\n@param `x4` float: x-coordinate of the fourth corner\\n\\n@param `y4` float: y-coordinate of the fourth corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE> x4<DOUBLE> y4<DOUBLE>  Pquad  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pquad\"},\"PquadraticVertex\":{\"description\":\"Specifies vertex coordinates for quadratic Bezier curves. Each call to `PquadraticVertex` defines the position of one control point and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PquadraticVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when there is no MODE parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quadraticVertex_.html)\\n\\n@param `cx` the x-coordinate of the control point\\n\\n@param `cy` the y-coordinate of the control point\\n\\n@param `x3` the x-coordinate of the anchor point\\n\\n@param `y3` the y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> cx<DOUBLE> cy<DOUBLE> x3<DOUBLE> y3<DOUBLE>  PquadraticVertex  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PquadraticVertex\"},\"Prect\":{\"description\":\"Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the [`PrectMode`](/doc/PrectMode) function.\\n\\n\\n\\nTo draw a rounded rectangle, add a fifth parameter, which is used as the radius value for all four corners.\\n\\n\\n\\nTo use a different radius value for each corner, include eight parameters. When using eight parameters, the latter four set the radius of the arc at each corner separately, starting with the top-left corner and moving clockwise around the rectangle.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rect_.html)\\n\\n@param `a` float: x-coordinate of the rectangle by default\\n\\n@param `b` float: y-coordinate of the rectangle by default\\n\\n@param `c` float: width of the rectangle by default\\n\\n@param `d` float: height of the rectangle by default\\n\\n@param `r` float: radii for all four corners\\n\\n@param `tl` float: radius for top-left corner\\n\\n@param `tr` float: radius for top-right corner\\n\\n@param `br` float: radius for bottom-right corner\\n\\n@param `bl` float: radius for bottom-left corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER>  Prect  pg<PGRAPHICS>\\npg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER> r<NUMBER>  Prect  pg<PGRAPHICS>\\npg<PGRAPHICS> a<NUMBER> b<NUMBER> c<NUMBER> d<NUMBER> tl<NUMBER> tr<NUMBER> br<NUMBER> bl<NUMBER>  Prect  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Prect\"},\"PrectMode\":{\"description\":\"Modifies the location from which rectangles are drawn by changing the way in which parameters given to [`Prect`](/doc/Prect) are intepreted.\\n\\nThe default mode is **CORNER**, which interprets the first two parameters of [`Prect`](/doc/Prect) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**CORNERS** interprets the first two parameters of [`Prect`](/doc/Prect) as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\\n\\n**CENTER** interprets the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**RADIUS** also uses the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, but uses the third and fourth parameters to specify half of the shape's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\\n\\n[Link to original Processing doc](https://processing.org/reference/rectMode_.html)\\n\\n@param `mode` either CORNER, CORNERS, CENTER, or RADIUS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PrectMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PrectMode\"},\"Pred\":{\"description\":\"Extracts the red value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pred` function is easy to use and understand, but it is slower than bit shifting. \\n\\n[Link to original Processing doc](https://processing.org/reference/red_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `red` Red component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Pred  pg<PGRAPHICS> red<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pred\"},\"PresetMatrix\":{\"description\":\"Replaces the current matrix with the identity matrix. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/resetMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PresetMatrix  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PresetMatrix\"},\"Protate\":{\"description\":\"Rotates the amount specified by the **angle** parameter. Angles must be specified in radians (values from **0** to **2 PI**). \\n\\nThe coordinates are always rotated around their relative position to the origin. Positive numbers rotate objects in a clockwise direction and negative numbers rotate in the couterclockwise direction. Transformations apply to everything that happens afterward, and subsequent calls to the function compound the effect. For example, calling `pi 2.0 / Protate` once and then calling `pi 2.0 / Protate` a second time is the same as a single `pi Protate`. \\n \\n\\nTechnically, `Protate` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rotate_.html)\\n\\n@param `angle` angle of rotation specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> angle<NUMBER>  Protate  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Protate\"},\"Psaturation\":{\"description\":\"Extracts the saturation value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/saturation_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `saturation` Saturation component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> rgb<NUMBER>  Psaturation  pg<PGRAPHICS> saturation<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psaturation\"},\"Pscale\":{\"description\":\"Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call `2.0 Pscale` increases the dimension of a shape by 200%.\\n\\n\\n\\nTransformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `2.0 Pscale` and then `1.5 Pscale` is the same as `3.0 Pscale`. This function can be further controlled with [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/scale_.html)\\n\\n@param `s` percentage to scale the object\\n\\n@param `x` percentage to scale the object in the x-axis\\n\\n@param `y` percentage to scale the object in the y-axis\\n\\n@param `z` percentage to scale the object in the z-axis\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> s<NUMBER>  Pscale  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pscale  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Pscale  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pscale\"},\"Pset\":{\"description\":\"Changes the color of any pixel, or writes an image directly to the display window.\\n\\n\\n\\nThe **x** and **y** parameters specify the pixel to change and the **c** parameter specifies the color value. The **c** parameter is interpreted according to the current color mode.  (The default color mode is RGB values from 0 to 255.)  When setting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\n\\n\\nSetting the color of a single pixel with **set(x, y)** is easy, but not as fast as putting the data directly into the list of pixels returned by  [`Ppixels`](/doc/Ppixels).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/set_.html)\\n\\n@param `x` X-coordinate of the pixel\\n\\n@param `y` Y-coordinate of the pixel\\n\\n@param `c` Any value of the color datatype\\n\\n@param `img` Image to copy into the original image\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER> c<NUMBER>  Pset  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> img<PIMAGE>  Pset  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pset\"},\"Pshape\":{\"description\":\"Draws shapes to the display window. Shapes must be loaded with [`PloadShape`](/doc/PloadShape). Processing currently works with SVG, OBJ, and custom-created shapes. WrapScript only support SVG. The **shape** parameter specifies the shape to display and the coordinate parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PshapeMode`](/doc/PshapeMode) function can be used to change the way these parameters are interpreted.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shape_.html)\\n\\n@param `shape` the shape to display\\n\\n@param `x` x-coordinate of the shape\\n\\n@param `y` y-coordinate of the shape\\n\\n@param `a` x-coordinate of the shape\\n\\n@param `b` y-coordinate of the shape\\n\\n@param `c` width to display the shape\\n\\n@param `d` height to display the shape\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> shape<PSHAPE>  Pshape  pg<PGRAPHICS>\\npg<PGRAPHICS> shape<PSHAPE> x<DOUBLE> y<DOUBLE>  Pshape  pg<PGRAPHICS>\\npg<PGRAPHICS> shape<PSHAPE> a<DOUBLE> b<DOUBLE> c<DOUBLE> d<DOUBLE>  Pshape  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"Pshape\"},\"PshapeMode\":{\"description\":\"Modifies the location from which shapes draw. The default mode is **shapeMode(CORNER)**, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. The syntax **shapeMode(CORNERS)** uses the first and second parameters of [`Pshape`](/doc/Pshape) to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax **shapeMode(CENTER)** draws the shape from its center point and uses the third and forth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shapeMode_.html)\\n\\n@param `mode` int: either CORNER, CORNERS, CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PshapeMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshapeMode\"},\"PshearX\":{\"description\":\"Shears a shape around the x-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearX` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearX_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> angle<NUMBER>  PshearX  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearX\"},\"PshearY\":{\"description\":\"Shears a shape around the y-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearY` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearY_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> angle<NUMBER>  PshearY  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearY\"},\"Psize\":{\"description\":\"The `Psize` function returns the pixel `width` and `height` of a Pimage or PGraphics object.\\n\\n@param `img` PImage instance to measure.\\n\\n@param `pg` PGraphics instance to measure.\\n\\n@param `height` Object height in pixels.\\n\\n@param `width` Object height in pixels.\\n\\n\",\"signature\":\"img<PIMAGE>  Psize  width<LONG> height<LONG>\\npg<PGRAPHICS>  Psize  width<LONG> height<LONG>\",\"tags\":[\"processing\"],\"since\":\"2.6.0\",\"OPB64name\":\"Psize\"},\"Psphere\":{\"description\":\"A sphere is a hollow ball made from tessellated triangles.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphere_.html)\\n\\n@param `r` the radius of the sphere\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> r<NUMBER>  Psphere  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psphere\"},\"PsphereDetail\":{\"description\":\"Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you are going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until `PsphereDetail` is called again with a new parameter and so should **not** be called prior to every [`Psphere`](/doc/Psphere) statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphereDetail_.html)\\n\\n@param `res` int: number of segments (minimum 3) used per full circle revolution\\n\\n@param `ures` int: number of segments used longitudinally per full circle revolutoin\\n\\n@param `vres` int: number of segments used latitudinally from top to bottom\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> res<NUMBER>  PsphereDetail  pg<PGRAPHICS>\\npg<PGRAPHICS> ures<NUMBER> vres<NUMBER>  PsphereDetail  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PsphereDetail\"},\"Pstroke\":{\"description\":\"Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current **colorMode** The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/stroke_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> argb<LONG>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<LONG> alpha<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<DOUBLE> alpha<DOUBLE>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Pstroke  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Pstroke  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pstroke\"},\"PstrokeCap\":{\"description\":\"Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeCap_.html)\\n\\n@param `cap` Either SQUARE, PROJECT, or ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> cap<STRING>  PstrokeCap  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeCap\"},\"PstrokeJoin\":{\"description\":\"Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeJoin_.html)\\n\\n@param `join` Either MITER, BEVEL, ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> join<STRING>  PstrokeJoin  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeJoin\"},\"PstrokeWeight\":{\"description\":\"Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight. See [`Ppoint`](/doc/Ppoint) example.\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeWeight_.html)\\n\\n@param `weight` The weight (in pixels) of the stroke.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> weight<NUMBER>  PstrokeWeight  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeWeight\"},\"Ptext\":{\"description\":\"Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the [`PtextFont`](/doc/PtextFont) function and a default size will be used unless a font is set with [`PtextSize`](/doc/PtextSize). Change the color of the text with the [`Pfill`](/doc/Pfill) function. The text displays in relation to the [`PtextAlign`](/doc/PtextAlign) function, which gives the option to draw to the left, right, and center of the coordinates.\\n\\n\\n\\nThe **x2** and **y2** parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current [`PrectMode`](/doc/PrectMode) setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen.\\n\\n\\n\\nNote that Processing now lets you call `Ptext` without first specifying a PFont with [`PtextFont`](/doc/PtextFont). In that case, a generic sans-serif font will be used instead.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/text_.html)\\n\\n@param `s` the string to be displayed\\n\\n@param `x` by default, x-coordinate of text\\n\\n@param `y` by default, y-coordinate of text\\n\\n@param `x1` by default, the x-coordinate of text, see PrectMode for more info\\n\\n@param `y1` by default, the y-coordinate of text, see PrectMode for more info\\n\\n@param `x2` by default, the width of the text box, see PrectMode for more info\\n\\n@param `y2` by default, the height of the text box, see PrectMode for more info\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> s<STRING> x<DOUBLE> y<DOUBLE>  Ptext  pg<PGRAPHICS>\\npg<PGRAPHICS> s<STRING> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE>  Ptext  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptext\"},\"PtextAlign\":{\"description\":\"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the **x** and **y** parameters of the [`Ptext`](/doc/Ptext) function.\\n\\n\\n\\nAn optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current [`PtextDescent`](/doc/PtextDescent). For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.\\n\\n\\n\\nWhen using [`Ptext`](/doc/Ptext) with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)\\n\\n\\n\\nThe vertical alignment is based on the value of [`PtextAscent`](/doc/PtextAscent), which many fonts do not specify correctly. It may be necessary to use a hack and offset by a few pixels by hand so that the offset looks correct. To do this as less of a hack, use some percentage of [`PtextAscent`](/doc/PtextAscent) or [`PtextDescent`](/doc/PtextDescent) so that the hack works even if you change the size of the font.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAlign_.html)\\n\\n@param `alignX` Horizontal alignment, either LEFT, CENTER, or RIGHT\\n\\n@param `alignY` Vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> alignX<STRING>  PtextAlign  pg<PGRAPHICS>\\npg<PGRAPHICS> alignX<STRING> alignY<STRING>  PtextAlign  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAlign\"},\"PtextAscent\":{\"description\":\"Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline. For example, adding the `PtextAscent` and [`PtextDescent`](/doc/PtextDescent) values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAscent_.html)\\n\\n@param `ascent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PtextAscent  pg<PGRAPHICS> ascent<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAscent\"},\"PtextDescent\":{\"description\":\"Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline. For example, adding the [`PtextAscent`](/doc/PtextAscent) and `PtextDescent` values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textDescent_.html)\\n\\n@param `descent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PtextDescent  pg<PGRAPHICS> descent<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextDescent\"},\"PtextFont\":{\"description\":\"Sets the current font that will be drawn with the [`Ptext`](/doc/Ptext) function. Fonts must be created for Processing with [`PcreateFont`](/doc/PcreateFont) before they can be used. The font set through `PtextFont` will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textFont_.html)\\n\\n@param `font` Any variable of the type PFont\\n\\n@param `size` the size of the letters in pixel.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> font<PFONT>  PtextFont  pg<PGRAPHICS>\\npg<PGRAPHICS> font<PFONT> size<NUMBER>  PtextFont  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextFont\"},\"PtextLeading\":{\"description\":\"Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.  Note, however, that the leading is reset by [`PtextSize`](/doc/PtextSize). For example, if the leading is set to 20 with `20 PtextLeading`, then if `48 PtextSize` is run at a later point, the leading will be reset to the default for the text size of 48.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textLeading_.html)\\n\\n@param `leading` The size in pixels for spacing between lines\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> leading<NUMBER>  PtextLeading  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextLeading\"},\"PtextMode\":{\"description\":\"Sets the way text draws to the screen, either as texture maps or as vector geometry. The default **textMode(MODEL)**, uses textures to render the fonts. The **textMode(SHAPE)** mode draws text using the glyph outlines of individual characters rather than as textures. This mode is only supported with the **PDF** and **P3D** renderer settings. With the **PDF** renderer, you must call **textMode(SHAPE)** before any other drawing occurs. If the outlines are not available, then **textMode(SHAPE)** will be ignored and **textMode(MODEL)** will be used instead.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textMode_.html)\\n\\n@param `mode` int: either MODEL or SHAPE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> mode<STRING>  PtextMode  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextMode\"},\"PtextSize\":{\"description\":\"Sets the current font size. This size will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function. Font size is measured in units of pixels.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textSize_.html)\\n\\n@param `size` float: the size of the letters in units of pixels\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> size<NUMBER>  PtextSize  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextSize\"},\"PtextWidth\":{\"description\":\"Calculates and returns the width of any character or text string.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textWidth_.html)\\n\\n@param `str` The String of characters to measure\\n\\n@param `w` The width of the input string\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> str<STRING>  PtextWidth  pg<PGRAPHICS> w<DOUBLE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextWidth\"},\"Ptint\":{\"description\":\"Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.\\n\\n\\n\\nTo apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, **tint(255, 128)** will make an image 50pc transparent (assuming the default alpha range of 0-255, which can be changed with [`PcolorMode`](/doc/PcolorMode)).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/tint_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `alpha` opacity of the image\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> argb<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> gray<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> argb<NUMBER> alpha<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER>  Ptint  pg<PGRAPHICS>\\npg<PGRAPHICS> v1<NUMBER> v2<NUMBER> v3<NUMBER> alpha<NUMBER>  Ptint  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptint\"},\"PtoImage\":{\"description\":\"The `PtoImage` function transforms a `PGRAPHICS` to a `PIMAGE`.\\n\\nThe `PGRAPHICS` can still be used after the transformation as this function copies the pixel values. This is equivalent to `Pencode Pdecode` but it is a lot faster.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `img` Processing Pimage object.\\n\\n\",\"signature\":\"pg<PGRAPHICS>  PtoImage  img<PIMAGE>\",\"tags\":[\"processing\"],\"since\":\"2.1.0\",\"OPB64name\":\"PtoImage\"},\"Ptranslate\":{\"description\":\"Specifies an amount to displace objects within the display window. The **x** parameter specifies left/right translation, the **y** parameter specifies up/down translation.\\n\\n\\n\\nTransformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling **50 0 Ptranslate** and then **20 0 Ptranslate** is the same as **70 0 Ptranslate**. This function can be further controlled by using [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/translate_.html)\\n\\n@param `x` left/right translation\\n\\n@param `y` up/down translation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Ptranslate  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptranslate\"},\"Ptriangle\":{\"description\":\"A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/triangle_.html)\\n\\n@param `x1` float: x-coordinate of the first point\\n\\n@param `y1` float: y-coordinate of the first point\\n\\n@param `x2` float: x-coordinate of the second point\\n\\n@param `y2` float: y-coordinate of the second point\\n\\n@param `x3` float: x-coordinate of the third point\\n\\n@param `y3` float: y-coordinate of the third point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x1<DOUBLE> y1<DOUBLE> x2<DOUBLE> y2<DOUBLE> x3<DOUBLE> y3<DOUBLE>  Ptriangle  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptriangle\"},\"PupdatePixels\":{\"description\":\"Updates the display window with the data in the **pixels[]** array. Use in conjunction with [`Ppixels`](/doc/Ppixels). If you are only reading pixels from the array, there's no need to call `PupdatePixels` - updating is only necessary to apply changes.\\n\\n[Link to original Processing doc](https://processing.org/reference/updatePixels_.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"signature\":\"pg<PGRAPHICS> pixels<LIST<LONG>>  PupdatePixels  pg<PGRAPHICS>\\nimg<PIMAGE> pixels<LIST<LONG>>  PupdatePixels  img<PIMAGE>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PupdatePixels\"},\"Pvertex\":{\"description\":\"All shapes are constructed by connecting a series of vertices. `Pvertex` is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/vertex_.html)\\n\\n@param `x` x-coordinate of the vertex\\n\\n@param `y` y-coordinate of the vertex\\n\\n@param `z` float: z-coordinate of the vertex\\n\\n@param `u` float: horizontal coordinate for the texture mapping\\n\\n@param `v` float: vertical coordinate for the texture mapping\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"pg<PGRAPHICS> x<NUMBER> y<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> u<NUMBER> v<NUMBER>  Pvertex  pg<PGRAPHICS>\\npg<PGRAPHICS> x<NUMBER> y<NUMBER> z<NUMBER> u<NUMBER> v<NUMBER>  Pvertex  pg<PGRAPHICS>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pvertex\"},\"Q->\":{\"description\":\"The `Q->` function consumes on the stack a [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long and push back the quaternion into\\n4 doubles (w, x, y, z, with z being on top).\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `input` Quaternion representation\\n\\n\",\"signature\":\"input<LONG>  Q->  w<DOUBLE> x<DOUBLE> y<DOUBLE> z<DOUBLE>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"JHoy\"},\"QCONJUGATE\":{\"description\":\"The `QCONJUGATE` function performs a [conjugation](https://en.wikipedia.org/wiki/Quaternion#Conjugation,_the_norm,_and_reciprocal) of a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the quaternion conjugate into a long.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `result` The conjugated quaternion\\n\\n\",\"signature\":\"quaternion<LONG>  QCONJUGATE  result<LONG>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QCONJUGATE\"},\"QDIVIDE\":{\"description\":\"The `QDIVIDE` function divides a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of dividing them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from division *q* by *r*\\n\\n\",\"signature\":\"q<LONG> r<LONG>  QDIVIDE  result<LONG>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QDIVIDE\"},\"QMULTIPLY\":{\"description\":\"The `QMULTIPLY` function multiplies a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of multiplying them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from multiplication *q* by *r*\\n\\n\",\"signature\":\"q<LONG> r<LONG>  QMULTIPLY  result<LONG>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QMULTIPLY\"},\"QROTATE\":{\"description\":\"Rotates a vector by a [quaternion](https://en.wikipedia.org/wiki/Quaternion).\\n\\nThe `QROTATE` function consumes on the top of the stack three doubles representing a vector(x, y, z) and a long representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the vector rotated into 3 doubles (x, y, z with z being on top).\\n\\n@param `quaternion` The quaternion used to rotate the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"signature\":\"x<DOUBLE> y<DOUBLE> z<DOUBLE> quaternion<LONG>  QROTATE  x<DOUBLE> y<DOUBLE> z<DOUBLE>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATE\"},\"QROTATION\":{\"description\":\"The `QROTATION` extracts the axis and angle of the rotation represented by the [quaternion](https://en.wikipedia.org/wiki/Quaternion) on the stack.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `angle` The angle of rotation\\n\\n@param `x` The X axis\\n\\n@param `y` The Y axis\\n\\n@param `z` The Z axis\\n\\n\",\"signature\":\"quaternion<LONG>  QROTATION  x<DOUBLE> y<DOUBLE> z<DOUBLE> angle<DOUBLE>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATION\"},\"QUANTIZE\":{\"description\":\"The `QUANTIZE` function produces a quantized version of a Geo Time Series™ by replacing each value with a value from a finite list according to the interval the original value falls in. This function only works on numeric Geo Time Series™.\\nThis function can help to \\\"discretify\\\" data before calling [`VALUEHISTOGRAM`](/doc/VALUEHISTOGRAM).\\nThe list of intervals is defined as: [-∞,bounds<sub>0</sub>], (bounds<sub>0</sub>,bounds_<sub>1</sub>], (bounds<sub>1</sub>,bounds<sub>2</sub>], ..., (bounds<sub>n-1</sub>,+∞]\\n\\n@param `values` List of `n+1` values, one for each interval defined by `bounds`. If empty, the list `[ `0` `1` ... `n+1` ]` will be used.\\n\\n@param `bounds` Sorted list of `n` finite bounds defining `n+1` intervals.\\n\\n@param `gts` Geo Time Series™ to quantize.\\n\\n@param `qgts` Quantized GTS.\\n\\n@param `lgts` List of Geo Time Series™ to quantize.\\n\\n@param `lqgts` List of quantized GTS.\\n\\n\",\"signature\":\"gts<GTS> bounds<LIST<DOUBLE>> values<LIST>  QUANTIZE  qgts<GTS>\\nlgts<LIST<GTS>> bounds<LIST<DOUBLE>> values<LIST>  QUANTIZE  lqgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"QUANTIZE\"},\"RAND\":{\"description\":\"The `RAND` function pushes onto the stack a random floating point number between 0.0 (inclusive) and 1.0 (exlusive) generated by the default random generator.\\n\\nThis generation is cryptographically secure.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\" RAND  num<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RAND\"},\"RANDOM\":{\"description\":\"The `RANDOM` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThis function is very similar to [SRAND](/doc/SRAND) except the seed is choosen pseudorandomly when the function is first called. Subsequent calls use the same generator.\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\" RANDOM  num<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"RANDOM\"},\"RANDPDF\":{\"description\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe result if a function pushed onto the stack. This function does not have any arguments.\\n\\nTo use the function pushed by `RANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"signature\":\"valueHistogram<MAP>  RANDPDF  result<STRING>\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.7\",\"OPB64name\":\"RANDPDF\"},\"RANGE\":{\"description\":\"`RANGE` pushes onto the stack a list of integers in the given range [start included, end excluded[. If start is not in the parameter list, start=0.\\n\\n`RANGE` also accepts a step parameter in the parameter list.\\n\\n\\n@param `start` The start of range, default is 0\\n\\n@param `end` The end of range\\n\\n@param `step` The step between integers, default is 1\\n\\n@param `output` The list of every integers in the range [start end[\\n\\n\",\"signature\":\"[ end<LONG> ]  RANGE  output<LIST<LONG>>\\n[ start<LONG> end<LONG> ]  RANGE  output<LIST<LONG>>\\n[ start<LONG> end<LONG> step<LONG> ]  RANGE  output<LIST<LONG>>\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGE\"},\"RANGECOMPACT\":{\"description\":\"The `RANGECOMPACT` simplifies a Geo Time Series™ by simplifying ranges of identical values (with identical latitude, longitude and elevation), retaining only the first and last ticks of each range.\\n\\n@param `gts` Geo Time Series™ to compact.\\n\\n@param `compacted` Compacted GTS.\\n\\n@param `lgts` List of Geo Time Series™ to compact.\\n\\n@param `lcompacted` List of compacted GTS.\\n\\n\",\"signature\":\"gts<GTS>  RANGECOMPACT  compacted<GTS>\\nlgts<LIST<GTS>>  RANGECOMPACT  lcompacted<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGECOMPACT\"},\"RAWDTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe computation is performed on the raw Geo Time Series™, no transformation is applied to them.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"signature\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  RAWDTW  dtw<DOUBLE>\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"RAWDTW\"},\"REDEFS\":{\"description\":\"The `REDEFS` function allows or disallows execution of redefined functions.\\n\\n@param `flag` Shall we allow or disallow the execution of redefined functions.\\n\\n\",\"signature\":\"flag<BOOLEAN>  REDEFS \",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REDEFS\"},\"REDUCE\":{\"description\":\"The `REDUCE` framework groups Geo Time Series™ by equivalence classes based on label values and applies a function on each equivalence class of Geo Time Series™, considering the values of each tick and producing one GTS per equivalence class.\\n\\nAs the selected reducer function is applied tick by tick, it is usually wise to [`BUCKETIZE`](/doc/BUCKETIZE) the GTS first with a common value of `lastbucket`.\\n\\nThe labels whose values are common to all the GTS in an equivalence class will be retained.\\n\\nSince 2.1 you can make REDUCE override the GTSs ticks. This usage in mainly to be used in conjuction with [`MACROREDUCER`](/doc/MACROREDUCER).\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` List of resulting Geo Time Series™.\\n\\n@param `overrideTick` Boolean, if true allows the reducer to modify the ticks of the GTSs. If not set, the reducer cannot modify the ticks.\\n\\n\",\"signature\":\"[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> ]  REDUCE  result<LIST<GTS>>\\n[ gts<LIST<GTS>+> labels<LIST<STRING>> reducer<AGGREGATOR> overrideTick<BOOLEAN> ]  REDUCE  result<LIST<GTS>>\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"REDUCE\"},\"RELABEL\":{\"description\":\"Modifies the labels of a Geo Time Series™. The `RELABEL` function expects a parameter MAP whose entries are labels to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `RELABEL` function will use the rest of the MAP as the actual labels to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing labels.\\n\\nAn entry with an empty STRING value or a NULL value will have the effect of removing the label from the GTS' labels.        \\n\\n@param `labels` Parameter map of label names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `encoder` Encoder to relabel\\n\\n@param `lencoder` List of encoders to relabel\\n\\n\",\"signature\":\"gts<GTS> labels<MAP>  RELABEL  gts<GTS>\\nlgts<LIST<GTS>> labels<MAP>  RELABEL  lgts<LIST<GTS>>\\nencoder<GTSENCODER> labels<MAP>  RELABEL  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> labels<MAP>  RELABEL  lencoder<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RELABEL\"},\"REMOVE\":{\"description\":\"Removes an entry from a MAP or from a LIST.\\n\\nThe `REMOVE` function consumes a list (or a map) and a index (or a key), then remove the entry.\\nIt lets the input on the stack and puts the removed item on top of the stack. \\nAs a result, the input map or list is modified and the map or list left on top of the stack is *not* a copy. \\n\\nIf the index is out of bound, the returned value is `NULL` and the list or array is unmodified.\\nIf the key does not exist in the map, it returns null as the removed entry.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **GTS**.\\n\\nSince 2.7, `REMOVE` can be called on a **GTS**.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `inputmap` The reference to the map to be modified\\n\\n@param `index` The index of the list, 0 for the first item\\n\\n@param `inputlist` The reference to the list to be modified\\n\\n@param `removeditem` Depending on map or list content, could be any type\\n\\n@param `outputmap` The input map modified\\n\\n@param `outputlist` The input list modified\\n\\n@param `pointindex` Index of the point in the GTS, 0-indexed, handles negative indexing.\\n\\n@param `inputgts` The GTS to remove the point from.\\n\\n@param `removedpoint` The removed point. List of timestamp, latitude, longitude, elevation and value.\\n\\n@param `outputgts` The acopy of the original GTS with the requested point removed.\\n\\n\",\"signature\":\"inputlist<LIST> index<LONG>  REMOVE  outputlist<LIST> removeditem<ANY>\\ninputmap<MAP> key<ANY>  REMOVE  outputmap<MAP> removeditem<ANY>\\ninputgts<GTS> pointindex<LONG>  REMOVE  outputgts<GTS> removedpoint<LIST>\",\"tags\":[\"maps\",\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"REMOVE\"},\"REMOVETICK\":{\"description\":\"The `REMOVETICK` function transforms a Geo Time Series™ by removing all occurrences of a tick or ticks.\\n\\n@param `tick` Tick (timestamp) to remove.\\n\\n@param `lticks` List or Set of ticks to remove.\\n\\n@param `gts` Geo Time Series™ to transform.\\n\\n@param `pruned` Tranformed Geo Time Series™.\\n\\n\",\"signature\":\"gts<GTS> tick<LONG>  REMOVETICK  pruned<GTS>\\ngts<GTS> lticks<LIST<LONG>>  REMOVETICK  pruned<GTS>\\ngts<GTS> lticks<SET<LONG>>  REMOVETICK  pruned<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.2.19\",\"OPB64name\":\"REMOVETICK\"},\"RENAME\":{\"description\":\"The `RENAME` function changes the name of a Geo Time Series™, an Encoder or a list thereof. This operation may be required prior to using some functions. If the name starts with '+', the specified name will be appended to the current name of the GTS or Encoder.\\n\\nIf you want to rename a Geo Time Series™ or an Encoder so its name starts with a '+', you must first set its name to the empty string then use rename with the desired name prefixed with an additional '+'.\\n\\n@param `gts` Geo Time Series™ instance to rename.\\n\\n@param `lgts` List of Geo Time Series™ instances to rename.\\n\\n@param `encoder` Encoder to rename.\\n\\n@param `lencoder` Encoder to rename.\\n\\n@param `name` New name to give to the GTS.\\n\\n\",\"signature\":\"gts<GTS> name<STRING>  RENAME  gts<GTS>\\nlgts<LIST<GTS>> name<STRING>  RENAME  lgts<LIST<GTS>>\\nencoder<GTSENCODER> name<STRING>  RENAME  encoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> name<STRING>  RENAME  lencoder<LIST<GTSENCODER>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"RENAME\"},\"REOPTALT\":{\"description\":\"Produces a **R**egular **E**xpression **OPT**imized for **ALT**ernation from a list of STRINGs. Large alternations in regular expressions can lead to excessive backtracking and poor matching performance. In order to mitigate this, the `REOPTALT` function will produce a regular expression from a list of STRINGs which reduces the backtracking thus leading to better matching performance.\\n\\n@param `alternatives` List of STRINGs which should be used in the alternation.\\n\\n@param `regexp` Regular expression\\n\\n\",\"signature\":\"alternatives<LIST<STRING>>  REOPTALT  regexp<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.2.16\",\"OPB64name\":\"REOPTALT\"},\"REPLACE\":{\"description\":\"Replaces the first occurrence of a pattern by its substitution.\\n\\nThe `REPLACE` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with the replaced value if it was found\\n\\n\",\"signature\":\"original<ANY> pattern<ANY> replacement<ANY>  REPLACE  result<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACE\"},\"REPLACEALL\":{\"description\":\"Replaces all occurrence of a pattern by its substitution.\\n\\nThe `REPLACEALL` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with all occurrences of pattern replaced by its value\\n\\n\",\"signature\":\"original<ANY> pattern<ANY> replacement<ANY>  REPLACEALL  result<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACEALL\"},\"REPORT\":{\"description\":\"The `REPORT` function pushes onto the stack a STRING containing configuration and usage informations which can be useful when investigating issues.\\n\\n@param `secret` Secret configured for using the `REPORT` function.\\n\\n@param `report` Actual report.\\n\\n\",\"signature\":\"secret<STRING>  REPORT  report<STRING>\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"REPORT\"},\"RESET\":{\"description\":\"The `RESET` function resets the stack to the given depth, discarding any items above those 'depth' items.\\n\\n@param `depth` Depth at which the stack should be reset.\\n\\n\",\"signature\":\"depth<LONG>  RESET \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESET\"},\"RESETS\":{\"description\":\"The `RESETS` functions transforms a numerical Geo Time Series™, shifting values so no offset (*i.e.* a decrease or increase of values) appears after the operation.\\n\\nThe parameter to `RESETS` determines if the Geo Time Series should be considered as decreasing instead of increasing.\\n\\n@param `decreasingGTS` Flag set to `true` to indicate the GTS is decreasing.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `lgts` List of Geo Time Series™ or list thereof to transform.\\n\\n@param `result` GTS with resets compensated.\\n\\n@param `lresult` List of GTS with resets compensated.\\n\\n\",\"signature\":\"gts<GTS> decreasingGTS<BOOLEAN>  RESETS  result<GTS>\\nlgts<LIST<GTS>> decreasingGTS<BOOLEAN>  RESETS  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESETS\"},\"RESHAPE\":{\"description\":\"The `RESHAPE` function modifies the shape of a list.\\n\\nThe new shape is specified using a list of dimensions, the first being the outer dimension. Such a shape can be produced by `SHAPE`.\\n\\nNote that the number of elements in the array must be compatible with the requested shape, i.e. the product of the dimensions must match the number of elements in the input list.\\n\\n@param `input` List to reshape.\\n\\n@param `shape` Shape specification, list of dimensions, the first element being the outer list.\\n\\n@param `output` Reshaped list.\\n\\n\",\"signature\":\"input<LIST> shape<LIST<LONG>>  RESHAPE  output<LIST>\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"RESHAPE\"},\"RESTORE\":{\"description\":\"The `RESTORE` function resets the stack's symbol table to the state recorded in the context passed as parameter.\\n\\n@param `context` Stack context produced by [`SAVE`](doc/SAVE).\\n\\n\",\"signature\":\"context<CONTEXT>  RESTORE \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESTORE\"},\"RETHROW\":{\"description\":\"Inside the *catch* or *finally* macro of a [`TRY`](/doc/TRY), rethrows the last thrown error. If no error was previously thrown, `RETHROW` does nothing.\\n\\n\",\"signature\":\" RETHROW \",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"RETHROW\"},\"RETURN\":{\"description\":\"Returns immediately from the currently executing macro. If called outside a macro, `RETURN` will stop the execution of the current script, behaving like [`STOP`](/doc/STOP).\\n\\n\",\"signature\":\" RETURN \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"RETURN\"},\"REV\":{\"description\":\"The `REV` function pushes onto the stack the revision of the Warp 10 instance.`\\n\\n@param `revision` Revision of the Warp 10 platform.\\n\\n\",\"signature\":\" REV  revision<STRING>\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"REV\"},\"REVBITS\":{\"description\":\"Reverses the order of the bits of a LONG value.\\n\\n@param `long` LONG value from which to revert the bits.\\n\\n@param `gnol` LONG value whose bits are in reverse order compared to those of `long`.\\n\\n\",\"signature\":\"long<LONG>  REVBITS  gnol<LONG>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVBITS\"},\"REVERSE\":{\"description\":\"Reverses the order of the elements of the list or the string.\\n\\nThe `REVERSE` function inverts the order of the elements of the list or the string on the top of the stack.\\nBeware, `REVERSE` do not create a new object. Use [`CLONEREVERSE`](/doc/CLONEREVERSE) if you want to keep input.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n\\n@param `originalList` The list to reverse\\n\\n@param `originalString` The string to reverse\\n\\n@param `reversedObj` The original object with the elements in reverse order\\n\\n\",\"signature\":\"originalList<LIST>  REVERSE  reversedObj<LIST>\\noriginalString<STRING>  REVERSE  reversedObj<STRING>\\noriginalString<BYTES>  REVERSE  reversedObj<BYTES>\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVERSE\"},\"REXEC\":{\"description\":\"The `REXEC` function executes some WarpScript code on a remote Warp 10 instance. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"signature\":\"warpscript<STRING> endpoint<STRING>  REXEC  stack<ANY*>\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.0.8\",\"OPB64name\":\"REXEC\"},\"REXECZ\":{\"description\":\"The `REXECZ` function executes some WarpScript code on a remote Warp 10 instance just like [`REXEC`](/doc/REXEC) does, but compresses the WarpScript code prior to sending it. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"signature\":\"warpscript<STRING> endpoint<STRING>  REXECZ  stack<ANY*>\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REXECZ\"},\"RINT\":{\"description\":\"The `RINT` function consumes a numeric parameter from the top of the stack and pushes back the DOUBLE the closest to the parameter and equal to a mathematical integer.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `result` Closest floating-point value to a that is equal to a mathematical integer.\\n\\n@param `lvalue` List of Numeric values.\\n\\n@param `lresult` List of closest floating-point values to a that is equal to a mathematical integer.\\n\\n\",\"signature\":\"value<NUMBER>  RINT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  RINT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RINT\"},\"RLOWESS\":{\"description\":\"The `RLOWESS` function applies an iterative smoothing program on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is done via locally weighted regression, and is robust to outliers.\\n\\n> ### REFERENCE\\n>\\n> **Cleveland, W. S.** (1979) Robust locally weighted regression and smoothing scatterplots. J. American Statistical Association 74, 829–836.\\n> **Cleveland, W. S.** (1981) LOWESS: A program for smoothing scatterplots by robust locally weighted regression. The American Statistician 35, 54.\\n\\n@param `p` The degree for the polynomial fit of the regression\\n\\n@param `d` The delta radius (in time units) whithin which the local regression is computed only once (other points are interpolated). For very large datasets, it can be wise to set `d` > 0 to speed up the computations.\\n\\n@param `r` The number of robustifying iterations. The higher the value of `r`, the better the program is robust to outliers.\\n\\n@param `q` The bandwidth of the local regression. To obtain a good smoothing, it is advised to choose an odd number of at least 5.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> q<LONG> r<LONG> d<LONG> p<LONG>  RLOWESS  result<GTS>\\ngtsList<LIST<GTS>> q<LONG> r<LONG> d<LONG> p<LONG>  RLOWESS  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RLOWESS\"},\"ROLL\":{\"description\":\"`ROLL` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element at level *N* to the top of the stack and moving the other elements up one level.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"signature\":\"eltN<ANY> elt2<ANY> elt1<ANY> N<LONG>  ROLL  elt2<ANY> elt1<ANY> eltN<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLL\"},\"ROLLD\":{\"description\":\"`ROLLD` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element on top of the stack to level *N* and moving the other *N-1* elements down the stack.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"signature\":\"eltN<ANY> elt2<ANY> elt1<ANY> N<LONG>  ROLLD  elt1<ANY> eltN<ANY> elt2<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLLD\"},\"ROT\":{\"description\":\"`ROT` cycles through the 3 topmost elements of the stack by moving the element at level 3 to the top of the stack and pushing the other 2 elements up the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n@param `level3` The element at the third level of the stack prior to the function execution\\n\\n\",\"signature\":\"level3<ANY> level2<ANY> top<ANY>  ROT  level2<ANY> top<ANY> level3<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROT\"},\"ROTATIONQ\":{\"description\":\"The `ROTATIONQ` function consumes on the stack 4 doubles representing a rotation vector and pushes back [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long.\\n\\n@param `quaternion` The quaternion representation\\n\\n@param `angle` The angle of the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"signature\":\"x<DOUBLE> y<DOUBLE> z<DOUBLE> angle<DOUBLE>  ROTATIONQ  quaternion<QUATERNION>\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROTATIONQ\"},\"ROUND\":{\"description\":\"The `ROUND` function consumes a numeric parameter from the top of the stack and pushes back the long number the closest to the parameter.\\n\\n@param `input` Input to round.\\n\\n@param `output` Input rounded to the nearest Long.\\n\\n\",\"signature\":\"input<NUMBER>  ROUND  output<LONG>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROUND\"},\"RSADECRYPT\":{\"description\":\"Decrypts content encrypted with an RSA key.\\n\\n@param `key` RSA key to use for decryption (a public key if content was encrypted with a private key, a private key otherwise).\\n\\n@param `cipher` Encrypted data.\\n\\n@param `data` Cleartext data.\\n\\n\",\"signature\":\"cipher<BYTES> key<KEY>  RSADECRYPT  data<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSADECRYPT\"},\"RSAENCRYPT\":{\"description\":\"Encrypts a byte array using an RSA key (either public or private).\\n\\n@param `key` Instance of the RSA private or public key to use for encryption.\\n\\n@param `data` Data to encrypt.\\n\\n@param `encrypted` Ciphered version of `data`.\\n\\n\",\"signature\":\"data<BYTES> key<KEY>  RSAENCRYPT  encrypted<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAENCRYPT\"},\"RSAGEN\":{\"description\":\"Generates an RSA public key pair.\\n\\n@param `keylen` Key length in bits.\\n\\n@param `publicExponent` RSA public exponent, typically 65537.\\n\\n@param `pubkeyparams` Parameters of the generated RSA public key. Can be converted to a public key using [`RSAPUBLIC`](/doc/RSAPUBLIC).\\n\\n@param `privkeyparams` Parameters of the generated RSA privsate key. Can be converted to a private key using [`RSAPRIVATE`](/doc/RSAPRIVATE)\\n\\n\",\"signature\":\"publicExponent<LONG> keylen<LONG>  RSAGEN  privkeyparams<MAP> pubkeyparams<MAP>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAGEN\"},\"RSAPRIVATE\":{\"description\":\"Creates an RSA private key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `privkeyparams` Map of private key parameters.\\n\\n@param `privkey` RSA private key instance.\\n\\n\",\"signature\":\"privkeyparams<MAP>  RSAPRIVATE  privkey<KEY>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPRIVATE\"},\"RSAPUBLIC\":{\"description\":\"Creates an RSA public key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `pubkeyparams` Map of public key parameters.\\n\\n@param `pubkey` RSA public key instance.\\n\\n\",\"signature\":\"pubkeyparams<MAP>  RSAPUBLIC  pubkey<KEY>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPUBLIC\"},\"RSASIGN\":{\"description\":\"Signs a byte array with an RSA private key.\\n\\n@param `privkey` RSA private key to use for signing.\\n\\n@param `alg` Name of algorithm to use for computing the data fingerprint. Supported algorithms are those provided by [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `data` Data to sign.\\n\\n@param `signature` Computed signature.\\n\\n\",\"signature\":\"data<BYTES> alg<STRING> privkey<KEY>  RSASIGN  signature<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSASIGN\"},\"RSAVERIFY\":{\"description\":\"The `RSAVERIFY` function verify a signature generated with [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) cryptosystem and a hash algorithm.\\n\\nAlgorithms are those supported by [BouncyCastle](http://stackoverflow.com/questions/8778531/bouncycastle-does-not-find-algorithms-that-it-provides).\\n\\n@param `pubkey` RSA public key to use for verifying the signature.\\n\\n@param `alg` Algorithm used for generating the signature. See [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `signature` Signature to verify.\\n\\n@param `content` Signed content.\\n\\n@param `verified` Status of the signature verification.\\n\\n\",\"signature\":\"content<BYTES> signature<BYTES> alg<STRING> pubkey<KEY>  RSAVERIFY  verified<BOOLEAN>\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAVERIFY\"},\"RSORT\":{\"description\":\"Sort Geo Time Series™ values (and associated locations/elevations) by reverse order of their ticks (i.e. most recent ticks first).\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  RSORT  result<GTS>\\ngtsList<LIST<GTS>>  RSORT  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RSORT\"},\"RTFM\":{\"description\":\"The `RTFM` function pushes onto the stack the URL of the Warp 10 documentation, so whenever you are lost you can rapidly retrieve the URL you need to get back on track!\\n\\n@param `url` URL of the Warp 10 documentation.\\n\\n\",\"signature\":\" RTFM  url<STRING>\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.0.7\",\"OPB64name\":\"RTFM\"},\"RUN\":{\"description\":\"The `RUN` function attempts to execute the macro whose name is on top of the stack. It is equivalent to `@macro` if called with `macro` on top of the stack.\\n\\n@param `macroName` Name of macro to execute, without a leading '@'\\n\\n@param `macroRegister` Register number in which the macro is stored, without a leading '@'\\n\\n\",\"signature\":\"macroName<STRING>  RUN \\nmacroRegister<LONG>  RUN \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"RUN\"},\"RUNNERNONCE\":{\"description\":\"The `RUNNERNONCE` function decrypts the content of a runner *nonce* as generated when a script is executed by a Warp 10 runner instance.\\n\\nWhen a script is executed by a runner instance, the following symbols are defined when the script is invoked:\\n\\n| Symbol | Description |\\n| --- | --- |\\n| `runner.periodicity` | Periodicity at which the script is supposed to run, in ms. |\\n| `runner.path` | Path of the script. |\\n| `runner.scheduledat` | Time at which the current execution was scheduled, in ms since the [UNIX Epoch](). |\\n| `runner.nonce` | Encrypted time of execution, in time units since the [UNIX Epoch](). |\\n\\nNote that if the runner pre-shared key is not configured via `runner.psk`, the `RUNNERNONCE` function will push `NULL` onto the stack. Note that in this case, the `runner.nonce` symbol will not be defined.\\n\\n@param `nonce` Runner *nonce* as stored in `runner.nonce`.\\n\\n@param `time` Time retrieved from the *nonce*.\\n\\n\",\"signature\":\"nonce<STRING>  RUNNERNONCE  time<LONG>\",\"tags\":[\"stack\"],\"since\":\"1.2.7\",\"OPB64name\":\"RUNNERNONCE\"},\"RUNR\":{\"description\":\"Run the macro currently contained in the designated register.\\n\\nThe `RUNR` function is really a family of functions named `RUNRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n\",\"signature\":\" RUNR \",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"RUNR\"},\"RVALUESORT\":{\"description\":\"Sort Geo Time Series™ values (and associated locations/elevations) by by reverse order of their values.\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  RVALUESORT  result<GTS>\\ngtsList<LIST<GTS>>  RVALUESORT  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RVALUESORT\"},\"SAVE\":{\"description\":\"The `SAVE` function pushes onto the stack a *context* object which contains all the symbols currently defined in the current stack. This context can be passed as a parameter to the [`RESTORE`](doc/RESTORE) function to later reset the symbol table to the state store in the context. Any symbol created after the context was saved and before it is restored will be discarded when `RESTORE` is called.\\n\\n@param `context` Stack context, suitable as a parameter to [`RESTORE`](doc/RESTORE).\\n\\n\",\"signature\":\" SAVE  context<CONTEXT>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SAVE\"},\"SCALB\":{\"description\":\"The `SCALB` function consumes a scale factor *scaleFactor* and a numeric parameter *d* and pushes back <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><mi>d</mi><mo>&#xD7;</mo><msup><mn>2</mn><mi>scaleFactor</mi></msup></math>. The scale factor must fit into an INT.\\n\\n@param `scaleFactor` The scaling factor, must fit into an INT\\n\\n@param `d` The value to be scaled\\n\\n@param `result` The scaled value\\n\\n\",\"signature\":\"d<NUMBER> scaleFactor<LONG>  SCALB  result<TYPE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SCALB\"},\"SECTION\":{\"description\":\"The `SECTION` function modifies the value of the *section* attribute of the stack. This value appears in the error messages and can therefore help you debug your WarpScript code. Typically, the `SECTION` function is used to separate your code in different logical units.\\n\\n@param `section` Name to assign to the *section* attribute.\\n\\n\",\"signature\":\"section<STRING>  SECTION \",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"SECTION\"},\"SECURE\":{\"description\":\"The `SECURE` function encrypts a STRING representing a WarpScript code fragment using the platform's secure script cryptographic key and the current secret set via [`SECUREKEY`](doc/SECUREKEY).\\n\\nSecure scripts can also be created using the `<S .... S>` syntax.\\n\\n@param `script` Cleartext version of the WarpScript fragment to encrypt.\\n\\n@param `encrypted` Encrypted secure script.\\n\\n\",\"signature\":\"script<STRING>  SECURE  encrypted<STRING>\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"SECURE\"},\"SECUREKEY\":{\"description\":\"The `SECUREKEY` function sets the secret which will be used to decrypt further secure scripts.\\n\\nSecure scripts are WarpScript fragments which are encrypted with a cryptographic key specific to the platform they were created on. They can be executed on a platform configured with the same cryptographic key.\\n\\n@param `key` Secret to use for unlocking the cleartext versions of future secure scripts.\\n\\n\",\"signature\":\"key<STRING>  SECUREKEY \",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SECUREKEY\"},\"SENSISION.DUMP\":{\"description\":\"The `SENSISION.DUMP` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) metrics in the JVM.\\n\\nThe STRING produced by `SENSISION.DUMP` can be parsed using `PARSE`.\\n\\n@param `valueTimestamp` Flag indicating whether to dump the Geo Time Series™ with the timestamp of last updates or the timestamp at which the value is read.\\n\\n@param `dump` Latest values of all Geo Time Series™ known to Sensision in Geo Time Series™ output input.\\n\\n\",\"signature\":\"valueTimestamp<BOOLEAN>  SENSISION.DUMP  dump<STRING>\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMP\"},\"SENSISION.DUMPEVENTS\":{\"description\":\"The `SENSISION.DUMPEVENTS` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) events in the events history.\\n\\nThe STRING produced by `SENSISION.DUMPEVENTS` can be parsed using `PARSE`.\\n\\nNote that if the system property `sensision.events.history` is not set to a value greater than 0, the function will always return an empty STRING.\\n\\nThe Sensision event history is a circular buffer.\\n\\n@param `dump` Latest values of all events in the Sensision event history.\\n\\n\",\"signature\":\" SENSISION.DUMPEVENTS  dump<STRING>\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMPEVENTS\"},\"SENSISION.EVENT\":{\"description\":\"The `SENSISION.EVENT` function creates a [Sensision](https://github.com/senx/sensision) event.\\n\\n@param `class` Name of the class of the Sensision event to emit.\\n\\n@param `labels` Map of label names to values, both STRINGs of the Sensision event.\\n\\n@param `value` Value associated with the event.\\n\\n@param `ts` Optional timestamp for the event (in Sensision time units), if omitted, the current timestamp will be used.\\n\\n\",\"signature\":\"[ value<LONG> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<STRING> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.EVENT \\n[ value<LONG> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<DOUBLE> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<STRING> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \\n[ value<BOOLEAN> labels<MAP> class<STRING> ts<LONG> ]  SENSISION.EVENT \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.EVENT\"},\"SENSISION.GET\":{\"description\":\"The `SENSISION.GET` function reads the current value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to read.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to read.\\n\\n@param `selector` Geo Time Series™ selector (`class{labels}`) of the Sensision metric to read.\\n\\n@param `gts` A Geo Time Series™ containing the current value of the Sensision metric. If the metric does not exist, the resulting GTS will be empty.\\n\\n\",\"signature\":\"selector<STRING>  SENSISION.GET  gts<GTS>\\nclass<STRING> labels<MAP>  SENSISION.GET  gts<GTS>\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.GET\"},\"SENSISION.SET\":{\"description\":\"The `SENSISION.SET` function sets a value for a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `value` Value to assign to the Sensision metric.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"signature\":\"[ value<LONG> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<STRING> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<LONG> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<STRING> labels<MAP> class<STRING> ]  SENSISION.SET \\n[ ttl<LONG> value<BOOLEAN> labels<MAP> class<STRING> ]  SENSISION.SET \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.SET\"},\"SENSISION.UPDATE\":{\"description\":\"The `SENSISION.UPDATE` function updates the numerical value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `delta` Delta to add to the current value of the Sensision metric. If the metric does not exist it will be created with this value.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"signature\":\"[ delta<LONG> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ delta<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ ttl<LONG> delta<LONG> labels<MAP> class<STRING> ]  SENSISION.UPDATE \\n[ ttl<LONG> delta<DOUBLE> labels<MAP> class<STRING> ]  SENSISION.UPDATE \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.UPDATE\"},\"SET\":{\"description\":\"The `SET` function replaces item at specified index in a list.\\nIf the index is greater than the size of the list, it will raise an error.\\n\\nWhen used on a **BYTE ARRAY**, SET replaces the byte by the byte value. The byte value, signed or not, must be in the range of [-128,255].\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, SET can set an element in a nested list. In this case, the index is a list.\\n\\n@param `index` The index in the list, 0 for the first item.\\n\\n@param `inputlist` The input list to modified.\\n\\n@param `outputlist` The input list modified,  this is not a new list object.\\n\\n@param `item` The item to update in the inputlist at index, could be any type.\\n\\n@param `array` Byte array to which write a byte.\\n\\n@param `bytevalue` The value of the byte, signed or unsigned (from -128 to 255).\\n\\n@param `outputarray` The input byte array modified, this is not a new byte array.\\n\\n\",\"signature\":\"inputlist<LIST> item<ANY> index<LONG>  SET  outputlist<LIST>\\ninputlist<LIST> item<ANY> index<LIST>  SET  outputlist<LIST>\\narray<BYTES> bytevalue<LONG> index<LONG>  SET  outputarray<LIST>\",\"tags\":[\"lists\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SET\"},\"SET->\":{\"description\":\"The `SET->` function converts the set on top of the stack into a **LIST**.\\n\\n@param `input` Input set.\\n\\n@param `output` A list containing input elements.\\n\\n\",\"signature\":\"input<SET>  SET->  output<LIST>\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"JoKJAIs\"},\"SETATTRIBUTES\":{\"description\":\"Modifies the attributes of a Geo Time Series™, an encoder or a list thereof. The `SETATTRIBUTES` function expects a parameter MAP whose entries are attributes to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `SETATTRIBUTES` function will use the rest of the MAP as the actual attributes to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing attributes.\\n\\nAn entry with an empty STRING value will have the effect of removing the attribute from the attributes of the GTSs or encoders.   \\n\\n@param `attributes` Parameter map of attributes names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lencoder` List of Encoders.\\n\\n@param `encoder` Encoder to relabel\\n\\n\",\"signature\":\"gts<GTS> attributes<MAP>  SETATTRIBUTES  gts<GTS>\\nlgts<LIST<GTS>> attributes<MAP>  SETATTRIBUTES  lgts<LIST<GTS>>\\nencoder<GTSENCODER> attributes<MAP>  SETATTRIBUTES  encoder<GTSENCODER>\\nlencoder<LIST<GTS>> attributes<MAP>  SETATTRIBUTES  lencoder<LIST<GTS>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETATTRIBUTES\"},\"SETMACROCONFIG\":{\"description\":\"The `SETMACROCONFIG` function allows you to set or modify the value of a configuration key accessible via the [`MACROCONFIG`](/doc/MACROCONFIG) or [`MACROCONFIGDEFAULT`](/doc/MACROCONFIGDEFAULT) functions or via the runner script variable expansion.\\n\\nThis function can only be used if the `warpscript.macroconfig.secret` is set in the Warp 10™ configuration.\\n\\nThe configuration keys which can be set using `SETMACROCONFIG` must have the format `key@path/tomacro` or `key@/path/to/runner/script`.\\n\\nSetting the value of a configuration key to `NULL` has the effect of removing the configuration key altogether.\\n\\n@param `key` Configuration key to set.\\n\\n@param `secret` Macro config secret.\\n\\n@param `value` String value to set for the key or `NULL`.\\n\\n\",\"signature\":\"value<STRING> key<STRING> secret<STRING>  SETMACROCONFIG \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"SETMACROCONFIG\"},\"SETVALUE\":{\"description\":\"The `SETVALUE` function adds a value to a GTS or override an existing value. If the tick already exists, this function will overwrite the first one it encounters in the GTS. If the tick does not exist, it is appended. \\nThe [`ADDVALUE`](/doc/ADDVALUE) function adds a value to a GTS but do not override an existing value.\\n\\nThe `SETVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `SETVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, using [`GET`](/doc/GET) for instance.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Serie\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `elevation` Elevation or NaN\\n\\n@param `result` modified Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<STRING>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<BOOLEAN>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<DOUBLE>  SETVALUE  result<GTS>\\ngts<GTS> tick<LONG> latitude<DOUBLE> longitude<DOUBLE> elevation<LONG> value<LONG>  SETVALUE  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETVALUE\"},\"SHA1\":{\"description\":\"The `SHA1` function digests a byte array on the stack with the cryptographic hash function [SHA-1](https://en.wikipedia.org/wiki/SHA-1).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"input<BYTES>  SHA1  result<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1\"},\"SHA1HMAC\":{\"description\":\"The `SHA1HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-1](https://en.wikipedia.org/wiki/SHA-1) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"signature\":\"message<BYTES> secret<BYTES>  SHA1HMAC  result<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1HMAC\"},\"SHA256\":{\"description\":\"The `SHA256` function digests a byte array on the stack with the cryptographic hash function [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"input<BYTES>  SHA256  result<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256\"},\"SHA256HMAC\":{\"description\":\"The `SHA256HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-256](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"signature\":\"message<BYTES> secret<BYTES>  SHA256HMAC  result<BYTES>\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256HMAC\"},\"SHAPE\":{\"description\":\"Return the shape of an input list if it could be a tensor (or multidimensional array), or raise an Exception.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent and it returns a shape based on the first nested lists at each level. Default to false.\\n\\n@param `list` The input list.\\n\\n@param `shape` The shape of the input list.\\n\\n\",\"signature\":\"list<LIST>  SHAPE  shape<LIST>\\n{ list<LIST> fast<BOOLEAN>  } SHAPE  shape<LIST>\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHAPE\"},\"SHMLOAD\":{\"description\":\"The `SHMLOAD` function loads data previously stored by [`SHMSTORE`](/doc/SHMSTORE) in shared memory, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the requested shared symbol is not known or if the calling script does not currently hold the mutex associated with the symbol.\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to retrieve.\\n\\n@param `object` Object currently stored under `symbol`.\\n\\n\",\"signature\":\"symbol<STRING>  SHMLOAD  object<ANY>\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMLOAD\"},\"SHMSTORE\":{\"description\":\"The `SHMSTORE` function stores an object in a named shared memory location, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the calling script is not currently holding a mutex (in a call to [`MUTEX`](/doc/MUTEX)). The call will have no effect if the named memory location was already set by a previous call to `SHMSTORE`.\\n\\nIn order to overwrite a shared memory location, its content must first be cleared by storing [`NULL`](/doc/NULL).\\n\\n\\nIf the calling script currently holds a mutex, this mutex will be associated with the shared memory location, the same mutex will have to be held when retrieving the content of the memory location via [`SHMLOAD`](/doc/SHMLOAD).\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to store.\\n\\n@param `object` Object to store under `symbol` or `NULL` to clear its content.\\n\\n\",\"signature\":\"object<ANY> symbol<STRING>  SHMSTORE \",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMSTORE\"},\"SHOW\":{\"description\":\"The `SHOW` function makes visible some levels of the stack which were previously hidden by a call to [`HIDE`](/doc/HIDE).\\n\\nThe levels made visible are the ones closest to the top of the stack. Depending on the `levels` parameter to the call to `SHOW`, the revealed levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there are at most a certain number ((*abs(`levels`)*) with `levels` < 0) of visible levels after the call.\\n\\nWhen called with `NULL` as parameter, `SHOW` wil reveal all levels currently hidden.\\n\\n@param `levels` Number of levels to reveal, or `NULL` to reveal them all.\\n\\n\",\"signature\":\"levels<LONG>  SHOW \",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"SHOW\"},\"SHRINK\":{\"description\":\"Shrink the number of values of a Geo Time Series™ to `size`. The oldest values are kept if `size` is non negative. The earliest ones are kept in the other case.\\n\\nThis function has the side effect of sorting the Geo Time Series™. If the Geo Time Series™ has fewer than `size` values the function raises an error.\\n\\n@param `size` Size used to shrink the Geo Time Series™\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `result` A shrinked Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> size<LONG>  SHRINK  result<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SHRINK\"},\"SHUFFLE\":{\"description\":\"The `SHUFFLE` function shuffles a list.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `input` The reference of the list to shuffle\\n\\n@param `shuffled` The original list shuffled, this is not a new list object\\n\\n\",\"signature\":\"input<LIST>  SHUFFLE  shuffled<LIST>\",\"tags\":[\"lists\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHUFFLE\"},\"SIGNUM\":{\"description\":\"The `SIGNUM` function consumes a numeric parameter from the top of the stack and pushes back its signum.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Signum, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of signum for each given value, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n\",\"signature\":\"value<NUMBER>  SIGNUM  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SIGNUM  lresult<LIST<DOUBLE>>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIGNUM\"},\"SIN\":{\"description\":\"The `SIN` function consumes a floating point number from the top of the stack and pushes back its sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Sine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of sine of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  SIN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SIN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIN\"},\"SINGLEEXPONENTIALSMOOTHING\":{\"description\":\"The `SINGLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Simple Exponential Smoothing](https://www.otexts.org/fpp/7/1) formula.\\n\\nIt consumes two parameters from the top of the stack:\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** is pushed onto the stack.\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The smoothed Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> alpha<DOUBLE>  SINGLEEXPONENTIALSMOOTHING  result<GTS>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINGLEEXPONENTIALSMOOTHING\"},\"SINH\":{\"description\":\"The `SINH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic sine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic sine of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  SINH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SINH  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINH\"},\"SIZE\":{\"description\":\"Returns the size of the input parameter.\\n\\nThe `SIZE` function computes the size of a LIST, MAP, GTS or ENCODER (number of values), STRING, byte array of GEOSHAPE (number of cells).\\n\\n@param `input` The input parameter\\n\\n@param `size` The size of the input parameter\\n\\n\",\"signature\":\"input<LIST>  SIZE  size<LONG>\\ninput<MAP>  SIZE  size<LONG>\\ninput<GTS>  SIZE  size<LONG>\\ninput<STRING>  SIZE  size<LONG>\\ninput<BYTES>  SIZE  size<LONG>\\ninput<GEOSHAPE>  SIZE  size<LONG>\\ninput<GTSENCODER>  SIZE  size<LONG>\\ninput<SET>  SIZE  size<LONG>\",\"tags\":[\"strings\",\"lists\",\"maps\",\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIZE\"},\"SKEWNESS\":{\"description\":\"The `SKEWNESS` function computes the [skewness](https://en.wikipedia.org/wiki/Skewness) of a Geo Time Series™.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the skewness.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `skewness` Computed skewness of the Geo Time Series™ instance.\\n\\n@param `lskewness` List of computed skewness of the Geo Time Series™ instances.\\n\\n\",\"signature\":\"gts<GTS> bessel<BOOLEAN>  SKEWNESS  skewness<DOUBLE>\\nlgts<LIST<GTS>> bessel<BOOLEAN>  SKEWNESS  lskewness<LIST<DOUBLE>>\",\"tags\":[\"statistics\",\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"SKEWNESS\"},\"SMARTPARSE\":{\"description\":\"The `SMARTPARSE` function parses STRING values, either from a single STRING parameter or from STRING Geo Time Series™, and produces a number of GTS from the parsed data.\\n\\nThe parsing is done according to a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) which contains [named capturing groups](https://www.regular-expressions.info/named.html) with the Java/.NET syntax, *i.e.* `(?<name>...)`.\\n\\nThe captured group is interpreted differently based on the syntax of the name.\\n\\n| Syntax | Interpretation |\\n| --- | --- |\\n| Lxxx | Captured content is used as the value of label `xxx` |\\n| TU | Captured group is interpreted as a timestamp in unit `U` from the [UNIX Epoch](https://en.wikipedia.org/wiki/Unix_time) origin. Valid values for U are `s`, `ms`, `us`, `ns` |\\n| lat | Captured group is interpreted as the latitude if another group named `lon` is also present |\\n| lon | Captured group is interpreted as the longitude if another group named `lat` is also present |\\n| elevU | Captured group is interpreted as the elevation in unit `U`, where `U` can be `m`, `cm`, `mm`, `ft`, `km`, `mi`, `nm` (Nautical Mile). The value is parsed as a DOUBLE and converted to a LONG in `mm` |\\n| VTxxx | Captured group is interpreted as a value for a GTS with class `xxx`. The type of the value is determined by the value of `T` which can be `B`(oolean) `S`(tring) `L`(ong) or `D`(ouble) |\\n\\nThis function is ideally suited for parsing log messages and producing Geo Time Series™ from their content.\\n\\n@param `regexp` Regular expression to use for parsing. See the function description for the syntax to use.\\n\\n@param `string` String to parse\\n\\n@param `results` List of Geo Time Series™ created from the parsed data.\\n\\n@param `lresults` List of list of GTS created from the parsed data.\\n\\n@param `gts` STRING valued Geo Time Series™ whose values are to be parsed.\\n\\n@param `lgts` List of STRING valued GTS whose values are to be parsed.\\n\\n\",\"signature\":\"string<STRING> regexp<STRING>  SMARTPARSE  results<LIST<GTS>>\\ngts<GTS> regexp<STRING>  SMARTPARSE  results<LIST<GTS>>\\nlgts<LIST<GTS>> regexp<STRING>  SMARTPARSE  lresults<LIST<LIST<GTS>>>\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.2.13\",\"OPB64name\":\"SMARTPARSE\"},\"SNAPSHOT\":{\"description\":\"The `SNAPSHOT` functions produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOT` was called.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOT  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.0.6\",\"OPB64name\":\"SNAPSHOT\"},\"SNAPSHOTALL\":{\"description\":\"The `SNAPSHOTALL` functions acts similarly as [`SNAPSHOT`](/doc/SNAPSHOT) and produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOTALL` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOTALL  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALL\"},\"SNAPSHOTALLTOMARK\":{\"description\":\"The `SNAPSHOTALLTOMARK` functions acts similarly as [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) and produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTALLTOMARK` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"mark<MARK> stack<ANY*>  SNAPSHOTALLTOMARK  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALLTOMARK\"},\"SNAPSHOTCOPY\":{\"description\":\"The `SNAPSHOTCOPY` function behaves like [`SNAPSHOT`](/doc/SNAPSHOT) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPY` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOTCOPY  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPY\"},\"SNAPSHOTCOPYALL\":{\"description\":\"The `SNAPSHOTCOPYALL` function behaves like [`SNAPSHOTALL`](/doc/SNAPSHOTALL) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOTCOPYALL  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALL\"},\"SNAPSHOTCOPYALLTOMARK\":{\"description\":\"The `SNAPSHOTCOPYALLTOMARK` function behaves like [`SNAPSHOTALLTOMARK`](/doc/SNAPSHOTALLTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOTCOPYALLTOMARK  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALLTOMARK\"},\"SNAPSHOTCOPYN\":{\"description\":\"Performs a [`SNAPSHOTCOPY`](/doc/SNAPSHOTCOPY) on the top *N* elements of the stack.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*> n<LONG>  SNAPSHOTCOPYN  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTCOPYN\"},\"SNAPSHOTCOPYTOMARK\":{\"description\":\"The `SNAPSHOTCOPYTOMARK` function behaves like [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*>  SNAPSHOTCOPYTOMARK  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYTOMARK\"},\"SNAPSHOTN\":{\"description\":\"Produces a WarpScript code fragment which will regenerate the *N* top levels of the stack. The content of those levels is consumed off the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"stack<ANY*> n<LONG>  SNAPSHOTN  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTN\"},\"SNAPSHOTTOMARK\":{\"description\":\"The `SNAPSHOTTOMARK` functions produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTTOMARK` was called.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"mark<MARK> stack<ANY*>  SNAPSHOTTOMARK  snapshot<STRING>\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTTOMARK\"},\"SORT\":{\"description\":\"Sorts a Geo Time Series™ or each GTS of a list of GTS in ascending tick order.\\n\\n@param `gts` Single Geo Time Series™ instance to sort.\\n\\n@param `sgts` Sorted Geo Time Series™, this is the same instance as `gts`.\\n\\n@param `lgts` List of Geo Time Series™ instances to sort.\\n\\n@param `slist` List of sorted Geo Time Series™. Each instance is the same as the input one.\\n\\n\",\"signature\":\"gts<GTS>  SORT  sgts<GTS>\\nlgts<LIST<GTS>>  SORT  slist<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SORT\"},\"SORTBY\":{\"description\":\"The `SORTBY` function sorts a **LIST** or a **MAP** according to a value returned by a macro. The macro must return a value of the same type (LONG, DOUBLE or STRING) for each element.\\n\\nOnly **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nBefore release `1.2.22`, the `SORTBY` function could only sort lists of Geo Time Series™.\\n\\nBefore release `2.7.0`, the `SORTBY` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for sorting, consumes a list element off the stack and produces a LONG, DOUBLE or STRING value.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"signature\":\"list<LIST> macro<MACRO>  SORTBY  lsorted<LIST>\\nmap<MAP> macro<MACRO>  SORTBY  msorted<MAP>\",\"tags\":[\"lists\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"SORTBY\"},\"SORTWITH\":{\"description\":\"The `SORTWITH` function sorts a **LIST** or a **MAP** according to a value returned by a comparison macro. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nIn used a on **LIST**, the comparison macro is given 2 elements of the **LIST** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest element in the stack is respectively strictly less than, equal to or strictly more than than the element on the stack.\\n\\nIn used a on **MAP**, the comparison macro is given 2 entries (key deepest, value shallowest) of the **MAP** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest entry in the stack is respectively strictly less than, equal to or strictly more than than the shallowest entry on the stack.\\n\\nBefore release `2.7.0`, the `SORTWITH` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for comparison, must consume two elements of the stack and produces a LONG.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"signature\":\"list<LIST> macro<MACRO>  SORTWITH  lsorted<LIST>\\nmap<MAP> macro<MACRO>  SORTWITH  msorted<MAP>\",\"tags\":[\"lists\",\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"SORTWITH\"},\"SPLIT\":{\"description\":\"The SPLIT function split a string in segments given a delimiter.\\n\\n\\nIt consumes two parameters from the top of the stack: the delimiter and the string to test matching with. The delimiter must be a string of length 1, i.e. only one character.\\n\\n\\nThe function will return a list with all the segments. If delimiter is not found, the output list contains the input string.\\n\\n@param `delimiter` One character delimiter.\\n\\n@param `s` The string to split\\n\\n@param `result` List of strings.\\n\\n\",\"signature\":\"s<STRING> delimiter<STRING>  SPLIT  result<LIST<STRING>>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"SPLIT\"},\"SQRT\":{\"description\":\"The `SQRT` function consumes a numeric parameter from the top of the stack and pushes back its square root.\\n\\nFor negative numbers, SQRT returns NaN.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Square root of the given value, NaN if it is negative.\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of square root of each given value, NaN if it is negative.\\n\\n\",\"signature\":\"value<NUMBER>  SQRT  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  SQRT  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SQRT\"},\"SRAND\":{\"description\":\"The `SRAND` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThe seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\" SRAND  num<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"SRAND\"},\"SRANDPDF\":{\"description\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe randomization is seeded. The seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThe result is a function. This function does not have any arguments.\\n\\nTo use the function pushed by `SRANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"signature\":\"valueHistogram<MAP>  SRANDPDF  result<STRING>\",\"tags\":[\"math\",\"statistics\"],\"since\":\"2.2.1\",\"OPB64name\":\"SRANDPDF\"},\"STACKATTRIBUTE\":{\"description\":\"Retrieves the value of a stack attribute.\\n\\n@param `name` Name of the stack attribute to retrieve.\\n\\n@param `value` Associated value or null if attribute is not set.\\n\\n\",\"signature\":\"name<STRING>  STACKATTRIBUTE  value<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STACKATTRIBUTE\"},\"STACKPSSECRET\":{\"description\":\"Modifies the secret needed for using functions such as `WSPS`, `WSSTOP` and `WSKILL`.\\n\\nThis function is only useable if a secret was configured using `stackps.secret`.\\n\\n@param `secret` Current secret for process status operations, initially the value configured via `stackps.secret`.\\n\\n@param `newsecret` New secret to set for process status operations.\\n\\n\",\"signature\":\"newsecret<STRING> secret<STRING>  STACKPSSECRET \",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"STACKPSSECRET\"},\"STACKTOLIST\":{\"description\":\"Converts the whole stack into a list and pushes this list on top of the stack. The elements are consumed off the stack in the way [`->LIST`](/doc/AItBHKCJ) does it.\\n\\n@param `stack` Content of the stack.\\n\\n@param `list` List containing the elements of the stack.\\n\\n\",\"signature\":\"stack<ANY*>  STACKTOLIST  list<LIST>\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"STACKTOLIST\"},\"STANDARDIZE\":{\"description\":\"Standardizes a single (or a list of) numeric Geo Time Series™ (i.e. it replaces X by (X-mu)/sd).\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  STANDARDIZE  result<GTS>\\ngtsList<LIST<GTS>>  STANDARDIZE  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STANDARDIZE\"},\"STDERR\":{\"description\":\"The `STDERR` function prints text to the standard error stream.\\n\\nThe `STDERR` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"signature\":\"msg<STRING>  STDERR \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDERR\"},\"STDOUT\":{\"description\":\"The `STDOUT` function prints text to the standard output stream.\\n\\nThe `STDOUT` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `obj` The object to print. Its `.toString()` method is used to generate the outputed String.\\n\\n\",\"signature\":\"obj<ANY>  STDOUT \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDOUT\"},\"STL\":{\"description\":\"The `STL` function applies a Seasonal Trend decomposition on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is based on multiple calls of [`RLOWESS`](/doc/RLOWESS).\\n\\nThese Geo Time Series™ are the seasonal part and the trend part of the input Geo Time Series™. Their classnames are suffixed with \\\"_seasonal\\\" and \\\"_trend\\\".\\n\\nThis function can only be applied to [bucketized](/doc/BUCKETIZE) Geo Time Series™ of numeric type.\\n\\nThe **MAP** parameter must have at least the field `PERIOD`. You can provide additional optional parameters:\\n\\n## Optional parameters\\n### Global\\n- `ROBUST` if TRUE, set defaults of number of inner and outer loops to 1 and 15 instead of 2 and 0. Default is FALSE\\n- `PRECISION` number of inner loops (a LONG). Default is 2 or 1\\n- `ROBUSTNESS` number of outer loops (a LONG). Default is 0 or 15\\n\\n### Seasonal extract\\n- `BANDWIDTH_S` the bandwidth (a LONG) of the local regression. Default is 7\\n- `DEGREE_S` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_S` the number of values interpolated instead of estimated. Default is BANDWIDTH_S/10\\n\\n### Low frequency filtering\\n- `BANDWIDTH_L` the bandwidth (a LONG) of the local regression. Default is nextOdd(PERIOD)\\n- `DEGREE_L` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_L` the number of values interpolated instead of estimated. Default is BANDWIDTH_L/10\\n\\n### Trend extract\\n- `BANDWIDTH_T` the bandwidth (a LONG) of the local regression. Default is nextOdd(ceiling(1.5*PERIOD/(1-(1.5/BANDWIDTH_S))))\\n- `DEGREE_T` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_T` the number of values interpolated instead of estimated. Default is BANDWIDTH_T/10\\n\\n### Post seasonal smoothing\\n- `BANDWIDTH_P` the bandwidth (a LONG) of the local regression. Default is 0 (i.e. no post smoothing)\\n- `DEGREE_P` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_P` the number of values interpolated instead of estimated. Default is BANDWIDTH_P/10\\n\\n### Additional fields\\n- `BANDWIDT` value of all BANDWIDTH_X fields that are not set\\n- `DEGREE` value of all DEGREE_X fields that are not set\\n- `SPEED` value of all SPEED_X fields that are not set\\n\\n> ### REFERENCE\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> { p<LONG>  } STL  result<GTS>\\ngtsList<LIST<GTS>> { p<LONG>  } STL  resultList<LIST<GTS>>\",\"tags\":[\"gts\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"STL\"},\"STLESDTEST\":{\"description\":\"The 'STLESDTEST' function detects outliers in a Geo Time Series™ (or a **LIST** of Geo Time Series™) which has a seasonal part.\\n\\nThe seasonal part and the trend part of the Geo Time Series™ are extracted using [`STL`](/doc/STL) decomposition, then an [`ESDTEST`](/doc/ESDTEST) is performed on the remainder.\\n\\nThis function only applies to [bucketized](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ### References\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n> **Rosner, Bernard (May 1983)**, \\\"Percentage Points for a Generalized ESD Many-Outlier Procedure\\\",Technometrics, 25(2), pp. 165-172.\\n\\n@param `STLOption` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `resultList` A **LIST** of ticks corresponding to the outliers\\n\\n@param `result` A **LIST** of LIST of ticks corresponding to the outliers\\n\\n\",\"signature\":\"gts<GTS> p<LONG> k<LONG> alpha<DOUBLE> STLOption<MAP>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG> alpha<DOUBLE>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG> STLOption<MAP>  STLESDTEST  result<LIST<LONG>>\\ngts<GTS> p<LONG> k<LONG>  STLESDTEST  result<LIST<LONG>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> alpha<DOUBLE> STLOption<MAP>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> alpha<DOUBLE>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG> STLOption<MAP>  STLESDTEST  resultList<LIST<LIST<LONG>>>\\ngtsList<LIST<GTS>> p<LONG> k<LONG>  STLESDTEST  resultList<LIST<LIST<LONG>>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STLESDTEST\"},\"STOP\":{\"description\":\"The `STOP` function stops the current execution by throwing a `WarpScriptStopException`. This means that the current script execution will be aborted unless the call to `STOP` was in a macro invoked via [`TRY`](/doc/TRY).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"STOP\"},\"STORE\":{\"description\":\"The `STORE` function stores a value in a symbol.\\n\\nSince 2.7, when the list of symbols contains duplicates only the last occurence in the list is assigned to its corresponding value.\\n\\n@param `symbol` Name of the symbol to modify.\\n\\n@param `register` Index of the register to modify.\\n\\n@param `symbols` List of symbols or registers to modify. The last element of the list will contain the top of the stack.\\n\\n@param `value` Value to store under `symbol`.\\n\\n@param `values` Multiple values to store in `symbols`.\\n\\n\",\"signature\":\"value<ANY> symbol<STRING>  STORE \\nvalue<ANY> register<LONG>  STORE \\nvalues<ANY*> symbols<LIST<STRING>>  STORE \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STORE\"},\"STRICTMAPPER\":{\"description\":\"Wraps a *mapper* in such a way that the mapper will only be called if the number of ticks in the window is in the specified range.\\n\\nSince 2.1 STRICTMAPPER can also take a timespan definition by inputing negative numbers. Number of ticks and timespan can also be mixed to specify, for instance, more than 2 points but less than 5 seconds.\\n\\n@param `max` If positive, maximum number of ticks in the window. If negative, maximum timespan of the window.\\n\\n@param `min` If positive, minimum number of ticks in the window. If negative, minimum timespan of the window.\\n\\n@param `mapper` Mapper to wrap.\\n\\n@param `wrapped` Wrapped mapper.\\n\\n\",\"signature\":\"mapper<AGGREGATOR> min<NUMBER> max<NUMBER>  STRICTMAPPER  wrapped<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTMAPPER\"},\"STRICTPARTITION\":{\"description\":\"The `STRICTPARTITION` splits a Geo Time Series™ list in equivalence classes based on label values just like [`PARTITION`](/doc/PARTITION) but only retains in each equivalence class key the labels on which the partitioning was done.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels`.\\n\\n\",\"signature\":\"lgts<LIST<GTS>> labels<LIST<STRING>>  STRICTPARTITION  result<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTPARTITION\"},\"STRICTREDUCER\":{\"description\":\"Wraps a *reducer* so it is only applied if there are values for all the Geo Time Series™ being reduced.\\n\\n@param `reducer` Reducer to wrap.\\n\\n@param `wrapped` Wrapped version of the reducer.\\n\\n\",\"signature\":\"reducer<AGGREGATOR>  STRICTREDUCER  wrapped<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.6\",\"OPB64name\":\"STRICTREDUCER\"},\"STRINGFORMAT\":{\"description\":\"The STRINGFORMAT function format a String in the same ways as Java [String.format](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.util.Locale-java.lang.String-java.lang.Object...-) does.\\n\\nThis fonction consumes an optional locale in [ISO 639](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry), a list of Objects to be used in the format string and a [format string](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax).\\n\\nIf no locale is specified, it defaults to the default JVM locale.\\n\\n@param `format` A format string.\\n\\n@param `args` Arguments referenced by the format specifiers in the format string.\\n\\n@param `locale` The locale to apply during formatting.\\n\\n@param `formattedString` A formatted string.\\n\\n\",\"signature\":\"format<STRING> args<LIST>  STRINGFORMAT  formattedString<STRING>\\nformat<STRING> args<LIST> locale<STRING>  STRINGFORMAT  formattedString<STRING>\",\"tags\":[\"strings\"],\"since\":\"2.2.0\",\"OPB64name\":\"STRINGFORMAT\"},\"STU\":{\"description\":\"The `STU` function pushes onto the stack the number of platform time units in one second. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one second.\\n\\n\",\"signature\":\" STU  numberTimeUnits<LONG>\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"STU\"},\"SUBLIST\":{\"description\":\"It creates a new list with the elements of the base list whose indices are in the argument list.\\n\\nIf the argument list contains two indices [a,b] then `SUBLIST` returns the list of elements from index a to index b (included). If the argument list contains more than two indices, the result of `SUBLIST` contains all the elements at the specified indices, with possible duplicates.\\n\\nNegative indexing is allowed, with negative index effectively refering to index + size.\\n\\nSince 2.1 a new signature allowing the step to be defined has been introduced. Instead of specifying a list has range, you can put the start, end (optional) and step (optional) as **LONG** values.\\n\\n@param `arguments` List of indices. Negative indices are considered to be calculated from the end of the list.\\n\\n@param `base` Base list\\n\\n@param `result` Filtred list\\n\\n@param `start` The first index to consider, will be included.\\n\\n@param `end` The last index to consider, will be included. If not specified, defaults to -1.\\n\\n@param `step` The delta between two consecutive indexes to consider. If end is after start in the list, step must be strictly positive. If start is after end in the list, step must be strictly negative. If not specified, defaults to 1 or -1 depending on start and end.\\n\\n\",\"signature\":\"base<LIST<ANY>> arguments<LIST<LONG>>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER> end<NUMBER>  SUBLIST  result<LIST<ANY>>\\nbase<LIST<ANY>> start<NUMBER> end<NUMBER> step<NUMBER>  SUBLIST  result<LIST<ANY>>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBLIST\"},\"SUBMAP\":{\"description\":\"It creates a new map with the key-value pairs from the base map whose keys are in the argument list.\\n\\n@param `arguments` List of indices.\\n\\n@param `base` Base map\\n\\n@param `result` Filtred map\\n\\n\",\"signature\":\"base<MAP> arguments<LIST<STRING>>  SUBMAP  result<MAP>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBMAP\"},\"SUBSTRING\":{\"description\":\"Extract a substring from a **STRING** input, or a subarray from a **BYTE ARRAY** input.  \\nIf the length is ommitted, it extracts until the end of the string or byte array. If length is greater than max length, extract stops at the input end.\\n\\nIf the start is greater than the input size, `SUBSTRING` raises an error.\\n\\nSince 2.1, the start index can be negative. In this case the effective index is index + size of the **STRING**.\\n\\n@param `len` Length of substring to extract.\\n\\n@param `start` First character to include in the substring (0 based).\\n\\n@param `str` String from which to extract a substring.\\n\\n@param `substr` Extracted substring.\\n\\n@param `array` Byte array from which to extract a sub array.\\n\\n@param `subarray` Extracted sub array.\\n\\n\",\"signature\":\"str<STRING> start<LONG> len<LONG>  SUBSTRING  substr<STRING>\\nstr<STRING> start<LONG>  SUBSTRING  substr<STRING>\\narray<BYTES> start<LONG> len<LONG>  SUBSTRING  subarray<BYTES>\\narray<BYTES> start<LONG>  SUBSTRING  subarray<BYTES>\",\"tags\":[\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBSTRING\"},\"SUBTRACTEXACT\":{\"description\":\"The `SUBTRACTEXACT` function consumes two LONGs from the top of the stack and puts back the difference between them. If the difference overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `diff` The difference of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sdiff` The first element of the list minus all the others\\n\\n@param `lx` List of numeric values\\n\\n@param `ldiff` List of **LONG** where each value is the difference of y and an element in lx\\n\\n\",\"signature\":\"x<NUMBER> y<NUMBER>  SUBTRACTEXACT  diff<LONG>\\nlist<LIST<NUMBER>>  SUBTRACTEXACT  sdiff<LONG>\\nlx<LIST<NUMBER>> y<NUMBER>  SUBTRACTEXACT  ldiff<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SUBTRACTEXACT\"},\"SWAP\":{\"description\":\"Exchanges the positions of the top two elements of the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n\",\"signature\":\"level2<ANY> top<ANY>  SWAP  top<ANY> level2<ANY>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWAP\"},\"SWITCH\":{\"description\":\"Performs a [switch statement](https://en.wikipedia.org/wiki/Switch_statement) allowing to select a macro execution based on a series of condition macros or to fallback on to the execution of a default macro.\\n\\n@param `n` Number of cases to consider. The `SWITCH` function will expect `n` pairs of condition/execution macros plus a default macro on the stack.\\n\\n@param `default` Macro which will be executed if all condition macros returned false.\\n\\n@param `cond1` First condition macro. All condition macros are expected to push a boolean on the stack.\\n\\n@param `condn` `n`th condition macro.\\n\\n@param `exec1` First execution macro, this macro will be executed if `cond1` left `true` on the stack.\\n\\n@param `execn` `n`th execution macro.\\n\\n\",\"signature\":\"cond1<MACRO> exec1<MACRO> condn<MACRO> execn<MACRO> default<MACRO> n<LONG>  SWITCH \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWITCH\"},\"SYMBOLS\":{\"description\":\"The `SYMBOLS` function outputs the list of all defined symbols.\\n\\n@param `symbols` The list of the names of all defined symbols.\\n\\n\",\"signature\":\" SYMBOLS  symbols<LIST>\",\"tags\":[\"stack\"],\"since\":\"2.2.1\",\"OPB64name\":\"SYMBOLS\"},\"SYNC\":{\"description\":\"Executes a macro in a synchronized way while in a parallel execution triggered by a call to [`CEVAL`](/doc/CEVAL). If `SYNC` is called outside of a parallel execution, it simply executes the macro.\\n\\nWhen called within a `CEVAL` execution, the use of `SYNC` guarantees that only one of the concurrently executing threads will execute the specified macro at any given time.\\n\\n@param `macro` Macro to execute in a synchronized way.\\n\\n\",\"signature\":\"macro<MACRO>  SYNC \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"SYNC\"},\"T\":{\"description\":\"`T` stand for `true`. It is a boolean constant.\\n\\n\\n@param `b` true\\n\\n\",\"signature\":\" T  b<BOOLEAN>\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"T\"},\"TAN\":{\"description\":\"The `TAN` function consumes a floating point number from the top of the stack and pushes back its tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Tangent of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of tangent of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  TAN  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  TAN  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TAN\"},\"TANH\":{\"description\":\"The `TANH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic tangent of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic tangent of the given values.\\n\\n\",\"signature\":\"value<NUMBER>  TANH  result<DOUBLE>\\nlvalue<LIST<NUMBER>>  TANH  lresult<LIST<DOUBLE>>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TANH\"},\"TDESCRIBE\":{\"description\":\"The `TDESCRIBE` function is a recursive [`TYPEOF`](/doc/TYPEOF).\\n\\nWhen `TDESCRIBE` finds a LIST, it takes the first element of the list to look for his type. When `TDESCRIBE` finds a MAP, it takes a random key in the map to look for the type of the key and the type of the value.\\n\\n**By design, TDESCRIBE cannot describe heterogeneous lists or maps.**\\n\\nTDESCRIBE output is subject to change in the future. Do not try to parse it. This function is here to help you during Warpscript development.\\n\\n\\nThe `TDESCRIBE` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `object` Any kind of reference\\n\\n@param `description` The description of the object\\n\\n\",\"signature\":\"object<ANY>  TDESCRIBE  description<STRING>\",\"tags\":[\"extensions\",\"debug\"],\"since\":\"1.2.19\",\"OPB64name\":\"TDESCRIBE\"},\"TEMPLATE\":{\"description\":\"`TEMPLATE` fills a template with values contained in a map. See example for syntax help.\\n\\nThe `TEMPLATE` function expects the map of values on top of the stack and will operate on the string template below it.\\n\\nValues speficied with `{{key}}` will be url-escaped. If you do not want that behavior, use `{{{key}}}`.\\n\\n@param `dictionnary` Each key will be replaced in a {{key}} template. Value could be string long, double, boolean, or a list of maps. If Value is a list of maps, each subkey/value will be replaced in a {{#key}}{{subkey}}{{/key}} template. \\n\\n@param `listofmaps` Contains a list of subkey/value map. Will be replaced in a {{#key}}{{subkey}}{{/key}} template.\\n\\n@param `template` Input template.\\n\\n@param `output` Result of substitution.\\n\\n\",\"signature\":\"template<STRING> dictionnary<MAP>  TEMPLATE  output<STRING>\\ntemplate<STRING> listofmaps<LIST<MAP>>  TEMPLATE  output<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TEMPLATE\"},\"THRESHOLDTEST\":{\"description\":\"Analyzes Geo Time Series™, identifying ticks where values are outliers above the given threshold.\\n\\n@param `threshold` Threshold above which values are considered outliers.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `ticks` List of ticks where outliers were found.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lticks` List of lists of ticks where outliers were found.\\n\\n\",\"signature\":\"gts<GTS> threshold<DOUBLE>  THRESHOLDTEST  ticks<LIST<LONG>>\\nlgts<LIST<GTS>> threshold<DOUBLE>  THRESHOLDTEST  lticks<LIST<LIST<LONG>>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"THRESHOLDTEST\"},\"TICKINDEX\":{\"description\":\"Creates a clone of a Geo Time Series™, replacing each tick with the index (0 based) at which it appears at the moment of the call.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `encoder` Geo Time Series™ Encoder instance to transform.\\n\\n@param `indexed` Transformed GTS.\\n\\n@param `indexedenc` Transformed GTS Encoder.\\n\\n@param `lgts` List of Geo Time Series™ instances to transform.\\n\\n@param `lencoder` List of Geo Time Series™ Encoder instances to transform.\\n\\n@param `lindexed` List of indexed Geo Time Series™.\\n\\n@param `lindexedenc` List of indexed Geo Time Series™ Encoder.\\n\\n\",\"signature\":\"gts<GTS>  TICKINDEX  indexed<GTS>\\nlgts<LIST<GTS>>  TICKINDEX  lindexed<LIST<GTS>>\\nencoder<GTSENCODER>  TICKINDEX  indexedenc<GTSENCODER>\\nlencoder<LIST<GTSENCODER>>  TICKINDEX  lindexedenc<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKINDEX\"},\"TICKLIST\":{\"description\":\"Pushes onto the stack the list of ticks of a Geo Time Series™ or encoder. The ticks appear in the order in which they are found.\\n\\nIf a list of Geo Time Series™ is given, the result is a list of list of ticks as if the TICKLIST function was applied to each Geo Time Series™ separately.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n@param `encoder` Instance of encoder from which to extract the ticks.\\n\\n@param `lencoder` List of encoders.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `lticks` List of lists of ticks.\\n\\n\",\"signature\":\"gts<GTS>  TICKLIST  ticks<LIST<LONG>>\\nlgts<LIST<GTS>>  TICKLIST  lticks<LIST<LIST<LONG>>>\\nencoder<GTSENCODER>  TICKLIST  ticks<LIST<LONG>>\\nlencoder<LIST<GTSENCODER>>  TICKLIST  lticks<LIST<LIST<LONG>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKLIST\"},\"TICKS\":{\"description\":\"Pushes onto the stack the sorted list of **distinct** ticks of a Geo Time Series™. If a list of Geo Time Series™ is given, all the **distinct** ticks are returned in a single sorted list as if all Geo Time Series™ were merged.\\n\\nThis function is not to be confused with [`TICKLIST`](/doc/TICKLIST) as this function returns **distinct** ticks and acts as it merges Geo Time Series™.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n\",\"signature\":\"gts<GTS>  TICKS  ticks<LIST<LONG>>\\nlgts<LIST<GTS>>  TICKS  ticks<LIST<LONG>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKS\"},\"TIMEBOX\":{\"description\":\"The `TIMEBOX` executes a macro with a maximum execution time. If the maximum time is reached, an exception will be thrown which can be caught using [`TRY`](/doc/TRY).\\n\\n@param `maxtime` Maximum execution time, in platform time units.\\n\\n@param `macro` Macro to execute.\\n\\n\",\"signature\":\"macro<MACRO> maxtime<LONG>  TIMEBOX \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TIMEBOX\"},\"TIMECLIP\":{\"description\":\"Clips Geo Time Series™ instances by restricting their ticks to those within a time interval.      \\n\\n@param `duration` Width of the time interval to retain, in time units.\\n\\n@param `end` Most recent timestamp to retain.\\n\\n@param `start` Start timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `stop` End timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `clipped` Clipped Geo Time Series™.\\n\\n@param `lclipped` List of clipped GTS.\\n\\n@param `encoder` Single GTS Encoder instance.\\n\\n@param `lencoder` List of GTS Encoder instances.\\n\\n@param `clippedEncoder` Clipped GST encoder.\\n\\n@param `lclippedEncoders` List of clipped GTS encoders.\\n\\n\",\"signature\":\"gts<GTS> end<LONG> duration<LONG>  TIMECLIP  clipped<GTS>\\nlgts<LIST<GTS>> end<LONG> duration<LONG>  TIMECLIP  lclipped<LIST<GTS>>\\ngts<GTS> stop<STRING> start<STRING>  TIMECLIP  clipped<GTS>\\nlgts<LIST<GTS>> stop<STRING> start<STRING>  TIMECLIP  lclipped<LIST<GTS>>\\nencoder<GTSENCODER> end<LONG> duration<LONG>  TIMECLIP  clippedEncoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> end<LONG> duration<LONG>  TIMECLIP  lclippedEncoders<LIST<GTSENCODER>>\\nencoder<GTSENCODER> stop<STRING> start<STRING>  TIMECLIP  clippedEncoder<GTSENCODER>\\nlencoder<LIST<GTSENCODER>> stop<STRING> start<STRING>  TIMECLIP  lclippedEncoders<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMECLIP\"},\"TIMED\":{\"description\":\"The `TIMED` function converts a macro to a timed macro, recording its execution time and its number of calls.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\n@param `name` A name identifying the macro.\\n\\n@param `macro` The macro you want to monitor.\\n\\n@param `timedMacro` A macro which, when called, will update the statitics associated with the given name.\\n\\n\",\"signature\":\"macro<MACRO> name<STRING>  TIMED  timedMacro<MACRO>\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"TIMED\"},\"TIMEMODULO\":{\"description\":\"Splits Geo Time Series™ into sub-GTS whose timestamps are the original timestamp modulo a given modulus value. Each sub-GTS will bear a label with the quotient of the original timestamps divided by the modulus. The output list order is not guaranteed, use [`SORTBY`](/doc/SORTBY) if you want to order the output by label.\\n\\nThis function can be used to generate for example one Geo Time Series™ per day with ticks from 0 to 86400 s (excluded).\\n\\n@param `label` Name of the label which will have the quotient value.\\n\\n@param `modulus` Value by which to divide the original timestamps.\\n\\n@param `gts` Geo Time Series™ to split.\\n\\n@param `splits` Resulting splits.\\n\\n@param `lgts` List of GTS to split.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"gts<GTS> modulus<LONG> label<STRING>  TIMEMODULO  splits<LIST<GTS>>\\nlgts<LIST<GTS>> modulus<LONG> label<STRING>  TIMEMODULO  lsplits<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMEMODULO\"},\"TIMEOFF\":{\"description\":\"Turns off the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" TIMEOFF \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEOFF\"},\"TIMEON\":{\"description\":\"Turns on the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" TIMEON \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEON\"},\"TIMESCALE\":{\"description\":\"Modifies the ticks of Geo Time Series™ instances by multiplying each tick by a provided scale.      \\n\\nThe resulting tick will be converted to a LONG after multiplication by the scale.\\n\\nIf the Geo Time Series™ instance is bucketized, the `lastbucket` and `bucketspan` parameters will also be scaled. If the scale would incur a `bucketspan` of 0, the call will end with an error.\\n\\n@param `scale` Scale by which to multiply each tick.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `scaled` Geo Time Series™ result.\\n\\n@param `lscaled` List of Geo Time Series™ result.\\n\\n\",\"signature\":\"gts<GTS> scale<DOUBLE>  TIMESCALE  scaled<GTS>\\ngts<GTS> scale<LONG>  TIMESCALE  scaled<GTS>\\nlgts<LIST<GTS>> scale<DOUBLE>  TIMESCALE  lscaled<LIST<GTS>>\\nlgts<LIST<GTS>> scale<LONG>  TIMESCALE  lscaled<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESCALE\"},\"TIMESHIFT\":{\"description\":\"Shifts the ticks of Geo Time Series™ instances by a given amount.\\n\\n@param `offset` Offset to apply to the ticks, in time units.\\n\\n@param `gts` Single Geo Time Series™ instance to shift.\\n\\n@param `lgts` List of GTS to shift.\\n\\n@param `shifted` Shifted Geo Time Series™.\\n\\n@param `lshifted` List of shifted Geo Time Series™.\\n\\n\",\"signature\":\"gts<GTS> offset<LONG>  TIMESHIFT  shifted<GTS>\\nlgts<LIST<GTS>> offset<LONG>  TIMESHIFT  lshifted<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESHIFT\"},\"TIMESPLIT\":{\"description\":\"The `TIMESPLIT` functions splits Geo Time Series™ instances based on *quiet periods*, *i.e.* periods during which the GTS has no values.\\n\\nWhenever a quiet period longer than a minimum duration is encountered, the Geo Time Series™ is split.\\n\\nIf input gts has no values or if 'label' is already part of the labels of 'gts', then the resulting list of GTS will only contain a clone of 'gts'. **Make sure to test your GTS split size if needed.**\\n\\n@param `label` Name of label in which to store the sequence number.\\n\\n@param `minvalues` Minimum number of values a split should contain. Splits with less than that many values will be discarded.\\n\\n@param `quietperiod` Minimum duration of the silent period (*i.e.* with no values) between splits.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"gts<GTS> quietperiod<LONG> minvalues<LONG> label<STRING>  TIMESPLIT  splits<LIST<GTS>>\\nlgts<LIST<GTS>> quietperiod<LONG> minvalues<LONG> label<STRING>  TIMESPLIT  lsplits<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESPLIT\"},\"TIMINGS\":{\"description\":\"Turns on the collection of timing information for each line of the script. The collected timings can be put onto the stack by using [`ELAPSED`](/doc/ELAPSED).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMINGS\"},\"TLTTB\":{\"description\":\"The `TLTTB` function performs downsampling of Geo Time Series™ by applying the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data. It differs from the [`LTTB`](doc/LTTB) function by the fact that it considers time based buckets instead of buckets based on a number of values.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"signature\":\"gts<GTS> samples<LONG>  TLTTB  downsampled<GTS>\\nlgts<LIST<GTS>> samples<LONG>  TLTTB  ldownsampled<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"TLTTB\"},\"TOBIN\":{\"description\":\"Converts the long on top of the stack to its 64 bits binary representation.\\n\\n@param `param` value to convert\\n\\n@param `result` String converted binary representation of param\\n\\n\",\"signature\":\"param<LONG>  TOBIN  result<STRING>\",\"tags\":[\"conversion\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBIN\"},\"TOBITS\":{\"description\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n**Deprecation notice** the `TOBITS` function will be removed, please use `->DOUBLEBITS` or `->FLOATBITS`.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"signature\":\"number<NUMBER>  TOBITS  bits<LONG>\\ngts<GTS>  TOBITS  longgts<GTS>\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBITS\"},\"TOBOOLEAN\":{\"description\":\"Converts a value of primitive type into a boolean value.\\n\\nThe `TOBOOLEAN` function consumes a parameter from the top of the stack and pushes back its conversion to boolean.\\nNumbers will be false if they are equal to 0 and true otherwise.\\nStrings will be false if they are equals to '' and true otherwise.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The boolean conversion of the value\\n\\n\",\"signature\":\"value<BOOLEAN>  TOBOOLEAN  result<BOOLEAN>\\nvalue<NUMBER>  TOBOOLEAN  result<BOOLEAN>\\nvalue<STRING>  TOBOOLEAN  result<BOOLEAN>\",\"tags\":[\"conversion\"],\"since\":\"1.0.5\",\"OPB64name\":\"TOBOOLEAN\"},\"TODEGREES\":{\"description\":\"Converts an angle measured in radians to its equivalent in degrees.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from radians to degrees.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in radian to convert in degree\\n\\n@param `result` Result of the conversion from radians to degrees\\n\\n@param `langle` List of angles in radian to convert in degree\\n\\n@param `lresult` List of results of the conversion from radians to degrees\\n\\n\",\"signature\":\"angle<NUMBER>  TODEGREES  result<DOUBLE>\\nlangle<LIST<NUMBER>>  TODEGREES  lresult<LIST<DOUBLE>>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODEGREES\"},\"TODOUBLE\":{\"description\":\"Converts a value of primitive type into a double value.\\n\\nThe `TODOUBLE` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to double.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The double conversion of the value\\n\\n\",\"signature\":\"value<BOOLEAN>  TODOUBLE  result<DOUBLE>\\nvalue<NUMBER>  TODOUBLE  result<DOUBLE>\\nvalue<STRING>  TODOUBLE  result<DOUBLE>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODOUBLE\"},\"TOHEX\":{\"description\":\"Converts a long to its 64 bits hexadecimal representation.\\n\\n@param `input` Signed long integer.\\n\\n@param `output` Hexadecimal string representation of input.\\n\\n\",\"signature\":\"input<LONG>  TOHEX  output<STRING>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOHEX\"},\"TOINTEXACT\":{\"description\":\"The `TOINTEXACT` function consumes one LONG from the top of the stack and puts back the value. If the result overflows an INT, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be checked not to overflow an INT\\n\\n@param `result` The given value, converted to Long\\n\\n@param `lvalue` List of values to be checked not to overflow an INT\\n\\n@param `lresult` List of given values, converted to Long\\n\\n\",\"signature\":\"value<NUMBER>  TOINTEXACT  result<LONG>\\nlvalue<LIST<NUMBER>>  TOINTEXACT  lresult<LIST<LONG>>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"TOINTEXACT\"},\"TOKENDUMP\":{\"description\":\"Deciphers a token and outputs a map describing the various elements of the token.\\n\\nThe map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Original token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| params | MAP | Map of token parameters, can be used as input to [`TOKENGEN`](/doc/TOKENGEN) |\\n\\nThe `params` map contains the following entries for both `READ` and `WRITE` tokens:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| type  | STRING | `READ` or `WRITE` depending on the type of token |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in ms since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in ms since the Unix Epoch |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nAdditionally, for `READ` tokens, the map contains those entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, those will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nNote that the `TOKENDUMP` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration key was not set.\\n\\n\\n@param `token` Token to decode.\\n\\n@param `map` Map with the extracted parameters, the original token and its *ident*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENDUMP` from Worf.\\n\\n\",\"signature\":\"token<STRING>  TOKENDUMP  map<MAP>\\ntoken<STRING> secret<STRING>  TOKENDUMP  map<MAP>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENDUMP\"},\"TOKENGEN\":{\"description\":\"Generates a token given a map of parameters. The `TOKENGEN` function outputs a map.\\n\\nThe input parameter map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| id | STRING | Optional identifier that will be put verbatim in the result map |\\n| type  | STRING | `READ` or `WRITE` depending on the type of token to generate |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| ttl | LONG | If `expiry` is not specified, a time to live can be set with this key. The TTL is expressed in **milliseconds**, the computed expiry timestamp will be the issuance timestamp plus the ttl |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nWhen generating a `READ` token, the following parameters are needed to ensure data isolation:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, they will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nIf one of these parameter key is not set or set to an empty list, then the generated `READ` token will be granted access to all the scope associated with the parameter key. For example, if `owners` is not set, data from all owners will be accessible to this token.\\n\\nThe `TOKENGEN` function outputs a map with the following keys:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Generated token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| id | STRING | Optional identifier if the `id` key was specified in the parameter map |\\n\\nNote that the `TOKENGEN` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration was not set.\\n\\n@param `params` Map of parameters used to generate the token.\\n\\n@param `result` Map containing the token, its *ident* and an optional *id*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENGEN` from Worf.\\n\\n\",\"signature\":\"params<MAP>  TOKENGEN  result<MAP>\\nparams<MAP> secret<STRING>  TOKENGEN  result<MAP>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENGEN\"},\"TOKENINFO\":{\"description\":\"Retrieves information from token.\\n\\nThe `TOKENINFO` function consumes a token from the top of the stack and pushes back a map containing the token information:\\n* type: type of token 'Read' or 'Write'\\n* issuance: timestamp of token creation, in **milliseconds** since the Unix Epoch \\n* expiry: timestamp of token expiration, in **milliseconds** since the Unix Epoch \\n* application: name of the application accessing the data\\n* apps: list of applications whose data can be accessed (usually limited to a single application)\\n\\n@param `token` Token to extract informations\\n\\n@param `infos` Token informations extract from the tokens\\n\\n\",\"signature\":\"token<STRING>  TOKENINFO  infos<MAP>\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOKENINFO\"},\"TOKENSECRET\":{\"description\":\"Modifies the secret needed for using `TOKENGEN` or `TOKENDUMP`.\\n\\nThis function is only useable if a secret was configured using `token.secret`.\\n\\n@param `secret` Current secret for token operations, initially the value configured via `token.secret`.\\n\\n@param `newsecret` New secret to set for token operations.\\n\\n\",\"signature\":\"newsecret<STRING> secret<STRING>  TOKENSECRET \",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TOKENSECRET\"},\"TOLONG\":{\"description\":\"Converts a value of primitive type or a **BYTE ARRAY** into a long value.\\n\\nThe `TOLONG` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to long.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The long conversion of the value\\n\\n@param `array` Maximum 8 bytes to convert to a LONG. Sign is kept.\\n\\n\",\"signature\":\"value<BOOLEAN>  TOLONG  result<LONG>\\nvalue<NUMBER>  TOLONG  result<LONG>\\nvalue<STRING>  TOLONG  result<LONG>\\narray<BYTES>  TOLONG  result<LONG>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLONG\"},\"TOLOWER\":{\"description\":\"Converts the **STRING** on top of the stack to lower case.\\n\\n@param `input` input string\\n\\n@param `output` Lower case string\\n\\n\",\"signature\":\"input<STRING>  TOLOWER  output<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLOWER\"},\"TORADIANS\":{\"description\":\"Converts an angle measured in degrees to its equivalent in radians.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from degrees to radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in degree to convert in radian\\n\\n@param `result` Result of the conversion from degree to radian\\n\\n@param `langle` List of angles in degree to convert in radian\\n\\n@param `lresult` List of results of the conversion from degree to radian\\n\\n\",\"signature\":\"angle<NUMBER>  TORADIANS  result<DOUBLE>\\nlangle<LIST<NUMBER>>  TORADIANS  lresult<LIST<DOUBLE>>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TORADIANS\"},\"TOSELECTOR\":{\"description\":\"The `TOSELECTOR` function takes a Geo Time Series™ or Geo Time Series™ LIST from the top of the stack and, for each encountered GTS, replace it with a selector which would select it.\\n\\nThis selector can be used as input of [`PARSESELECTOR`](/doc/PARSESELECTOR) for a [`FETCH`](/doc/FETCH).\\n\\n@param `gts` The input Geo Time Series™.\\n\\n@param `gtslist` The input list of Geo Time Series™.\\n\\n@param `encoder` The input encoder.\\n\\n@param `encoderlist` The input list of encoders.\\n\\n@param `selector` The selector string.\\n\\n@param `selectorlist` The list of selector strings, one per GTS in gtslist.\\n\\n\",\"signature\":\"gts<GTS>  TOSELECTOR  selector<STRING>\\ngtslist<LIST<GTS>>  TOSELECTOR  selectorlist<LIST<STRING>>\\nencoder<GTSENCODER>  TOSELECTOR  selector<STRING>\\nencoderlist<LIST<GTSENCODER>>  TOSELECTOR  selectorlist<LIST<STRING>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSELECTOR\"},\"TOSTRING\":{\"description\":\"Converts a value of primitive type into a string value.\\n\\nThe `TOSTRING` function consumes a parameter from the top of the stack and pushes back its conversion to string.\\n\\nNote that GTS are converted to input format and that the string ends with CRLF to follow HTTP recommendations.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The string conversion of the value\\n\\n\",\"signature\":\"value<NUMBER>  TOSTRING  result<STRING>\\nvalue<BOOLEAN>  TOSTRING  result<STRING>\\nvalue<STRING>  TOSTRING  result<STRING>\\nvalue<GTS>  TOSTRING  result<STRING>\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSTRING\"},\"TOTIMESTAMP\":{\"description\":\"Converts a date in format ISO8601 into a timestamp in the platform's time unit.\\n\\nThe `TOTIMESTAMP` function consumes a string parameter (date + time + time zone) from the top of the stack and pushes back its conversion to a number of time units since the Unix Epoch.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nThe supported format is ISO8601 and are:\\n* yyyy-mm-dddThh:mm:ss.ssssssZ\\n* yyyy-mm-dddThh:mm:ss+hh:mm\\n\\nAs the string are URL encoded, the symbol + have to be replaced by %2B, otherwise a space will replace the + in the string.\\n\\n@param `input` ISO8601 string.\\n\\n@param `result` timestamp in the platform unit.\\n\\n\",\"signature\":\"input<STRING>  TOTIMESTAMP  result<LONG>\",\"tags\":[\"conversion\",\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOTIMESTAMP\"},\"TOUPPER\":{\"description\":\"Converts the **STRING** on top of the stack to upper case.\\n\\n@param `input` input string\\n\\n@param `output` Upper case string\\n\\n\",\"signature\":\"input<STRING>  TOUPPER  output<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOUPPER\"},\"TR\":{\"description\":\"Computes the [trace](https://en.wikipedia.org/wiki/Trace_(linear_algebra)) of a square matrix. If the input matrix is not square, an error is raised.\\n\\n@param `matrix` The square matrix for which to compute the trace.\\n\\n@param `trace` The computed trace.\\n\\n\",\"signature\":\"matrix<MATRIX>  TR  trace<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TR\"},\"TRANSPOSE\":{\"description\":\"Computes the [transpose](https://en.wikipedia.org/wiki/Transpose) of a matrix.\\n\\n@param `matrix` Matrix to transpose.\\n\\n@param `transpose` The transpose of the original matrix.\\n\\n\",\"signature\":\"matrix<MATRIX>  TRANSPOSE  transpose<MATRIX>\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TRANSPOSE\"},\"TRIM\":{\"description\":\"Trims whitespaces from both ends of the string on top of the stack.\\n\\n@param `str` String to trim\\n\\n@param `trimmedstr` String trimmed\\n\\n\",\"signature\":\"str<STRING>  TRIM  trimmedstr<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TRIM\"},\"TRY\":{\"description\":\"The `TRY` function provides a way to execute a macro in a safety harness with [Exception handling](https://en.wikipedia.org/wiki/Exception_handling).\\n\\nIf an error is thrown, it is recorded and will be available via [`ERROR`](/doc/ERROR).\\n\\n@param `try` Macro whose execution is *attempted*.\\n\\n@param `catch` Macro which will be executed if an error is encountered while executing the `try` macro.\\n\\n@param `finally` Macro which will be executed unconditionally after either the `try` or `try`/`catch` execution.\\n\\n\",\"signature\":\"try<MACRO> catch<MACRO> finally<MACRO>  TRY \",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"TRY\"},\"TSELEMENTS\":{\"description\":\"Alias of [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nThe `TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"timestamp<LONG>  TSELEMENTS  dateAndTimeElements<LIST<LONG>>\\ntimestamp<LONG> timezone<STRING>  TSELEMENTS  dateAndTimeElements<LIST<LONG>>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"TSELEMENTS\"},\"TSELEMENTS->\":{\"description\":\"The `TSELEMENTS->` function consumes an optional **STRING** timezone and a **LIST** of **LONG** describing a time and date and pushes back the **LONG** timestamp. The **LIST** of **LONG** follows the format given by [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"dateAndTimeElements<LIST<LONG>>  TSELEMENTS->  timestamp<LONG>\\ndateAndTimeElements<LIST<LONG>> timezone<STRING>  TSELEMENTS->  timestamp<LONG>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"K4C4I3KCGJtJJmoy\"},\"TYPEOF\":{\"description\":\"Gets the type of an element.\\n\\nThe `TYPEOF` function consumes the top element on the stack and pushes back a string containing the type. The output could be:\\n+ AGGREGATOR\\n+ BITSET\\n+ BOOLEAN\\n+ BYTES\\n+ CONTEXT\\n+ COUNTER\\n+ DOUBLE\\n+ FILLER\\n+ FILTER\\n+ GEOSHAPE\\n+ GTS\\n+ GTSENCODER\\n+ KEY\\n+ LIST\\n+ LONG\\n+ MACRO\\n+ MAP\\n+ MARK\\n+ MATCHER\\n+ MATRIX\\n+ NULL\\n+ OPERATOR\\n+ PFONT\\n+ PGRAPHICS\\n+ PIMAGE\\n+ PSHAPE\\n+ REDUCER\\n+ SET\\n+ STRING\\n+ VECTOR\\n+ VLIST\\n\\nFor any object introduced by a WarpScript extension whose output of TYPEOF is not in the list thereof, the output would be preceded by \\\"X-\\\".\\n\\nNote: since revision 2.5.0, the TYPEOF output of bucketizers, mappers, reducers is changed from 'MAPPER' to 'AGGREGATOR'.\\n\\n\\n@param `object` Any kind of reference\\n\\n@param `type` The type of the object\\n\\n\",\"signature\":\"object<ANY>  TYPEOF  type<STRING>\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"TYPEOF\"},\"UDF\":{\"description\":\"The `UDF` function invokes a User Defined Function from a Jar. A new function instance is loaded at each invocation.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"signature\":\"class<STRING>  UDF \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UDF\"},\"ULP\":{\"description\":\"Returns the size of the [ULP (Unit in the Last Place)](https://en.wikipedia.org/wiki/Unit_in_the_last_place) for the argument. The ulp for a DOUBLE is the positive distance between this floating-point value and the DOUBLE value next larger in magnitude.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `ulp` Computed ULP.\\n\\n@param `lvalue` List of numeric values.\\n\\n@param `lulp` List of computed ULPs.\\n\\n\",\"signature\":\"value<NUMBER>  ULP  ulp<DOUBLE>\\nlvalue<LIST<NUMBER>>  ULP  lulp<LIST<DOUBLE>>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ULP\"},\"UNBUCKETIZE\":{\"description\":\"Transforms a bucketized Geo Time Series™ into a non bucketized one. Note that this function transforms the original GTS, it does not clone it.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™ instances.\\n\\n\",\"signature\":\"gts<GTS>  UNBUCKETIZE  gts<GTS>\\nlgts<LIST<GTS>>  UNBUCKETIZE  lgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNBUCKETIZE\"},\"UNBUCKETIZE.CALENDAR\":{\"description\":\"On a GTS that is calendar-bucketized, this function replaces the ticks with the timestamp end boundaries of each bucket, and unbucketize it.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `lgts` One or more lists of Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS>  UNBUCKETIZE.CALENDAR  gts<GTS>\\nlgts<LIST<GTS>>  UNBUCKETIZE.CALENDAR  lgts<LIST<GTS>>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"UNBUCKETIZE.CALENDAR\"},\"UNGZIP\":{\"description\":\"Decompresses a byte array containing data compressed by [`GZIP`](doc/GZIP).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"signature\":\"compressed<BYTES>  UNGZIP  uncompressed<BYTES>\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNGZIP\"},\"UNION\":{\"description\":\"Computes the union &#x222a; of two sets.\\n\\nThe `UNION` function consumes two sets from the top of the stack and pushes back its mathematical union.\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x222a; *B*\\n\\n\",\"signature\":\"setA<SET> setB<SET>  UNION  output<SET>\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNION\"},\"UNIQUE\":{\"description\":\"The `UNIQUE` function eliminates duplicate elements on the LIST on the top of the stack.\\nThe order of the resulting LIST is not the same than the original one.\\n\\nIt makes elements of a list unique by converting it to a set temporarily. See [()](/doc/91Z) for more informations.\\n\\n@param `input` The list to parse\\n\\n@param `output` The new list object, without any duplicates\\n\\n\",\"signature\":\"input<LIST>  UNIQUE  output<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNIQUE\"},\"UNLIST\":{\"description\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`]`](/doc/MF).\\n\\n@param `list` List to expand.\\n\\n@param `elts` Elements of `list`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"signature\":\"list<LIST>  UNLIST  mark<MARK> elts<ANY*>\",\"tags\":[\"lists\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNLIST\"},\"UNMAP\":{\"description\":\"Unpacks a map, pushing its keys and values onto the stack along a mark as the deepest stack element such that one can use [`}`](/doc/UF) to rebuild the map.\\n\\n@param `k1` First map key.\\n\\n@param `v1` First map value.\\n\\n@param `kN` Nth map key.\\n\\n@param `vN` Nth map value.\\n\\n@param `map` Map to unpack.\\n\\n@param `mark` Mark indicating the deepest level to consider when building the map.\\n\\n\",\"signature\":\"map<MAP>  UNMAP  mark<MARK> k1<ANY> v1<ANY> kN<ANY> vN<ANY>\",\"tags\":[\"maps\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNMAP\"},\"UNPACK\":{\"description\":\"The `UNPACK` function unpacks a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n* **<**: No bigendian\\n* **>**: Bigendian\\n* **L**: Long\\n* **B**: Boolean\\n* **D**: Double length always equals 64.\\n* **<L32**: No bigendian 32 bits Long\\n\\n@param `list` Pqcked list to unpack\\n\\n@param `format` Format used to unpack\\n\\n@param `result` Unpacked list\\n\\n\",\"signature\":\"list<BYTES> format<STRING>  UNPACK  result<LIST<ANY>>\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"UNPACK\"},\"UNSECURE\":{\"description\":\"The `UNSECURE` function decrypts a secure script. The correct secret MUST have been set unsing [`SECUREKEY`](doc/SECUREKEY) prior to calling this function.\\n\\n@param `secure` STRING with the secure script to decode.\\n\\n@param `script` Decoded scripted.\\n\\n\",\"signature\":\"secure<STRING>  UNSECURE  script<STRING>\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNSECURE\"},\"UNSET\":{\"description\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`)`](/doc/9F).\\n\\n@param `set` Set to expand.\\n\\n@param `elts` Elements of `set`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"signature\":\"set<SET>  UNSET  mark<MARK> elts<ANY*>\",\"tags\":[\"sets\"],\"since\":\"2.6.0\",\"OPB64name\":\"UNSET\"},\"UNTIL\":{\"description\":\"The `UNTIL` function implements an until loop. It takes two macros as arguments from the stack: the code to execute until the condition is true and the condition to evaluate after every iteration.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force UNTIL to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `code` Macro executed on each loop\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"code<MACRO> condition<MACRO>  UNTIL \\ncode<MACRO> condition<MACRO> index<BOOLEAN>  UNTIL \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNTIL\"},\"UNWRAP\":{\"description\":\"Unwraps packed Geo Time Series™ instances.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"signature\":\"wrapped<STRING>  UNWRAP  gts<GTS>\\nwrappedbytes<BYTES>  UNWRAP  gts<GTS>\\nlwrapped<LIST<STRING>>  UNWRAP  lgts<LIST<GTS>>\\nlwrapped<LIST<BYTES>>  UNWRAP  lgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNWRAP\"},\"UNWRAPEMPTY\":{\"description\":\"Unwraps wrapped Geo Time Series™ instances without unpacking the actual datapoints. This is handy to extract the metadata (class, labels, attributes) from a set of wrapped GTS.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"signature\":\"wrapped<STRING>  UNWRAPEMPTY  gts<GTS>\\nwrappedbytes<BYTES>  UNWRAPEMPTY  gts<GTS>\\nlwrapped<LIST<STRING>>  UNWRAPEMPTY  lgts<LIST<GTS>>\\nlwrapped<LIST<BYTES>>  UNWRAPEMPTY  lgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPEMPTY\"},\"UNWRAPENCODER\":{\"description\":\"Unwraps packed Geo Time Series™ into encoders.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `encoder` Encoder with decoded Geo Time Series™ datapoints.\\n\\n@param `lencoder` List of encoders with decoded Geo Time Series™.\\n\\n\",\"signature\":\"wrapped<STRING>  UNWRAPENCODER  encoder<GTSENCODER>\\nwrappedbytes<BYTES>  UNWRAPENCODER  encoder<GTSENCODER>\\nlwrapped<LIST<STRING>>  UNWRAPENCODER  lencoder<LIST<GTSENCODER>>\\nlwrapped<LIST<BYTES>>  UNWRAPENCODER  lencoder<LIST<GTSENCODER>>\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"UNWRAPENCODER\"},\"UNWRAPSIZE\":{\"description\":\"Extracts the size (number of datapoints) of wrapped Geo Time Series™ instances.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `size` Decoded Geo Time Series™ size.\\n\\n@param `lsize` List of decoded Geo Time Series™ sizes.\\n\\n\",\"signature\":\"wrapped<STRING>  UNWRAPSIZE  size<LONG>\\nwrappedbytes<BYTES>  UNWRAPSIZE  size<LONG>\\nlwrapped<LIST<STRING>>  UNWRAPSIZE  lsize<LIST<LONG>>\\nlwrapped<LIST<BYTES>>  UNWRAPSIZE  lsize<LIST<LONG>>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPSIZE\"},\"UPDATE\":{\"description\":\"Pushes Geo Time Series™ data to the Warp 10 instance.\\n\\nThe `UPDATE` function allows you to push data directly from your WarpScript code without having to retrieve the data and use the `/update` endpoint.\\n\\nThe GTS or Encoder instances to push *MUST* have a non empty name and in the case of Geo Time Series™ *MUST* have been renamed (to avoid pushing data by mistake which could override existing data you just retrieved).\\n\\n@param `token` Write token to use for pushing the data.\\n\\n@param `gts` Geo Time Series™ to push.\\n\\n@param `encoder` GTS Encoder to push.\\n\\n@param `list` List containing Geo Time Series™ and/or GTS Encoder instances to push.\\n\\n\",\"signature\":\"gts<GTS> token<STRING>  UPDATE \\nencoder<GTSENCODER> token<STRING>  UPDATE \\nlist<LIST<GTS>> token<STRING>  UPDATE \\nlist<LIST<GTSENCODER>> token<STRING>  UPDATE \",\"tags\":[\"gts\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"UPDATE\"},\"UPDATEOFF\":{\"description\":\"Disables update operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when an update operation is attempted.\\n\\n\",\"signature\":\"message<STRING> secret<STRING>  UPDATEOFF \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEOFF\"},\"UPDATEON\":{\"description\":\"Enables update operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"secret<STRING>  UPDATEON \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEON\"},\"URLDECODE\":{\"description\":\"Decodes a [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) STRING.\\n\\n@param `encoded` Encoded STRING to decode.\\n\\n@param `decoded` Decoded STRING.\\n\\n\",\"signature\":\"encoded<STRING>  URLDECODE  decoded<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLDECODE\"},\"URLENCODE\":{\"description\":\"Encodes a STRING using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and replacing occurrences of '+' with '%20'.\\n\\nThe character set used is [UTF-8](https://en.wikipedia.org/wiki/UTF-8).\\n\\n@param `string` Input STRING to encode.\\n\\n@param `encoded` Encoded version of 'string' using the UTF-8 character set.\\n\\n\",\"signature\":\"string<STRING>  URLENCODE  encoded<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLENCODE\"},\"URLFETCH\":{\"description\":\"The `URLFETCH` function sends HTTP(S) GET requests, waits for the responses and puts them on the stack.\\n\\nFor security reasons, the stack must be authenticated for this function to work, see [`AUTHENTICATE`](/doc/AUTHENTICATE).\\n\\nSince 2.7.0, this function also accepts a MAP of headers.\\n\\n@param `url` The URL to send the GET request to. Must begin with `http://` or `https://`.\\n\\n@param `urls` The list of URLs to send the GET requests to. Each URL must begin with `http://` or `https://`. \\n\\n@param `result` A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\\n\\n@param `headers` \\n\\n\",\"signature\":\"url<STRING>  URLFETCH  result<LIST<LIST>>\\nurl<STRING> headers<MAP>  URLFETCH  result<LIST<LIST>>\\nurls<LIST<STRING>>  URLFETCH  result<LIST<LIST>>\\nurls<LIST<STRING>> headers<MAP>  URLFETCH  result<LIST<LIST>>\",\"tags\":[\"extensions\",\"web\"],\"since\":\"1.0.2\",\"OPB64name\":\"URLFETCH\"},\"UUID\":{\"description\":\"Pushes onto the stack a randomly generated [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\n\\n@param `uuid` Generated UUID string\\n\\n\",\"signature\":\" UUID  uuid<STRING>\",\"tags\":[\"misc\"],\"since\":\"1.0.0\",\"OPB64name\":\"UUID\"},\"V->\":{\"description\":\"The `V->` function converts a Vector (VLIST) on top of the stack into a list.\\n\\n@param `list` Input Vector.\\n\\n@param `result` Result list.\\n\\n\",\"signature\":\"list<VLIST>  V->  result<LIST>\",\"tags\":[\"lists\",\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"KXoy\"},\"VALUEDEDUP\":{\"description\":\"Deletes duplicated values of the Geo Time Series™.\\n\\nThe `VALUEDEDUP` function takes as parameter a **GTS** or a **LIST** of **GTS** and it removes its duplicate values.\\n\\nExpects a boolean indicating whether we keep the oldest or most recent datapoint for a given value.\\n\\n@param `order` Boolean value, true for keeping the oldest datapoint for a given value, false otherwise.\\n\\n@param `gts` Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `lgts` List of Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `dedupgts` Geo Time Series™ with unique values.\\n\\n@param `ldedupgts` List of Geo Time Series™ with unique values.\\n\\n\",\"signature\":\"gts<GTS> order<BOOLEAN>  VALUEDEDUP  dedupgts<GTS>\\nlgts<LIST<GTS>> order<BOOLEAN>  VALUEDEDUP  ldedupgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEDEDUP\"},\"VALUEHISTOGRAM\":{\"description\":\"Produces the value histogram of a Geo Time Series™ or (since 2.2.0) of a GTS Encoder.\\n\\nThe histogram is a map with an entry for each value (used as the map key), with an associated value equal to the number of occurrences of the value in the series.\\n\\nIf the input is a bucketized Geo Time Series™, the `NULL` key will have an associated value which is the number of buckets without values (assuming no datapoints were added at timestamps other than those of buckets).\\n\\nWhen the input is a GTS Encoder, keys may be BigDecimal, LONG, DOUBLE, BOOLEAN or STRING, binary values are not used as keys, their STRING representation (in ISO-8859-1) is used.\\n\\n@param `gts` Geo Time Series™ for which to compute the histogram\\n\\n@param `encoder` GTS Encoder for which to compute the histogram\\n\\n@param `histogram` The value histogram for the input Geo Time Series™ or GTS Encoder\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders\\n\\n@param `lhistogram` The list of value histogram maps\\n\\n\",\"signature\":\"gts<GTS>  VALUEHISTOGRAM  histogram<MAP>\\nencoder<GTSENCODER>  VALUEHISTOGRAM  histogram<MAP>\\nlist<LIST<GTS>>  VALUEHISTOGRAM  lhistogram<LIST<MAP>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEHISTOGRAM\"},\"VALUELIST\":{\"description\":\"Gets values from a **MAP**.\\n\\nThe function `VALUELIST` extracts the values of a **MAP** on the top of the stack and pushes on the stack a list with those values. The **MAP** is consumed.\\n\\n\\n@param `map` Map for which to get the values.\\n\\n@param `values` List of values for the input MAP.\\n\\n\",\"signature\":\"map<MAP>  VALUELIST  values<LIST>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUELIST\"},\"VALUES\":{\"description\":\"Gets the values of Geo Time Series™ or encoders.\\n\\nThe `VALUES` function consumes a Geo Time Series™, an encoder or a list thereof from the stack, and it replaces each instance of Geo Time Series™ or encoder by a list of its values.\\n\\n@param `gts` Geo Time Series™ for which to get the values.\\n\\n@param `lgts` List of Geo Time Series™ for which to get the values.\\n\\n@param `encoder` Encoder for which to get the values.\\n\\n@param `lencoder` List of encoders for which to get the values.\\n\\n@param `values` List of values from the input Geo Time Series™.\\n\\n@param `lvalues` List of list of values from the input Geo Time Series™ list.\\n\\n\",\"signature\":\"gts<GTS>  VALUES  values<LIST>\\nlgts<LIST<GTS>>  VALUES  lvalues<LIST<LIST>>\\nencoder<GTSENCODER>  VALUES  values<LIST>\\nlencoder<LIST<GTSENCODER>>  VALUES  lvalues<LIST<LIST>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUES\"},\"VALUESORT\":{\"description\":\"Sorts values of the Geo Time Series™ in ascending order.\\n\\nThe function `VALUESORT` takes the **GTS** on top of the stack and sort its values (and associated locations/elevations) in ascending order.\\n\\n@param `gts` Geo Time Series™ for which to sort the values.\\n\\n@param `sortedgts` Geo Time Series™ with sorted values.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lsortedgts` List of Geo Time Series™ with sorted values.\\n\\n\",\"signature\":\"gts<GTS>  VALUESORT  sortedgts<GTS>\\nlgts<LIST<GTS>>  VALUESORT  lsortedgts<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESORT\"},\"VALUESPLIT\":{\"description\":\"Splits Geo Time Series™ by values.\\n\\nThe function `VALUESPLIT` takes one **STRING** on top of the stack plus one **GTS** or a list of **GTS**. It splits **GTS** by values and creates a **GTS** for each different value. For each new **GTS**, the label specified in parameter will be added.\\n\\nThe new **GTS** will be sorted by value with `VALUESORT`.\\n\\n@param `label` Label to add to the new Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ to split by value.\\n\\n@param `splitedgts` List of Geo Time Series™ splited by value.\\n\\n@param `lgts` List of Geo Time Series™ to split by value.\\n\\n@param `lsplitedgts` List of Geo Time Series™ splited by value.\\n\\n\",\"signature\":\"gts<GTS> label<STRING>  VALUESPLIT  splitedgts<LIST<GTS>>\\nlgts<LIST<GTS>> label<STRING>  VALUESPLIT  lsplitedgts<LIST<LIST<GTS>>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESPLIT\"},\"VARINT->\":{\"description\":\"The `VARINT` function decodes [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoded numbers.\\n\\n@param `numbers` List of decoded numbers.\\n\\n@param `encoded` Byte array containing the encoded number(s) to decode.\\n\\n@param `count` Maximum number of `LONG`s to decode.\\n\\n@param `processed` Number of bytes which were processed to decode the numbers.\\n\\n\",\"signature\":\"encoded<BYTES>  VARINT->  numbers<LIST<LONG>>\\nencoded<BYTES> count<LONG>  VARINT->  numbers<LIST<LONG>> processed<LONG>\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"KZ4HHJtJAIs\"},\"VARS\":{\"description\":\"Extracts all variables used in a macro. The `VARS` function scans the macro for occurrences of `LOAD`, `STORE` or `CSTORE` functions and inspects the associated variable name. If such a name is not an explicit STRING, the call to `VARS` will fail with an error.\\n\\nThe list of symbols is sorted according to the number of occurrences encountered, decreasing.\\n\\n@param `macro` Macro to inspect.\\n\\n@param `vars` List of encountered symbols.\\n\\n@param `onlyPoprAndStore` Returns only variables used by POPR, CPOPR and STORE. Defaults to false.\\n\\n\",\"signature\":\"macro<MACRO>  VARS  vars<LIST<STRING>>\\nmacro<MACRO> onlyPoprAndStore<BOOLEAN>  VARS  vars<LIST<STRING>>\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"VARS\"},\"VEC->\":{\"description\":\"The `VEC->` function converts a Vector into a list.\\n\\n\\n@param `input` Vector to convert\\n\\n@param `result` list\\n\\n\",\"signature\":\"input<VECTOR>  VEC->  result<LIST>\",\"tags\":[\"lists\",\"conversion\",\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"KZK2AIs\"},\"WEBCALL\":{\"description\":\"Makes an outbound HTTP call.\\n\\nNote that the hosts which may be reached via `WEBCALL` might have been restricted through the use of the `webcall.host.patterns` Warp&nbsp;10 configuration parameter.\\n\\nThe write token is here to check you have the right to send a webcall. If the write token is valid, then the request is sent. It will never be sent in the request.\\n\\nThe call to `WEBCALL` returns a UUID on the stack. The actual request is performed asynchronously, the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`.\\n\\n@param `body` body of the request.\\n\\n@param `headers` map of additionnal http headers.\\n\\n@param `url` supported schemes are http and https.\\n\\n@param `method` `GET` or `POST` string.\\n\\n@param `token` valid write token\\n\\n@param `uuid` the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`\\n\\n\",\"signature\":\"token<STRING> method<STRING> url<STRING> headers<MAP> body<STRING>  WEBCALL  uuid<STRING>\",\"tags\":[\"web\"],\"since\":\"1.0.0\",\"OPB64name\":\"WEBCALL\"},\"WF.ADDREPO\":{\"description\":\"The `WF.ADDREPO` function allows you to add a repository to the list of repositories taken into account by the WarpFleet™ macro resolver.\\n\\nIf the URL is valid (syntaxically), then it will be added at the end of the current list of repositories scanned by the resolver. All repository URLs will then be validated by the `validator` macro defined in the configuration (`warpfleet.macros.validator`). Those URLs for which the `validator` macro returned true will be retained.\\n\\nNote that the repository is only added in the scope of the current stack.\\n\\n@param `url` URL to add to the list of repositories.\\n\\n\",\"signature\":\"url<STRING>  WF.ADDREPO \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.ADDREPO\"},\"WF.GETREPOS\":{\"description\":\"Retrieves the current list of repositories used by the WarpFleet™ resolver.\\n\\nNote that if the configuration disabled the use of this function (via `warpfleet.getrepos.disable`), the returned list will be empty even though it contains repositories.\\n\\n@param `repos` Current list of repository URLs.\\n\\n\",\"signature\":\" WF.GETREPOS  repos<LIST<STRING>>\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.GETREPOS\"},\"WF.SETREPOS\":{\"description\":\"Sets the list of repositories used by the WarpFleet™ resolver to the given value (list of valid URLs).\\n\\nEach URL is tested against WarpFleet™ validator macro to check if it is allowed. Non-valid ones are discarded.\\n\\nNote that this changes the list only for the scope of the current WarpScript execution.\\n\\n@param `repos` List of URLs to use for the WarpFleet™ resolver.\\n\\n\",\"signature\":\"repos<LIST<STRING>>  WF.SETREPOS \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.SETREPOS\"},\"WFOFF\":{\"description\":\"The `WFOFF` function disables the WarpFleet™ Resolver. It can be re-enabled using `WFON`.\\n\\nThis is useful when you want to ensure that a macro call only looks it up locally.\\n\\n\",\"signature\":\" WFOFF \",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFOFF\"},\"WFON\":{\"description\":\"The `WFON` function enables the WarpFleet™ Resolver after it has been disabled by `WFOFF`.\\n\\n\",\"signature\":\" WFON \",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFON\"},\"WHILE\":{\"description\":\"The `WHILE` function implements a while loop. It takes two macros as arguments from the stack: the condition macro to evaluate and the macro to execute while the condition is true.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force WHILE to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `code` Macro executed on each loop\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"condition<MACRO> code<MACRO>  WHILE \\ncondition<MACRO> code<MACRO> index<BOOLEAN>  WHILE \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"WHILE\"},\"WRAP\":{\"description\":\"The `WRAP` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a STRING.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAP  wrapped<STRING>\\nlencoder<GTSENCODER>  WRAP  lwrapped<LIST<STRING>>\\ngts<GTS>  WRAP  wrapped<STRING>\\nlgts<LIST<GTS>>  WRAP  lwrapped<LIST<STRING>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"WRAP\"},\"WRAPFAST\":{\"description\":\"The `WRAPFAST` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a byte array. For fast execution, the content of the GTS is not compressed, so the resulting byte array will be larger than that produced by `WRAPRAW`.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPFAST  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPFAST  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPFAST  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPFAST  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPFAST\"},\"WRAPMV\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPRAWOPT`, `WRAPMV` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPMV  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPMV  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPMV  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPMV  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPMV\"},\"WRAPMV!\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPMV`, `WRAPMV!` attempts to optimize the representation of DOUBLE values for Geo Time Series™ but unlike `WARPMV`, it does not increase the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPMV!  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPMV!  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPMV!  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPMV!  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.6.0\",\"OPB64name\":\"Kp80J3pL7F\"},\"WRAPOPT\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a STRING. The packing performed by `WRAPOPT` differs from that of [`WRAP`](/doc/WRAP) only by the fact that `WRAPOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPOPT  wrapped<STRING>\\nlencoder<GTSENCODER>  WRAPOPT  lwrapped<LIST<STRING>>\\ngts<GTS>  WRAPOPT  wrapped<STRING>\\nlgts<LIST<GTS>>  WRAPOPT  lwrapped<LIST<STRING>>\",\"tags\":[\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPOPT\"},\"WRAPRAW\":{\"description\":\"The `WRAPRAW` function packs a Geo Time Series™ into a byte array.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPRAW  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPRAW  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPRAW  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPRAW  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.7\",\"OPB64name\":\"WRAPRAW\"},\"WRAPRAWOPT\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES. The packing performed by `WRAPRAWOPT` differs from that of [`WRAPRAW`](/doc/WRAPRAW) only by the fact that `WRAPRAWOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"encoder<GTSENCODER>  WRAPRAWOPT  wrapped<BYTES>\\nlencoder<GTSENCODER>  WRAPRAWOPT  lwrapped<LIST<BYTES>>\\ngts<GTS>  WRAPRAWOPT  wrapped<BYTES>\\nlgts<LIST<GTS>>  WRAPRAWOPT  lwrapped<LIST<BYTES>>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPRAWOPT\"},\"WSINFO\":{\"description\":\"Displays informations about WarpScript environments with a given session id. The informations are returned as a map identical to that returned by [`WSPS`](/doc/WSPS):\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `session` Session of the environments to inspect.\\n\\n@param `infos` List of informations about each WarpScript execution environment with 'session' as their session name.\\n\\n\",\"signature\":\"session<STRING>  WSINFO  infos<LIST<MAP>>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSINFO\"},\"WSKILL\":{\"description\":\"Kills the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP) and marking the environment as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to kill.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"signature\":\"uuid<STRING> secret<STRING>  WSKILL  status<BOOLEAN>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILL\"},\"WSKILLSESSION\":{\"description\":\"Kills the execution WarpScript programs by forcing a call to [`STOP`](/doc/STOP) and marking the environments as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `session` Session id of the WarpScript execution environments to kill.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"signature\":\"session<STRING>  WSKILLSESSION  count<LONG>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILLSESSION\"},\"WSNAME\":{\"description\":\"Modifies the name associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stack.name` in the attributes map.\\n\\nName size is limited to 128 characters.\\n\\n@param `name` Name to assign to the calling execution environment, or `NULL` to simply read the current name.\\n\\n@param `current` Name assigned to the execution environment.\\n\\n\",\"signature\":\"name<STRING>  WSNAME  current<STRING>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSNAME\"},\"WSPS\":{\"description\":\"Lists all the registers WarpScript execution environments. For each environment a map is returned with the following fields:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `procs` List of informations about each registered WarpScript execution environment.\\n\\n\",\"signature\":\"secret<STRING>  WSPS  procs<LIST<MAP>>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSPS\"},\"WSSESSION\":{\"description\":\"Modifies the session id associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stackps.session` in the attributes map.\\n\\nSession id size is limited to 128 characters.\\n\\nSession can also be set by setting the `X-Warp10-WarpScriptSession` header.\\n\\nOnce the session has been set it cannot be modified.\\n\\n@param `session` Session id to assign to the calling execution environment, or NULL to simply read the current session id.\\n\\n@param `current` The session id assigned to the execution environment.\\n\\n\",\"signature\":\"session<STRING>  WSSESSION  current<STRING>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSESSION\"},\"WSSTACK\":{\"description\":\"Select the WarpScript™ (*i.e.* SNAPSHOT) format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\" WSSTACK \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"WSSTACK\"},\"WSSTOP\":{\"description\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to stop.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"signature\":\"uuid<STRING> secret<STRING>  WSSTOP  status<BOOLEAN>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOP\"},\"WSSTOPSESSION\":{\"description\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\nThe environments to stop are identified by a session id.\\n\\n@param `session` Session of the WarpScript execution environments to stop.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"signature\":\"session<STRING>  WSSTOPSESSION  count<LONG>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOPSESSION\"},\"Z->\":{\"description\":\"Unpacks LONG values from a [Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) stored in a byte array.\\n\\n@param `bitwidth` Size in bits of the LONG values to extract, from 1 to 63.\\n\\n@param `n` Number of LONG values to extract.\\n\\n@param `z` Byte array containing the Morton Code to unpack.\\n\\n@param `longs` List of extracted LONG values.\\n\\n\",\"signature\":\"z<BYTES> n<LONG> bitwidth<LONG>  Z->  longs<LIST<LONG>>\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"LXoy\"},\"ZDISCORDS\":{\"description\":\"The `ZDISCORDS` function detects discords in a standardized ([`STANDARDIZE`](/doc/STANDARDIZE) Geo Time Series™. The discord detection\\n algorithm is based on identifying outlier patterns in the Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `ZDISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\nGiven the `ZDISCORDS` expects the Geo Time Series™ it operates on to be standardized ([`STANDARDIZE`](/doc/STANDARDIZE), the discord detection \\nalgorithm is more sensitive than that of [`DISCORDS`](/doc/DISCORDS).\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0.\\n\\n@param `overlapping` Flag indicating whether or not the `ZDISCORDS` function should report overlapping discords.\\n\\n@param `maximum` The maximum number of discords to identify.\\n\\n@param `window_size` Window size which is the width of each interval on which the pattern extraction should be performed, a pattern length which will determine how the window is segmented, and lastly a quantization scale which will determine how many different buckets will be used to ventilate the series values. (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `result` Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™.\\n\\n\",\"signature\":\"window_size<LONG> maximum<LONG> overlapping<BOOLEAN> distance<DOUBLE>  ZDISCORDS  result<GTS>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZDISCORDS\"},\"ZDTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be Z-normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"signature\":\"gts1<GTS> gts2<GTS> threshold<DOUBLE>  ZDTW  dtw<DOUBLE>\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"ZDTW\"},\"ZIP\":{\"description\":\"The function ZIP takes a list of lists as parameters. Each list which are not singletons must be of same size.\\n\\nIt returns a list of lists where the i-th list contains the i-th elements of each input list in the same order.\\n\\nAlso, it considers singletons as a list of the same size with a duplicated value.\\n\\n@param `input` List of lists\\n\\n@param `output` List of lists\\n\\n\",\"signature\":\"input<LIST<LIST>>  ZIP  output<LIST<LIST>>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZIP\"},\"ZPATTERNDETECTION\":{\"description\":\"The `ZPATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`ZPATTERNS`](/doc/ZPATTERNS) or [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe `ZPATTERNDETECTION` does not standardize the datapoints in the sliding window, assuming (wrongly) they already are.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `ZPATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform.\\n\\n@param `gts` The single GTS to transform.\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it.\\n\\n@param `lresult` The list of result GTS.\\n\\n\",\"signature\":\"gts<GTS> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNDETECTION  result<GTS>\\nlgts<LIST<GTS>> patterns<LIST<STRING>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNDETECTION  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNDETECTION\"},\"ZPATTERNS\":{\"description\":\"Extracts symbolic patterns from Geo Time Series™ as [`PATTERNS`](/doc/PATTERNS) does, but does not standardize each window, assuming (wrongly) the GTS windows are already standardized.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"gts<GTS> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNS  result<GTS>\\nlgts<LIST<GTS>> wsize<NUMBER> length<NUMBER> scale<NUMBER>  ZPATTERNS  lresult<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNS\"},\"ZSCORE\":{\"description\":\"The 'ZSCORE' function consumes a flag, then normalizes a Geo Time Series™ or a **LIST** of Geo Time Series™ that are below by replacing their values by their [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe flag indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median).\\n\\nIf the GTS isn’t of type **DOUBLE** or if the deviation equals 0, an exception is raised.\\n\\n@param `flag` Indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"signature\":\"gts<GTS> flag<BOOLEAN>  ZSCORE  result<GTS>\\ngtsList<LIST<GTS>> flag<BOOLEAN>  ZSCORE  resultList<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORE\"},\"ZSCORETEST\":{\"description\":\"The ZSCORETEST function detects outliers in a GTS by comparing the Z-score of its values with a given threshold.\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median). If this value is greater than the given threshold, it is flagged as an outlier.\\n\\nA LIST of ticks, corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n@param `gts` The Geo Time Series™ to test\\n\\n@param `result` List of the detected outliers timestamps\\n\\n@param `lgts` The list of Geo Time Series™ to test\\n\\n@param `lresult` List of list of the detected outliers timestamps\\n\\n@param `mad` False: use the mean/sigma, true: use the median/mad to calculate the Z-score\\n\\n@param `trigger` Optional threshold. Default value is 3.5\\n\\n\",\"signature\":\"gts<GTS> mad<BOOLEAN>  ZSCORETEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> mad<BOOLEAN>  ZSCORETEST  lresult<LIST<LIST<LONG>>>\\ngts<GTS> mad<BOOLEAN> trigger<DOUBLE>  ZSCORETEST  result<LIST<LONG>>\\nlgts<LIST<GTS>> mad<BOOLEAN> trigger<DOUBLE>  ZSCORETEST  lresult<LIST<LIST<LONG>>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORETEST\"},\"[\":{\"description\":\"Starts a list creation.\\n\\nThe `[` function creates a list by pushing a mark onto the stack. This is a syntactic help to better present list constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\" [  mark<MARK>\",\"tags\":[\"lists\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lk\"},\"[[\":{\"description\":\"Pushes a MARK on the stack. This is a syntaxic help to better present Vector (VLIST) constructions.\\n \\n\\n@param `mark` A MARK instance.\\n\\n\",\"signature\":\" [[  mark<MARK>\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"Lpg\"},\"[[]]\":{\"description\":\"Pushes an empty Vector onto the stack.\\n\\n@param `vector` Empty Vector.\\n\\n\",\"signature\":\" [[]]  vector<VLIST>\",\"tags\":[\"lists\"],\"since\":\"1.2.13\",\"OPB64name\":\"LphSMF\"},\"[]\":{\"description\":\"The [] function creates an empty LIST on the top of the stack.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newlist` list instance, initialized with content.\\n\\n\",\"signature\":\"content<ANY>  []  newlist<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lpo\"},\"]\":{\"description\":\"Closes a currently open list and pushes it onto the stack.\\n\\n  The `]` function pops from the stack the elements of the list up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"signature\":\"mark<MARK> v1<ANY> vN<ANY>  ]  list<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"MF\"},\"]]\":{\"description\":\"Closes a currently open Vector (VLIST) and pushes it onto the stack. The elements on the stack are those up to the first mark encountered. The mark is discarded.\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"signature\":\"mark<MARK> v1<ANY> vN<ANY>  ]]  list<VLIST>\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"MKo\"},\"^\":{\"description\":\"Performs a bitwise **XOR** operation.\\n\\nThe `^` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **XOR**.\\n\\nSince Warp 10™ 2.1, `^` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be XOR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with XOR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts XOR with mask\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  ^  result<LONG>\\ninputgts<GTS> mask<LONG>  ^  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  ^  outputgts<GTS>\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"MV\"},\"bucketizer.and\":{\"description\":\"The `bucketizer.and` function applies the logical operator **AND** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.and  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.and\"},\"bucketizer.count\":{\"description\":\"The `bucketizer.count` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.count  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count\"},\"bucketizer.count.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.count.exclude-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.exclude-nulls` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.count.exclude-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.exclude-nulls\"},\"bucketizer.count.include-nulls\":{\"description\":\"**Deprecated**: `bucketizer.count.include-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.include-nulls function computes the number of values, including null values, found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.count.include-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.include-nulls\"},\"bucketizer.count.nonnull\":{\"description\":\"The `bucketizer.count.nonnull` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.count.nonnull  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.nonnull\"},\"bucketizer.first\":{\"description\":\"The `bucketizer.first` function returns the first value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.first` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.first  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.first\"},\"bucketizer.join\":{\"description\":\"The `bucketizer.join` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"separator<STRING>  bucketizer.join  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join\"},\"bucketizer.join.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.join.forbid-nulls` has the same behavior as `bucketizer.join`, use `bucketizer.join` instead.\\n\\nThe `bucketizer.join.forbid-nulls` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"separator<STRING>  bucketizer.join.forbid-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join.forbid-nulls\"},\"bucketizer.last\":{\"description\":\"The `bucketizer.last` function returns the last value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.last` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.last  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.last\"},\"bucketizer.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) of each bucket.\\n\\nThe returned location is the median of all the locations in the bucket, and the returned elevation is the median of all the elevations in the bucket.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.mad  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.0\",\"OPB64name\":\"bucketizer.mad\"},\"bucketizer.max\":{\"description\":\"The `bucketizer.max` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.max  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max\"},\"bucketizer.max.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.max.forbid-nulls` has the same behavior as `bucketizer.max`, use `bucketizer.max` instead.\\n\\nThe `bucketizer.max.forbid-nulls` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\nThe `bucketizer.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.max.forbid-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max.forbid-nulls\"},\"bucketizer.mean\":{\"description\":\"The `bucketizer.mean` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.mean  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean\"},\"bucketizer.mean.circular\":{\"description\":\"The `bucketizer.mean.circular` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`bucketizer.mean.circular.exclude-nulls`](/doc/bucketizer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `bucketizer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  bucketizer.mean.circular  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular\"},\"bucketizer.mean.circular.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.mean.circular.exclude-nulls` has the same behavior as `bucketizer.mean.circular`, use `bucketizer.mean.circular` instead.\\n        \\nThe `bucketizer.mean.circular.exclude-nulls` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  bucketizer.mean.circular.exclude-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular.exclude-nulls\"},\"bucketizer.mean.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.mean.exclude-nulls` has the same behavior as `bucketizer.mean`, use `bucketizer.mean` instead.\\n \\nThe `bucketizer.mean.exclude-nulls` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.mean.exclude-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.exclude-nulls\"},\"bucketizer.median\":{\"description\":\"The `bucketizer.median` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.median  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.median\"},\"bucketizer.median.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.median.forbid-nulls` has the same behavior as `bucketizer.median`, use `bucketizer.median` instead.\\n\\nThe `bucketizer.median.forbid-nulls` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.median.forbid-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"2.4.0\",\"OPB64name\":\"bucketizer.median.forbid-nulls\"},\"bucketizer.min\":{\"description\":\"The `bucketizer.min` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.min  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min\"},\"bucketizer.min.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.min.forbid-nulls` has the same behavior as `bucketizer.min`, use `bucketizer.min` instead.\\n\\nThe `bucketizer.min.forbid-nulls` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.min.forbid-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min.forbid-nulls\"},\"bucketizer.or\":{\"description\":\"The `bucketizer.or` function applies the logical operator **OR** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.or  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.or\"},\"bucketizer.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the bucket.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `percentile` Percentile to consider\\n\\n\",\"signature\":\"percentile<NUMBER>  bucketizer.percentile  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.percentile\"},\"bucketizer.rms\":{\"description\":\"The `bucketizer.rms` function returns the root mean square of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are the last one encountered for each bucket.\\n\\nThe `bucketizer.rms` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.rms  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.18\",\"OPB64name\":\"bucketizer.rms\"},\"bucketizer.sd\":{\"description\":\"This bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  bucketizer.sd  result<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd\"},\"bucketizer.sd.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.sd.forbid-nulls` has the same behavior as `bucketizer.sd`, use `bucketizer.sd` instead.\\n\\nThis bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  bucketizer.sd.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd.forbid-nulls\"},\"bucketizer.sum\":{\"description\":\"The `bucketizer.sum` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.sum  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum\"},\"bucketizer.sum.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.sum.forbid-nulls` has the same behavior as `bucketizer.sum`, use `bucketizer.sum` instead.\\n\\nThe `bucketizer.sum.forbid-nulls` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\" bucketizer.sum.forbid-nulls  bucketizer<AGGREGATOR>\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum.forbid-nulls\"},\"d\":{\"description\":\"Converts a number of days (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of days from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of days to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of days\\n\\n\",\"signature\":\"input<NUMBER>  d  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"d\"},\"e\":{\"description\":\"Alias of [E](/doc/GF).\\n\\nThe `e` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"signature\":\" e  eValue<DOUBLE>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"OF\"},\"filler.interpolate\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with a linear interpolation of enclosing values in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading or trailing ticks as there is no possible interpolation.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\" filler.interpolate  filler<FILLER>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.interpolate\"},\"filler.next\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the next value in a Geo Time Series™.\\n\\nNote that this function will not fill missing trailing ticks as there is no next value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\" filler.next  filler<FILLER>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.next\"},\"filler.previous\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the previous value in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading ticks as there is no previous value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\" filler.previous  filler<FILLER>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.previous\"},\"filler.trend\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the centroid of the points computed by projecting trends from both sides of the missing point.\\n\\nNote that this function will fill all missing points.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\" filler.trend  filler<FILLER>\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.trend\"},\"filter.all.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.all.eq  result<FILTER>\\nfilter-value<STRING>  filter.all.eq  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.eq\"},\"filter.all.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.ge  result<FILTER>\\nfilter-value<STRING>  filter.all.ge  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ge\"},\"filter.all.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.gt  result<FILTER>\\nfilter-value<STRING>  filter.all.gt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.gt\"},\"filter.all.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.le  result<FILTER>\\nfilter-value<STRING>  filter.all.le  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.le\"},\"filter.all.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.lt  result<FILTER>\\nfilter-value<STRING>  filter.all.lt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.lt\"},\"filter.all.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value does not equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.all.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.all.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.all.ne  result<FILTER>\\nfilter-value<STRING>  filter.all.ne  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ne\"},\"filter.any.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.any.eq  result<FILTER>\\nfilter-value<STRING>  filter.any.eq  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.eq\"},\"filter.any.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.ge  result<FILTER>\\nfilter-value<STRING>  filter.any.ge  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ge\"},\"filter.any.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.gt  result<FILTER>\\nfilter-value<STRING>  filter.any.gt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.gt\"},\"filter.any.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.le  result<FILTER>\\nfilter-value<STRING>  filter.any.le  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.le\"},\"filter.any.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.lt  result<FILTER>\\nfilter-value<STRING>  filter.any.lt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.lt\"},\"filter.any.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.any.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.any.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.any.ne  result<FILTER>\\nfilter-value<STRING>  filter.any.ne  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ne\"},\"filter.byattr\":{\"description\":\"This filter function only selects the Geo Time Series™ whose attributes match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter<MAP>  filter.byattr  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.byattr\"},\"filter.byclass\":{\"description\":\"This filter function only selects the Geo Time Series™ whose class name matches the filter parameter.\\n\\n@param `filter` The filter parameter is a **STRING**, if it starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter<STRING>  filter.byclass  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.byclass\"},\"filter.bylabels\":{\"description\":\"This filter function only selects the Geo Time Series™ whose labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter<MAP>  filter.bylabels  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bylabels\"},\"filter.bylabelsattr\":{\"description\":\"This filter function only selects the Geo Time Series™ whose attributes or labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes or labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter<MAP>  filter.bylabelsattr  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.bylabelsattr\"},\"filter.bymetadata\":{\"description\":\"Filter GTSs by retaining those whose metadata **exactly** match at least one metadata from the given GTS list. \\n\\nThe metadata consists of the classname and labels.\\n\\n@param `lgts` List of GTSs to extract the metadata from.\\n\\n@param `filter` Filter to apply which will keep only GTSs with exact metadata matching.\\n\\n\",\"signature\":\"lgts<LIST<GTS>>  filter.bymetadata  filter<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bymetadata\"},\"filter.byselector\":{\"description\":\"This filter allow to select GTS with a standard or an extended selector.\\n###### Standard selector: `classname{labelOrAttribute=x}`\\n- If classname match, `filter.byselector` looks into input labels to check if labelOrAttribute exists and equals x. If labelOrAttribute is not found among input labels, it looks into input attributes if the label exists and equals x.\\n###### Extended selector: `classname{labelname=x}{attributename=y}` matches if:\\n- classname matches\\n- input have labelname in its labels, and label value matches\\n- input have attributename in its labels, and attribute value matches\\n\\n###### Selectors example:\\n- `~.*{}` matches everything.\\n- `={}` matches only emtpy classnames, whatever the labels and attributes.\\n- `~.*{label=value}{} filter.byselector` is equivalent to `{ 'label' 'value' } filter.bylabels`.\\n- `~.*{}{attribute~value} filter.byselector` is equivalent to `{ 'attribute' '~value' } filter.byattr`.\\n\\n\\n@param `selector` The selector parameter. It could be a standard or an extended selector.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"selector<STRING>  filter.byselector  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.byselector\"},\"filter.bysize\":{\"description\":\"Filter GTSs by retaining those whose size is contained between specified bounds (inclusive).\\n\\n@param `min` The minimum size\\n\\n@param `max` The maximum size\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"min<LONG> max<LONG>  filter.bysize  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.bysize\"},\"filter.last.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.eq  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.eq  result<FILTER>\\nfilter-value<BOOLEAN>  filter.last.eq  result<FILTER>\\nfilter-value<STRING>  filter.last.eq  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.eq\"},\"filter.last.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.ge  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.ge  result<FILTER>\\nfilter-value<STRING>  filter.last.ge  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ge\"},\"filter.last.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.gt  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.gt  result<FILTER>\\nfilter-value<STRING>  filter.last.gt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.gt\"},\"filter.last.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is less or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.le  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.le  result<FILTER>\\nfilter-value<STRING>  filter.last.le  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.le\"},\"filter.last.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is less than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.lt  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.lt  result<FILTER>\\nfilter-value<STRING>  filter.last.lt  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.lt\"},\"filter.last.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter-value<LONG>  filter.last.ne  result<FILTER>\\nfilter-value<DOUBLE>  filter.last.ne  result<FILTER>\\nfilter-value<BOOLEAN>  filter.last.ne  result<FILTER>\\nfilter-value<STRING>  filter.last.ne  result<FILTER>\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ne\"},\"filter.latencies\":{\"description\":\"Pushes onto the stack a *pseudo* FILTER which computes latencies in a network. It uses the [`FILTER`](/doc/FILTER) framework for conveniency but really returns new GTS.\\n\\nThe input Geo Time Series™ are assumed to have values which are fingerprints of packet payloads. The first GTS is assumed to be the *uplink* and all the other GTS the *downlinks*.\\n\\nThe ticks are the time at which a packet with the given fingerprint was observed.\\n\\nThe generated Geo Time Series™ will have the same ticks as the uplink one, except the values will be latencies instead of packet fingerprints.\\n\\nThe `filter.latencies` function accepts a number of options:\\n\\n| Option | Description |\\n|--------|-------------|\\n| uplink.latency.min | Compute minimum latency on the uplink. |\\n| uplink.latency.max | Compute maximum latency on the uplink. |\\n| downlink.latency.min | Compute minimum latency on each downlink. |\\n| downlink.latency.max | Compute maximum latency on each downlink. |\\n| downlink.matches | Compute the number of matches for each downlink. |\\n| downlinks.totalmatches | Computes the total number of matches across downlinks. |\\n| downlinks.bitsets | Computes a bitset of downlinks which saw the packet (limited to 64 downlinks). |\\n| downlinks.withmatches | Computes the number of downlinks with matches for the given packet. |\\n\\nThis pseudo FILTER is very specific to a networking use case, but it is a good demonstration of the power of WarpScript and its frameworks.\\n\\n@param `options` List of options, see above for their description.\\n\\n@param `maxLatency` Maximum allowable latency, packets with latency above this threshold are ignored.\\n\\n@param `minLatency` Minimum latency, packets with a latency below this threshold are ignored.\\n\\n@param `filter` Instance of `filter.latencies`.\\n\\n\",\"signature\":\"minLatency<LONG> maxLatency<LONG> options<LIST<STRING>>  filter.latencies  filter<FILTER>\",\"tags\":[\"filter\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.latencies\"},\"h\":{\"description\":\"Converts a number of hours (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of hours from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of hours to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of hours\\n\\n\",\"signature\":\"input<NUMBER>  h  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"h\"},\"m\":{\"description\":\"Converts a number of minutes (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of minutes from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of minutes to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of minutes\\n\\n\",\"signature\":\"input<NUMBER>  m  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"m\"},\"mapper.abs\":{\"description\":\"This mapper function returns the absolute value of single value in a sliding window.\\n\\nThe `mapper.abs` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.abs  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.abs\"},\"mapper.add\":{\"description\":\"This mapper function adds a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.add` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.add` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Value to add\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<DOUBLE>  mapper.add  result<AGGREGATOR>\\nconstant<LONG>  mapper.add  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.add\"},\"mapper.and\":{\"description\":\"This mapper function applies the logical operator **AND** on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.and  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.and\"},\"mapper.ceil\":{\"description\":\"This mapper function rounds the single value in a sliding window to the closests greater **LONG**.\\n\\nThe `mapper.ceil` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.ceil  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.ceil\"},\"mapper.count\":{\"description\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.count  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count\"},\"mapper.count.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.count.exclude-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.count.exclude-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.exclude-nulls\"},\"mapper.count.include-nulls\":{\"description\":\"**Deprecated**: `mapper.count.include-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.count.include-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.include-nulls\"},\"mapper.count.nonnull\":{\"description\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.count.nonnull  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.nonnull\"},\"mapper.day\":{\"description\":\"This mapper function returns the day of the tick for which it is computed.\\n\\nThe `mapper.day` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n@param `timezone` Timezone to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"timezone<STRING>  mapper.day  result<AGGREGATOR>\\noffset<NUMBER>  mapper.day  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.day\"},\"mapper.delta\":{\"description\":\"This mapper function computes the delta between the last and first values (delta = last - first) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.delta` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does \\nnot return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.delta  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.delta\"},\"mapper.dotproduct\":{\"description\":\"The `mapper.dotproduct` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"vector<LIST>  mapper.dotproduct  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct\"},\"mapper.dotproduct.positive\":{\"description\":\"The `mapper.dotproduct.positive` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it sets all negative results to 0.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"vector<LIST>  mapper.dotproduct.positive  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.positive\"},\"mapper.dotproduct.sigmoid\":{\"description\":\"The `mapper.dotproduct.sigmoid` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the sigmoid of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"vector<LIST>  mapper.dotproduct.sigmoid  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.sigmoid\"},\"mapper.dotproduct.tanh\":{\"description\":\"The `mapper.dotproduct.tanh` function consumes a vector as parameter (a **LIST* of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the \\n[hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_function) of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"vector<LIST>  mapper.dotproduct.tanh  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.tanh\"},\"mapper.eq\":{\"description\":\"This mapper function returns the first value in a sliding window which is equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.eq` function can be applied to data of any type.\\n\\nThe `mapper.eq` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq  result<AGGREGATOR>\\nparameter<BOOLEAN>  mapper.eq  result<AGGREGATOR>\\nparameter<STRING>  mapper.eq  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.eq\"},\"mapper.eq.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is equal to a given value.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.eq.elev` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.elev\"},\"mapper.eq.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is equal to a given value.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.eq.hhcode` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.hhcode\"},\"mapper.eq.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is equal to a given value.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.eq.lat` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq.lat  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lat\"},\"mapper.eq.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is equal to a given value.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.eq.lon` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq.lon  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.eq.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lon\"},\"mapper.eq.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is equal to a given value.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.eq.tick` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.eq.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.tick\"},\"mapper.exp\":{\"description\":\"This mapper function raises a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.exp` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.exp` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\n> ## Note\\n> The `mapper.exp` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n>\\n> So you are looking for a way to apply the exponential function, ex, to a series of Geo Time Series™. It’s very easy to do it using `mapper.exp` and the\\n> [`e`](/doc/OF) constant.\\n\\n@param `result` Mapper to apply\\n\\n@param `constant` Constant to use\\n\\n\",\"signature\":\"constant<LONG>  mapper.exp  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.exp  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.exp\"},\"mapper.finite\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns its input value only if it is finite (*i.e.* a non DOUBLE or a DOUBLE which is neither NaN nor Infinity).\\n\\n@param `result` Instance of mapper.finite.\\n\\n\",\"signature\":\" mapper.finite  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.finite\"},\"mapper.first\":{\"description\":\"This mapper function returns the first value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.first` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.first  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.first\"},\"mapper.floor\":{\"description\":\"This mapper function rounds the *single value* in a sliding window to the closests lower **LONG**.\\n\\nThe `mapper.floor` function can be applied to data of type **LONG** or **DOUBLE**.      \\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.floor  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.floor\"},\"mapper.ge\":{\"description\":\"This mapper function returns the first value in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ge` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.ge` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge  result<AGGREGATOR>\\nthreshold<STRING>  mapper.ge  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ge\"},\"mapper.ge.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ge.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.elev\"},\"mapper.ge.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ge.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.hhcode\"},\"mapper.ge.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ge.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lat\"},\"mapper.ge.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ge.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ge.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lon\"},\"mapper.ge.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ge.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ge.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.tick\"},\"mapper.geo.approximate\":{\"description\":\"Pushes onto the stack a mapper instance which will transform the input Geo Time Series™ by approximating the location to the givnen resolution.\\n\\nApproximation is done by clearing lower bits of the location [HHCode](https://en.wikipedia.org/wiki/HHCode). At resolution `R`, the lower `64 - 2R` bits are cleared.\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\n\\n\\n@param `resolution` HHCode resolution at which to approximate the locations. Resoluion is an even number between 2 (coarsest) and 32 (finest).\\n\\n@param `result` Instance of mapper.\\n\\n\",\"signature\":\"resolution<LONG>  mapper.geo.approximate  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.approximate\"},\"mapper.geo.clear\":{\"description\":\"Pushes onto the stack a mapper which will discard location and elevation information when applied to a Geo Time Series™.\\n\\nThis mapper can only be applied to single values\\n\\n@param `result` Instance of the `mapper.geo.clear` mapper.\\n\\n\",\"signature\":\" mapper.geo.clear  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.geo.clear\"},\"mapper.geo.fence\":{\"description\":\"This function produces a `mapper` which outputs a `BOOLEAN` for each point with an associated location. The value of the output is `true` if the location is inside the provided `GEOSHAPE` and `false` otherwise.\\nThe geo zone can be defined in [WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using [`GEO.WKT`](/doc/GEO.WKT) or in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) using [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `zone` Geographical zone.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"zone<GEOSHAPE>  mapper.geo.fence  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"2.7.1\",\"OPB64name\":\"mapper.geo.fence\"},\"mapper.geo.outside\":{\"description\":\"This mapper filters the Geo Time Series™, keeping only the points outside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"geoZone<GEOSHAPE>  mapper.geo.outside  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.outside\"},\"mapper.geo.within\":{\"description\":\"This mapper filters the Geo Time Series™, keeping only the points inside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"geoZone<GEOSHAPE>  mapper.geo.within  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.within\"},\"mapper.gt\":{\"description\":\"This mapper function returns the first value in a sliding window which is greater than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.gt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.gt` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt  result<AGGREGATOR>\\nthreshold<STRING>  mapper.gt  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.gt\"},\"mapper.gt.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is greater than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.gt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.elev\"},\"mapper.gt.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.gt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.hhcode\"},\"mapper.gt.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is greater than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.gt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lat\"},\"mapper.gt.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is greater than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.gt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.gt.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lon\"},\"mapper.gt.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is greater than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.gt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.gt.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.tick\"},\"mapper.hdist\":{\"description\":\"The `mapper.hdist` function computes the total distance traveled while going through the points in the sliding window in chronological order. This distance is in meters.\\n\\nThe distance used is the loxodromic distance aka rhumb line. As a consequence, elevation is not taken into account in the distance.\\n\\nIf a point has no position in the sliding window, it is ignored.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe `mapper.hdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `hdistMapper` A function which can be used in a mapper.\\n\\n\",\"signature\":\" mapper.hdist  hdistMapper<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hdist\"},\"mapper.highest\":{\"description\":\"This mapper function returns the value associated with the highest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the most recent is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.highest  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.highest\"},\"mapper.hour\":{\"description\":\"This mapper function returns the hour of the tick for which it is computed.\\n\\nThe `mapper.hour` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"timezone<STRING>  mapper.hour  result<AGGREGATOR>\\noffset<NUMBER>  mapper.hour  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.hour\"},\"mapper.hspeed\":{\"description\":\"This mapper function computes the horizontal speed along the path traveled in the sliding window.\\n\\nThe distance is computed by summing the distances along the rhumb line between two consecutive locations.\\n\\nIf there is only one tick in the sliding window, the speed is 0.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.hspeed` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.hspeed  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hspeed\"},\"mapper.join\":{\"description\":\"This mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"separator<STRING>  mapper.join  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join\"},\"mapper.join.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.join.forbid-nulls` has the same behavior as `mapper.join`, use `mapper.join` instead.\\n\\nThis mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"separator<STRING>  mapper.join.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join.forbid-nulls\"},\"mapper.kernel.cosine\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [cosine kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics.\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.cosine  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.cosine\"},\"mapper.kernel.epanechnikov\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using an [epanechnikov kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.epanechnikov  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.epanechnikov\"},\"mapper.kernel.gaussian\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [gaussian kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.gaussian  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.gaussian\"},\"mapper.kernel.logistic\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [logistic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.logistic  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.logistic\"},\"mapper.kernel.quartic\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [quartic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.quartic  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.quartic\"},\"mapper.kernel.silverman\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [silverman kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.silverman  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.silverman\"},\"mapper.kernel.triangular\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triangular kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.triangular  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triangular\"},\"mapper.kernel.tricube\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [tricube kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.tricube  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.tricube\"},\"mapper.kernel.triweight\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triweight kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.triweight  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triweight\"},\"mapper.kernel.uniform\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [uniform kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bandwidth<LONG> step<LONG>  mapper.kernel.uniform  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.uniform\"},\"mapper.last\":{\"description\":\"This [`mapper`](/doc/MAP) function returns the last value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.last` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.last  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.last\"},\"mapper.le\":{\"description\":\"This mapper function returns the first value in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.le` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.le` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<DOUBLE>  mapper.le  result<AGGREGATOR>\\nthreshold<LONG>  mapper.le  result<AGGREGATOR>\\nthreshold<STRING>  mapper.le  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.le\"},\"mapper.le.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.le.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.le.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.elev\"},\"mapper.le.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.le.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.le.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.hhcode\"},\"mapper.le.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.le.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.le.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.le.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lat\"},\"mapper.le.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.le.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.le.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.le.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lon\"},\"mapper.le.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.le.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.le.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.tick\"},\"mapper.log\":{\"description\":\"This mapper function takes the log of the **single value** in a sliding window in the base used as parameter to `mapper.log`.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.log` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.log` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\nThe `mapper.log` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n\\n@param `constant` Constant parameter\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<DOUBLE>  mapper.log  result<AGGREGATOR>\\nconstant<LONG>  mapper.log  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.log\"},\"mapper.lowest\":{\"description\":\"This mapper function returns the value associated with the lowest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the one appearing first chronologically is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.lowest  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.lowest\"},\"mapper.lt\":{\"description\":\"This mapper function returns the first value in a sliding window which is less than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.lt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.lt` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<DOUBLE>  mapper.lt  result<AGGREGATOR>\\nthreshold<LONG>  mapper.lt  result<AGGREGATOR>\\nthreshold<STRING>  mapper.lt  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.lt\"},\"mapper.lt.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is less than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.lt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.lt.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.elev\"},\"mapper.lt.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.lt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.lt.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.hhcode\"},\"mapper.lt.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is less than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.lt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.lt.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.lt.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lat\"},\"mapper.lt.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is less than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.lt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.lt.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.lt.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lon\"},\"mapper.lt.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is less than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.lt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.lt.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.tick\"},\"mapper.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) over each sliding window.\\n\\nThe returned location is the median of all the locations in the sliding window, and the returned elevation is the median of all the elevations in the window.\\n\\n@param `result` Instance of `mapper.mad`.\\n\\n\",\"signature\":\" mapper.mad  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.2.0\",\"OPB64name\":\"mapper.mad\"},\"mapper.max\":{\"description\":\"This mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.max  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max\"},\"mapper.max.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.max.forbid-nulls` has the same behavior as `mapper.max`, use `mapper.max` instead.\\n\\nThis mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.max.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max.forbid-nulls\"},\"mapper.max.x\":{\"description\":\"This mapper function returns the max between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.max.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<DOUBLE>  mapper.max.x  result<AGGREGATOR>\\nconstant<LONG>  mapper.max.x  result<AGGREGATOR>\\nconstant<STRING>  mapper.max.x  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.max.x  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.max.x\"},\"mapper.mean\":{\"description\":\"This mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.mean  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean\"},\"mapper.mean.circular\":{\"description\":\"This function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`mapper.mean.circular.exclude-nulls`](/doc/mapper.mean.circular.exclude-nulls) if your sliding windows may contain nulls.\\n\\nThe `mapper.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  mapper.mean.circular  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular\"},\"mapper.mean.circular.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.mean.circular.exclude-nulls` has the same behavior as `mapper.mean.circular`, use `mapper.mean.circular` instead.\\n\\nThis function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular.exclude-nulls` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `mapper.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  mapper.mean.circular.exclude-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular.exclude-nulls\"},\"mapper.mean.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.mean.exclude-nulls` has the same behavior as `mapper.mean`, use `mapper.mean` instead.\\n        \\nThis mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.mean.exclude-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.exclude-nulls\"},\"mapper.median\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median`.\\n\\n\",\"signature\":\" mapper.median  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.median\"},\"mapper.median.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.median.forbid-nulls` has the same behavior as `mapper.median`, use `mapper.median` instead.\\n\\nPushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median.forbid-nulls`.\\n\\n\",\"signature\":\" mapper.median.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"2.4.0\",\"OPB64name\":\"mapper.median.forbid-nulls\"},\"mapper.min\":{\"description\":\"This mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.min  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min\"},\"mapper.min.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.min.forbid-nulls` has the same behavior as `mapper.min`, use `mapper.min` instead.\\n\\nThis mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.min.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min.forbid-nulls\"},\"mapper.min.x\":{\"description\":\"This mapper function returns the min between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.min.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<DOUBLE>  mapper.min.x  result<AGGREGATOR>\\nconstant<LONG>  mapper.min.x  result<AGGREGATOR>\\nconstant<STRING>  mapper.min.x  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.min.x  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.min.x\"},\"mapper.minute\":{\"description\":\"This mapper function returns the minute of the tick for which it is computed.\\n\\nThe `mapper.minute` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"timezone<STRING>  mapper.minute  result<AGGREGATOR>\\noffset<NUMBER>  mapper.minute  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.minute\"},\"mapper.mod\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the remainder of a value given a modulus.\\n\\nThis MAPPER can only be applied to a single value.\\n\\n@param `modulus` Modulus to consider when computing the remainder.\\n\\n@param `result` Instance of `mapper.mod`.\\n\\n\",\"signature\":\"modulus<NUMBER>  mapper.mod  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"mapper.mod\"},\"mapper.month\":{\"description\":\"This mapper function returns the month of the tick for which it is computed.\\n\\nThe `mapper.month` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"timezone<STRING>  mapper.month  result<AGGREGATOR>\\noffset<NUMBER>  mapper.month  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.month\"},\"mapper.mul\":{\"description\":\"This mapper function multiplies by a constant the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.mul` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.mul` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<LONG>  mapper.mul  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.mul  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.mul\"},\"mapper.ne\":{\"description\":\"This mapper function returns the first value in a sliding window which is not equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ne` function can be applied to data of any type.\\n\\nThe `mapper.ne` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"parameter<LONG>  mapper.ne  result<AGGREGATOR>\\nparameter<DOUBLE>  mapper.ne  result<AGGREGATOR>\\nparameter<BOOLEAN>  mapper.ne  result<AGGREGATOR>\\nparameter<STRING>  mapper.ne  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ne\"},\"mapper.ne.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is not equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ne.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ne.elev  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.elev\"},\"mapper.ne.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is not equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ne.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ne.hhcode  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.hhcode\"},\"mapper.ne.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ne.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ne.lat  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ne.lat  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lat\"},\"mapper.ne.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ne.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ne.lon  result<AGGREGATOR>\\nthreshold<DOUBLE>  mapper.ne.lon  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lon\"},\"mapper.ne.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is not equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ne.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"threshold<LONG>  mapper.ne.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.tick\"},\"mapper.npdf\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the probability of a value given a normal distribution.\\n\\n@param `mu` Mean of the normal (Gaussian) distribution to consider.\\n\\n@param `sigma` Standard deviation of the normal (Gaussian) distribution to consider.\\n\\n@param `result` Instance of `mapper.npdf`.\\n\\n\",\"signature\":\"mu<DOUBLE> sigma<DOUBLE>  mapper.npdf  result<AGGREGATOR>\",\"tags\":[\"gts\",\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.npdf\"},\"mapper.or\":{\"description\":\"This mapper function applies the logical operator OR on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.or  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.or\"},\"mapper.parsedouble\":{\"description\":\"This mapper function converts a **STRING** single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.parsedouble` function can be applied to data of type **STRING**.\\n\\nThis function expects a [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) \\nparameter in top of the mapper. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `tag` [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) parameter. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"tag<STRING>  mapper.parsedouble  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.2.5\",\"OPB64name\":\"mapper.parsedouble\"},\"mapper.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the sliding window.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `percentile` Percentile to consider.\\n\\n@param `result` Instance of `mapper.percentile`.\\n\\n\",\"signature\":\"percentile<NUMBER>  mapper.percentile  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.percentile\"},\"mapper.pow\":{\"description\":\"This mapper function raises the single value in a sliding window to a constant power.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.pow` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.pow` function must be parameterized with the constant.\\n\\nThe result is always of type DOUBLE.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<LONG>  mapper.pow  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.pow  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.pow\"},\"mapper.product\":{\"description\":\"This mapper function computes the product of all the values found in the sliding window.\\n\\nThe `mapper.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\nOn [bucketized](/doc/BUCKETIZE) Geo Time Series™, it is necessary to fill gaps with [`FILLVALUE`](/doc/FILLVALUE)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.product  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.product\"},\"mapper.rate\":{\"description\":\"This mapper function computes the rate of change between the first and last values (rate = (last - first) / (lastick - firsttick)) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.rate` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value. If the\\nsliding window contains less than 2 values, the rate of change will be 0.0.\\n\\nThe rate of change is expressed in units per second.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.rate  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.rate\"},\"mapper.replace\":{\"description\":\"This mapper function replaces windows with at least one value with a constant. The location and elevation returned are those associated with the most \\nrecent value in the sliding window.\\n\\n@param `constant` constant used for replacement\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"constant<LONG>  mapper.replace  result<AGGREGATOR>\\nconstant<DOUBLE>  mapper.replace  result<AGGREGATOR>\\nconstant<STRING>  mapper.replace  result<AGGREGATOR>\\nconstant<BOOLEAN>  mapper.replace  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.replace\"},\"mapper.rms\":{\"description\":\"This mapper function returns the root mean square of all the values found in each sliding window. The associated location is the last one of the window.\\n\\nThe `mapper.rms` function can only be applied to values of type **LONG** or **DOUBLE**.\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.rms  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.2.18\",\"OPB64name\":\"mapper.rms\"},\"mapper.round\":{\"description\":\"This mapper function rounds the *single value* in a sliding window to the closests **LONG**.\\n\\nThe `mapper.round` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.round  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.round\"},\"mapper.sd\":{\"description\":\"This mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  mapper.sd  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd\"},\"mapper.sd.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.sd.forbid-nulls` has the same behavior as `mapper.sd`, use `mapper.sd` instead.\\n\\nThis mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  mapper.sd.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd.forbid-nulls\"},\"mapper.second\":{\"description\":\"This mapper function returns the second of the tick for which it is computed.\\n\\nThe `mapper.second` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"timezone<STRING>  mapper.second  result<AGGREGATOR>\\noffset<NUMBER>  mapper.second  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.second\"},\"mapper.sigmoid\":{\"description\":\"This mapper function returns the sigmoid of *single value* in a sliding window.\\n\\nThe `mapper.sigmoid` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.sigmoid  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sigmoid\"},\"mapper.sqrt\":{\"description\":\"This mapper function computes the square root of the single value in a sliding window.\\n\\nFor negative numerics, this mapper returns **NaN**. For string values, this mapper returns 0.\\n\\nThe associated location and elevation are those of the single value.\\n\\n> ### Note\\n> The `mapper.sqrt` mapper needs a single value sliding window, i.e. pre-window and post-window to 0\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.sqrt  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.2.11\",\"OPB64name\":\"mapper.sqrt\"},\"mapper.sum\":{\"description\":\"This mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.sum  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum\"},\"mapper.sum.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.sum.forbid-nulls` has the same behavior as `mapper.sum`, use `mapper.sum` instead.\\n\\nThis mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.sum.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum.forbid-nulls\"},\"mapper.tanh\":{\"description\":\"This mapper function returns the hyperbolic tangent of *single value* in a sliding window.\\n\\nThe `mapper.tanh` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.tanh  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tanh\"},\"mapper.tick\":{\"description\":\"This mapper function returns the tick for which it is computed. The associated location and elevation are those of the selected value.\\n\\nThe `mapper.tick` function can be applied to values of any type.        \\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.tick  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.tick\"},\"mapper.toboolean\":{\"description\":\"This mapper function converts the single value in a sliding window to **BOOLEAN**.\\n\\nThe `mapper.toboolean` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.toboolean  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.toboolean\"},\"mapper.todouble\":{\"description\":\"This mapper function converts the single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.todouble` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.todouble  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.todouble\"},\"mapper.tolong\":{\"description\":\"This mapper function converts the single value in a sliding window to **LONG**.\\n\\nThe `mapper.tolong` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.tolong  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tolong\"},\"mapper.tostring\":{\"description\":\"This mapper function converts the single value in a sliding window to **STRING**.\\n\\nThe `mapper.tostring` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.tostring  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tostring\"},\"mapper.truecourse\":{\"description\":\"Pushes onto the stack a mapper which will compute the initial [true course]http://www.edwilliams.org/avform.htm#Crs) on a great circle from the first to the last datapoint in the sliding window.\\n\\nThe location and elevation of the result is that of the tick being considered.\\n\\n@param `result` Instance of mapper.truecourse.\\n\\n\",\"signature\":\" mapper.truecourse  result<AGGREGATOR>\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.truecourse\"},\"mapper.var\":{\"description\":\"This mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  mapper.var  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var\"},\"mapper.var.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.var.forbid-nulls` has the same behavior as `mapper.var`, use `mapper.var` instead.\\n\\nThis mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bessel<BOOLEAN>  mapper.var.forbid-nulls  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var.forbid-nulls\"},\"mapper.vdist\":{\"description\":\"This mapper function computes the total distance traveled in the vertical plane in the sliding window.\\n\\nThe distance is computed by summing the distances between consecutive elevations (this differs from the computation done in [`mapper.vspeed`](/doc/mapper.vspeed))\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed distance is expressed in meters.\\n\\nThe `mapper.vdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.vdist  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vdist\"},\"mapper.vspeed\":{\"description\":\"This mapper function computes the vertical speed between the first and last readings of the sliding window. It does not compute the speed based on the total\\nvertical distance traveled in the sliding window, it only considers its extrema (it differs significantly of what is done for horizontal speed in\\n[`mapper.hspeed`](/doc/mapper.hspeed)), thus the result can be positive or negative.\\n\\nIf one of the extrema of the sliding window has no elevation, no value is returned.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.vspeed` function can be applied to data of any type since it only considers elevations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\" mapper.vspeed  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vspeed\"},\"mapper.weekday\":{\"description\":\"This mapper function returns the day of the week of the tick for which it is computed.\\n\\nThe `mapper.weekday` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"timezone<STRING>  mapper.weekday  result<AGGREGATOR>\\noffset<NUMBER>  mapper.weekday  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.weekday\"},\"mapper.year\":{\"description\":\"This mapper function returns the year of the tick for which it is computed.\\n\\nThe `mapper.year` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"timezone<STRING>  mapper.year  result<AGGREGATOR>\\noffset<NUMBER>  mapper.year  result<AGGREGATOR>\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.year\"},\"max.tick.sliding.window\":{\"description\":\"Pushes onto the stack [`MAXLONG`](/doc/MAXLONG) divided by 2, to serve as the maximum number of ticks left or right of the current tick in a [`MAP`](/doc/MAP) sliding window.\\n\\nGiven that a Geo Time Series™ can have no more than 2**32 datapoints, this value is sufficient to cover the whole GTS left or right of the current tick.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"signature\":\" max.tick.sliding.window  max<LONG>\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.tick.sliding.window\"},\"max.time.sliding.window\":{\"description\":\"Pushes onto the stack half of the minimum LONG value, to serve as a *pre* or *post* extension of a [`MAP`](/doc/MAP) sliding window in time units.\\n\\nThis value spans a lot of time but may not be enough to cover the entirety of a GTS.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"signature\":\" max.time.sliding.window  max<LONG>\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.time.sliding.window\"},\"ms\":{\"description\":\"Converts a number of milliseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of milliseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of milliseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of milliseconds\\n\\n\",\"signature\":\"input<NUMBER>  ms  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ms\"},\"ns\":{\"description\":\"Converts a number of nanoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of nanoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of nanoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of nanoseconds\\n\\n\",\"signature\":\"input<NUMBER>  ns  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ns\"},\"op.add\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter Geo Time Series™.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator forbids null values, *i.e.* if a `null` is encountered, then there will be no result for the given tick.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.add  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.add\"},\"op.add.ignore-nulls\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter GTS.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.add.ignore-nulls  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.add.ignore-nulls\"},\"op.and\":{\"description\":\"To apply an `op.and` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.and  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and\"},\"op.and.ignore-nulls\":{\"description\":\"To apply an `op.and.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and.ignore-nulls` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.and.ignore-nulls  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and.ignore-nulls\"},\"op.div\":{\"description\":\"To apply an `op.div` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.div is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.div` operation can only operate on equivalence classes which have two GTS (if the equivalence class has more than two GTS, there is no result guaranted). It will divide at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.div  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.div\"},\"op.eq\":{\"description\":\"To apply an `op.eq` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.eq is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.eq` operation will check for equality at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.eq  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.eq\"},\"op.ge\":{\"description\":\"To apply an `op.ge` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ge` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ge` operation will check at each tick if the value of the current GTS is greater or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.ge  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ge\"},\"op.gt\":{\"description\":\"To apply an `op.gt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.gt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.gt` operation will check at each tick if the value of the current GTS is greater than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.gt  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.gt\"},\"op.le\":{\"description\":\"To apply an `op.le` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.le` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.le` operation will check at each tick if the value of the current GTS is lesser or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.le  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.le\"},\"op.lt\":{\"description\":\"To apply an `op.lt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.lt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.lt` operation will check at each tick if the value of the current GTS is lesser than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.lt  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.lt\"},\"op.mask\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), retains datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.mask  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mask\"},\"op.mul\":{\"description\":\"To apply an `op.mul` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.mul  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mul\"},\"op.mul.ignore-nulls\":{\"description\":\"To apply an `op.mul.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul.ignore-nulls` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.mul.ignore-nulls  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.mul.ignore-nulls\"},\"op.ne\":{\"description\":\"To apply an `op.ne` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ne` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ne` operation will check for inequality at each tick all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.ne  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ne\"},\"op.negmask\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), removes datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The operator instance.\\n\\n\",\"signature\":\" op.negmask  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.negmask\"},\"op.or\":{\"description\":\"To apply an `op.or` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.or  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or\"},\"op.or.ignore-nulls\":{\"description\":\"To apply an `op.or.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or.ignore-nulls` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.or.ignore-nulls  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or.ignore-nulls\"},\"op.sub\":{\"description\":\"To apply an `op.sub` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.sub` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe sub operator can only operate on equivalence classes which have **exactly two GTS**. It will substract at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\" op.sub  op<OPERATOR>\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.sub\"},\"pi\":{\"description\":\"Alias of [PI](/doc/J3Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"signature\":\" pi  pi<DOUBLE>\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"R5Z\"},\"ps\":{\"description\":\"Converts a number of picoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of picoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of picoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of picoseconds\\n\\n\",\"signature\":\"input<NUMBER>  ps  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ps\"},\"reducer.and\":{\"description\":\"The `reducer.and` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.and  reducer<AGGREGATOR>\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and\"},\"reducer.and.exclude-nulls\":{\"description\":\"The `reducer.and.exclude-nulls` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ \\nwhich are in the same equivalence class, excluding nulls from the computation.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, \\nthe current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.and.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and.exclude-nulls\"},\"reducer.argmax\":{\"description\":\"The `reducer.argmax` function outputs for each tick, the tick and the concatenation separated by ‘,’ of the values of the labels for which the\\nvalue is the maximum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the maximum to report (use 0 to report all), and a **STRING**\\nparameter to choose on which label it operates.\\n\\n@param `maximum` Maximum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"label<STRING> maximum<LONG>  reducer.argmax  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmax\"},\"reducer.argmin\":{\"description\":\"The `reducer.argmin` function outputs for each tick, the tick and the concatenation separated by ‘,’ \\nwith the values of the labels for which the value is the minimum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the minimum to report (use 0 to report all), and a **STRING** \\nparameter to choose on which label it operates.\\n\\n@param `minimum` Minimum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"label<STRING> minimum<LONG>  reducer.argmin  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmin\"},\"reducer.count\":{\"description\":\"The `reducer.count` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe include null version, [`reducer.count.include-nulls`](/doc/reducer.count.include-nulls), will include null values when computing the count. The exclude null version, \\n[`reducer.count.exclude-nulls`](/doc/reducer.count.exclude-nulls), will exclude null values when computing the count.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.count  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count\"},\"reducer.count.exclude-nulls\":{\"description\":\"The `reducer.count.exclude-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.count.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.exclude-nulls\"},\"reducer.count.include-nulls\":{\"description\":\"The `reducer.count.include-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are included.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.count.include-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.include-nulls\"},\"reducer.count.nonnull\":{\"description\":\"The `reducer.count.nonnull` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.count.nonnull  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.nonnull\"},\"reducer.join\":{\"description\":\"The 'reducer.join' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will exclude all null values when computing the join.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"separator<STRING>  reducer.join  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join\"},\"reducer.join.forbid-nulls\":{\"description\":\"Alias of [`reducer.join.nonnull`](/doc/reducer.join.nonnull).\\n\\nThe 'reducer.join.forbid-nulls' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"separator<STRING>  reducer.join.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.forbid-nulls\"},\"reducer.join.nonnull\":{\"description\":\"Alias of [`reducer.join.forbid-nulls`](/doc/reducer.join.forbid-nulls).\\n\\nThe 'reducer.join.nonnull' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"separator<STRING>  reducer.join.nonnull  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.nonnull\"},\"reducer.join.urlencoded\":{\"description\":\"The 'reducer.join.urlencoded' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) charset.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"separator<STRING>  reducer.join.urlencoded  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.urlencoded\"},\"reducer.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) for each ticks. Null values are removed before computing the MAD for each ticks.\\n\\nThe returned location is the median of all the locations and the returned elevation is the median of all the elevations.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.mad  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.2.0\",\"OPB64name\":\"reducer.mad\"},\"reducer.max\":{\"description\":\"The `reducer.max` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will exclude all null values when computing the maximum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.max  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max\"},\"reducer.max.forbid-nulls\":{\"description\":\"Alias of [`reducer.max.nonnull`](/doc/reducer.max.nonnull).\\n\\nThe `reducer.max.forbid-nulls` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.max.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.forbid-nulls\"},\"reducer.max.nonnull\":{\"description\":\"Alias of [`reducer.max.forbid-nulls`](/doc/reducer.max.forbid-nulls).\\n\\nThe `reducer.max.nonnull` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.max.nonnull  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.nonnull\"},\"reducer.mean\":{\"description\":\"The `reducer.mean` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.mean  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean\"},\"reducer.mean.circular\":{\"description\":\"The `reducer.mean.circular` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`reducer.mean.circular.exclude-nulls`](/doc/reducer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `reducer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  reducer.mean.circular  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular\"},\"reducer.mean.circular.exclude-nulls\":{\"description\":\"The `reducer.mean.circular.exclude-nulls` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `reducer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"modulo<NUMBER>  reducer.mean.circular.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular.exclude-nulls\"},\"reducer.mean.exclude-nulls\":{\"description\":\"The `reducer.mean.exclude-nulls` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will exclude all null values when computing the mean.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.mean.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.exclude-nulls\"},\"reducer.median\":{\"description\":\"The `reducer.median` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.median  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.median\"},\"reducer.median.forbid-nulls\":{\"description\":\"The `reducer.median.forbid-nulls` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value, ie ticks do not match between Geo Times Series™ in the same equivalence class, it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.median.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"2.4.0\",\"OPB64name\":\"reducer.median.forbid-nulls\"},\"reducer.min\":{\"description\":\"The `reducer.min` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will exclude all null values when computing the minimum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.min  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min\"},\"reducer.min.forbid-nulls\":{\"description\":\"Alias of [`reducer.min.nonnull`](/doc/reducer.min.nonnull).\\n\\nThe `reducer.min.forbid-nulls` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.min.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.forbid-nulls\"},\"reducer.min.nonnull\":{\"description\":\"Alias of [`reducer.min.forbid-nulls`](/doc/reducer.min.forbid-nulls).\\n\\nThe `reducer.min.nonnull` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.min.nonnull  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.nonnull\"},\"reducer.or\":{\"description\":\"The `reducer.or` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.or  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or\"},\"reducer.or.exclude-nulls\":{\"description\":\"The `reducer.or.exclude-nulls` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.or.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or.exclude-nulls\"},\"reducer.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values for each tick.\\n\\nFor this reducer, GTS must be aligned and must have a value for each tick of each GTS. \\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.percentile  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.percentile\"},\"reducer.product\":{\"description\":\"This reducer function computes the product of all the values for each tick.\\n\\nThe `reducer.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.product  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.product\"},\"reducer.rms\":{\"description\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIf one value is null, there won't be any result for the concerned tick.\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.rms  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms\"},\"reducer.rms.exclude-nulls\":{\"description\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms. Even if input GTS are misaligned, there will be one result per tick.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.rms.exclude-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms.exclude-nulls\"},\"reducer.sd\":{\"description\":\"The `reducer.sd` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"bessel<BOOLEAN>  reducer.sd  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd\"},\"reducer.sd.forbid-nulls\":{\"description\":\"The `reducer.sd.forbid-nulls` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"bessel<BOOLEAN>  reducer.sd.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd.forbid-nulls\"},\"reducer.shannonentropy.0\":{\"description\":\"The `reducer.shannonentropy.0` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 0 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.shannonentropy.0  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.0\"},\"reducer.shannonentropy.1\":{\"description\":\"The `reducer.shannonentropy.1` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 1 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.shannonentropy.1  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.1\"},\"reducer.sum\":{\"description\":\"The `reducer.sum` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.sum  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum\"},\"reducer.sum.forbid-nulls\":{\"description\":\"Alias of [`reducer.sum.nonnull`](/doc/reducer.sum.nonnull).\\n\\nThe `reducer.sum.forbid-nulls` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.sum.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.forbid-nulls\"},\"reducer.sum.nonnull\":{\"description\":\"Alias of [`reducer.sum.forbid-nulls`](/doc/reducer.sum.forbid-nulls).\\n\\nThe `reducer.sum.nonnull` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\" reducer.sum.nonnull  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.nonnull\"},\"reducer.var\":{\"description\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"bessel<BOOLEAN>  reducer.var  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var\"},\"reducer.var.forbid-nulls\":{\"description\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"bessel<BOOLEAN>  reducer.var.forbid-nulls  reducer<AGGREGATOR>\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var.forbid-nulls\"},\"s\":{\"description\":\"Converts a number of seconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of seconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of seconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of seconds\\n\\n\",\"signature\":\"input<NUMBER>  s  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"s\"},\"us\":{\"description\":\"Converts a number of microseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of microseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of microseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of microseconds\\n\\n\",\"signature\":\"input<NUMBER>  us  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"us\"},\"w\":{\"description\":\"Converts a number of weeks (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of weeks from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of weeks to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of weeks\\n\\n\",\"signature\":\"input<NUMBER>  w  output<LONG>\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"w\"},\"{\":{\"description\":\"Starts a map creation.\\n\\nThe `{` function creates a map by pushing a mark onto the stack. This is a syntactic help to better present map constructions. This function behaves like [`MARK`].\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\" {  mark<MARK>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tk\"},\"{}\":{\"description\":\"The {} function creates an empty MAP on the top of the stack.\\n\\n\\n@param `newmap` Empty map instance.\\n\\n\",\"signature\":\" {}  newmap<MAP>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tro\"},\"|\":{\"description\":\"Performs a bitwise **OR** operation.\\n\\nThe `|` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **OR**.\\n \\nSince Warp 10™ 2.1, `|` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be OR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with OR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts OR with mask\\n\\n\",\"signature\":\"p1<LONG> p2<LONG>  |  result<LONG>\\ninputgts<GTS> mask<LONG>  |  maskedgts<GTS>\\ngts1<GTS> gts2<GTS>  |  outputgts<GTS>\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"U.\"},\"||\":{\"description\":\"The `||` operator is a synonymous for [`OR`](/doc/OR).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `||` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"signature\":\"p1<BOOLEAN> p2<BOOLEAN>  ||  result<BOOLEAN>\\nl<LIST>  ||  result<BOOLEAN>\\ngts1<GTS> gts2<GTS>  ||  gtsresult<GTS>\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"U6k\"},\"}\":{\"description\":\"Closes a currently open map and pushes it onto the stack.\\n\\nThe `}` function pops from the stack the elements (key/value pairs) of the map up to the first mark. The marks are consumed.\\n\\n@param `k1` The first key\\n\\n@param `v1` The first value\\n\\n@param `kN` The Nth key\\n\\n@param `vN` The Nth value\\n\\n@param `map` The built map\\n\\n@param `mark` The mark indicating the deepest level to consider when building the map\\n\\n\",\"signature\":\"mark<MARK> k1<ANY> v1<ANY> kN<ANY> vN<ANY>  }  map<MAP>\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"UF\"},\"~\":{\"description\":\"Computes the unary bitwise complement of the long value on top of the stack.\\n\\n@param `param` Value to compute\\n\\n@param `result` Bitwise result\\n\\n\",\"signature\":\"param<LONG>  ~  result<LONG>\",\"tags\":[\"operators\",\"binary\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"UV\"},\"~=\":{\"description\":\"The `~=` operator consumes three parameters from the top of the stack, two operands p1 and p2 and a tolerance factor lambda, \\nand pushes onto the stack true if *|p1-p2| < lambda*, i.e. the difference between the two operands is lesser than lambda.\\n\\nThe two parameters must be of numeric types.\\n\\nThe operator `~=` is useful when making comparaisons between doubles, where floating point operations generate rounding errors.\\n\\n@param `p1` First number\\n\\n@param `p2` Second number\\n\\n@param `lambda` Tolerance factor lambda\\n\\n@param `result` \\n\\n\",\"signature\":\"p2<DOUBLE> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<DOUBLE>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<LONG>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<LONG>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<LONG>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<LONG> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<LONG> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<DOUBLE> p1<COUNTER> lambda<COUNTER>  ~=  result<BOOLEAN>\\np2<COUNTER> p1<DOUBLE> lambda<COUNTER>  ~=  result<BOOLEAN>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"UYo\"}};\n            ","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, IMarkdownString, languages, Position, Range} from 'monaco-editor';\nimport HoverProvider = languages.HoverProvider;\nimport Hover = languages.Hover;\nimport ProviderResult = languages.ProviderResult;\n\nexport abstract class W10HoverProvider implements HoverProvider {\n  languageId: string;\n\n  constructor(languageId: string) {\n    this.languageId = languageId;\n  }\n\n  abstract provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): languages.ProviderResult<languages.Hover>;\n\n  // noinspection JSUnusedLocalSymbols\n  _provideHover(model: editor.ITextModel, position: Position, token: CancellationToken, provider: any): ProviderResult<Hover> {\n    const word = model.getWordAtPosition(position);\n    if (!!word) {\n      const range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n      const name = word.word;\n      const entry = provider[name];\n      if (entry && entry.description) {\n        const signature = (entry.signature || '').split('\\n').map(s => '+ ' + s).join('\\n');\n        const contents: IMarkdownString[] = [\n          {value: '### ' + name},\n          {value: signature},\n          {value: entry.description.replace(/(\\/doc\\/\\w+)/g, x => `https://www.warp10.io${x}`)}\n        ];\n        return {range, contents: W10HoverProvider.toMarkedStringArray(contents)} as Hover;\n      }\n    }\n    return undefined;\n  }\n\n  protected static toMarkedStringArray(contents: IMarkdownString[]): IMarkdownString[] {\n    if (!contents) {\n      return void 0;\n    }\n    if (Array.isArray(contents)) {\n      return contents.map(W10HoverProvider.toMarkdownString);\n    }\n    return [W10HoverProvider.toMarkdownString(contents)];\n  }\n\n  private static toMarkdownString(entry: IMarkdownString): IMarkdownString {\n    if (typeof entry === 'string') {\n      return {value: entry};\n    }\n    return {value: entry.value};\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, languages, Position} from 'monaco-editor';\nimport {globalfunctions as wsGlobals} from '../../../model/wsGlobals';\nimport {W10HoverProvider} from './W10HoverProvider';\nimport {EditorUtils} from './editorUtils';\nimport Hover = languages.Hover;\nimport ProviderResult = languages.ProviderResult;\n\nexport class WSHoverProvider extends W10HoverProvider {\n\n  constructor() {\n    super(EditorUtils.WARPSCRIPT_LANGUAGE);\n  }\n\n  provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover> {\n    return super._provideHover(model, position, token, wsGlobals);\n  }\n}\n","export class Flows {\n  static reference:any[] = [{\"name\":\"!\",\"detail\":\"!( input:BOOLEAN ): result:BOOLEAN\\n!( gtsinput:GTS ): gtsresult:GTS\",\"documentation\":\"Negates a boolean.\\n\\nThe `!` function is synonymous for [`NOT`](/doc/NOT). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nSince Warp 10™ 2.1, `!` can be applied on a boolean GTS to flip all values.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gtsinput` Since 2.1, a GTS with boolean value.\\n\\n@param `gtsresult` Since 2.1, a GTS with negated boolean value. GTS is not sorted by the operation. Metadata are kept.\\n\\n\",\"tags\":[\"logic\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7F\"},{\"name\":\"!=\",\"detail\":\"!=( p1:ANY p2:ANY ): result:BOOLEAN\\n!=( inputgts:GTS constant:ANY ): outgts:GTS\\n!=( constant:ANY inputgts:GTS ): outgts:GTS\\n!=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Tests if both parameters are different.\\n\\nThe `!=` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are different, false otherwise.\\n\\nThe two parameters must be homogeneous of numeric, boolean or string types.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `!=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 !=` is strictly equivalent of a `42 mapper.ne` MAP operation, with a simplified syntax.\\n\\n@param `p1` First parameter to compare, anything except a GTS.\\n\\n@param `p2` Second parameter to compare, anything except a GTS.\\n\\n@param `result` True if p1 and p2 are different, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values different from constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is different from gts2 value.\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7Io\"},{\"name\":\"%\",\"detail\":\"%( divisor:LONG dividend:LONG ): modulo:LONG\\n%( divisor:DOUBLE dividend:LONG ): modulo:DOUBLE\\n%( divisor:LONG dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:DOUBLE dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:COUNTER dividend:COUNTER ): modulo:LONG\\n%( divisor:DOUBLE dividend:COUNTER ): modulo:DOUBLE\\n%( divisor:COUNTER dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:LONG dividend:COUNTER ): modulo:LONG\\n%( divisor:COUNTER dividend:LONG ): modulo:LONG\",\"documentation\":\"The `%` operator consumes two parameters from the top of the stack and pushes back the remainder of the Euclidean division of the first one by the second one.\\n\\nThe two parameters must be of numeric types.\\n\\n@param `dividend` Number divided by divisor\\n\\n@param `divisor` Number used to divide dividend\\n\\n@param `modulo` Modulo of the two given parameters\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8F\"},{\"name\":\"&\",\"detail\":\"&( p1:LONG p2:LONG ): result:LONG\\n&( inputgts:GTS mask:LONG ): maskedgts:GTS\\n&( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Performs a bitwise **AND** operation.\\n\\nThe `&` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **AND**.\\n\\nSince Warp 10™ 2.1, `&` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be AND to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with AND between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts AND with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8V\"},{\"name\":\"&&\",\"detail\":\"&&( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\n&&( l:LIST ): result:BOOLEAN\\n&&( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"documentation\":\"The `&&` operator is a synonymous for [`AND`](/doc/AND).\\n\\nIt performs a logical **&&** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `&&` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical && applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with && between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"8XN\"},{\"name\":\"(\",\"detail\":\"((): mark:MARK\",\"documentation\":\"Starts a set creation.\\n\\nThe `(` function creates a set by pushing a mark onto the stack. This is a syntactic help to better present set constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9.\"},{\"name\":\"()\",\"detail\":\"()( content:ANY ): newset:SET\",\"documentation\":\"The `()` function creates an empty SET on the top of the stack.\\nA Set is a collection that cannot contain duplicate elements.\\n\\nThis is an implementation of java [HashSet](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html). NULL object is permitted. It makes no guarantees as to the iteration order of the set.\\n\\nThe SET object could not be represented on the stack.\\nIt has to be converted in a list to be displayed.\\n\\nStoring GTS into sets do not guarantee uniqueness. each GTS has a hidden id. see example.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newset` set instance, initialized with content.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"91Z\"},{\"name\":\")\",\"detail\":\")( mark:MARK v1:ANY vN:ANY ): set:SET\",\"documentation\":\"Closes a currently open set and pushes it onto the stack.\\n\\nThe `)` function pops from the stack the elements of the set up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `set` The built set\\n\\n@param `mark` The mark indicating the deepest level to consider when building the set\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9F\"},{\"name\":\"*\",\"detail\":\"*( p1:NUMBER p2:NUMBER ): result:NUMBER\\n*( p1:VECTOR p2:NUMBER ): result:VECTOR\\n*( p1:NUMBER p2:VECTOR ): result:VECTOR\\n*( p1:MATRIX p2:NUMBER ): result:MATRIX\\n*( p1:NUMBER p2:MATRIX ): result:MATRIX\\n*( p1:MATRIX p2:VECTOR ): result:VECTOR\\n*( p1:VECTOR p2:MATRIX ): result:VECTOR\\n*( p1:MATRIX p2:MATRIX ): result:VECTOR\\n*( p2:GTS p1:GTS ): result:GTS\\n*( p2:GTS p1:NUMBER ): result:GTS\\n*( p2:NUMBER p1:GTS ): result:GTS\",\"documentation\":\"The `*` operator consumes two parameters from the top of the stack and pushes back the result of multiplying both of them.\\n\\nIf you want to multiply two matrices together, they have to be of the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Multiplication result\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9V\"},{\"name\":\"**\",\"detail\":\"**( b:LONG n:LONG ): result:LONG\\n**( b:DOUBLE n:LONG ): result:DOUBLE\\n**( b:LONG n:DOUBLE ): result:DOUBLE\\n**( b:DOUBLE n:DOUBLE ): result:DOUBLE\\n**( b:COUNTER n:COUNTER ): result:LONG\\n**( b:DOUBLE n:COUNTER ): result:DOUBLE\\n**( b:COUNTER n:DOUBLE ): result:DOUBLE\\n**( b:COUNTER n:LONG ): result:LONG\\n**( b:LONG n:COUNTER ): result:LONG\",\"documentation\":\"Returns the value of the first argument raised to the power of the second argument.\\n\\nThe `**` operator consumes two parameters from the top of the stack (a base **b** and an exponent **n**) and pushes back the result raising b to the power of n,\\ni.e. b<sup>n</sup>. For special cases see [pow()](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double- \\\"javadoc\\\").\\n\\nThe two parameters must be of numeric types.\\n\\n@param `b` First parameter, the base\\n\\n@param `n` Second parameter, the exponent\\n\\n@param `result` The result of b<sup>n</sup>\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9Xc\"},{\"name\":\"+\",\"detail\":\"+( param1:STRING param2:STRING ): result:STRING\\n+( param1:LONG param2:LONG ): result:LONG\\n+( param1:DOUBLE param2:LONG ): result:DOUBLE\\n+( param1:COUNTER param2:LONG ): result:LONG\\n+( param1:LONG param2:DOUBLE ): result:DOUBLE\\n+( param1:DOUBLE param2:DOUBLE ): result:DOUBLE\\n+( param1:COUNTER param2:DOUBLE ): result:DOUBLE\\n+( param1:COUNTER param2:COUNTER ): result:LONG\\n+( param1:DOUBLE param2:COUNTER ): result:DOUBLE\\n+( param1:LONG param2:COUNTER ): result:LONG\\n+( param1:LIST param2:ANY ): result:LIST\\n+( param1:SET param2:ANY ): result:SET\\n+( param1:VECTOR param2:NUMBER ): result:VECTOR\\n+( param1:NUMBER param2:VECTOR ): result:VECTOR\\n+( param1:VECTOR param2:VECTOR ): result:VECTOR\\n+( param1:MACRO param2:MACRO ): result:MACRO\\n+( param1:MATRIX param2:NUMBER ): result:MATRIX\\n+( param1:NUMBER param2:MATRIX ): result:MATRIX\\n+( param1:MATRIX param2:MATRIX ): result:MATRIX\\n+( param2:GTS param1:GTS ): result:GTS\\n+( param2:GTS param1:DOUBLE ): result:GTS\\n+( param2:GTS param1:LONG ): result:GTS\\n+( param2:GTS param1:STRING ): result:GTS\\n+( param2:DOUBLE param1:GTS ): result:GTS\\n+( param2:LONG param1:GTS ): result:GTS\\n+( param2:STRING param1:GTS ): result:GTS\\n+( param1:BYTES param2:BYTES ): result:BYTES\",\"documentation\":\"The `+` operator consumes two parameters from the top of the stack and pushes back the result of adding them.\\n\\nThe meaning of adding depends on the type of parameter:\\n\\n- If both parameters are numbers, the result is the sum of both numbers.\\n\\n- If both parameters are strings, the result is the concatenation of both strings.\\n- If both parameters are byte arrays, the result is the concatenation of both byte arrays (version 2.1+).\\n\\n- If the first parameter is a list, the + operator clones the list and appends the second parameter to the cloned list.\\n\\n- If the first parameter is a set, the + operator clones the set and appends the second parameter to the cloned set.\\n\\n- If both parameters are macros, the result is a macro concatenating the two others in any other case + with throw an exception.\\n\\n- If the first parameter is a vector, the + operator adds the second numeric parameter to each element of the vector.\\n- If the second parameter is a vector, the + operator adds the first numeric parameter to each element of the vector.\\n- If both parameters are vectors, the + operator adds each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If the first parameter is a matrix, the + operator adds the second numeric parameter to each element of the matrix.\\n- If the second parameter is a matrix, the + operator adds the first numeric parameter to each element of the matrix.\\n- If both parameters are matrices, the + operator adds each element of matrices which are on the same index. Matrices must be the same size.\\n- If one of the parameters is a Geo Time Series™, the result will be a Geo Time Series™ of type DOUBLE.\\n\\n@param `param1` First parameter\\n\\n@param `param2` Second parameter\\n\\n@param `result` Result of the addition\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9k\"},{\"name\":\"+!\",\"detail\":\"+!( input:LIST item:ANY ): output:LIST\\n+!( input:SET item:ANY ): output:SET\",\"documentation\":\"The +! operator adds the element on top of the stack to the set or list below it. \\nThe element is added to the existing collection. \\n\\n\\n@param `input` reference to the list or set to be modified\\n\\n@param `output` copy of input list or set reference.\\n\\n@param `item` the item to append to inputlist. Depending on list content, could be any type.\\n\\n\",\"tags\":[\"lists\",\"operators\"],\"since\":\"1.2.0\",\"OPB64name\":\"9m3\"},{\"name\":\"-\",\"detail\":\"-( p1:LONG p2:LONG ): result:LONG\\n-( p1:LONG p2:DOUBLE ): result:DOUBLE\\n-( p1:DOUBLE p2:LONG ): result:DOUBLE\\n-( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\n-( p1:COUNTER p2:COUNTER ): result:LONG\\n-( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\n-( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\n-( p1:LONG p2:COUNTER ): result:LONG\\n-( p1:COUNTER p2:LONG ): result:LONG\\n-( p1:MATRIX p2:MATRIX ): result:MATRIX\\n-( p1:VECTOR p2:VECTOR ): result:VECTOR\\n-( p2:GTS p1:GTS ): result:GTS\\n-( p2:GTS p1:NUMBER ): result:GTS\\n-( p2:NUMBER p1:GTS ): result:GTS\",\"documentation\":\"Subtracts two parameters.\\n\\nThe `-` operator consumes two parameters from the top of the stack and pushes back the result of subtracting the second one from the first one.\\n\\n- If both parameters are numbers, the result is the subtraction of both numbers.\\n\\n- If both parameters are vectors, the - operator subtracts each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If both parameters are matrices, the - operator subtracts each element of matrices which are on the same index. Matrices must be the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Subtraction result\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"AF\"},{\"name\":\"->B64\",\"detail\":\"->B64( input:STRING ): result:STRING\\n->B64( input:BYTES ): result:STRING\",\"documentation\":\"Encodes the string on top of the stack in [base64](https://en.wikipedia.org/wiki/Base64).\\n\\n@param `input` String or byte array to encode\\n\\n@param `result` Base64 encoded string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYF\"},{\"name\":\"->B64URL\",\"detail\":\"->B64URL( input:STRING ): result:STRING\\n->B64URL( bytes:BYTES ): result:STRING\",\"documentation\":\"Encodes the string on top of the stack in [base64url](https://en.wikipedia.org/wiki/Base64#Variants_summary_table).\\n\\n@param `input` String to encode\\n\\n@param `bytes` Byte array to encode\\n\\n@param `result` Base64url encoded string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYGKJZk\"},{\"name\":\"->BIN\",\"detail\":\"->BIN( input:STRING ): output:STRING\\n->BIN( input:BYTES ): output:STRING\",\"documentation\":\"The ->BIN function converts the byte array or the string on top of the stack \\nto its binary representation.\\n\\nApplied on a string, `->BIN` replaces ` 'utf-8' ->BYTES ->BIN `\\n\\nIf the encoded content is not a \\nvalid UTF-8 representation, the resulting string will reflect that. \\n\\n@param `input` Any string or byte array.\\n\\n@param `output` Binary representation of the input.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1HJs\"},{\"name\":\"->BYTES\",\"detail\":\"->BYTES( input:STRING charset:STRING ): output:BYTES\",\"documentation\":\"->BYTES function converts a string into a bytes array given a charset\\nand put the result on top of the stack.\\n\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\nBytes array cannot be represented on the stack.\\n\\n\\n@param `input` String input.\\n\\n@param `charset` Charset to use.\\n\\n@param `output` Byte array representation of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1LKG4Jk\"},{\"name\":\"->DOUBLEBITS\",\"detail\":\"->DOUBLEBITS( number:NUMBER ): bits:LONG\\n->DOUBLEBITS( gts:GTS ): longgts:GTS\",\"documentation\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"tags\":[\"math\",\"gts\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt3IpK1I3K1HKGI\"},{\"name\":\"->ENCODER\",\"detail\":\"->ENCODER( elements:LIST ): output:GTSENCODER\\n->ENCODER( lgts:LIST<GTS> ): output:GTSENCODER\\n->ENCODER( lwrappedgts:LIST<STRING> ): output:GTSENCODER\\n->ENCODER( lrawwrappedgts:LIST<BYTES> ): output:GTSENCODER\",\"documentation\":\"The `->ENCODER` function takes a list of points and encode them in a single encoder. Each point is a list of ( timestamp, latitude, longitude, elevation, value ). Since 2.1.1, a point can also be a Geo Time Series™ or a wrapped one. In that case all the points of the Geo Time Series™ are added to the encoder.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `elements` List of list of ( timestamp, latitude, longitude, elevation, value ). See example to see which element(s) can be omitted.\\n\\n@param `lgts` A list of Geo Time Series™ instances.\\n\\n@param `lwrappedgts` A list of wrapped Geo Time Series™ instances, such as produced by [`WRAP`](/doc/WRAP).\\n\\n@param `lrawwrappedgts` A list of raw wrapped Geo Time Series™ instances, such as produced by [`WRAPRAW`](/doc/WRAPRAW).\\n\\n@param `output` Encoder\\n\\n\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt4IZCEG3KH\"},{\"name\":\"->ENCODERS\",\"detail\":\"->ENCODERS( encoder:GTSENCODER ): output:MAP\\n->ENCODERS( wrappedencoder:STRING ): output:MAP\\n->ENCODERS( rawwrappedencoder:BYTES ): output:MAP\",\"documentation\":\"The `->ENCODERS` function converts an encoder into one encoder per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content, when a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AIt4IZCEG3KHJk\"},{\"name\":\"->FLOATBITS\",\"detail\":\"->FLOATBITS( input:NUMBER ): result:LONG\",\"documentation\":\"Converts a numeric value to a **FLOAT** then to a **LONG** value of the raw bits of its representation.\\n\\nOnly the lower 32 bits of the **LONG** value are significant.\\n\\n@param `input` Double to convert\\n\\n@param `result` Raw bits representation\\n\\n\",\"tags\":[\"math\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt5I3x0K388K4B\"},{\"name\":\"->GEOCELL\",\"detail\":\"->GEOCELL( hhPrefixS:STRING ): geocell:LONG\\n->GEOCELL( hhPrefixB:BYTES ): geocell:LONG\",\"documentation\":\"The `->GEOCELL` function converts a **STRING** or a **BYTES** HHCode prefix to a **LONG** geocell. The length of the input implicitly specifies the resolution of the cell.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `hhPrefixS` A HHCode prefix representing a cell. Resolution is twice the length of the **STRING**.\\n\\n@param `hhPrefixB` A HHCode prefix representing a cell. Resolution is four times the length of the **BYTES**.\\n\\n@param `geocell` The geocell representation.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJx2GJlB\"},{\"name\":\"->GEOHASH\",\"detail\":\"->GEOHASH( lat:DOUBLE lon:DOUBLE ): geohash:STRING\\n->GEOHASH( hhcode:LONG ): geohash:STRING\\n->GEOHASH( shape:GEOSHAPE ): geohashes:LIST<STRING>\",\"documentation\":\"The `->GEOHASH` function packs a latitude and a longitude into a STRING [Geohash](https://en.wikipedia.org/wiki/Geohash), converts a [HHCode](https://en.wikipedia.org/wiki/HHCode) into its Geohash counterpart, or converts a `GEOSHAPE` into a list of Geohashes covering the same geographical area.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `geohash` Geohash string packing the specified latitude and longitude.\\n\\n@param `hhcode` HHCode to transform.\\n\\n@param `shape` `GEOSHAPE` to convert.\\n\\n@param `geohashes` List of Geohashes covering the same area as `shape`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt6GJx7FKC7\"},{\"name\":\"->GEOJSON\",\"detail\":\"->GEOJSON( shape:GEOSHAPE ): geojson:STRING\\n->GEOJSON( shape:GEOSHAPE allCells:BOOLEAN ): geojson:STRING\\n->GEOJSON( wkt:STRING ): geojson:STRING\\n->GEOJSON( wkb:BYTES ): geojson:STRING\",\"documentation\":\"The `->GEOJSON` function translate the given GeoShape into a GeoJSON.\\n\\nThe resulting GeoJSON is a string representing a MultiPolygon geometry. By default, it defines the boundaries of the covered areas and any holes it these areas, if any.\\n\\nIt is also possible for this function to return a GeoJSON representing all the cells in the GeoShape.\\n\\n GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` The resulting GeoJSON.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` WKB bytes\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.1\",\"OPB64name\":\"AIt6GJx9JoxD\"},{\"name\":\"->GEOSHAPE\",\"detail\":\"->GEOSHAPE( geocells:LIST<LONG> ): geoshape:GEOSHAPE\\n->GEOSHAPE( hhPrefixesS:LIST<STRING> ): geoshape:GEOSHAPE\\n->GEOSHAPE( hhPrefixesB:LIST<BYTES> ): geoshape:GEOSHAPE\",\"documentation\":\"The `->GEOSHAPE` function converts a list of **LONG** geocells or HHCode prefixes (**STRING** or **BYTES**) to a **GEOSHAPE**.\\n\\n@param `geocells` List of geocells, as **LONGs**.\\n\\n@param `hhPrefixesS` List of HHCode prefixes, as **STRINGs**.\\n\\n@param `hhPrefixesB` List of HHCode prefixes, as **BYTESs**.\\n\\n@param `geoshape` The resulting **GEOSHAPE**.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJxIH34FGF\"},{\"name\":\"->GTS\",\"detail\":\"->GTS( encoder:GTSENCODER ): output:MAP\\n->GTS( wrappedencoder:STRING ): output:MAP\\n->GTS( rawwrappedencoder:BYTES ): output:MAP\\n->GTS( lencoder:LIST<GTSENCODER> ): loutput:MAP\\n->GTS( lwrappedencoder:LIST<STRING> ): loutput:MAP\\n->GTS( lrawwrappedencoder:LIST<BYTES> ): loutput:MAP\\n->GTS( encoder:GTSENCODER conversionmap:MAP ): conversionoutput:GTS\\n->GTS( wrappedencoder:STRING conversionmap:MAP ): conversionoutput:GTS\\n->GTS( rawwrappedencoder:BYTES conversionmap:MAP ): conversionoutput:GTS\\n->GTS( lencoder:LIST<GTSENCODER> conversionmap:MAP ): conversionoutput:LIST<GTS>\\n->GTS( lwrappedencoder:LIST<STRING> conversionmap:MAP ): conversionoutput:LIST<GTS>\\n->GTS( lrawwrappedencoder:LIST<BYTES> conversionmap:MAP ): conversionoutput:LIST<GTS>\",\"documentation\":\"The `->GTS` function converts an encoder into one GTS per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\n###### Since 2.4.0:\\n- `->GTS` function can also take a conversion MAP input. Using this conversion MAP, the output is always a list of GTS.\\n- The conversion map can also take a list of selectors for each output type.\\n- The conversion map can be empty: In this case, the GTS type is enforced by the type of the first element in the encoder input.\\n- The first selector match stops the research. It means key order matters. See Examples.\\n- A new '.type' label is added to each output GTS. This could be overriden with the 'label.type' parameter of the conversion MAP.\\n- `->GTS` function can handle encoders, or list of encoders.\\n\\n###### What is an encoder ?\\nA Geo Time Series™ is limited to the type of the first value stored.\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content.\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder. Values are GTS.\\n\\n@param `lencoder` List of encoders input (supported since 2.4.0).\\n\\n@param `lwrappedencoder` List of encoders after WRAP (supported since 2.4.0).\\n\\n@param `lrawwrappedencoder` List of encoders after WRAPRAW (supported since 2.4.0).\\n\\n@param `loutput` Map with a key/value per type encountered in the input encoder. Values are a list of GTS.\\n\\n@param `conversionmap` Map with type as keys, selectors or list of selectors as values. The special key `label` allow to change the default `.type` label. Set label to NULL to avoid any new label. The conversion map could be empty.\\n\\n@param `conversionoutput` A GTS, or a list of GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt6K4B\"},{\"name\":\"->GTSHHCODE\",\"detail\":\"->GTSHHCODE( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"documentation\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3J\"},{\"name\":\"->GTSHHCODELONG\",\"detail\":\"->GTSHHCODELONG( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"documentation\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3KBIot6\"},{\"name\":\"->HEX\",\"detail\":\"->HEX( input:STRING ): output:STRING\\n->HEX( input:BYTES ): output:STRING\",\"documentation\":\"Decodes an hex encoded string or a byte array.\\nFor different encodings, use bytes array conversion [`BYTES->`](/doc/F__JGKBhEV).\\n\\n\\nApplied on a string, `->HEX` replaces ` 'utf-8' ->BYTES ->HEX `\\n\\nIf the encoded content is not a\\nvalid UTF-8 representation, the resulting string will reflect that.\\n\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Decoded string of input, assuming utf-8 encoding of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt7GKV\"},{\"name\":\"->HHCODE\",\"detail\":\"->HHCODE( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"documentation\":\"The `->HHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt7H3CEG3J\"},{\"name\":\"->HHCODELONG\",\"detail\":\"->HHCODELONG( lat:NUMBER lon:NUMBER ): hhcode:LONG\",\"documentation\":\"The `->HHCODELONG` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.5\",\"OPB64name\":\"AIt7H3CEG3KBIot6\"},{\"name\":\"->JSON\",\"detail\":\"->JSON( object:ANY ): output:STRING\",\"documentation\":\"The `->JSON` functions serialize structures containing numbers, strings, booleans, lists, vlists and maps which do not reference the same list/map multiple times.\\n\\n@param `object` Object to serialize\\n\\n@param `output` JSON formatted string\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt9JoxD\"},{\"name\":\"->LIST\",\"detail\":\"->LIST( content:ANY* N:LONG ): newlist:LIST\",\"documentation\":\"The `->LIST` function create a list from N elements on the stack.\\nN and the N next elements on the stack are consumed.\\n\\nIf N is greater than current stack depth, the function raises an error.\\n\\n@param `N` The number of elements to take on the top of the stack to build the list.\\n\\n@param `newlist` The list of N elements. [deepest in stack ... TOP-1 ]\\n\\n@param `content` 0 to n elements\\n\\n\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItBHKCJ\"},{\"name\":\"->LONGBYTES\",\"detail\":\"->LONGBYTES( number:LONG nbbytes:LONG ): output:BYTES\\n->LONGBYTES( numberList:LIST<LONG> nbbytes:LONG ): output:BYTES\",\"documentation\":\"`->LONGBYTES` converts a LONG to a byte array. It expects a number of bytes on the top of the stack.\\n\\nSince Warp 10™ 2.1, `->LONGBYTES` can also convert a list of LONG.\\n\\n@param `nbbytes` Number of bytes for number conversion: nbbytes could be 1 to 8. If less than 8, most significant bytes will be truncated.\\n\\n@param `number` must be a LONG\\n\\n@param `output` byte array, from 1 to 8 bytes per number\\n\\n@param `numberList` Since Warp 10 2.1, a list of LONG\\n\\n\",\"tags\":[\"binary\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItBIot6F__JGKB\"},{\"name\":\"->MAP\",\"detail\":\"->MAP( N:LONG content:ANY* content:ANY* ): newmap:MAP\",\"documentation\":\"The ->MAP function creates a MAP from an even number N of elements on the stack. \\nN is consumed off the top of the stack. For each pair, the deepest element is the key, the shallowest is the value.\\n\\n\\n@param `content` 0 to n pairs of key-value elements. Keys must be different.\\n\\n@param `N` Number of content elements to consume on the stack. It must be even.\\n\\n@param `newmap` map instance, initialized with content.\\n\\n\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItCFK.\"},{\"name\":\"->MAT\",\"detail\":\"->MAT( [ input:LIST ] ): result:MATRIX\",\"documentation\":\"The `->MAT` function converts nested lists of numbers (2D array with same number of columns) into a Matrix.\\n\\nMATRIX objects cannot be represented on the stack. \\n\\nMatrix entries must be numbers.\\n\\n\\n@param `input` List of lists of values\\n\\n@param `result` A MATRIX object\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItCFKF\"},{\"name\":\"->MVSTRING\",\"detail\":\"->MVSTRING( input:STRING ): mvstring:STRING\\n->MVSTRING( input:BYTES ): mvstring:STRING\\n->MVSTRING( input:GTS ): mvstring:STRING\\n->MVSTRING( input:GTSENCODER ): mvstring:STRING\",\"documentation\":\"The `->MVSTRING` function generates a STRING representation of an ENCODER in the format expected by the `/update` endpoint for multi values.\\n\\nWhen encountering a binary element, the function attempts to interpret it as a wrapped encoder, if that fails then it will output the element as a binary (`b64:...`) value.\\n\\n@param `input` Wrapped or unwrapped Geo Time Series™ or ENCODER.\\n\\n@param `mvstring` MultiValue format representation of the wrapped encoder/GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItCK_CJJZ_DGk\"},{\"name\":\"->OPB64\",\"detail\":\"->OPB64( input:STRING ): output:STRING\\n->OPB64( input:BYTES ): output:STRING\",\"documentation\":\"Encode a String in order preserving base64. OPB64 is a Base64 like encoding which preserves the lexicographic order of\\nthe original byte arrays in the encoded ones. This is useful to compare encoded byte arrays without having to first decode them.\\n\\n@param `input` Could be a string or a byte array.\\n\\n@param `output` OPB64 of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItEJ37qC.\"},{\"name\":\"->PICKLE\",\"detail\":\"->PICKLE( input:ANY ): output:BYTES\",\"documentation\":\"The `->PICKLE` function converts the object on top of the stack to a Python object and serializes it using Pickle protocol version 2.\\nThe conversion table used is as follow:\\n\\n| WarpScript | Python |\\n|------------|--------|\\n| NULL | None |\\n| BOOLEAN | bool |\\n| BYTES | bytearray |\\n| STRING | str/unicode |\\n| DOUBLE | float |\\n| LONG | int |\\n| LIST | list |\\n| MAP | dict |\\n| SET | set |\\n| GTS | dict |\\n| ENCODER | dict |\\n\\nOther types are unsupported.\\n\\nPython example with `->PICKLE ->HEX` output:\\n```python\\n>>> s=\\\"80025d71002858060000005049434b4c4571015806000000535452494e4771025d7103284b0547400921fb54442d1865652e\\\"\\n>>> import pickle\\n>>> pickle.loads(s.decode(\\\"hex\\\"))\\n[u'PICKLE', u'STRING', [5, 3.141592653589793]]\\n```\\n\\n@param `input` A serializable object\\n\\n@param `output` Pickle encoded content\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"AItFHJCAI3J\"},{\"name\":\"->Q\",\"detail\":\"->Q( w:DOUBLE x:DOUBLE y:DOUBLE z:DOUBLE ): result:LONG\",\"documentation\":\"The `->Q` function consumes on the stack 4 doubles (w, x, y, z, with z being on top) representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion)\\nand push back quaternion representation into a **LONG**.\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `result` Quaternion representation\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItG\"},{\"name\":\"->SET\",\"detail\":\"->SET( input:LIST ): newset:SET\",\"documentation\":\"The -`>SET` function converts a **LIST** on top of the stack into a **SET**.\\n\\nSETs are not viewable, null will be return if it remains on the stack.\\n\\nThe order in the SET is not garanteed, see [`()`](/doc/91Z).\\n\\n\\n@param `input` The input list\\n\\n@param `newset` The new set reference. SETs are not viewable, null remains on the stack.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItIGKF\"},{\"name\":\"->TSELEMENTS\",\"detail\":\"->TSELEMENTS( timestamp:LONG ): dateAndTimeElements:LIST<LONG>\\n->TSELEMENTS( timestamp:LONG timezone:STRING ): dateAndTimeElements:LIST<LONG>\",\"documentation\":\"The `->TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"AItJJoKBGJp4I_GI\"},{\"name\":\"->V\",\"detail\":\"->V( list:LIST ): result:VLIST\\n->V( set:SET ): result:VLIST\",\"documentation\":\"The `->V` function converts a list of objects into a Pig Vector (VLIST).\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `list` Input list\\n\\n@param `set` Input set\\n\\n@param `result` Result list\\n\\n\",\"tags\":[\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"AItL\"},{\"name\":\"->VARINT\",\"detail\":\"->VARINT( number:LONG ): encoded:BYTES\\n->VARINT( numbers:LIST<LONG> ): encoded:BYTES\",\"documentation\":\"The `->VARINT` function encodes a `LONG` or a list of `LONG`s using [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoding. The result is a byte array containing the concatenation of the encoded numbers.\\n\\nThe `->VARINT` function is optimized for encoding unsigned `LONG`s, this means that negative numbers (with the most significant bit set to 1) will be encoded on 10 bytes. In order to reduce this footprint you can pre-process the numbers to encode so they are encoded unsing [ZigZag VarInt](https://developers.google.com/protocol-buffers/docs/encoding#types) encoding. The simple trick is to compute\\n\\n```\\n$value 1 << $value 63 >> ^\\n```\\n\\nthis will have the effect of alternatively encoding positive and negative numbers thus leading to a more efficient footprint for negative numbers.\\n\\nAt decoding time using `VARINT->`, simply undo the *Zig-Zag* trick:\\n\\n```\\n$unsigned 63 << 63 >> $unsigned ^ 1 >>\\n// Flip the top bit\\n$unsigned 1 63 << & ^\\n```\\n\\n@param `number` Single number to encode.\\n\\n@param `numbers` List of numbers to encode.\\n\\n@param `encoded` Byte array containing the encoded number(s).\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"AItLFK88I_F\"},{\"name\":\"->VEC\",\"detail\":\"->VEC( list:LIST ): result:VECTOR\\n->VEC( matrix:MATRIX ): result:VECTOR\",\"documentation\":\"The `->VEC` function converts a list of numbers into a Vector.\\n\\nVectors objects cannot be represented on the stack. \\n\\nVectors entries must be numbers.\\n\\n@param `list` List to convert\\n\\n@param `matrix` Matrix with a single column\\n\\n@param `result` Vector\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItLGJB\"},{\"name\":\"->WKB\",\"detail\":\"->WKB( shape:GEOSHAPE ): wkb:BYTES\\n->WKB( shape:GEOSHAPE allCells:BOOLEAN ): wkb:BYTES\\n->WKB( wkt:STRING ): wkb:BYTES\\n->WKB( geojson:STRING ): wkb:BYTES\",\"documentation\":\"The `->WKB` function converts a GeoJSON **STRING**, a WKT **STRING** or a **SHAPE** to WKB **BYTES**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` The resulting WKB.\\n\\n\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHo7\"},{\"name\":\"->WKT\",\"detail\":\"->WKT( shape:GEOSHAPE ): wkt:STRING\\n->WKT( shape:GEOSHAPE allCells:BOOLEAN ): wkt:STRING\\n->WKT( geojson:STRING ): wkt:STRING\\n->WKT( wkb:BYTES ): wkt:STRING\",\"documentation\":\"The `->WKT` function converts a GeoJSON **STRING**, a WKB **BYTES** or a **SHAPE** to WKT **STRING**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` The resulting  WKT.\\n\\n@param `wkb` WKB bytes.\\n\\n\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHpF\"},{\"name\":\"->Z\",\"detail\":\"->Z( longs:LIST<LONG> bitwidth:LONG ): z:BYTES\",\"documentation\":\"The `->Z` function packs multiple **LONG** arguments into a byte array by interleaving the bits of the arguments. This produces a \\n[Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) value encoding the original arguments. The value might be right padded with bits set to 0 to reach a multiple of 8 bits.\\n\\n@param `bitwidth` Number of bits to consider for each LONG in 'longs', from 1 to 63.\\n\\n@param `longs` List of LONGs to pack. Each LONG *MUST* be positive, i.e. with bit 63 set to 0.\\n\\n@param `z` Byte array containing the packed values.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItP\"},{\"name\":\"/\",\"detail\":\"/( long:LONG long:LONG ): long-result:LONG\\n/( double:DOUBLE long:LONG ): double-result:DOUBLE\\n/( long:LONG double:DOUBLE ): double-result:DOUBLE\\n/( double:DOUBLE double:DOUBLE ): double-result:DOUBLE\\n/( counter:COUNTER counter:COUNTER ): long-result:LONG\\n/( double:DOUBLE counter:COUNTER ): long-result:DOUBLE\\n/( counter:COUNTER double:DOUBLE ): long-result:DOUBLE\\n/( counter:COUNTER long:LONG ): long-result:LONG\\n/( long:LONG counter:COUNTER ): long-result:LONG\\n/( double:VECTOR double:NUMBER ): double-result:VECTOR\\n/( param2:GTS param1:GTS ): result:GTS\\n/( param2:GTS param1:NUMBER ): result:GTS\\n/( param2:NUMBER param1:GTS ): result:GTS\",\"documentation\":\"The `/` operator consumes two parameters from the top of the stack and pushes back the result of dividing the first one by the second one.\\n\\nYou can't devide by zero.\\n\\nThe two parameters must be of numeric types, or Geo Time Series™, or a mix of the two.\\n\\n@param `long` Numeric integer\\n\\n@param `long-result` Numeric floor-rounded integer\\n\\n@param `double` Numeric floating point number\\n\\n@param `double-result` Numeric floating point number\\n\\n@param `counter` Numeric counter\\n\\n@param `param1` First parameter of the division.\\n\\n@param `param2` Second parameter of the division.\\n\\n@param `result` Resulting GTS, of type DOUBLE.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ak\"},{\"name\":\"<\",\"detail\":\"<( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n<( p1:STRING p2:STRING ): result:BOOLEAN\\n<( inputgts:GTS constant:ANY ): outgts:GTS\\n<( constant:ANY inputgts:GTS ): outgts:GTS\\n<( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"The `<` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 < p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <` is strictly equivalent of a `42 mapper.lt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 < p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E.\"},{\"name\":\"<<\",\"detail\":\"<<( number:LONG shift:LONG ): result:LONG\\n<<( inputgts:GTS number:LONG ): maskedgts:GTS\\n<<( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Shifts the bits of a long by a number of positions to the left. The least significant bit is filled with 0 after each shift.\\n\\nSince Warp 10™ 2.1, `<<` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2k\"},{\"name\":\"<=\",\"detail\":\"<=( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n<=( p1:STRING p2:STRING ): result:BOOLEAN\\n<=( inputgts:GTS constant:ANY ): outgts:GTS\\n<=( constant:ANY inputgts:GTS ): outgts:GTS\\n<=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"The `<=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 <= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <=` is strictly equivalent of a `42 mapper.le` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 <= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less or equal than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2o\"},{\"name\":\"==\",\"detail\":\"==( p1:ANY p2:ANY ): result:BOOLEAN\\n==( inputgts:GTS constant:ANY ): outgts:GTS\\n==( constant:ANY inputgts:GTS ): outgts:GTS\\n==( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Tests if both parameters are equal.\\n\\nThe `==` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are equal, false otherwise.\\n\\nThe two parameters must be of numeric, boolean, vector, matrix or string types.\\nFor vector or matrix, the parameters must be the same size.\\n\\nSince 2.1.0, as every other comparison operators, `==` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 ==` is strictly equivalent of a `42 mapper.eq` MAP operation, with a simplified syntax.\\n\\nSince 2.1.1, `==` can be use to check equality between Lists, Maps and Sets. For for details about how this is defined, check the [java documentation](https://docs.oracle.com/en/java/javase/index.html).\\n\\n@param `p1` First parameter to compare\\n\\n@param `p2` Second parameter to compare\\n\\n@param `result` True if p1 and p2 are equal, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values equal to constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value equals gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EIo\"},{\"name\":\">\",\"detail\":\">( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n>( p1:STRING p2:STRING ): result:BOOLEAN\\n>( inputgts:GTS constant:ANY ): outgts:GTS\\n>( constant:ANY inputgts:GTS ): outgts:GTS\\n>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"The `>` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 > p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >` is strictly equivalent of a `42 mapper.gt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 > p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EV\"},{\"name\":\">=\",\"detail\":\">=( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n>=( p1:STRING p2:STRING ): result:BOOLEAN\\n>=( inputgts:GTS constant:ANY ): outgts:GTS\\n>=( constant:ANY inputgts:GTS ): outgts:GTS\\n>=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"The `>=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 >= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >=` is strictly equivalent of a `42 mapper.ge` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 >= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater or equal than gts2 value.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYo\"},{\"name\":\">>\",\"detail\":\">>( number:LONG shift:LONG ): result:LONG\\n>>( inputgts:GTS number:LONG ): maskedgts:GTS\\n>>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after shifting depends on the sign of the unshifted long.\\n\\nSince Warp 10™ 2.1, `>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYs\"},{\"name\":\">>>\",\"detail\":\">>>( number:LONG shift:LONG ): result:LONG\\n>>>( inputgts:GTS number:LONG ): maskedgts:GTS\\n>>>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after each shift is set to 0, regardless of the sign of \\nthe unshifted long.\\n\\nSince Warp 10™ 2.1, `>>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYsy\"},{\"name\":\"ABS\",\"detail\":\"ABS( value:LONG ): result:LONG\\nABS( value:COUNTER ): result:LONG\\nABS( value:DOUBLE ): result:DOUBLE\\nABS( lvalue:LIST<LONG> ): lresult:LIST<LONG>\\nABS( lvalue:LIST<COUNTER> ): lresult:LIST<LONG>\\nABS( lvalue:LIST<DOUBLE> ): lresult:LIST<DOUBLE>\",\"documentation\":\"Computes the absolute value of a number value.\\n\\nThe `ABS` function consumes a numeric value from the top of the stack and pushes back its absolute value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` A numeric value\\n\\n@param `result` The absolute value of the given numeric value.\\n\\n@param `lvalue` A list of numeric values\\n\\n@param `lresult` A list of the absolute values of the given values.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ABS\"},{\"name\":\"ACCEL.CACHE\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.CACHE` function will enable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.CACHE\"},{\"name\":\"ACCEL.NOCACHE\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOCACHE` function will disable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOCACHE\"},{\"name\":\"ACCEL.NOPERSIST\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOPERSIST` function will disable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOPERSIST\"},{\"name\":\"ACCEL.PERSIST\",\"detail\":\"\",\"documentation\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.PERSIST` function will enable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.PERSIST\"},{\"name\":\"ACCEL.REPORT\",\"detail\":\"ACCEL.REPORT(): report:MAP\",\"documentation\":\"The `ACCEL.REPORT` function will produce a map containing informations related to the Warp 10 Accelerator. The following table describes the various keys present in this map:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `accelerated` | Boolean indicating whether or not the last [`FETCH`](/doc/FETCH) accessed the in-memory data managed by the Warp 10 Accelerator. |\\n| `status` | Boolean indicating whether or not the Warp 10 Accelerator is enabled. |\\n| `cache` | Boolean indicating if the in-memory data will be considered for update, fetch and delete operations. |\\n| `persist` | Boolean indicating if the persistent data will be considered for update, fetch and delete operations. |\\n| `chunkcount` | Number of chunks managed by the accelerator for its in-memory data. |\\n| `chunkspan` | Length of each chunk expressed in platform time units. |\\n\\n@param `report` Map containing informations related to the Warp 10 Accelerator\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.REPORT\"},{\"name\":\"ACOS\",\"detail\":\"ACOS( value:NUMBER ): result:DOUBLE\\nACOS( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `ACOS` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arccosine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arccosine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arccosine in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ACOS\"},{\"name\":\"ADDDAYS\",\"detail\":\"ADDDAYS( timestamp:LONG timezone:STRING days:LONG ): result:LONG\\nADDDAYS( timestamp:LONG days:LONG ): result:LONG\\nADDDAYS( tselements:LIST<LONG> days:LONG ): tselementsresult:LIST<LONG>\",\"documentation\":\"Adds days to a timestamp or a tselements.\\n\\nThe `ADDDAYS` function consumes from the top of the stack a number (positive or negative) of days, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the days and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `days` The number of days to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDDAYS\"},{\"name\":\"ADDDURATION\",\"detail\":\"ADDDURATION( timestamp:LONG timezone:STRING duration:STRING ): result:LONG\\nADDDURATION( timestamp:LONG timezone:STRING duration:STRING factor:LONG ): result:LONG\\nADDDURATION( timestamp:LONG duration:STRING ): result:LONG\\nADDDURATION( timestamp:LONG duration:STRING factor:LONG ): result:LONG\\nADDDURATION( tselements:LIST<LONG> duration:STRING ): tselementsresult:LIST<LONG>\\nADDDURATION( tselements:LIST<LONG> duration:STRING factor:LONG ): tselementsresult:LIST<LONG>\",\"documentation\":\"Adds an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) to a timestamp or a tselements.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `duration` The duration\\n\\n@param `factor` The number of durations to add. Can be negative. Default to 1 if not set.\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"2.4.0\",\"OPB64name\":\"ADDDURATION\"},{\"name\":\"ADDEXACT\",\"detail\":\"ADDEXACT( x:NUMBER y:NUMBER ): sum:LONG\\nADDEXACT( list:LIST<NUMBER> ): ssum:LONG\\nADDEXACT( lx:LIST<NUMBER> y:NUMBER ): lsum:LIST<LONG>\",\"documentation\":\"The `ADDEXACT` function consumes two LONGs from the top of the stack and puts back the sum. If the sum overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `sum` The sum of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `ssum` The sum of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lsum` List of **LONG** where each value is the sum of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"ADDEXACT\"},{\"name\":\"ADDMONTHS\",\"detail\":\"ADDMONTHS( timestamp:LONG timezone:STRING months:LONG ): result:LONG\\nADDMONTHS( timestamp:LONG months:LONG ): result:LONG\\nADDMONTHS( tselements:LIST<LONG> months:LONG ): tselementsresult:LIST<LONG>\",\"documentation\":\"Adds months to a timestamp or a tselements.\\n\\nThe `ADDMONTHS` function consumes from the top of the stack a number (positive or negative) of months, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the months and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `months` The number of months to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDMONTHS\"},{\"name\":\"ADDVALUE\",\"detail\":\"ADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:STRING ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BYTES ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BOOLEAN ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:DOUBLE ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:LONG ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:GTSENCODER ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:GTS ): result:GTS\",\"documentation\":\"The `ADDVALUE` function adds a value to a GTS, without checking for tick duplicates. The added data point is appended to the GTS.\\nThe [`SETVALUE`](/doc/SETVALUE) overrides an existing value.\\n\\nThe `ADDVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `ADDVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, for example by using [`GET`](/doc/GET)\\nwith value 0 as parameter.\\n\\nIf latitude or longitude are NaN (not a number), value has only timestamp, elevation, value.\\nIf elevation is NaN (not a number), value has only timestamp, latitude, longitude, value.\\nIf elevation is NaN and longitude or latitude are NaN, value has only timestamp, value.\\n\\nWhen adding a Geo Time Series™ or GTS Encoder value, the value will be wrapped (as when using `WRAPRAW`) and added as a binary value.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Series™\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `result` The Geo Time Series™ with the new datapoint added\\n\\n@param `elevation` Elevation or NaN\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ADDVALUE\"},{\"name\":\"ADDYEARS\",\"detail\":\"ADDYEARS( timestamp:LONG timezone:STRING years:LONG ): result:LONG\\nADDYEARS( timestamp:LONG years:LONG ): result:LONG\\nADDYEARS( tselements:LIST<LONG> years:LONG ): tselementsresult:LIST<LONG>\",\"documentation\":\"Adds years to a timestamp or a tselements.\\n\\nThe `ADDYEARS` function consumes from the top of the stack a number (positive or negative) of years, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the years and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `years` The number of years to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDYEARS\"},{\"name\":\"AESUNWRAP\",\"detail\":\"AESUNWRAP( key:BYTES data:BYTES ): decoded:BYTES\",\"documentation\":\"Unwraps a byte array with the [AES WRAP](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") and pushes back the decrypted data into an bytes array.\\n\\n`AESUNWRAP` removes the a 64bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) added by [`AESWRAP`](/doc/AESWRAP) WarpScript function\\n\\n@param `data` Encoded Byte array.\\n\\n@param `key` Byte array, 128, 192 or 256 bits key.\\n\\n@param `decoded` Decoded Byte array.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESUNWRAP\"},{\"name\":\"AESWRAP\",\"detail\":\"AESWRAP( string:STRING key:BYTES ): encrypted:BYTES\\nAESWRAP( bytes:BYTES key:BYTES ): encrypted:BYTES\",\"documentation\":\"Wraps a byte array or String with the [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt) algorithm and pushes a byte array containing the encrypted data onto the stack.\\n\\n`AESWRAP` adds a 64 bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) prefix to the input in order to protect the encrypted data against AES block determinism as [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") uses a fixed Initialization Vector.\\n\\n@param `key` 128, 192 or 256 bits key to use for encryption.\\n\\n@param `string` String data to encrypt.\\n\\n@param `bytes` Byte array to encrypt.\\n\\n@param `encrypted` Encrypted result.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESWRAP\"},{\"name\":\"AGO\",\"detail\":\"AGO( offset:NUMBER ): timestamp:LONG\",\"documentation\":\"The `AGO` function is a shortcut which enables you to compute timestamps by specifying an offset from the current time.\\n\\n@param `offset` The numbers of ticks in platform time unit to subtract, truncated if floating-point.\\n\\n@param `timestamp` The computed timestamp\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"AGO\"},{\"name\":\"AND\",\"detail\":\"AND( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\nAND( l:LIST ): result:BOOLEAN\\nAND( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"documentation\":\"The `AND` operator is a synonymous for [`&&`](/doc/8XN).\\n\\nIt performs a logical **AND** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `AND` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical AND applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with AND between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"AND\"},{\"name\":\"APPEND\",\"detail\":\"APPEND( inputlist:LIST newitems:LIST ): outputlist:LIST\\nAPPEND( inputmap:MAP newitems:MAP ): outputmap:MAP\\nAPPEND( inputGTS:GTS newitems:GTS ): outputGTS:MAP\",\"documentation\":\"The `APPEND` function consumes two paramters from the top of the stack and appends the LIST, MAP or GTS on top of the stack to the one just below.\\nThe augmented LIST, MAP or GTS is then pushed back on the stack.\\n\\n@param `newitems` items to append to input.\\n\\n@param `inputlist` LIST to be modified.\\n\\n@param `outputlist` The LIST that has been modified\\n\\n@param `inputmap` MAP to be modified.\\n\\n@param `outputmap` The AP that has been modified \\n\\n@param `inputGTS` GTS to be modified.\\n\\n@param `outputGTS` The GTS that has been modified\\n\\n\",\"tags\":[\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPEND\"},{\"name\":\"APPLY\",\"detail\":\"APPLY( [ gts:LIST<GTS>+ labels:LIST op:OPERATOR ] ): result:LIST<GTS>\",\"documentation\":\"The `APPLY` framework provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can do. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` List of resulting GTS, one per equivalence class.\\n\\n@param `op` Operation to perform.\\n\\n\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPLY\"},{\"name\":\"ASENCODERS\",\"detail\":\"ASENCODERS( gts:GTS ): encoder:GTSENCODER\\nASENCODERS( lgts:LIST<GTS> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( wrappedgts:STRING ): encoder:GTSENCODER\\nASENCODERS( lwrappedgts:LIST<STRING> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( rawwrappedgts:BYTES ): encoder:GTSENCODER\\nASENCODERS( lrawwrappedgts:LIST<BYTES> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( encoder:GTSENCODER ): encoder:GTSENCODER\\nASENCODERS( lencoder:LIST<GTSENCODER> ): lencoder:LIST<GTSENCODER>\",\"documentation\":\"The `ASENCODERS` function consumes a Geo Time Series™, a wrap or a raw wrap, or a list thereof and convert each one into an encoder.\\n\\n@param `gts` Geo Time Series™ to be converted.\\n\\n@param `lgts` List of Geo Time Series™ to be converted.\\n\\n@param `wrappedgts` Wrapped Geo Time Series™ to be converted.\\n\\n@param `lwrappedgts` List of wrapped Geo Time Series™ to be converted.\\n\\n@param `rawwrappedgts` Raw wrapped Geo Time Series™ to be converted.\\n\\n@param `lrawwrappedgts` List of raw wrapped Geo Time Series™ to be converted.\\n\\n@param `encoder` Encoder of the given Geo Time Series™.\\n\\n@param `lencoder` List of encoder, one for each given Geo Time Series™.\\n\\n\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"2.2.0\",\"OPB64name\":\"ASENCODERS\"},{\"name\":\"ASIN\",\"detail\":\"ASIN( value:NUMBER ): result:DOUBLE\\nASIN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `ASIN` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arcsine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arcsine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arcsine in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASIN\"},{\"name\":\"ASREGS\",\"detail\":\"ASREGS( macro:MACRO vars:LIST<STRING> ): macro:MACRO\\nASREGS( macro:MACRO ): macro:MACRO\",\"documentation\":\"Replaces in a macro the uses of the given symbols by the use of registers.\\n\\nIf there are not enough registers available, replace each of the symbols from the start of the list until all registers are used.\\n\\nSince 2.6.0, the list of symbols is optional. In that case, `ASREGS` first recursively extracts all the symbols from given the macro and uses that list to do the replacement.\\n\\n@param `macro` Macro to transform.\\n\\n@param `vars` List of symbols.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ASREGS\"},{\"name\":\"ASSERT\",\"detail\":\"ASSERT( condition:BOOLEAN ): \",\"documentation\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise.\\n\\nThe `ASSERT` function consumes a **BOOLEAN** parameter from the top of the stack. If the boolean is **true** the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception.\\n\\n`ASSERT` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASSERT\"},{\"name\":\"ASSERTMSG\",\"detail\":\"ASSERTMSG( condition:BOOLEAN message:STRING ): \",\"documentation\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise and displays a message.\\n\\nThe `ASSERTMSG` function consumes a **BOOLEAN** parameter and a **STRING** parameter from the top of the stack. If the boolean is **true**, the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception with a message displaying the **STRING** parameter.\\n\\n`ASSERTMSG` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n@param `message` The exception message to display if the test fails\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.2.13\",\"OPB64name\":\"ASSERTMSG\"},{\"name\":\"ATAN\",\"detail\":\"ATAN( value:NUMBER ): result:DOUBLE\\nATAN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `ATAN` function consumes a floating point number between -1 et 1 from the top of the stack and pushes back its arctangent in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arctangent in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arctangent in radians of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATAN\"},{\"name\":\"ATAN2\",\"detail\":\"ATAN2( y:NUMBER x:NUMBER ): result:DOUBLE\\nATAN2( y:NUMBER lx:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nATAN2( ly:LIST<NUMBER> x:NUMBER ): lresult:LIST<DOUBLE>\",\"documentation\":\"ATAN2 function returns the polar angle theta (azimut) from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of `] -pi  pi ]`.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `result` theta in polar coordinates\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `lresult` List of thetas in polar coordinates\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.2.13\",\"OPB64name\":\"ATAN2\"},{\"name\":\"ATBUCKET\",\"detail\":\"ATBUCKET( gts:GTS index:LONG ): result:LIST\",\"documentation\":\"The `ATBUCKET` function consumes a bucketized GTS from the stack, looks at its `index`-th bucket and puts on the stack a\\nlist with the timestamp, latitude, longitude, elevation and value for this bucket.\\n\\n@param `gts` Bucketized Geo Time Series™\\n\\n@param `index` Index of the bucket\\n\\n@param `result` List with the timestamp, latitude, longitude, elevation and value for the index-th bucket of the GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATBUCKET\"},{\"name\":\"ATINDEX\",\"detail\":\"ATINDEX( gts:GTS index:NUMBER ): data:LIST\\nATINDEX( lgts:LIST<GTS> index:NUMBER ): ldata:LIST<LIST>\",\"documentation\":\"The `ATINDEX` function consumes a Geo Time Series™ or a list thereof from the stack, looks at its index-th point and put on the stack a list with the timestamp, longitude, \\nlatitude, elevation and value for the `index`-th point of the GTS.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the GTS.\\n\\n@param `index` Index of the tick, truncated if floating-point.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATINDEX\"},{\"name\":\"ATTICK\",\"detail\":\"ATTICK( gts:GTS timestamp:LONG ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:LONG ): ldata:LIST<LIST>\\nATTICK( gts:GTS timestamp:COUNTER ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:COUNTER ): ldata:LIST<LIST>\\nATTICK( gts:GTS timestamp:DOUBLE ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:DOUBLE ): ldata:LIST<LIST>\",\"documentation\":\"The `ATTICK` function consumes a Geo Time Series™ from the stack, looks at its tick-th tick (the data point with a timestamp tick) and put on the \\nstack a list with the timestamp, latitude, longitude, elevation and value for that data point.\\n\\nIf there is no data point with tick timestamp, it return a list with timestamp, latitude, longitude and elevation at **NaN** and value at **null**.\\n\\n@param `timestamp` Timestamp at which to take the data, if it is a floating-point value, it is truncated.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTICK\"},{\"name\":\"ATTRIBUTES\",\"detail\":\"ATTRIBUTES( gts:GTS ): return:MAP\\nATTRIBUTES( encoder:GTSENCODER ): return:MAP\",\"documentation\":\"Retrieves the attributes of a Geo Time Series™.\\n\\nThe `ATTRIBUTES` function takes a **GTS** on top of the stack and push back a **MAP** including all its attributes.\\n\\nAn attribute corresponds to a tag for a specific series.\\nThe attribute system allows the user to add some information that can change in a series.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `encoder` The input Geo Time Series™ Encoder\\n\\n@param `return` The attributes MAP of the input Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTRIBUTES\"},{\"name\":\"AUTHENTICATE\",\"detail\":\"AUTHENTICATE( token:STRING ): \",\"documentation\":\"The `AUTHENTICATE` function authenticates the current stack with the **read token** on top of the stack. This function removes the token from the stack.\\n\\nInside a WarpScript, the stack could be authenticated only once. An exception is thrown when the stack is already authenticated.\\n\\n@param `token` Read token\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"AUTHENTICATE\"},{\"name\":\"B64->\",\"detail\":\"B64->( content:STRING ): result:BYTES\",\"documentation\":\"Decodes the [base64](http://tools.ietf.org/html/rfc4648#section-4) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoAIs\"},{\"name\":\"B64TOHEX\",\"detail\":\"B64TOHEX( content:STRING ): result:STRING\",\"documentation\":\"Decodes the  [base64](http://tools.ietf.org/html/rfc4648#section-4) content on top of the stack and immediately re-encode it in hexadecimal.\\nThis enables you to convert encoded content which would not be valid UTF-8 encoding from base64 to hexadecimal. \\nAs the string are URL encoded, the symbol `+` have to be replaced by `%2B`, otherwise a space will replace the `+` in the string.\\n\\n@param `content` String to convert\\n\\n@param `result` Hexadecimal converted string\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"B64TOHEX\"},{\"name\":\"B64URL->\",\"detail\":\"B64URL->( content:STRING ): result:BYTES\",\"documentation\":\"Decodes the [base64url](http://tools.ietf.org/html/rfc4648#section-5) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoKK8BAIs\"},{\"name\":\"BBOX\",\"detail\":\"BBOX( gts:GTS ): [  minlat:DOUBLE  minlon:DOUBLE  maxlat:DOUBLE  maxlon:DOUBLE  ]\\nBBOX( lgts:LIST<GTS> ): extremas:LIST<LIST<DOUBLE>>\",\"documentation\":\"The `BBOX` function computes the bounding box of a Geo Time Series™ or a list thereof. It returns a list with extremas, or a list of list of extremas.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `minlat` Latitude of lower left of bounding box.\\n\\n@param `minlon` Longitude of lower left of bounding box.\\n\\n@param `maxlat` Latitude of upper right of bounding box.\\n\\n@param `maxlon` Longitude of upper right of bounding box.\\n\\n@param `extremas` List of list containing minlat, minlon, maxlat, maxlon, for every GTS in lgts.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BBOX\"},{\"name\":\"BIN->\",\"detail\":\"BIN->( binary:STRING ): result:BYTES\",\"documentation\":\"The `->BIN` function decodes a binary string representation into a bytes array.\\n\\n@param `binary` The binary string representation\\n\\n@param `result` The bytes array\\n\\n\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"FZ_DAIs\"},{\"name\":\"BINTOHEX\",\"detail\":\"BINTOHEX( content:STRING ): result:STRING\",\"documentation\":\"Converts a string representing a binary number into a string representing a hexadecimal number.\\n\\nThe `BINTOHEX` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from binary to hexadecimal.\\n\\n@param `content` The string representing a binary number\\n\\n@param `result` The string representing a hexadecimal number\\n\\n\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"BINTOHEX\"},{\"name\":\"BITCOUNT\",\"detail\":\"BITCOUNT( bitset:BITSET ): cardinality:LONG length:LONG\",\"documentation\":\"Returns the logical size and the cardinality of a [BitSet](https://docs.oracle.com/javase/8/docs/api/java/util/BitSet.html).\\n\\nThe `BITCOUNT` function consumes a bitset on the top of the stack and push back its logical size and its cardinality.\\n  * The logical size is the index of the highest bit set to true plus one.\\n  * The cardinality is the number of bit set to true.\\n\\n@param `bitset` The BitSet to count\\n\\n@param `length` The logical size of the BitSet\\n\\n@param `cardinality` The number of bits set to true\\n\\n\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITCOUNT\"},{\"name\":\"BITGET\",\"detail\":\"BITGET( bitset:BITSET index:LONG ): return:BOOLEAN\",\"documentation\":\"Returns the value of the bit with the specified index.\\n\\nThe `BITGET` function consumes a bitset and a long on the top of the stack. It returns the value of the bit with the specified index. The bit index starts at 0 from the right.\\n\\n@param `index` The bit index\\n\\n@param `bitset` The bitset\\n\\n@param `return` The value of the bit with the specified index\\n\\n\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.5\",\"OPB64name\":\"BITGET\"},{\"name\":\"BITSTOBYTES\",\"detail\":\"BITSTOBYTES( bitset:BITSET ): result:BYTES\",\"documentation\":\"Converts a bitset into a bytes array.\\n\\n@param `bitset` Bitset\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"bitset\",\"binary\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITSTOBYTES\"},{\"name\":\"BOOTSTRAP\",\"detail\":\"\",\"documentation\":\"This function is executed systematically before the WarpScript stack is available for anything else. By default this function does nothing, it is equivalent \\nto [`NOOP`](/doc/NOOP).\\n\\nIf bootstrap code was specified in the Warp 10 platform configuration, for either or all of `egress`, `mobius` or `runner`, the `BOOTSTRAP` function might\\nhave been redefined and actual code could be executed.\\n\\nThis function is not meant to be used in user provided scripts.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"BOOTSTRAP\"},{\"name\":\"BREAK\",\"detail\":\"\",\"documentation\":\"The `BREAK` function breaks out of the current loop. It takes no argument.\\n\\n> If used outside a loop, an error is thown\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"BREAK\"},{\"name\":\"BUCKETCOUNT\",\"detail\":\"BUCKETCOUNT( gts:GTS ): result:LONG\",\"documentation\":\"The function `BUCKETCOUNT` consumes a GTS off the stack and pushes its bucketcount onto the stack.\\n\\n> Note: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Number of buckets\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETCOUNT\"},{\"name\":\"BUCKETIZE\",\"detail\":\"BUCKETIZE( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gtsList:LIST<GTS>+ bucketizer:AGGREGATOR lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gtsList:LIST<GTS>+ macro:MACRO lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\",\"documentation\":\"The Geo Time Series™ kept in the Warp 10 platform grow over time as more measurements are added. Some series have very regular measurements,\\nothers more sporadic ones. But when it comes to manipulating the data, it might be handy to be able to impose some kind of regularity to measurements.\\nThis is exactly what the [`BUCKETIZE`](/doc/BUCKETIZE) framework does, it provides the tooling for putting the data of a Geo Time Series™ into regularly spaced\\n**buckets**.\\n\\nA **bucket** is a time interval which spans a certain number of time units called the **bucketspan**, ending at a tick called the **lastbucket**.\\n\\nAs an example, the bucket spanning 10 time units and ending at time units 20 will contain all measurements taken at the following times:\\n\\n20, 19, 18, 17, 16, 15, 14, 13, 12, 11\\n\\nthe previous bucket with the same bucketspan ends at 10 and covers ticks 10 down to 1. The next bucket ends at 30 and covers ticks 21 to 30.\\n\\nA bucketized Geo Time Series™ is characterized by its **bucketspan**, its **bucketcount** and the **lastbucket**.\\nA bucketized Geo Time Series™ has at most one measurement per bucket, there might be buckets with no measurements.\\n\\nThe `BUCKETIZE` framework is used to convert a non bucketized Geo Time Series™ into a bucketized one. The bucketization process collects\\nthe measurements of the original geo time series which fall in each bucket and apply a bucketizer function on those data, thus leading to at most a\\nsingle measurement for each bucket.\\n\\nThe `BUCKETIZE` framework comes with a number of bucketizer which implement very common aggregation functions such as SUM, MIN, MAX, MEAN, etc.\\n\\nA macro can be used instead of the bucketizer argument. In that case, in each bucket the measurements are collected as a sub Geo Time Series™ which is taken as parameter by the macro.\\nThis macro must then push onto the stack its result (see description in signature description below).\\n\\nIf the bucketizer argument is NULL, then BUCKETIZE do not create any new Geo Time Series™ but instead sets the lastbucket, bucketspan and bucketcount of its inputs without processing their data.\\n\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so the first value of the geo time series is at the beginning of the first bucket.\\n\\n@param `bucketspan` Width in time units of each bucket. If `bucketspan` is 0 but `bucketcount` is set, WarpScript will compute `bucketspan` so `bucketcount` buckets cover the complete set of values from firsttick to lasttick. If this value is set to -1, the number of buckets is computed so the first tick is towards the end of the first bucket.\\n\\n@param `lastbucket` Specifies the timestamp in time units since the Unix Epoch of the end of the most recent bucket. If you set this value to 0, this timestamp will be computed automatically so it covers the most recent value of the geo time series and falls on a `bucketspan` boundary.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETIZE\"},{\"name\":\"BUCKETIZE.CALENDAR\",\"detail\":\"BUCKETIZE.CALENDAR( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketduration:STRING bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketduration:STRING bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketduration:STRING bucketcount:LONG timezone:STRING ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketduration:STRING bucketcount:LONG timezone:STRING ] ): result:LIST<GTS>\",\"documentation\":\"Creates bucketized Geo Time Series with buckets that span a calendar duration that can be irregular (e.g. taking into account leap years and daylight saving time).\\n\\nInstead of using a bucketspan like the BUCKETIZE framework, it uses a bucketduration: a STRING in [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) format, as `PyYmMwWdDThHmMsS` similarly to that of ADDDURATION function. However, complex bucketdurations that can be non-positive from some ticks are not allowed.\\n\\nIn the result, the tick of each bucket is its index, which is equal to the number of buckets that are ended since Unix Epoch. In particular, the tick of the bucket that contains Unix Epoch is always 0. The resulting GTS is considered bucketized for further operations. Then, the function UNBUCKETIZE.CALENDAR can be used to replace bucket indices with their timestamp end boundaries.\\n\\nThis function answers the limitation of BUCKETIZE to regular buckets. For instance, BUCKETIZE.CALENDAR can be used with a duration of one month (`P1M`) or one year (`P1Y`).\\n\\nThe delta between Unix Epoch and the first timestamp of bucket 0th is called the bucketoffset. The bucketoffset, bucketduration and buckettimezone are stored in the attributes.\\n\\n@param `timezone` The timezone to consider. Default to UTC\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so every value of the GTS falls in a bucket.\\n\\n@param `bucketduration` Width in ISO 8601 duration format of each bucket.\\n\\n@param `lastbucket` Specifies the timestamp in platform time units of the end boundary of the most recent bucket. For coherency with BUCKETIZE, this value can not be set to 0.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS in the new time referential\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"BUCKETIZE.CALENDAR\"},{\"name\":\"BUCKETSPAN\",\"detail\":\"BUCKETSPAN( gts:GTS ): result:LONG\",\"documentation\":\"The function `BUCKETSPAN` consumes a GTS off the stack and pushes its bucketspan onto the stack.\\n\\n> when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Bucketspan\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETSPAN\"},{\"name\":\"BYTES->\",\"detail\":\"BYTES->( bytes:BYTES charset:STRING ): result:STRING\",\"documentation\":\"Converts a bytes array into a string with given a charset and put the string on top of the stack.\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\n\\n@param `charset` Charset to use\\n\\n@param `bytes` Bytes array to convert\\n\\n@param `result` String converted byte array\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"F__JGKBhEV\"},{\"name\":\"BYTESTOBITS\",\"detail\":\"BYTESTOBITS( bytesarray:BYTES ): result:BITSET\",\"documentation\":\"Converts a byte array into a bitset.\\n\\n@param `bytesarray` Bytes array\\n\\n@param `result` Bitset\\n\\n\",\"tags\":[\"bitset\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BYTESTOBITS\"},{\"name\":\"CALL\",\"detail\":\"CALL( params:STRING program:STRING ): result:STRING\",\"documentation\":\"The `CALL` function invokes the external program whose path (relative to the `warpscript.call.directory` directory) is on top of the stack. The calling convention will pass to the external\\nprogram the **STRING** object below the path on a line by itself on standard input after having URL encoded the **STRING**. The invoked\\nprogram is expected to return a URL encoded **STRING** object if invocation was successful, or a string starting with a space and followed by a URL encoded error message if an error was encoutered.\\n\\nIf you need to pass complex structures to the invoked program, you can use functions such as [`->JSON`](/doc/AIt9JoxD), [`->PICKLE`](/doc/AItFHJCAI3J)\\nand [`->B64`](/doc/AIt1CYF) to encode the input prior to the invocation.\\n\\nExamples of callable programs are provided in [shell](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/sh/callable.sh)\\nand [python](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/python/callable.py).\\n\\nThe program must be stored in the directory described by the `warpscript.call.directory` configuration parameter.\\n\\nThe program must first output on the stdout the number of concurrent thread allowed.\\n\\nExample:\\n\\n```bash\\n#!/bin/bash\\necho 5 # 5 threads allowed\\nurldecode() {\\n  # urldecode <string>\\n  local url_encoded=\\\"${1//+/ }\\\"\\n  printf '%b' \\\"${url_encoded//%/\\\\\\\\x}\\\"\\n}\\nwhile true\\n\\ndo\\n  read line\\n  line=`urldecode \\\"${line}\\\"` # read the params given by the WarpScript\\n  echo $line # Will be pushed on the stack\\ndone\\n```\\n\\n@param `program` Program path\\n\\n@param `params` URL encoded input\\n\\n@param `result` URL encoded output\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"CALL\"},{\"name\":\"CBRT\",\"detail\":\"CBRT( value:NUMBER ): result:DOUBLE\\nCBRT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `CBRT` function consumes a numeric parameter from the top of the stack and pushes back its cubic root.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Cubic root of the given value.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of cubic root of each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CBRT\"},{\"name\":\"CEIL\",\"detail\":\"CEIL( value:NUMBER ): result:DOUBLE\\nCEIL( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `CEIL` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number bigger than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-up value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-up values, for each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEIL\"},{\"name\":\"CEVAL\",\"detail\":\"CEVAL( macros:LIST poolSize:LONG ): result:LIST\",\"documentation\":\"The `CEVAL` function allows you to execute macros in a concurrent way on a pool of threads.\\n\\nAll macros will be executed with the maximum parallelism level specified. Each macro is executed on its own stack. The context of the global stack is\\nreplicated to each of those stacks so each macro will have access to the existing symbols and the redefined functions. Any modification to the symbol\\ntable or redifined functions done in a concurrent macro will not be reflected in the global stack afterwards.\\n\\nEach macro is invoked with its index in the list on top of the stack.\\n\\nUpon termination of each macro, the content of their respective stacks is put into a list, with the top of the stack at index 0, and those lists are\\nmerged into a global list which is then pushed onto the stack. The resulting list for each macro appears at the index of the macro in the original macro list.\\n\\nBeware that no synchronization is implicitely performed between the concurrent macros. If you require synchronization between macros, for example because\\nyou are modifying a list accessible by all macros via a symbol, you must use the [`SYNC`](/doc/SYNC) function.\\n\\nIf one of the macros fail, an attempt to interrupt the other running macros will be done and the failure will be propagated to the other macros. For the\\ntime being, a call to [`STOP`](/doc/STOP) or [`RETURN`](/doc/RETURN) in one of the macros will stop all of them.\\n\\nUse of `CEVAL` is not available from within a macro currently executing in a `CEVAL` call.\\n\\nThe `CEVAL` function is part of the `io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```properties\\n// Enable CEVAL and SYNC functions\\nwarpscript.extension.concurrent = io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension\\n```\\n\\n@param `poolSize` Parallelism level\\n\\n@param `macros` List of macros\\n\\n@param `result` Result list\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEVAL\"},{\"name\":\"CHECKMACRO\",\"detail\":\"CHECKMACRO( name:STRING ): \",\"documentation\":\"The `CHECKMACRO` function checks if a macro is defined and aborts the execution when it encounters an undefined macro.\\n\\n@param `name` The macro name\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKMACRO\"},{\"name\":\"CHECKSHAPE\",\"detail\":\"CHECKSHAPE( list:LIST ): result:LIST\\nCHECKSHAPE( { list:LIST  } ): result:LIST\",\"documentation\":\"Return a BOOLEAN indicating whether an input list and its nested lists sizes are coherent together to form a tensor (or multidimensional array).\\n\\n@param `list` The input list.\\n\\n@param `result` true or false.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKSHAPE\"},{\"name\":\"CHRONOEND\",\"detail\":\"CHRONOEND( name:STRING ): \",\"documentation\":\"The `CHRONOEND` function ends a stopwatch with the given name previously started with [`CHRONOSTART`](/doc/CHRONOSTART). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\nIt is a good practice to put `CHRONOEND` in the finally clause of a [`TRY`](/doc/TRY) for the timing to work even if exceptions are thrown.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOEND\"},{\"name\":\"CHRONOSTART\",\"detail\":\"CHRONOSTART( name:STRING ): \",\"documentation\":\"The `CHRONOSTART` function starts a stopwatch with the given name. To stop the stopwatch, call [`CHRONOEND`](/doc/CHRONOEND). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTART\"},{\"name\":\"CHRONOSTATS\",\"detail\":\"CHRONOSTATS(): stats:MAP\",\"documentation\":\"The `CHRONOSTATS` function \\n\\n@param `stats` A map with stopwatches names as keys and maps as values. These maps have two keys, `total_calls` and `total_time`. The former gives the number of calls to [`CHRONOSTART`](/doc/CHRONOSTART) and the latter gives the cumulative time between [`CHRONOSTART`](/doc/CHRONOSTART) and [`CHRONOEND`](/doc/CHRONOEND) in **nanoseconds**.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTATS\"},{\"name\":\"CHUNK\",\"detail\":\"CHUNK( gts:GTS lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTS>\\nCHUNK( gtsList:LIST<GTS> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTS>\\nCHUNK( encoder:GTSENCODER lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): resultEncoders:LIST<GTSENCODER>\\nCHUNK( lEncoder:LIST<GTSENCODER> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): resultEncoders:LIST<GTSENCODER>\",\"documentation\":\"The `CHUNK` is used to split a Geo Time Series™ into partial GTS. The split operation is controlled by multiple parameters.\\nThe series will be splitted in chunks, each chunks will form a new GTS, with a label value corresponding to its first tick.\\n\\n@param `keepempty` If true empty chunks are kept\\n\\n@param `chunklabel` The label name of the label added by the split operation (with a value corresponding to the first tick of the chunk).\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` An overlap duration (in time units) between chunks, this is useful when chunking a GTS to apply an algorithm which operates on a sliding window.\\n\\n@param `chunkwidth` The width in time units of each chunk.\\n\\n@param `lastchunkend` The end timestamp of the most recent split to consider.\\n\\n@param `gts` A single GTS instance.\\n\\n@param `gtsList` A GTS list to split, each GTS will be splitted individually.\\n\\n@param `encoder` A single GTS Encoder instance.\\n\\n@param `lEncoder` A GTS Encoder list to split, each GTS Encoder will be splitted individually.\\n\\n@param `result` GTS Chunks, a list formed with its partial GTS.\\n\\n@param `resultEncoders` GTS Encoders Chunks, a list formed with its partial GTS Encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CHUNK\"},{\"name\":\"CHUNKENCODER\",\"detail\":\"CHUNKENCODER( GTSEncoder:GTSENCODER lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTSENCODER>\\nCHUNKENCODER( GTSEncoderList:LIST<GTSENCODER> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<LIST<GTSENCODER>>\",\"documentation\":\"The `CHUNKENCODER` function is used to split a [GTSEncoder](/doc/NEWENCODER) into partial GTSEncoder. The user defines some parameters that will \\nbe applied to the split operation. The series will be splitted in chunks, each chunks will form a new GTSEncoder, with a label value \\ncorresponding to its first tick.\\n\\nDeprecated since 2.1, use CHUNK instead which behaves the same.\\n\\n@param `keepempty` If true empty chunk are kept\\n\\n@param `chunklabel` The label name of the label added by this split operation (add a value corresponding to the first tick of the chunk). Could be a regular expression.\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` A time overlap for each chunks in time units.\\n\\n@param `chunkwidth` The width in time unit of each chunks in time units.\\n\\n@param `lastchunkend` The split operation end when it encounters this timestamp.\\n\\n@param `GTSEncoder` A single GTSEncoder \\n\\n@param `GTSEncoderList` A GTSEncoder list to split, each GTSEncoder will be splitted individually.\\n\\n@param `result` GTSEncoder Chunks, a list formed with its partial GTSEncoder\\n\\n\",\"tags\":[\"encoder\"],\"since\":\"1.2.9\",\"OPB64name\":\"CHUNKENCODER\"},{\"name\":\"CLEAR\",\"detail\":\"CLEAR( input:ANY* ): \",\"documentation\":\"The `CLEAR` function empties the stack.\\n\\n@param `input` all the input on the stack will be erased from the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEAR\"},{\"name\":\"CLEARDEFS\",\"detail\":\"\",\"documentation\":\"The `CLEARDEFS` function allows you to clear all [redefined WarpScript functions](/doc/DEF).\\n\\nBy default, all redefined WarpScript function, will not be available anymore. Set the `warpscript.def.unshadow` \\nconfiguration property to change this behaviour.\\n\\nThis configuration parameter determines if undefining a function (via NULL 'XXX' DEF) will unshadow the original statement \\nthus making it available again or if it will replace it with a function that will fail with a message saying the function is undefined.\\nThe safest behavior is to leave this undefined or set to **false**.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARDEFS\"},{\"name\":\"CLEARREGS\",\"detail\":\"CLEARREGS(): value:ANY\",\"documentation\":\"Clears all registers, setting their current value to `NULL`.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CLEARREGS\"},{\"name\":\"CLEARSYMBOLS\",\"detail\":\"\",\"documentation\":\"The `CLEARSYMBOLS` function clears all symbols defined with the function [`STORE`](/doc/STORE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARSYMBOLS\"},{\"name\":\"CLEARTOMARK\",\"detail\":\"CLEARTOMARK( mark:MARK inputs:ANY* ): \",\"documentation\":\"Removes elements from the stack up to and including the first mark encountered.\\n\\n@param `inputs` all the inputs references on the stack will be erased\\n\\n@param `mark` the mark will also be erased\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARTOMARK\"},{\"name\":\"CLIP\",\"detail\":\"CLIP( gts:GTS bounds:LIST<LIST<LONG>> ): result:LIST<GTS>\\nCLIP( lgts:LIST<GTS> bounds:LIST<LIST<LONG>> ): result:LIST<LIST<GTS>>\\nCLIP( encoder:GTSENCODER bounds:LIST<LIST<LONG>> ): result:LIST<GTSENCODER>\\nCLIP( lencoder:LIST<GTSENCODER> bounds:LIST<LIST<LONG>> ): result:LIST<LIST<GTS>>\",\"documentation\":\"The `CLIP` function clips a Geo Time Series™, encoders or list thereof according to a series of limits. The limits are lists of pair containing the lower and upper \\ntimestamps used to clip. Each pair will generate a clipped GTS or encoder for each instance.\\n\\n@param `bounds` List of timestamp pairs. Each pair is a list of LONG.\\n\\n@param `gts` GTS to clip\\n\\n@param `lgts` List of GTSs to clip\\n\\n@param `encoder` Emcoder to clip\\n\\n@param `lencoder` List of encoders to clip\\n\\n@param `result` List of clipped GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.0\",\"OPB64name\":\"CLIP\"},{\"name\":\"CLONE\",\"detail\":\"CLONE( gts:GTS ): original:GTS clone:GTS\\nCLONE( list:LIST ): original:LIST clone:LIST\\nCLONE( map:MAP ): original:MAP clone:MAP\\nCLONE( set:SET ): original:SET clone:SET\\nCLONE( vector:VECTOR ): original:VECTOR clone:VECTOR\\nCLONE( encoder:GTSENCODER ): original:GTSENCODER clone:GTSENCODER\",\"documentation\":\"The `CLONE` function does a shallow copy of a given Geo Time Series™, List, Map or Vector. Since 2.1.1 it can also clone Encoders.\\n\\nAs it makes a shallow copy, be careful when using CLONE on a List of Geo Time Series™ like those generated by the use of [`FETCH`](/doc/FETCH). Modifying a Geo Time Series™ in any of those list will alter the matching Geo Time Series™ in the other List.\\nIf you want to use `CLONE` after a [`FETCH`](/doc/FETCH), you will need to extract the Geo Time Series™ from the list, for example by using [`LIST->`](/doc/I3_IK1oy), [`GET`](/doc/GET) or [`LMAP`](/doc/LMAP).\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `list` The List to clone\\n\\n@param `map` The Map to clone\\n\\n@param `set` The Set to clone\\n\\n@param `vector` The Vector to clone\\n\\n@param `encoder` The Encoder to clone\\n\\n@param `clone` The cloned Geo Time Series™, List, Map, Vector or Encoder\\n\\n@param `original` The original Geo Time Series™, List, Map, Vector or Encoder\\n\\n\",\"tags\":[\"gts\",\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONE\"},{\"name\":\"CLONEEMPTY\",\"detail\":\"CLONEEMPTY( gts:GTS ): result:GTS\\nCLONEEMPTY( gtsList:LIST<GTS> ): resultList:LIST<GTS>\\nCLONEEMPTY( encoder:GTSENCODER ): encoderResult:GTSENCODER\\nCLONEEMPTY( encoderList:LIST<GTSENCODER> ): encoderResultList:LIST<GTSENCODER>\",\"documentation\":\"Clones a Geo Time Series™, an Encoder or all the instances in a list of Geo Time Series™ or an Encoder, keeping only the metadata and not the values.\\n\\nThe `CLONEEMPTY` function takes as parameter a Geo Time Series™, an Encoder or a list thereof. It creates an empty clone of the input with only his metadata. The cloned metadata are:\\n * Classname\\n * Labels\\n * Attributes\\n * Lastbucket, for Geo Time Series™ only\\n * Bucketspan, for Geo Time Series™ only\\n * Bucketcount, for Geo Time Series™ only\\n * Base timestamp, for Encoders only\\n * Wrapping key, for Encoders only\\n\\nThe input parameter is consumed and the clone or list of clones is left on the stack.\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `gtsList` The list of Geo Time Series™ to clone\\n\\n@param `result` The cloned Geo Time Series™\\n\\n@param `resultList` The cloned list of Geo Time Series™\\n\\n@param `encoder` The encoder to clone\\n\\n@param `encoderList` The list of encoder to clone\\n\\n@param `encoderResult` The cloned encoder\\n\\n@param `encoderResultList` The cloned list of encoders\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEEMPTY\"},{\"name\":\"CLONEREVERSE\",\"detail\":\"CLONEREVERSE( input:LIST ): output:LIST\\nCLONEREVERSE( input:STRING ): output:STRING\\nCLONEREVERSE( input:BYTES ): output:BYTES\",\"documentation\":\"The function CLONEREVERSE clone the input and reverses the order of the elements. \\nOutput is a reference to a new object.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n@param `input` reference of the list or string to reverse.\\n\\n@param `output` reference to a new reversed list or string or byte array.\\n\\n\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEREVERSE\"},{\"name\":\"COMMONTICKS\",\"detail\":\"COMMONTICKS( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"documentation\":\"Take a list of Geo Time Series™ and output A GTS list with only the set of ticks they have in common compared by timestamp.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with common ticks\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMMONTICKS\"},{\"name\":\"COMPACT\",\"detail\":\"COMPACT( gts:GTS ): result:GTS\\nCOMPACT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `COMPACT` function expects a Geo Time Series™ or a **LIST** of GTS on top of the stack. For each GTS instance it reads, it will \\nproduce a GTS whith fewer values, by removing measurements which have the same value, location and elevation as the previous one. The first tick will be the kept, then ticks with value or position change will be kept. The last tick from the original gts will be copied, in order to keep the same LASTTICK.\\n\\n@param `gts` A GTS to compact\\n\\n@param `gtsList` A GTS list to compact\\n\\n@param `result` A compacted GTS\\n\\n@param `resultList` A compacted GTS list\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMPACT\"},{\"name\":\"CONTAINS\",\"detail\":\"CONTAINS( list:LIST item:ANY ): list:LIST presence:BOOLEAN\\nCONTAINS( set:SET item:ANY ): set:LIST presence:BOOLEAN\\nCONTAINS( str:STRING substr:STRING ): presence:BOOLEAN\",\"documentation\":\"The `CONTAINS` function checks if the element on top of the stack is contained by the list on second position. A boolean is pushed on the stack.\\n\\nIf the parameters are two STRINGs, `CONTAINS` checks if the second STRING is contained in the first one, leaving a boolean on the stack. This latter usage is available since revision 2.1.0.\\n\\n@param `item` Depending on list construction, could be a number, a string, a boolean, NULL, a GTS...\\n\\n@param `presence` true if inputlist contains the item. false otherwise or if inputlist is empty.\\n\\n@param `list` reference to the LIST to search.\\n\\n@param `set` reference to the SET to search.\\n\\n@param `str` STRING in which to find `substr`.\\n\\n@param `substr` STRING to find in `str`.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINS\"},{\"name\":\"CONTAINSKEY\",\"detail\":\"CONTAINSKEY( inputmap:MAP key:ANY ): outputmap:MAP presence:BOOLEAN\",\"documentation\":\"The `CONTAINSKEY` function checks if the key element on top of the stack is a key \\nof the map on second position. \\n\\nThe key is consumed, and a boolean is pushed on the stack.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this key. Do not trust presence if key is NULL.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSKEY\"},{\"name\":\"CONTAINSVALUE\",\"detail\":\"CONTAINSVALUE( inputmap:MAP value:ANY ): outputmap:MAP presence:BOOLEAN\",\"documentation\":\"The `CONTAINSVALUE` function checks if the value element on top of the stack is a value \\nof the map on second position. \\n\\nThe value is consumed, and a boolean is pushed on the stack.\\n\\n@param `value` Depending on map construction, could be a number, a string, a boolean, NULL.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this value in at least one pair of its key-value.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSVALUE\"},{\"name\":\"CONTINUE\",\"detail\":\"\",\"documentation\":\"Immediately stop executing the current iteration of an ongoing loop and start the next one.\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTINUE\"},{\"name\":\"COPYGEO\",\"detail\":\"COPYGEO( gts:GTS geogts:GTS ): result:GTS\\nCOPYGEO( gtsList:LIST<GTS> geogts:GTS ): resultList:LIST<GTS>\",\"documentation\":\"The `COPYGEO` function forces the location elements of a GTS onto others. `COPYGEO` expects two parameters on the stack.\\nFirst input is GTS or a gts list: those series(s) will have their location overwritten by the one of the second GTS parameter. Geo information will be copied only if they are present in the second paramaters on the same tick otherwise it keep the existing location. See [`COMMONTICKS`](/doc/COMMONTICKS) to keep only commonticks before calling `COPYGEO`.\\n\\n@param `gts` A GTS\\n\\n@param `gtsList` A list of GTS\\n\\n@param `geogts` A GTS with the geo information you want to copy to other (list of) gts.\\n\\n@param `result` A GTS with the geo information of the geogts input\\n\\n@param `resultList` A list of GTS with the geo information of the geogts input\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYGEO\"},{\"name\":\"COPYSIGN\",\"detail\":\"COPYSIGN( p1:NUMBER p2:NUMBER ): result:DOUBLE\\nCOPYSIGN( p1:NUMBER list2:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nCOPYSIGN( list1:LIST<NUMBER> p2:NUMBER ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `COPYSIGN` function copies the sign of a number on another one and pushes back the value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` Numeric parameter on which sign is applied\\n\\n@param `p2` Numeric parameter on which sign is extracted\\n\\n@param `list1` List of numeric parameter on wich sign is applied\\n\\n@param `list2` List of numeric parameter on wich sign is extracted\\n\\n@param `result` Value of p1 with the sign of p2 s a DOUBLE\\n\\n@param `lresult` List of results\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYSIGN\"},{\"name\":\"CORRELATE\",\"detail\":\"CORRELATE( baseGTS:GTS gtsList:LIST timeOffsets:LIST ): result:LIST<GTS>\",\"documentation\":\"The `CORRELATE` function allows you to compute correlation between one base Geo Time Series™ and a set of others. \\nBy putting the base GTS in the set of others, cross correlation can be computed.\\n\\n@param `baseGTS` The base Geo Time Series\\n\\n@param `gtsList` A list of Geo Time Series against which to compute the correlation\\n\\n@param `timeOffsets` A list of time offsets for which the correlation will be computed (expressed in time units of the Warp instance)\\n\\n@param `result` A list of synthetic Geo Time Series™ whose timestamps are the offsets from the initial offset list and the values are the computed correlations. There is one GTS per GTS in the list at TOP-1.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CORRELATE\"},{\"name\":\"COS\",\"detail\":\"COS( value:NUMBER ): result:DOUBLE\\nCOS( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `COS` function consumes a floating point number from the top of the stack and pushes back its cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Cosine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of cosine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COS\"},{\"name\":\"COSH\",\"detail\":\"COSH( value:NUMBER ): result:DOUBLE\\nCOSH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `COSH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic cosine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic cosine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COSH\"},{\"name\":\"COUNTER\",\"detail\":\"COUNTER(): counter:COUNTER\",\"documentation\":\"The `COUNTER` function pushes a counter (AtomicLong) initialized with the value 0 onto the stack.\\n\\nThis atomic counter can be safely shared in multiple concurrent macros (see [`CEVAL`](/doc/CEVAL)).\\n\\n@param `counter` Counter instance.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTER\"},{\"name\":\"COUNTERDELTA\",\"detail\":\"COUNTERDELTA( counter:COUNTER increment:LONG ): counter:COUNTER\",\"documentation\":\"The `COUNTERDELTA` function increments a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `increment` Counter increment.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERDELTA\"},{\"name\":\"COUNTERSET\",\"detail\":\"COUNTERSET( counter:COUNTER value:LONG ): counter:COUNTER\",\"documentation\":\"The `COUNTERSET` function set the value of a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `value` Counter value.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.2.22\",\"OPB64name\":\"COUNTERSET\"},{\"name\":\"COUNTERVALUE\",\"detail\":\"COUNTERVALUE( counter:COUNTER ): value:LONG\",\"documentation\":\"The `COUNTERVALUE` function pushes the counter value onto the stack.\\n\\n@param `counter` The counter instance.\\n\\n@param `value` The value of the counter.\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERVALUE\"},{\"name\":\"COUNTTOMARK\",\"detail\":\"COUNTTOMARK(): result:LONG\",\"documentation\":\"Counts the number of elements on the stack up to but excluding the first mark encountered. Neither the mark nor the\\nelements on top of it are removed from the stack.\\n\\n@param `result` Stack depth until `MARK`\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTTOMARK\"},{\"name\":\"CPOPR\",\"detail\":\"CPOPR( value:ANY ): \",\"documentation\":\"Pops a value from the top of the stack and stores it into the designated register if the register is empty (*i.e.* has `NULL` as its current value).\\n\\nThe `CPOPR` function is really a family of functions named `CPOPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CPOPR\"},{\"name\":\"CPROB\",\"detail\":\"CPROB( gts:GTS separator:STRING ): result:GTS\\nCPROB( lgts:LIST<GTS> separator:STRING ): lresult:LIST<GTS>\",\"documentation\":\"The function `CPROB` generates a new Geo Time Series™ from an input Geo Time Series™ by computing a conditional probability.\\n\\nThe function expects a **STRING** separator on top of the stack and expects the input Geo Time Series™ to have \\nvalues of the form given1< SEP >given2< SEP >....< SEP >event. It will then emit P(event|given1,given2,...).\\n\\nIf the separator is **NULL**, `CPROB` behaves like [`PROB`](/doc/PROB).\\n\\n@param `separator` Value separator\\n\\n@param `gts` Geo Time Series™\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `lresult` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.6\",\"OPB64name\":\"CPROB\"},{\"name\":\"CROP\",\"detail\":\"CROP( gts:GTS ): result:GTS\\nCROP( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `CROP` function works on bucketized Geo Time Series™ instances, if transforms a GTS into another one whose bucketcount, last bucket parameters span the smallest interval with actual values. Bucket span remains the same.\\n\\nWhen called on a non bucketized GTS instance, `CROP` simply clones it.\\n\\nThis function expects a list of GTS instances on the top of the stack.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` ropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `resultList` A list of cropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"CROP\"},{\"name\":\"CSTORE\",\"detail\":\"CSTORE( value:ANY symbol:STRING ): \\nCSTORE( value:ANY register:LONG ): \",\"documentation\":\"The `CSTORE` function stores a value in a symbol or a register only if that symbol or register is not yet defined. The name of this function stands for Conditional STORE.\\n\\n@param `symbol` Name of symbol under which to store `value`.\\n\\n@param `register` Number of the register under which to store `value`.\\n\\n@param `value` Value to store unde `symbol`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CSTORE\"},{\"name\":\"CUDF\",\"detail\":\"CUDF( class:STRING ): \",\"documentation\":\"The `CUDF` function invokes a User Defined Function from a Jar as [`UDF`](/doc/UDF) but reuses a cached instance of the function.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CUDF\"},{\"name\":\"DEBUGOFF\",\"detail\":\"\",\"documentation\":\"Turns off stack debugging which was turned on by [`DEBUGON`](/doc/DEBUGON) or [`NDEBUGON`](/doc/NDEBUGON).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGOFF\"},{\"name\":\"DEBUGON\",\"detail\":\"\",\"documentation\":\"Turns on stack debugging which returns the stack content in case of error. Stack debugging is off by default.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGON\"},{\"name\":\"DECREMENTEXACT\",\"detail\":\"DECREMENTEXACT( value:NUMBER ): result:DOUBLE\\nDECREMENTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `DECREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value decremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be decremented by one\\n\\n@param `result` The decremented value\\n\\n@param `lvalue` List of values to be decremented by one\\n\\n@param `lresult` List of decremented values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"DECREMENTEXACT\"},{\"name\":\"DEDUP\",\"detail\":\"DEDUP( gts:GTS ): result:GTS\\nDEDUP( gts:GTS mapper:AGGREGATOR ): lresult:GTS\\nDEDUP( gts:GTS macro:MACRO ): lresult:GTS\\nDEDUP( lgts:LIST<GTS> ): lresult:LIST<GTS>\\nDEDUP( lgts:LIST<GTS> mapper:AGGREGATOR ): lresult:LIST<GTS>\\nDEDUP( lgts:LIST<GTS> macro:MACRO ): lresult:LIST<GTS>\",\"documentation\":\"Removes duplicate ticks.\\n\\nThe `DEDUP` function consumes a Geo Time Series™ or a **LIST** thereof from the top of the stack and pushes back the Geo Time Series™ with deduplicated ticks.\\n\\nSince the 2.7.0 version, this function can be given an optional mapper or macro to combine the duplicate data points.\\n\\n@param `gts` The Geo Time Series™ to deduplicate\\n\\n@param `result` The Geo Time Series™ with deduplicated ticks\\n\\n@param `lgts` The list of Geo Time Series™ to deduplicate\\n\\n@param `lresult` The list of Geo Time Series™ with deduplicated ticks\\n\\n@param `mapper` Mapper used to aggregate duplicate values\\n\\n@param `macro` Macro used to aggregate duplicate values given as a GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEDUP\"},{\"name\":\"DEF\",\"detail\":\"DEF( newDef:MACRO name:STRING ): \",\"documentation\":\"The `DEF` function allows you to define new WarpScript functions or redefine existing ones for the duration of your script execution.\\n\\nThe function expects on the stack a macro which will be used as the content of the newly defined function, and a name under which to define the new function.\\n\\nWhen redefining a function, if the function being redefined is used within the macro, the code which will be executed is the current one, \\nas the binding of function to code is done at the time when the macro is defined and not when it is executed.\\n\\nYou may therefore add limits to the use of an existing function by rewrapping it in a macro which will be associated with the original function name.\\n\\nTo remove redefined functions see [`CLEARDEFS`](/doc/CLEARDEFS).\\n\\n@param `name` New function name\\n\\n@param `newDef` Macro which will be used as the content of the newly defined function\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEF\"},{\"name\":\"DEFINED\",\"detail\":\"DEFINED( name:STRING ): result:BOOLEAN\",\"documentation\":\"The `DEFINED` function checks whether or not a symbol is defined.\\n\\n@param `name` Symbol name\\n\\n@param `result` Whether or not the symbol is defined\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEFINED\"},{\"name\":\"DEFINEDMACRO\",\"detail\":\"DEFINEDMACRO( name:STRING ): result:BOOLEAN\",\"documentation\":\"The `DEFINEDMACRO` function checks if a macro is defined and pushes true or false on the stack accordingly.\\n\\n@param `name` The macro name\\n\\n@param `result` True if the macro is defined, false otherwise\\n\\n\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.16\",\"OPB64name\":\"DEFINEDMACRO\"},{\"name\":\"DEFLATE\",\"detail\":\"DEFLATE( string:STRING ): compressed:BYTES\\nDEFLATE( bytes:BYTES ): compressed:BYTES\",\"documentation\":\"The `DEFLATE` function compresses a STRING or a byte array using the [Zlib](https://en.wikipedia.org/wiki/Zlib) library. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"DEFLATE\"},{\"name\":\"DELETE\",\"detail\":\"DELETE( writeToken:STRING gts_selector:STRING start_timestamp:LONG end_timestamp:LONG count:LONG ): result:LONG\",\"documentation\":\"The `DELETE` function is used to delete a set of GTS from a Warp 10 platform. A delete endpoint must be set on the Warp 10 configuration.\\n\\nDelete expects 5 parameters on top of the stack: the write token of the Warp 10 application, a string corresponding to a gts selector, a start \\nand a end timestamp and finally the number of GTS expected to be deleted.\\n\\nFor safety reasons `DELETE` will first perform a dryrun call to the /delete endpoint to retrieve the number of GTS which would be deleted by the call. \\nIf this number is above the expected number provided by the user the actual delete will not be performed and instead an error will be raised.\\n\\nDelete will push as a result the number of GTS really deleted.\\n\\nIf both end_timestamp and start_timestamp are NULL, Warp 10 will perform a delete all. FETCH won't find anything after a delete all.\\n\\n```flow\\n// Write token\\n'TOKEN'\\n\\n// Gts selector\\n'gts.to.delete{}'\\n\\n// Start Timestamp\\n1479372838011043\\n\\n// End timestamp\\nNOW\\n\\n// DELETE expects a count number (if nb GTS > count, DELETE is stopped)\\n1\\n\\nDELETE \\n```\\n\\n@param `count` Number of GTS expected to be deleted\\n\\n@param `end_timestamp` End timestamp or NULL\\n\\n@param `start_timestamp` Start timestamp or NULL\\n\\n@param `gts_selector` GTS selector\\n\\n@param `writeToken` Write token\\n\\n@param `result` Actual deleted GTS count\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.5\",\"OPB64name\":\"DELETE\"},{\"name\":\"DELETEOFF\",\"detail\":\"DELETEOFF( message:STRING secret:STRING ): \",\"documentation\":\"Disables delete operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a delete operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEOFF\"},{\"name\":\"DELETEON\",\"detail\":\"DELETEON( secret:STRING ): \",\"documentation\":\"Enables delete operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEON\"},{\"name\":\"DEPTH\",\"detail\":\"DEPTH(): result:LONG\",\"documentation\":\"The `DEPTH` function pushes on top of the stack the depth (i.e. number of levels) of the stack prior to the call.\\n\\n@param `result` Stack depth\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEPTH\"},{\"name\":\"DEREF\",\"detail\":\"DEREF( macro:MACRO values:MAP ): macro:MACRO\",\"documentation\":\"Replaces in a Macro the occurrences of symbol dereferencing (`$x`) or calls to `LOAD` with a `STRING` argument or calls to `PUSHRx` by the values associated with either the symbol name or register number in a parameter map.\\n\\nValues are used verbatim except for Macros which are inserted as functions, *i.e.* they are inserted followed by a call to `EVAL` so they are executed in the target macro instead of ending up on the stack. If you wish to replace a symbol dereference by a Macro, you need to write the macro inside of another Macro.\\n\\n\\n@param `macro` Macro to transform.\\n\\n@param `values` Map of symbol name or register number to replacement value.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.3.0\",\"OPB64name\":\"DEREF\"},{\"name\":\"DET\",\"detail\":\"DET( matrix:MATRIX ): det:DOUBLE\",\"documentation\":\"Computes the [determinant](https://en.wikipedia.org/wiki/Determinant) of a matrix.\\n\\n@param `matrix` The matrix for which to compute the determinant.\\n\\n@param `det` The computed determinant.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"DET\"},{\"name\":\"DIFFERENCE\",\"detail\":\"DIFFERENCE( setA:SET setB:SET ): output:SET\",\"documentation\":\"Computes the difference between two sets.\\n\\nThe `DIFFERENCE` function consumes two sets from the top of the stack and pushes back its mathematical difference (ie: the elements in *A* but not in *B*).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* - *B*, the set of elements in *A* but not in *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"DIFFERENCE\"},{\"name\":\"DISCORDS\",\"detail\":\"DISCORDS( lgts:LIST<GTS> wsize:LONG length:LONG scale:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): lresult:LIST<GTS>\\nDISCORDS( gts:GTS wsize:LONG length:LONG scale:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): result:GTS\",\"documentation\":\"The `DISCORDS` function detects discords in a Geo Time Series™. The discord detection algorithm is based on identifying outlier patterns in\\nthe Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `DISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0\\n\\n@param `overlapping` Flag indicating whether or not the `DISCORDS` function should report overlapping discords\\n\\n@param `maximum` The maximum number of discords to identify\\n\\n@param `lresult` The list of Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `result` The Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"DISCORDS\"},{\"name\":\"DOC\",\"detail\":\"DOC( string:STRING ): string:STRING\",\"documentation\":\"Consumes the String on the stack or leave it there and stop the script if the stack is currently in documentation mode ([`DOCMODE`](/doc/DOCMODE)) \\n\\nYou can use it to document macros.\\n\\n@param `string` Text to display in [`DOCMODE`](/doc/DOCMODE)\\n\\n\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOC\"},{\"name\":\"DOCMODE\",\"detail\":\"\",\"documentation\":\"Toggle the 'documentation mode' of the stack\\n\\n\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOCMODE\"},{\"name\":\"DOUBLEBITS->\",\"detail\":\"DOUBLEBITS->( input:LONG ): result:DOUBLE\",\"documentation\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the **LONG** value as the raw bits of the **DOUBLE**\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"G3xKFZl4FZ_JJmoy\"},{\"name\":\"DOUBLEEXPONENTIALSMOOTHING\",\"detail\":\"DOUBLEEXPONENTIALSMOOTHING( gts:GTS alpha:DOUBLE beta:DOUBLE ): result:LIST<GTS>\",\"documentation\":\"The `DOUBLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Double Exponential Smoothing aka Holt's linear trend method](https://www.otexts.org/fpp/7/2) formula.\\n\\nIt consumes three parameters from the top of the stack:\\n * A trend smoothing factor beta (a numeric parameter between 0 < beta < 1)\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** and levels are pushed onto the stack (in this order in the **LIST**).\\n\\n@param `beta` The trend smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The list within the smoothed Geo Time Series™ and its levels\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOUBLEEXPONENTIALSMOOTHING\"},{\"name\":\"DROP\",\"detail\":\"DROP( input:ANY ): \",\"documentation\":\"The `DROP` function removes the element at the top of the stack.\\n\\n@param `input` object reference to drop from the top of the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROP\"},{\"name\":\"DROPN\",\"detail\":\"DROPN( number:NUMBER ): \",\"documentation\":\"The `DROPN` function removes the top N elements of the stack after having consumed N which was on the top of the stack prior to calling `DROPN`.\\n\\n@param `number` The number of elements to drop\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROPN\"},{\"name\":\"DTW\",\"detail\":\"DTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"DTW\"},{\"name\":\"DUP\",\"detail\":\"DUP( input:ANY ): input:ANY out:ANY\",\"documentation\":\"The `DUP` function duplicates the element on the top of the stack, it doesn’t copy the content. If you apply DUP to a GTS you will\\nhave two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `input` any parameter on top of the stack\\n\\n@param `out` a reference copy of input on top of the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUP\"},{\"name\":\"DUPN\",\"detail\":\"DUPN( number:NUMBER ): \",\"documentation\":\"The `DUPN` function duplicates the top N elements of the stack after having consumed N which is on the top of the stack when calling `DUPN`.\\n\\nAs the [`DUP`](/doc/DUP) function, `DUPN` duplicates the references of the N elements on the top of the stack, it doesn’t copy the elements.\\nIf you apply `DUPN` to a GTS you will have two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `number` The number of elements to duplicate\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUPN\"},{\"name\":\"DURATION\",\"detail\":\"DURATION( isoDuration:STRING ): duration:LONG\",\"documentation\":\"The `DURATION` function consumes a **STRING** representing an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) and pushes back a **LONG** duration in platform time unit.\\n\\nThe ISO 8601 duration can be expessed as `PwWdDThHmMsS` with:\\n- `w` weeks\\n- `d` days\\n- `h` hours\\n- `m` minutes\\n- `s` or `s.ssssss...` seconds\\nEach of these values can be either positive or negative. Each value/unit couple can be omitted if the value is zero but at least one value/couple should be defined.\\n\\nIf the consumed ISO 8601 duration has precision under platform time unit, superfluous digits will be ignored. Prior to revision 2.4, precision below milliseconds were always ignored, independently of platform time unit.\\n\\n@param `isoDuration` A representation of a ISO 8601 duration with some limitations, see the description.\\n\\n@param `duration` Number of platform time unit corresponding to the duration.\\n\\n\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"DURATION\"},{\"name\":\"DWTSPLIT\",\"detail\":\"DWTSPLIT( gts:GTS label-name:STRING ): result:GTS\\nDWTSPLIT( lgts:LIST<GTS> label-name:STRING ): lresult:LIST<GTS>\",\"documentation\":\"The `DWTSPLIT` function splits a Geo Time Series™ produced by [`FDWT`](/doc/FDWT) into multiple series, one per resolution level of the Wavelet transform.\\n\\n\\n@param `label-name` Label name used in the generated series to indicate the level of each Geo Time Series™\\n\\n@param `gts` GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `lgts` List of GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `result` Splited GTS\\n\\n@param `lresult` List of splited GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DWTSPLIT\"},{\"name\":\"E\",\"detail\":\"E(): eValue:DOUBLE\",\"documentation\":\"Alias of [e](/doc/OF).\\n\\nThe `E` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"GF\"},{\"name\":\"ECGEN\",\"detail\":\"ECGEN( curve:STRING ): private:MAP public:MAP\",\"documentation\":\"The `ECGEN` function generates a public/private key pair parameters suitable for performing [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography).\\n\\nThe resulting parameters can serve as input to [`ECPRIVATE`](/doc/ECPRIVATE) and [`ECPUBLIC`](/doc/ECPUBLIC) to generate the actual private and public keys.\\n\\nThe following curves are supported:\\n\\n`c2pnb272w1`, `c2tnb191v3`, `c2pnb208w1`, `c2tnb191v2`, `c2tnb191v1`, `prime192v3`, `c2tnb359v1`, `prime192v2`, `prime192v1`, `c2tnb239v3`, `c2pnb163v3`, `c2tnb239v2`, `c2pnb163v2`, `c2tnb239v1`, `c2pnb163v1`, `c2pnb176w1`, `prime256v1`, `c2pnb304w1`, `c2pnb368w1`, `c2tnb431r1`, `prime239v3`, `prime239v2`, `prime239v1`, `sect233r1`, `secp112r2`, `secp112r1`, `secp256k1`, `sect113r2`, `secp521r1`, `sect113r1`, `sect409r1`, `secp192r1`, `sect193r2`, `sect131r2`, `sect193r1`, `sect131r1`, `secp160k1`, `sect571r1`, `sect283k1`, `secp384r1`, `sect163k1`, `secp256r1`, `secp128r2`, `secp128r1`, `secp224k1`, `sect233k1`, `secp160r2`, `secp160r1`, `sect409k1`, `sect283r1`, `sect163r2`, `sect163r1`, `secp192k1`, `secp224r1`, `sect239k1`, `sect571k1`, `B-163`, `P-521`, `P-256`, `B-233`, `P-224`, `B-409`, `P-384`, `B-283`, `B-571`, `P-192`, `brainpoolp512r1`, `brainpoolp384t1`, `brainpoolp256r1`, `brainpoolp192r1`, `brainpoolp512t1`, `brainpoolp256t1`, `brainpoolp224r1`, `brainpoolp320r1`, `brainpoolp192t1`, `brainpoolp160r1`, `brainpoolp224t1`, `brainpoolp384r1`, `brainpoolp320t1`, `brainpoolp160t1`\\n\\n@param `curve` Name of the elliptic curve to use.\\n\\n@param `public` Map containing the public key parameters.\\n\\n@param `private` Map containing the private key parameters.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECGEN\"},{\"name\":\"ECHOOFF\",\"detail\":\"ECHOOFF(): \",\"documentation\":\"Turns off the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOOFF\"},{\"name\":\"ECHOON\",\"detail\":\"ECHOON( levels:NUMBER ): \",\"documentation\":\"Turns on the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of topmost stack levels to display after each WarpScript™ line, truncated if floating-point.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOON\"},{\"name\":\"ECPRIVATE\",\"detail\":\"ECPRIVATE( private:MAP ): key:KEY\",\"documentation\":\"The `ECPRIVATE` function generates a private key from private key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `private` Map containing ECC private key parameters.\\n\\n@param `key` ECC private key.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPRIVATE\"},{\"name\":\"ECPUBLIC\",\"detail\":\"ECPUBLIC( public:MAP ): key:KEY\",\"documentation\":\"The `ECPUBLIC` function generates a public key from public key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `public` Map containing ECC public key parameters.\\n\\n@param `key` ECC public key.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPUBLIC\"},{\"name\":\"ECSIGN\",\"detail\":\"ECSIGN( data:BYTES alg:STRING private:KEY ): signature:BYTES\",\"documentation\":\"The `ECSIGN` function generates a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) private key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Content to sign.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `private` Private key to use for signining.\\n\\n@param `signature` Resulting signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECSIGN\"},{\"name\":\"ECVERIFY\",\"detail\":\"ECVERIFY( data:BYTES signature:BYTES alg:STRING public:KEY ): result:BOOLEAN\",\"documentation\":\"The `ECVERIFY` function verifies a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) public key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Signed data.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `public` Public key to use for verification.\\n\\n@param `signature` Signature to verify.\\n\\n@param `result` Validity of the signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECVERIFY\"},{\"name\":\"ELAPSED\",\"detail\":\"ELAPSED(): result:LIST<LONG>\",\"documentation\":\"The `ELAPSED` function pushes onto the stack a list containing timing informations. The first element of the list is the timestamp at which \\nthe script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution \\nof the associated script line.\\n\\nTiming informations are only collected after a call to [`TIMINGS`](/doc/TIMINGS) (its line included) and before a call to [`NOTIMINGS`](/doc/NOTIMINGS)\\n (its line excluded).\\n\\n@param `result` The first element of the list is the timestamp at which the script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution of the associated script line.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELAPSED\"},{\"name\":\"ELEVATIONS\",\"detail\":\"ELEVATIONS( gts:GTS ): elevations:LIST<LONG>\\nELEVATIONS( lgts:LIST<GTS> ): lelevations:LIST<LIST<LONG>>\",\"documentation\":\"The `ELEVATIONS` function consumes a Geo Time Series™ or a list thereof from the stack, extracts its elevations, puts them in a list and pushes the list onto the stack.      \\n\\n@param `gts` The Geo Time Series™ from which to extract the elevations\\n\\n@param `lgts` The list of Geo Time Series™ from which to extract the elevations\\n\\n@param `elevations` The elevations of the given Geo Time Series™\\n\\n@param `lelevations` The list of elevations of the given Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELEVATIONS\"},{\"name\":\"EMPTY\",\"detail\":\"EMPTY( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"documentation\":\"Reject GTS instances with values.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with empty values\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"EMPTY\"},{\"name\":\"ENCODER->\",\"detail\":\"ENCODER->( encoder:GTSENCODER ): name:STRING attributes:MAP labels:MAP output:LIST\\nENCODER->( wrappedinput:STRING ): name:STRING attributes:MAP labels:MAP output:LIST\\nENCODER->( rawwrappedinput:BYTES ): name:STRING attributes:MAP labels:MAP output:LIST\",\"documentation\":\"The `ENCODER->` functions convert an encoder into a list of ( timestamp, latitude, longitude, elevation, value ) list. It also pushes attributes, labels and name on the stack.\\nFunction also accepts wrapped or raw-wrapped encoders or gts.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedinput` Encoder or GTS after WRAP. \\n\\n@param `rawwrappedinput` Encoder or GTS after WRAPRAW.\\n\\n@param `output` List of list of ( timestamp, latitude, longitude, elevation, value ). Missing values in the encoder or GTS are replaced by NaN.\\n\\n@param `name` Name of encoder or GTS. If no name was defined, will be NULL.\\n\\n@param `attributes` Attributes of encoder or GTS input. If none defined, will be an empty map.\\n\\n@param `labels` Labels of encoder or GTS input. If none defined, will be an empty map.\\n\\n\",\"tags\":[\"encoder\",\"conversion\",\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"GJt2IoG4JXoy\"},{\"name\":\"ERROR\",\"detail\":\"ERROR(): error:LIST<MAP>\",\"documentation\":\"Pushes onto the stack a list containing the current error (as caught by a [`TRY`](/doc/TRY)) and its causes. Each error is a map with the following fields:\\n\\n| Field | Description |\\n| --- | --- |\\n| type | Type of the error, the Java class of the underlying exception |\\n| message | The message associated with the error |\\n| stacktrace | A list of lists, each containing `filename`, `line number`, `class name`, `method name` |      \\n\\nThe current error is the first element of the list.\\n\\nIf there is no current error, the returned list will be empty.\\n\\n@param `error` List of maps describing the current error and its causes.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ERROR\"},{\"name\":\"ESDTEST\",\"detail\":\"ESDTEST( gts:GTS k:LONG mad:BOOLEAN alpha:DOUBLE ): result:LIST<LONG>\\nESDTEST( gts:GTS k:LONG mad:BOOLEAN ): result:LIST<LONG>\\nESDTEST( gtsList:LIST<GTS> k:LONG mad:BOOLEAN alpha:DOUBLE ): resultList:LIST<LIST<LONG>>\\nESDTEST( gtsList:LIST<GTS> k:LONG mad:BOOLEAN ): resultList:LIST<LIST<LONG>>\",\"documentation\":\"The `ESDTEST` function detects outliers in a GTS (or a **LIST** of GTS), by applying a [generalized extreme studentized deviate test](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm).\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nA [Grubbs’](/doc/GRUBBSTEST)test is done for one candidate at a time. Then, the candidate is removed from the set and another [Grubbs’](/doc/GRUBBSTEST)test\\nis performed. This process is iterated a given number of times. The detected outliers are the removed values and the current candidate of the last successful\\ntest.\\n\\nA **LIST** of ticks (or a **LIST** of **LIST** of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ESDTEST\"},{\"name\":\"EVAL\",\"detail\":\"EVAL( macro:MACRO ): \\nEVAL( string:STRING ): \",\"documentation\":\"The `EVAL` function evaluates the statements contained in the string at the top of the stack as if they had been entered individually or runs the macro at the top os the stack.\\n\\n@param `string` String to evaluate\\n\\n@param `macro` Macro to run\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVAL\"},{\"name\":\"EVALSECURE\",\"detail\":\"EVALSECURE( secure:STRING ): return:ANY\",\"documentation\":\"The `EVALSECURE` function executes a secure script. The script must have been created on a platform with the same secure script cryptographic key as the current platform (note that this is not the *secret* set using [`SECUREKEY`](doc/SECUREKEY)).\\n\\n@param `secure` String containing the secure script to execute.\\n\\n@param `return` The return values depend on the actual code of the secure script.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVALSECURE\"},{\"name\":\"EVERY\",\"detail\":\"EVERY( macro:MACRO repeat:LONG ): \",\"documentation\":\"When called via the `/mobius` endpoint, the `EVERY` function sets the repeat interval for the preceding macro.\\n\\nWhen called outside of `/mobius`, the `EVERY` function simply executes the macro.\\n\\n@param `repeat` The repeat interval to enforce, in milliseconds.\\n\\n@param `macro` The macro to execute.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVERY\"},{\"name\":\"EXP\",\"detail\":\"EXP( value:NUMBER ): result:DOUBLE\\nEXP( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a floating point value x consumed from the top of the stack,\\n i.e. e<sup>x</sup>.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List where each value is e<sup>x</sup>\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXP\"},{\"name\":\"EXPM1\",\"detail\":\"EXPM1( value:NUMBER ): result:DOUBLE\\nEXPM1( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a DOUBLE value x consumed from the top of the stack then subtracts one, i.e. e<sup>x</sup>-1.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>-1\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List of e<sup>x</sup>-1\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXPM1\"},{\"name\":\"EXPORT\",\"detail\":\"EXPORT( symbol:STRING ): \\nEXPORT( symbols:LIST ): \",\"documentation\":\"The `EXPORT` function allows you to set or update a list of symbols which will be dumped upon script termination. This proves handy when \\ndebugging a script as you can visualize, even in the case of errors, the value of specific symbols.\\n\\nThe function expects either a symbol name (a **STRING**) which will be added to the current list of exported symbols, a list of symbol \\nname which will replace the current list of exported symbols, an empty list to disable symbol export altogether, or a list with a single\\n**NULL** element to instruct the WarpScript engine to export all existing symbols.\\n\\nWhen symbols should be exported, the debug mode is implied (see [`DEBUGON`](/doc/DEBUGON)).\\n\\n@param `symbol` Symbol name\\n\\n@param `symbols` List of symbols\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.2\",\"OPB64name\":\"EXPORT\"},{\"name\":\"EXTLOADED\",\"detail\":\"EXTLOADED( ext:STRING ): loaded:BOOLEAN\",\"documentation\":\"Checks if a WarpScript extension is loaded or not and therefore available.      \\n\\n@param `ext` Name of extension to check.\\n\\n@param `loaded` Boolean indicating whether or not the specified extension is loaded in the WarpScript environment.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"EXTLOADED\"},{\"name\":\"F\",\"detail\":\"F(): b:BOOLEAN\",\"documentation\":\"`F` stand for `false`. It is a boolean constant.\\n\\n\\n@param `b` false\\n\\n\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"F\"},{\"name\":\"FAIL\",\"detail\":\"\",\"documentation\":\"The `FAIL` function stops the execution of the WarpScript scripts by throwing an exception.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FAIL\"},{\"name\":\"FDWT\",\"detail\":\"FDWT( gts:GTS wavelet:STRING ): fdwt:GTS\\nFDWT( lgts:LIST<GTS> wavelet:STRING ): lfdwt:LIST<GTS>\",\"documentation\":\"The `FDWT` function performs a [Forward Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Fast_wavelet_transform#Forward_DWT) on a Geo Time Series™.\\n\\nA number of different [Wavelets](https://en.wikipedia.org/wiki/Wavelet) are available, the list is inspired by that available on \\nthe [Wavelet Browser](http://wavelets.pybytes.com/).\\n\\nThe list of Wavelets which can be used is the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\nThe FDWT can only be applied to Geo Time Series™ with a number of values which is a power of 2.\\n\\nAssuming the input GTS has 2<sup>n</sup> values, the result of the FDWT transformation is a GTS with 2<sup>n</sup> values (the wavelet coefficients) with timestamps from 0 to 2<sup>n</sup>-1.\\n\\nThe ticks of the `n` levels are contiguous, with the first tick being for level `n`, the next 2 for level `n-1`, the next 4 for level `n-2`, up to the last 2<sup>n-1</sup> for level 1.\\n\\nLevel 1 has the finest time resolution but the coarsest frequency resolution. Each level has half (coarser) the time resolution and double (finer) the frequency resolution as the previous level.\\n\\n@param `wavelet` Name of wavelet to use for the transformation.\\n\\n@param `gts` Geo Time Series™ instance on which to perform the FDWT.\\n\\n@param `lgts` List of Geo Time Series™ on which to apply the FDWT.\\n\\n@param `fdwt` Transformed Geo Time Series™.\\n\\n@param `lfdwt` List of transformed Geo Time Series™.\\n\\n\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FDWT\"},{\"name\":\"FETCH\",\"detail\":\"FETCH( [ token:STRING class:STRING labels:MAP end:LONG timespan:LONG ] ): data:LIST<GTS>\\nFETCH( [ token:STRING class:STRING labels:MAP start:STRING end:STRING ] ): data:LIST<GTS>\\nFETCH( { token:STRING class:STRING labels:MAP end:LONG start:STRING timespan:LONG count:LONG selector:STRING selectors:LIST<STRING> metaset:STRING type:STRING typeattr:STRING extra:LIST<STRING> active.after:LONG quiet.after:LONG gts:LIST<GTS> boundary.post:LONG boundary.pre:LONG boundary:LONG skip.count:LONG sampling.ratio:DOUBLE  } ): data:LIST<GTS>\",\"documentation\":\"The `FETCH` function interacts with the Warp 10 Storage Engine to retrieve data according to given criteria.\\n\\n`FETCH` either accepts a list of 5 parameters or a map with the parameters. Those are defining the **read access rights**, the **concerned Geo Time Series** and the **time window**. Other parameters in the map input are optional. \\n\\nThe list input is here to keep backward compatibility with old WarpScripts. The map input allows a great flexibility, as described below.\\n\\n### Access rights\\nA valid read token is needed to read data with fetch. If you use a [metaset](/doc/METASET) and also specify a token, the token included in the metaset will be ignored.\\n\\n### Concerned Geo Time Series\\n`FETCH` selects Geo Time Series according to:\\n+ The `selectors` parameter, which is a list of selector.\\n+ If `selectors` is not found, `FETCH` uses the `selector` parameter which is a single selector.\\n+ If `selector` is not found, `FETCH`  uses both `class` and `labels` parameters.  \\n\\n### Time window\\n`FETCH`  begins from the newest value and stop when the oldest value is collected. Thus, `end` must be defined in your request and defines the newest included value in your time window. If `end` is anterior to your oldest value, the result will be empty (no Geo Time Series). The span of the time window ending at `end` is then defined according to:\\n+ The `timespan` parameter.\\n+ If `timespan` is not defined, `FETCH` collects a maximum of `count` point.\\n+ If `count` is not defined, `FETCH` determines `timespan` with `start`. If `start` is more recent than `end`, `end` and `start` are permuted internally. Be careful, this means `end` is included but  **`start` is excluded from the time window**.\\n\\n### Boundaries\\nSince version 2.3.0, you can define *boundaries* around the requested data. When fetching data based on a time range, both a *pre* and *post* boundaries can be specified. When fetching by count, only a *pre* boundary can be requested.\\nBoundaries are a number of datapoints which are either before (*pre* boundary) or after (*post* boundary) the fetched data. Fetching boundaries is very useful when storing only the changes of values as they enable you to always fetch datapoints even if the requested time range does not contain any. They can also be used to fetch the first `N` datapoints after a given timestamp.\\nNote that fetching *post* boundaries is less efficient than fetching the requested range or a *pre* boundary as the data has to be scanned in reverse order which has an impact on I/Os and ultimately on performance.\\n\\n### Sampling options\\n+ Since version 2.3.0, you can randomly sample points with the `sample` parameter. If `sample` equals 0.1, `FETCH` will randomly return one point out of ten. This implementation is the fastest way to resample data.\\n+ Since version 2.3.0, you can `skip` the N newest datapoints in the time window specified.\\n\\n### Query without looking into directory\\nThe fetch time to read one gts among millions of gts recorded with the same classname, the same application and the same owner can take time. Use the `gts` parameter to select if you exactly know the classname and all the labels.\\n\\nIf you want to read only Geo Time Series attributes or labels, using [FIND](/doc/FIND) is more efficient than fetching the last value.\\n\\n@param `token` Read token to use to fetch the data.\\n\\n@param `class` Selector for the GTS classes. Can either be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `labels` Map of labels selectors. The key is the label name, the value a selector which can be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `start` Oldest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `end` Newest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n@param `metaset` A set of Geo Time Series™ produced by the [`METASET`](/doc/METASET) function.\\n\\n@param `type` Name of type to force for the GTS, either LONG, DOUBLE, BOOLEAN or STRING.\\n\\n@param `typeattr` Name of label to use for storing the GTS type. This option is incompatible with 'type', when set values of different types are ventilated in separate GTS with the same set of class and labels and an additional *type* label of the given name.\\n\\n@param `timespan` Depth to consider when fetching the datapoints. If the value is positive then it is interpreted as a duration in time units, if it is negative then as the maximum number of datapoints to fetch. If negative, incompatible with 'count'.\\n\\n@param `count` Maximum number of datapoints to fetch for each GTS. Incompatible with negative 'timespan'.\\n\\n@param `extra` List of extraneous classes to fetch. For each GTS matching the selection criteria, GTS with those extra class names will be fetched too (with the *exact* same set of labels).\\n\\n@param `active.after` Timestamp after which a GTS must have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `quiet.after` Timestamp after which a GTS must not have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `gts` Explicit list of Geo Time Series™ to fetch. The class and labels will be used as is and not serve as selectors.\\n\\n@param `boundary` Number of datapoints to include in both *pre* and *post* boundaries.\\n\\n@param `boundary.pre` Number of datapoints in the *pre* boundary.\\n\\n@param `boundary.post` Number of datapoints in the *post* boundary.\\n\\n@param `sampling.ratio` A probability between 0 (excluded, no datapoints returned) and 1.0 (all datapoints returned). The random sampling is done by the storage layer, which is the most efficient.\\n\\n@param `skip.count` Set fetch to ignore the N newest points in the time window you specified.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCH\"},{\"name\":\"FETCHBOOLEAN\",\"detail\":\"FETCHBOOLEAN( linput:LIST ): data:LIST<GTS>\\nFETCHBOOLEAN( minput:MAP ): data:LIST<GTS>\",\"documentation\":\"The `FETCHBOOLEAN` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type BOOLEAN.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHBOOLEAN\"},{\"name\":\"FETCHDOUBLE\",\"detail\":\"FETCHDOUBLE( linput:LIST ): data:LIST<GTS>\\nFETCHDOUBLE( minput:MAP ): data:LIST<GTS>\",\"documentation\":\"The `FETCHDOUBLE` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type DOUBLE.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHDOUBLE\"},{\"name\":\"FETCHLONG\",\"detail\":\"FETCHLONG( linput:LIST ): data:LIST<GTS>\\nFETCHLONG( minput:MAP ): data:LIST<GTS>\",\"documentation\":\"The `FETCHLONG` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type LONG.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHLONG\"},{\"name\":\"FETCHSTRING\",\"detail\":\"FETCHSTRING( linput:LIST ): data:LIST<GTS>\\nFETCHSTRING( minput:MAP ): data:LIST<GTS>\",\"documentation\":\"The `FETCHSTRING` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type STRING.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHSTRING\"},{\"name\":\"FFT\",\"detail\":\"FFT( gts:GTS ): result:LIST<GTS>\\nFFT( gtsList:LIST<GTS> ): result:LIST<LIST<GTS>>\",\"documentation\":\"The `FFT` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFT` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe real parts of the `FFT` coefficients, the second the imaginary parts. The scale factor is equal to X/(n * bucketspan) where n is the number\\nof elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the number\\nof values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFT` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the real parts of the `FFT` coefficients, the second the imaginary parts.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFT\"},{\"name\":\"FFTAP\",\"detail\":\"FFTAP( gts:GTS ): result:LIST<GTS>\\nFFTAP( gtsList:LIST<GTS> ): result:LIST<LIST<GTS>>\",\"documentation\":\"The `FFTAP` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFTAP` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe amplitude of the coefficient at that frequency and the second the associated phase. The scale factor is equal to X/(n * bucketspan) where n is\\nthe number of elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the\\nnumber of values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFTAP` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the amplitude of the coefficient at that frequency and the second the associated phase.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFTAP\"},{\"name\":\"FFTWINDOW\",\"detail\":\"FFTWINDOW( gts:GTS window:STRING ): windowed:GTS\\nFFTWINDOW( lgts:LIST<GTS> window:STRING ): lwindowed:LIST<GTS>\",\"documentation\":\"The `FFTWINDOW` transforms Geo Time Series™ by applying a [window function](https://en.wikipedia.org/wiki/Window_function) to its values. The function supports the following windows:\\n\\n| Name | Window |\\n| --- | --- |\\n| `triangular` | [Triangular](https://en.wikipedia.org/wiki/Window_function#Triangular_window) |\\n| `parzen` | [Parzen](https://en.wikipedia.org/wiki/Window_function#Parzen_window) |\\n| `welch` | [Welch](https://en.wikipedia.org/wiki/Window_function#Welch_window) |\\n| `sine` | [Sine](https://en.wikipedia.org/wiki/Window_function#Sine_window) |\\n| `hann` | [Hann](https://en.wikipedia.org/wiki/Window_function#Hann_window) |\\n| `hamming` | [Hamming](https://en.wikipedia.org/wiki/Window_function#Hamming_window) |\\n| `blackman` | [Blackman](https://en.wikipedia.org/wiki/Window_function#Blackman_window) |\\n| `nuttall` | [Nuttall](https://en.wikipedia.org/wiki/Window_function#Nuttall_window,_continuous_first_derivative) | \\n| `blackman-nuttall` | [Blackman-Nuttall](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Nuttall_window) |\\n| `blackman-harris` | [Blackman-Harris](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Harris_window) |\\n| `flattop` | [Flat top](https://en.wikipedia.org/wiki/Window_function#Flat_top_window) |\\n| `rectangular` | [Rectangular](https://en.wikipedia.org/wiki/Window_function#Rectangular_window) |\\n\\n@param `window` Name of the window function to apply.\\n\\n@param `gts` Single Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `windowed` Tranformed Geo Time Series™.\\n\\n@param `lwindowed` List of transformed Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"FFTWINDOW\"},{\"name\":\"FILL\",\"detail\":\"FILL( gtsa:GTS gtsb:GTS filler:FILLER ): gtsa:GTS gtsb:GTS\",\"documentation\":\"The `FILL` function fills missing values in two Geo Time Series™ so they end up with identical ticks.\\n\\nThe filling is done using a *filler* function which applies a given strategy. Filler functions can be created using macros via the [`MACROFILLER`](/doc/MACROFILLER) function.\\n\\n@param `gtsa` First Geo Time Series™ to fill.\\n\\n@param `gtsb` Second Geo Time Series™ to fill.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"FILL\"},{\"name\":\"FILLNEXT\",\"detail\":\"FILLNEXT( gts:GTS ): result:GTS\\nFILLNEXT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `FILLNEXT` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation of the \\nnext non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLNEXT\"},{\"name\":\"FILLPREVIOUS\",\"detail\":\"FILLPREVIOUS( gts:GTS ): result:GTS\\nFILLPREVIOUS( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `FILLPREVIOUS` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation \\nof the previous non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLPREVIOUS\"},{\"name\":\"FILLTICKS\",\"detail\":\"FILLTICKS( gts:GTS data:LIST ): result:GTS\\nFILLTICKS( gtsList:LIST<GTS> data:LIST ): resultList:LIST<GTS>\",\"documentation\":\"The `FILLTICKS` function add values to a Geo Time Series™ instance or a list thereof for ticks in the given **LIST**.\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n@param `data` List of (latitude, longitude, elevation, ticks) where ticks is a list of ticks.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLTICKS\"},{\"name\":\"FILLVALUE\",\"detail\":\"FILLVALUE( gts:GTS data:LIST ): result:GTS\\nFILLVALUE( gtsList:LIST<GTS> data:LIST ): resultList:LIST<GTS>\",\"documentation\":\"The `FILLVALUE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with a fixed value/location/elevation.\\n\\nIt expects a GTS or a list thereof on the top of the stack after having consumed a list of parameters (latitude, longitude, elevation, value)\\nsitting on top of the stack prior to the call.\\n\\nLocation must be floating point numbers (e.g. 0.0 not 0). Elevation must be an integer. If no location or elevation should be set, **NaN** can\\nbe used instead of specific value.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n\\n\\nThe value is cast to the type of the GTS value\\n\\n@param `gts` The Geo Time Series™ to fill\\n\\n@param `gtsList` The list of Geo Time Series™ to fill\\n\\n@param `result` The filled Geo Time Series™\\n\\n@param `resultList` The list of filled Geo Time Series™\\n\\n@param `data` The list of parameters (latitude, longitude, elevation, value)\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLVALUE\"},{\"name\":\"FILTER\",\"detail\":\"FILTER( [ gtsList:LIST<GTS> labels:LIST<STRING> filter:FILTER ] ): result:LIST<GTS>\",\"documentation\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `FILTER` framework allows for advanced filtering using N-ary functions\\n(functions which accept N parameters).\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A single list containing only the selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `FILTER`.\\n\\n\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILTER\"},{\"name\":\"FILTERBY\",\"detail\":\"FILTERBY( list:LIST macro:MACRO ): sublist:LIST\",\"documentation\":\"The `FILTERBY` function selects elements of a list based on the boolean return value of a macro evaluated for each element.\\n\\n@param `macro` Macro used for filtering. This macro should consume the element of the list pushed on top of the stack and leave a boolean on the stack. If this boolean is `true`, the element will be retained.\\n\\n@param `list` List of elements to filter.\\n\\n@param `sublist` List with the selected elements from `list`.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"FILTERBY\"},{\"name\":\"FIND\",\"detail\":\"FIND( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): data:LIST<GTS>\\nFIND( [ uuidattribute:BOOLEAN token:STRING classSelector:STRING labelsSelector:MAP ] ): data:LIST<GTS>\\nFIND( { token:STRING classSelector:STRING labelsSelector:MAP  } ): data:LIST<GTS>\\nFIND( { token:STRING selector:STRING  } ): data:LIST<GTS>\\nFIND( { token:STRING selectors:LIST<STRING>  } ): data:LIST<GTS>\",\"documentation\":\"The `FIND` function finds Geo Time Series™ labels and attributes of GTS, not their values. It is the fastest way to read attributes of GTS. `FIND` ask only `directory` component of Warp&nbsp;10™, while [FETCH](/doc/FETCH) first ask `directory`, then ask `store` to read GTS values. \\n\\nSyntax is close to [FETCH](/doc/FETCH), without time boundaries or data point count.\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `data` List of fetched Geo Time Series™. These GTS does not contain any value.\\n\\n@param `uuidattribute` Setting this to true add `.uuid` attribute in the output data. This UUID is a hash of class and label.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIND\"},{\"name\":\"FINDSETS\",\"detail\":\"FINDSETS( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): classes:LIST<STRING> labels:MAP attributes:MAP\",\"documentation\":\"The `FINDSETS` function returns sets of values for the classes, labels and attributes of the Geo Time Series™ which matched the selection criteria.\\n\\nThose results can be used for example to update a UI with lists of possible values for labels when exploring a corpus of GTS.\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label names to exact match or regular expression (if the value starts with a *~*) for matching labels and attributes.\\n\\n@param `attributes` Map of attribute names to value list.\\n\\n@param `labels` Map of label names to value list.\\n\\n@param `classes` List of class names.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSETS\"},{\"name\":\"FINDSTATS\",\"detail\":\"FINDSTATS( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): result:MAP\",\"documentation\":\"The `FINDSTATS` function computes statistics on matching Geo Time Series™. The estimations are based on the use of [HyperLogLogPlus](https://en.wikipedia.org/wiki/HyperLogLog) estimators.\\n\\nThe function returns a map containing information about the matching Geo Time Series. The fields of the map are the following:\\n\\n| Key | Value |\\n|-----|-------|\\n| `gts.estimate` | Estimation of the number of matching Geo Time Series™ |\\n| `classes.estimate` | Estimation of the number of distinct class names |\\n| `labelnames.estimate` | Estimation of the number of distinct label names |\\n| `labelvalues.estimate` | Estimation of the number of distinct label values |\\n| `per.class.estimate` | If the number of matching classes is below the `directory.stats.class.maxcardinality`, this key will be associated with a map containing per class estimate of number of GTS |\\n| `per.label.value.estimate` | If the number of label names in the matching GTS is below `directory.stats.labels.maxcardinality`, this key will be associated with a map containing an estimation of distinct label values per label name |\\n| `error.rate` | This is the error rate of the estimators used for computing the estimations |\\n| `partial.results` | When accessing a sharded Directory, this will be set to `true` if only partial results were collected |\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `result` Map containing stats such as error rate or whether estimates on classes, gts, or labels.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSTATS\"},{\"name\":\"FIRSTTICK\",\"detail\":\"FIRSTTICK( gts:GTS ): result:LONG\\nFIRSTTICK( lgts:LIST<GTS> ): result:LONG\",\"documentation\":\"The `FIRSTTICK` function pushes on the stack the timestamp of the first tick of the Geo Time Series™ on top of the stack.\\n\\nWhen applied to a list of GTS, `FIRSTTICK` will return the lowest first tick found across all Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` Timestamp. If the GTS does not have values, **Long.MAX_VALUE** is pushed.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIRSTTICK\"},{\"name\":\"FLATTEN\",\"detail\":\"FLATTEN( input:LIST ): output:LIST\\nFLATTEN( notAList:ANY ): notAList:ANY\",\"documentation\":\"The function `FLATTEN` inspects the top of the stack.\\n\\nIf it is a LIST of values,\\nit inspects each value and replaces each value which was a LIST with its content.\\n`FLATTEN` proceed recursively until all LISTs have been flattened.\\n\\nIf it is not a LIST, the function exits and let the stack in the same state.\\n\\n@param `input` Input is a list who may contains lists\\n\\n@param `notAList` An object which is not a list\\n\\n@param `output` Output list do not contains anymore nested lists\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLATTEN\"},{\"name\":\"FLOATBITS->\",\"detail\":\"FLOATBITS->( input:LONG ): result:DOUBLE\",\"documentation\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the 32 lower bits of the **LONG** value as the raw bits of a **FLOAT**.\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"GZlEFKG1HKGIAIs\"},{\"name\":\"FLOOR\",\"detail\":\"FLOOR( value:NUMBER ): result:DOUBLE\\nFLOOR( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `FLOOR` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number smaller than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-down value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-down values, for each given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLOOR\"},{\"name\":\"FLOORDIV\",\"detail\":\"FLOORDIV( dividend:NUMBER divisor:NUMBER ): fDiv:LONG\\nFLOORDIV( dividend:NUMBER ldivisor:LIST<NUMBER> ): lfDiv:LIST<LONG>\\nFLOORDIV( ldividend:LIST<NUMBER> divisor:NUMBER ): lfDiv:LIST<LONG>\",\"documentation\":\"The `FLOORDIV` function consumes two NUMBER values, convert them to LONGs and pushes back largest LONG value that is less than or equal to the algebraic quotient.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fDiv` The largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfDiv` List of largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORDIV\"},{\"name\":\"FLOORMOD\",\"detail\":\"FLOORMOD( dividend:NUMBER divisor:NUMBER ): fMod:LONG\\nFLOORMOD( dividend:NUMBER ldivisor:LIST<NUMBER> ): lfMod:LIST<LONG>\\nFLOORMOD( ldividend:LIST<NUMBER> divisor:NUMBER ): lfMod:LIST<LONG>\",\"documentation\":\"The `FLOORMOD` function consumes two NUMBER values, convert them to LONGs and pushes back the floor modulus which is x - (floorDiv(x, y) * y).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fMod` The floor modulus x - (floorDiv(x, y) * y)\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfMod` List of floor modulus x - (floorDiv(x, y) * y)\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORMOD\"},{\"name\":\"FOR\",\"detail\":\"FOR( initial:NUMBER final:NUMBER macro:MACRO ): \\nFOR( initial:NUMBER final:NUMBER macro:MACRO index:BOOLEAN ): \",\"documentation\":\"The `FOR` function implements a for loop. It takes three arguments from the stack: the initial and the final values of the loop index and a macro to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOR\"},{\"name\":\"FOREACH\",\"detail\":\"FOREACH( list:LIST exec:MACRO ): \\nFOREACH( map:MAP exec:MACRO ): \\nFOREACH( set:SET exec:MACRO ): \\nFOREACH( vector:VLIST exec:MACRO ): \\nFOREACH( string:STRING exec:MACRO ): \\nFOREACH( gts:GTS exec:MACRO ): \\nFOREACH( encoder:GTSENCODER exec:MACRO ): \\nFOREACH( list:LIST exec:MACRO index:BOOLEAN ): \\nFOREACH( map:MAP exec:MACRO index:BOOLEAN ): \\nFOREACH( set:SET exec:MACRO index:BOOLEAN ): \\nFOREACH( vector:VLIST exec:MACRO index:BOOLEAN ): \\nFOREACH( string:STRING exec:MACRO index:BOOLEAN ): \\nFOREACH( gts:GTS exec:MACRO index:BOOLEAN ): \\nFOREACH( encoder:GTSENCODER exec:MACRO index:BOOLEAN ): \",\"documentation\":\"The `FOREACH` function implements a for loop on a list or map.\\n\\nFor each iteration i on a list, the i-th element on the list is put on top of the stack, and the exec macro is then called.\\n\\nFor each iteration i on a map, the exec macro is called with the i-th value on top of the stack, and the i-th key just below on the stack.\\nYou can start your macro with `'value' STORE 'key' STORE`.\\n\\nSince release 2.1, `FOREACH` has the ability to iterate over Geo Time Series™ and GTS Encoders. When iterating over a GTS or Encoder, the macro is fed with a list of the form `[ tick lat lon elev value ]` where `lat`, `lon` and `elev` may be `NaN` if unset. In the case of an Encoder, `value` can be a byte array or a `BigDecimal` on top of `LONG`, `DOUBLE`, `STRING` or `BOOLEAN`.\\n\\nSince release 2.4.0, you can force FOREACH to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `exec` Macro to apply\\n\\n@param `list` List to iterate on\\n\\n@param `map` Map to iterate on\\n\\n@param `set` Set to iterate on\\n\\n@param `vector` Vector to iterate on\\n\\n@param `gts` GTS to iterate on\\n\\n@param `string` String to iterate on\\n\\n@param `encoder` GTSEncoder to iterate on\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOREACH\"},{\"name\":\"FORGET\",\"detail\":\"FORGET( symbol:STRING ): \",\"documentation\":\"Removes a symbol from the symbol table.      \\n\\n@param `symbol` Name of the symbol to remove.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORGET\"},{\"name\":\"FORSTEP\",\"detail\":\"FORSTEP( initial:NUMBER final:NUMBER step:MACRO macro:MACRO ): \\nFORSTEP( initial:NUMBER final:NUMBER step:MACRO macro:MACRO index:BOOLEAN ): \",\"documentation\":\"The `FORSTEP` function implements for loop with an index step. It takes four arguments from the stack: the initial and the final values of the loop index,\\na macro step to evaluate after each iteration and an other one to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `step` Macro step to evaluate after each iteration, typically to compute index\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORSTEP\"},{\"name\":\"FROMBIN\",\"detail\":\"FROMBIN( input:STRING ): output:LONG\",\"documentation\":\"Converts the binary representation on top of the stack into the corresponding long.\\n\\n@param `input` Binary representation of a signed long, 64 characters max.\\n\\n@param `output` Signed long of input.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBIN\"},{\"name\":\"FROMBITS\",\"detail\":\"FROMBITS( input:LONG ): result:DOUBLE\",\"documentation\":\"**This function is deprecated. Replace it in your code by the [`DOUBLEBITS->`](/doc/G3xKFZl4FZ_JJmoy) function.**\\n\\nConverts the **LONG** on top of the stack into a **DOUBLE** by considering it a raw bit representation.\\n\\n@param `input` Raw bit representation to convert\\n\\n@param `result` Converted value\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBITS\"},{\"name\":\"FROMHEX\",\"detail\":\"FROMHEX( input:STRING ): output:LONG\",\"documentation\":\"Converts an hexadecimal representation into a signed long. 64bits max.\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Signed long\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMHEX\"},{\"name\":\"FUNCTIONS\",\"detail\":\"FUNCTIONS(): functions:LIST<STRING>\",\"documentation\":\"FUNCTIONS returns a list of every functions available in your Warp 10 environnment, including native and extension functions.\\n\\nIt could be useful when coding your own extension to check your new functions are correctly registered.\\n\\n\\nFUNCTIONS allow anyone to discover new extensions you created on the platform, so it is deactivated by default.\\n\\nYou must add `warpscript.extension.inventory=io.warp10.script.ext.inventory.InventoryWarpScriptExtension` in your configuration file for this function to be available.\\n\\n@param `functions` List of Warp 10 functions available on this instance\\n\\n\",\"tags\":[\"platform\",\"extensions\"],\"since\":\"1.2.16\",\"OPB64name\":\"FUNCTIONS\"},{\"name\":\"FUSE\",\"detail\":\"FUSE( chunks:LIST<GTS> ): gts:GTS\",\"documentation\":\"Fuses Geo Time Series™ chunks. The fusion process attempts to keep the bucketization parameters if all chunks are bucketized with compatible `bucketspan` and `lastbucket` values.\\n\\nAll chunks must be of the same type.\\n\\nThe fused GTS will have the common class name of the chunks or no class name if some chunks have a different class name. The labels will be those common to all chunks, so when fusing chunks created with [`CHUNK`](/doc/CHUNK), the chunk id will be dropped.\\n\\n@param `chunks` List of Geo Time Series™ to fuse.\\n\\n@param `gts` Geo Time Series™ resulting from the fusion of `chunk`.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FUSE\"},{\"name\":\"GEO.BUFFER\",\"detail\":\"GEO.BUFFER( params:MAP ): wkb:BYTES\\nGEO.BUFFER( params:MAP ): area:STRING\\nGEO.BUFFER( params:MAP ): \",\"documentation\":\"The `GEO.BUFFER` function allows to create [*buffer*](https://en.wikipedia.org/wiki/Buffer_(GIS)) **GEOSHAPE** objects. The function takes a `MAP` instance as input. This map can contain the following entries:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `dist` | Distance of the buffer, as a central angle expressed in degrees. |\\n| `mdist` | Distance of the buffer expressed in meters. This key is only taken into account if `dist` is not specified. |\\n| `cap` | The end cap style to consider, use `SQUARE`, `FLAT` or `ROUND` (default). |\\n| `join` | The join style to use, use `BEVEL`, `MITRE` or `ROUND` (default). |\\n| `limit` | The mitre limit to use. Defaults to 5.0. |\\n| `segments` | Number of segments to use per quadrant, defaults to 8. |\\n| `singlesided` | Set to `true` to compute a single sided buffer. If `true`, positive distance will indicate left-hand side and negative distance right-hand side. End cap is ignored for single sided buffers. |\\n| `wkb` | Byte array containing a [WKB](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary) definition of a geographic area. |\\n| `wkt` | String containing a [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) definition of a geographic area. |\\n| `geojson` | String containing a [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) definition of a geographic area. |\\n\\nIf a geographic area is defined, only one of `wkb`, `wkt` or `geojson` may be specified. The output of the function is a new definition of a geographic area with the buffer added to the original definition.\\n\\nIf no geographic area is defined, `GEO.BUFFER` will define a buffer which will be used by the next call to either [`GEO.WKT`](/doc/GEO.WKT), [`GEO.WKB`](/doc/GEO.WKB) or [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `params` Parameter map containing keys as defined above.\\n\\n@param `wkb` Area definition with the buffer added, if `params` had a value for key `wkb`.\\n\\n@param `area` Area definition with the buffer added, in WKT or GeoJSON depending on the presence of key `wkt` or `geojson` in `params`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.7.0\",\"OPB64name\":\"GEO.BUFFER\"},{\"name\":\"GEO.COVER\",\"detail\":\"GEO.COVER( gts:GTS resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER( encoder:GTSENCODER resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER( list:LIST resolution:LONG ): geoshapes:LIST<GEOSHAPE>\",\"documentation\":\"The `GEO.COVER` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* in which the input Geo Time Series™ or GTS Encoder had datapoints.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER\"},{\"name\":\"GEO.COVER.RL\",\"detail\":\"GEO.COVER.RL( gts:GTS resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER.RL( encoder:GTSENCODER resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER.RL( list:LIST resolution:LONG ): geoshapes:LIST<GEOSHAPE>\",\"documentation\":\"The `GEO.COVER.RL` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* which cover the path of an input Geo Time Series™ or GTS Encoder. The path is considered to follow [rhumb lines](https://en.wikipedia.org/wiki/Rhumb_line), hence the function suffix `.RL`.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER.RL\"},{\"name\":\"GEO.DIFFERENCE\",\"detail\":\"GEO.DIFFERENCE( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\",\"documentation\":\"The `GEO.DIFFERENCE` function computes the difference between two GEOSHAPE. The resulting GEOSHAPE instance contains cells which cover the part of the first GEOSHAPE which is not in the second. If you need to have cells up to a certain resolution, you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the result.\\n\\n@param `shapeA` GEOSHAPE instance from which to subtract the second shape.\\n\\n@param `shapeB` GEOSHAPE to subtract from 'shapeA'.\\n\\n@param `shape` GEOSHAPE containing 'shapeA' minus 'shapeB'.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.DIFFERENCE\"},{\"name\":\"GEO.INTERSECTION\",\"detail\":\"GEO.INTERSECTION( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\\nGEO.INTERSECTION( shapes:LIST<GEOSHAPE> ): shape:GEOSHAPE\",\"documentation\":\"The `GEO.INTERSECTION` function computes the intersection of two GEOSHAPE instances. The intersection process will produce a GEOSHAPE whose cells are common to the two initial shapes. The common cells will be of various resolutions, depending on the resolutions of the cells from the initial shapes. If you need the resulting shape to contain cells up to a specific resolution, you can call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) either on the result or on the initial shapes.\\n\\n@param `shapeA` First GEOSHAPE instance.\\n\\n@param `shapeB` Second GEOSHAPE instance.\\n\\n@param `shapes` GEOSHAPE instances.\\n\\n@param `shape` Geographical area (GEOSHAPE) resulting from the intersection of the given shapes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTION\"},{\"name\":\"GEO.INTERSECTS\",\"detail\":\"GEO.INTERSECTS( gts:GTS shape:GEOSHAPE ): result:BOOLEAN\\nGEO.INTERSECTS( lgts:LIST<GTS> shape:GEOSHAPE ): results:LIST<BOOLEAN>\\nGEO.INTERSECTS( shapeA:GEOSHAPE shapeB:GEOSHAPE ): result:BOOLEAN\",\"documentation\":\"The `GEO.INTERSECTS` function checks if a Geo Time Series or each GTS from a list has at least one data point with a position inside a given geographical area. Since `2.7.1`, the function can also check if two `GEOSHAPE` instances intersect.\\n\\n@param `shapeA` First `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shapeB` Second `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shape` Instance of GEOSHAPE containing the area which the Geo Time Series must intersect.\\n\\n@param `gts` Single instance of Geo Time Series.\\n\\n@param `lgts` List of Geo Time Series.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series had at least one datapoint in 'shape' or if the two shapes intersect.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had at least one datapoint in 'shape'.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTS\"},{\"name\":\"GEO.JSON\",\"detail\":\"GEO.JSON( GeoJSON:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.JSON( GeoJSON:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.9\",\"OPB64name\":\"GEO.JSON\"},{\"name\":\"GEO.JSON.UNIFORM\",\"detail\":\"GEO.JSON.UNIFORM( GeoJSON:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.JSON.UNIFORM( GeoJSON:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.JSON`](doc/GEO.JSON), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.JSON.UNIFORM\"},{\"name\":\"GEO.NORMALIZE\",\"detail\":\"GEO.NORMALIZE( shapeA:GEOSHAPE shapeB:GEOSHAPE ): normalizedA:GEOSHAPE normalizedB:GEOSHAPE\",\"documentation\":\"The `GEO.NORMALIZE` function ensures that the intersection of two **GEOSHAPE**s is present in both as an identical set of cells.\\n\\n@param `shapeA` The first GEOSHAPE to normalize.\\n\\n@param `shapeB` The second GEOSHAPE to normalize.\\n\\n@param `normalizedA` A normalized copy of the first GEOSHAPE.\\n\\n@param `normalizedB` A normalized copy of the second GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEO.NORMALIZE\"},{\"name\":\"GEO.OPTIMIZE\",\"detail\":\"GEO.OPTIMIZE( shape:GEOSHAPE resolution:LONG ): optimized:GEOSHAPE\",\"documentation\":\"The `GEO.OPTIMIZE` function optimizes a GEOSHAPE instance by modifying its cells to either limit the finest resolution present in the shape or reduce the number of cells by merging cells which cover a whole cell at the coarser resolution.\\n\\n@param `shape` GEOSHAPE instance to optimize.\\n\\n@param `resolution` Finest resolution acceptable (even number from 2 to 32) or 0 to reduce the number of cells.\\n\\n@param `optimized` Optimized GEOSHAPE instance\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.OPTIMIZE\"},{\"name\":\"GEO.REGEXP\",\"detail\":\"GEO.REGEXP( shape:GEOSHAPE ): regexp:STRING\",\"documentation\":\"The `GEO.REGEXP` function converts a GEOSHAPE into a regular expression to select hexadecimal [HHCode](https://en.wikipedia.org/wiki/HHCode) STRINGs which are included in the GEOSHAPE.\\n\\n@param `shape` An instance of GEOSHAPE.\\n\\n@param `regexp` A regular expression for matching HHCodes covered by 'shape'.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GEO.REGEXP\"},{\"name\":\"GEO.UNION\",\"detail\":\"GEO.UNION( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\\nGEO.UNION( shapes:LIST<GEOSHAPE> ): shape:GEOSHAPE\",\"documentation\":\"The `GEO.UNION` function computes a GEOSHAPE which is the union of two other shapes. The resulting shape will have cells covering the two original shapes. If you need to have cells up to a certain resolution you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the resulting shape.\\n\\n@param `shapeA` First GEOSHAPE instance to merge.\\n\\n@param `shapeB` Second GEOSHAPE instance to merge.\\n\\n@param `shapes` GEOSHAPE instances to merge.\\n\\n@param `shape` Resulting GEOSHAPE which is the union of the given shapes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.UNION\"},{\"name\":\"GEO.WITHIN\",\"detail\":\"GEO.WITHIN( gts:GTS shape:GEOSHAPE ): result:BOOLEAN\\nGEO.WITHIN( lgts:LIST<GTS> shape:GEOSHAPE ): results:LIST<BOOLEAN>\",\"documentation\":\"The `GEO.WITHIN` function checks whether a Geo Time Series™ or each GTS from a list have all its datapoints with a location inside a given geographical area.\\n\\n@param `shape` Instance of GEOSHAPE containing the area inside which the Geo Time Series™ must be contained.\\n\\n@param `gts` Single instance of Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series™ had all its datapoints with a location inside 'shape'.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had all its datapoints with a location inside 'shape'.\\n\\n\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WITHIN\"},{\"name\":\"GEO.WKB\",\"detail\":\"GEO.WKB( WKB:BYTES percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKB( WKB:BYTES resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.WKB` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB\"},{\"name\":\"GEO.WKB.UNIFORM\",\"detail\":\"GEO.WKB.UNIFORM( WKB:BYTES percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKB.UNIFORM( WKB:BYTES resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.WKB.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKB`](doc/GEO.WKB), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB.UNIFORM\"},{\"name\":\"GEO.WKT\",\"detail\":\"GEO.WKT( WKT:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKT( WKT:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.WKT` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WKT\"},{\"name\":\"GEO.WKT.UNIFORM\",\"detail\":\"GEO.WKT.UNIFORM( WKT:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKT.UNIFORM( WKT:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"documentation\":\"The `GEO.WKT.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKT`](doc/GEO.WKT), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.2.11\",\"OPB64name\":\"GEO.WKT.UNIFORM\"},{\"name\":\"GEOCELL->\",\"detail\":\"GEOCELL->( geocell:LONG ): hhPrefix:STRING\",\"documentation\":\"The `GEOCELL->` function converts a **LONG** geocell to a **STRING** HHCode prefix. The resulting string length is half the resolution of the geocell.\\n\\nThis function cannot convert to **BYTES** because this representation is limited to resolutions multiple of 4.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `geocell` A geocell.\\n\\n@param `hhPrefix` A HHCode prefix representing the given cell.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEFoKBI1oy\"},{\"name\":\"GEOHASH->\",\"detail\":\"GEOHASH->( geohash:STRING ): lat:DOUBLE lon:DOUBLE\\nGEOHASH->( geohash:STRING toHHCodeString:BOOLEAN ): hhcode:ANY\\nGEOHASH->( geohashes:LIST<STRING> ): shape:GEOSHAPE\",\"documentation\":\"The `GEOHASH->` converts a [Geohash](https://en.wikipedia.org/wiki/Geohash), exposing the latitude and longitude it contains, or transforms a list of Geohashes into a `GEOSHAPE`.\\n\\n@param `geohash` Geohash to unpack.\\n\\n@param `geohashes` List of Geohashes defining a geographical area.\\n\\n@param `lat` Unpacked latitude.\\n\\n@param `lon` Unpacked longitude.\\n\\n@param `toHHCodeString` Set to `true` to convert the GeoHash to a HHCode STRING or to `false` to convert it to a LONG HHCode instead of extracting its latitude and longitude.\\n\\n@param `hhcode` The HHCode for `geohash`, as a LONG or STRING.\\n\\n@param `shape` Warp 10 `GEOSHAPE` covering the same geographic area as the Geohashes in `geohashes`.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GoKEH34IH1oy\"},{\"name\":\"GEOPACK\",\"detail\":\"GEOPACK( shape:GEOSHAPE ): packed:STRING\",\"documentation\":\"The `GEOPACK` function takes a **GEOSHAPE** and packs it into a String.\\n\\n@param `shape` The GEOSHAPE instance to pack.\\n\\n@param `packed` The packed string representation of the GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOPACK\"},{\"name\":\"GEOSHAPE->\",\"detail\":\"GEOSHAPE->( geoshape:GEOSHAPE ): geocells:LIST<LONG>\\nGEOSHAPE->( geoshape:GEOSHAPE toString:BOOLEAN ): geocellsOrHHPrefixes:LIST<ANY>\",\"documentation\":\"The `GEOSHAPE->` function converts **GEOSHAPE** to a list of **LONG** geocells or **STRING** HHCode prefixes. Conversion to list of **BYTES** is not supported, because this representation only supports resolution multiple of 4.\\n\\n@param `geoshape` The geoshape to get the cells from.\\n\\n@param `toString` Whether to convert the cells to **STRING** HHCode prefix (true) or geocells (false).\\n\\n@param `geocells` List of geocells.\\n\\n@param `geocellsOrHHPrefixes` List of **LONG** geocells or **STRING** HHCode prefixes.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEJoW0J3JhEV\"},{\"name\":\"GEOSHIFT\",\"detail\":\"GEOSHIFT( shape:GEOSHAPE lat:DOUBLE lon:DOUBLE precision:LONG ): output:GEOSHAPE\\nGEOSHIFT( shape:GEOSHAPE meridian:DOUBLE lat:DOUBLE lon:DOUBLE precision:LONG ): output:GEOSHAPE\",\"documentation\":\"`GEOSHIFT` functions shifts a geoshape on the earth. It is able to safely overlap the poles or the 180th meridian.\\n- Longitude shift keeps distances.\\n- Latitude shift keeps angles, not distances.\\n- When doing latitude shift, you can specify a meridian to shift along this meridian. It means a positive shift became a negative shift behind this meridian +/- 90°.\\n\\nSet precision parameter to zero for safe shifting operation. See [`GEO.WKT`](/doc/GEO.WKT) for precision encoding.\\n\\nUse [`->GEOJSON`](/doc/AIt6GJx9JoxD) to visualize shapes and the results. GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `lon` degrees of longitude to shift (-360 to 360).\\n\\n@param `lat` degrees of latitude to shift (-180 to 180).\\n\\n@param `precision` even number from 0 to 30. Set to 0 for automatic resolution. Force to another value if you know the input resolution to be finer and you want a coarser resolution.\\n\\n@param `shape` The input geoshape.\\n\\n@param `output` The shifted geoshape.\\n\\n@param `meridian` When doing latitude shift, you can specify a meridian to shift along this meridian. (-180 to 180)\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSHIFT\"},{\"name\":\"GEOSPLIT\",\"detail\":\"GEOSPLIT( shape:GEOSHAPE ): subshapes:LIST<GEOSHAPE>\",\"documentation\":\"The `GEOSPLIT` function splits a **GEOSHAPE** into a set of **GEOSHAPE**s which have no adjacent cells (each shape is a connected space).\\n\\nAdjacent cells share part of their side. Adjacency is not provided by corners and cells on each side of the international date line are not considered adjacent either.\\n\\n@param `shape` The GEOSHAPE instance to split.\\n\\n@param `subshapes` The shapes whose union form `shape` and which each form a connected space.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSPLIT\"},{\"name\":\"GEOUNPACK\",\"detail\":\"GEOUNPACK( packed:STRING ): shape:GEOSHAPE\\nGEOUNPACK( packedbytes:BYTES ): shape:GEOSHAPE\",\"documentation\":\"The `GEOUNPACK` function unpacks a GEOSHAPE previously packed using [`GEOPACK`](/doc/GEOPACK).\\n\\n@param `packed` A packed string representation of a GEOSHAPE.\\n\\n@param `packedbytes` A byte array representation of a GEOSHAPE.\\n\\n@param `shape` The decoded instance of GEOSHAPE.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOUNPACK\"},{\"name\":\"GET\",\"detail\":\"GET( map:MAP key:ANY ): mapvalue:ANY\\nGET( list:LIST index:LONG ): value:ANY\\nGET( list:LIST index:LIST ): value:ANY\\nGET( array:BYTES index:LONG ): bytevalue:LONG\",\"documentation\":\"Retreive a value in a **MAP** or a **list**.\\n\\nThe `GET` function consumes on the top of the stack a list, a byte array, or a map, and the index (or the key), \\nthen put the result on the stack. \\n\\nIf key is not found, it returns NULL on the stack.\\n\\nIf index is out of bound, `GET` raises an error.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, GET can operate recursively on nested lists. In this case, the index is a list.\\n\\n@param `map` The input MAP.\\n\\n@param `key` Depending on map construction, could be a number, a string, a list, another map, a GTS, a boolean.\\n\\n@param `mapvalue` The value for the requested key. If key do not exists in map, returns NULL\\n\\n@param `index` The index number in the list. Valid values in [-size; size-1]\\n\\n@param `list` The input LIST.\\n\\n@param `value` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `array` Byte array from which to read a byte.\\n\\n@param `bytevalue` The value of the byte, always unsigned (from 0 to 255).\\n\\n\",\"tags\":[\"lists\",\"maps\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"GET\"},{\"name\":\"GETEXPONENT\",\"detail\":\"GETEXPONENT( n:NUMBER ): exponent:LONG\",\"documentation\":\"The `GETEXPONENT` function consumes a DOUBLE, a LONG casted as a DOUBLE or a COUNTER caster as DOUBLE and pushes back the unbiased exponent used in the representation of this DOUBLE.\\n\\n@param `n` The decimal value to get the exponent from, will be converted to DOUBLE if not already the case.\\n\\n@param `exponent` the unbiased exponent of the argument\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"GETEXPONENT\"},{\"name\":\"GETHOOK\",\"detail\":\"GETHOOK( token:STRING hook:STRING ): secure:STRING\",\"documentation\":\"Extracts the macro associated with a token hook and pushes it onto the stack wrapped as a secure script.\\n\\nIf the token does not contain the given hook, an empty macro will be wrapped.\\n\\n@param `hook` Name of the hook to extract from the token.\\n\\n@param `token` Read token from which to extract the hook.\\n\\n@param `secure` Hook macro wrapped in a secure script.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.8\",\"OPB64name\":\"GETHOOK\"},{\"name\":\"GETSECTION\",\"detail\":\"GETSECTION(): section:STRING\",\"documentation\":\"The `GETSECTION` function pushes onto the stack the name of the current section.\\n\\n@param `section` Name of the current section.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"GETSECTION\"},{\"name\":\"GOLDWRAP\",\"detail\":\"GOLDWRAP( encoder:GTSENCODER ): wrapped:BYTES\\nGOLDWRAP( gts:GTS ): wrapped:BYTES\\nGOLDWRAP( wrap:BYTES ): wrapped:BYTES\\nGOLDWRAP( list:LIST<GTS> ): lwrapped:LIST<BYTES>\\nGOLDWRAP( list:LIST<GTSENCODER> ): lwrapped:LIST<BYTES>\\nGOLDWRAP( list:LIST<BYTES> ): lwrapped:LIST<BYTES>\",\"documentation\":\"The `GOLDWRAP` function wraps a Geo Time Series™ or a GTS Encoder in a deterministic way, by sorting on timestamps but also on values, locations and elevations.\\n\\nThis version of a `WRAP` like function is meant to create a *gold standard* blob from its input. In order to ensure reproducibility of the processs, attributes should be dropped prior to calling `GOLDWRAP`.\\n\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `wrap` Wrapped Geo Time Series™ instance to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders to wrap.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"GOLDWRAP\"},{\"name\":\"GROUPBY\",\"detail\":\"GROUPBY( list:LIST macro:MACRO ): grouped:LIST\",\"documentation\":\"The `GROUPBY` function groups the elements of a list according to the value returned by a macro.\\n\\n@param `macro` Macro used for grouping, consumes an element off the stack and produces a value on the stack.\\n\\n@param `list` List of elements to group.\\n\\n@param `grouped` List of groups, each group is a list whose first element is the group key and whose second element is the sublist of `list` for which `macro` produced the same value.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"GROUPBY\"},{\"name\":\"GRUBBSTEST\",\"detail\":\"GRUBBSTEST( gts:GTS mad:BOOLEAN alpha:DOUBLE ): result:LIST<LONG>\\nGRUBBSTEST( gts:GTS mad:BOOLEAN ): result:LIST<LONG>\\nGRUBBSTEST( gtsList:LIST<GTS> mad:BOOLEAN alpha:DOUBLE ): resultList:LIST\\nGRUBBSTEST( gtsList:LIST<GTS> mad:BOOLEAN ): resultList:LIST<LIST<LONG>>\",\"documentation\":\"The `GRUBBSTEST` function detects an outlier in a GTS (or a LIST of GTS), by applying a \\n[Grubbs’](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h1.htm) test.\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nIt tests whether there is exactly a single outlier in a GTS or not. For an iterative version which can detect multiple outliers, use instead\\n[`ESDTEST`](/doc/ESDTEST).\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> ### Reference \\n> Grubbs, Frank (February 1969). “Procedures for Detecting Outlying Observations in Samples”. Technometrics (Technometrics, Vol. 11, No. 1).\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"GRUBBSTEST\"},{\"name\":\"GTSHHCODE->\",\"detail\":\"GTSHHCODE->( hhcode:LONG ): lat:DOUBLE lon:DOUBLE\\nGTSHHCODE->( hhcode:STRING ): lat:DOUBLE lon:DOUBLE\\nGTSHHCODE->( hhcode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"documentation\":\"The `GTSHHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude. This function is very similar to [`HHCODE->`](/doc/H3W2IoG4AIs) except that when given the internal value used by Geo Time Series™ for a missing location it pushes back `NaN NaN`.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GpGIH3W2IoG4AIs\"},{\"name\":\"GZIP\",\"detail\":\"GZIP( string:STRING ): compressed:BYTES\\nGZIP( bytes:BYTES ): compressed:BYTES\",\"documentation\":\"The `GZIP` function compresses a STRING or a byte array using the [gzip](https://en.wikipedia.org/wiki/Gzip) algorithm. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"GZIP\"},{\"name\":\"HASH\",\"detail\":\"HASH( str:STRING ): result:LONG\\nHASH( bytes:BYTES ): result:LONG\",\"documentation\":\"Computes a 64 bits hash of the string or byte array on top of the stack.\\n\\n@param `str` String to hash\\n\\n@param `bytes` Bytes to hash\\n\\n@param `result` 64bit hash\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"HASH\"},{\"name\":\"HAVERSINE\",\"detail\":\"HAVERSINE( p1_latitude:NUMBER p1_longitude:NUMBER p2_latitude:NUMBER p2_longitude:NUMBER ): haversineDistance:DOUBLE\",\"documentation\":\"The `HAVERSINE` function consumes two coordinates and pushes back a **DOUBLE** [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance) in meters.\\n\\n@param `p2_longitude` Point 2 longitude.\\n\\n@param `p2_latitude` Point 2 latitude.\\n\\n@param `p1_longitude` Point 1 longitude.\\n\\n@param `p1_latitude` Point 1 latitude.\\n\\n@param `haversineDistance` Great circle distance using the haversine fonction.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"HAVERSINE\"},{\"name\":\"HEADER\",\"detail\":\"HEADER( name:STRING value:STRING ): \",\"documentation\":\"The `HEADER` function allows you to set custom headers which should be returned in the HTTP response. This obviously works only for the `/exec` Warp 10 endpoint.\\n\\n@param `name` Name of HTTP header to return, MUST start with `X-`, *i.e.* be a custom header.\\n\\n@param `value` Value to return for the `name` header. If `NULL`, the specified header is removed from the list of headers to return.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"HEADER\"},{\"name\":\"HEX->\",\"detail\":\"HEX->( input:STRING ): output:BYTES\",\"documentation\":\"Converts a hexadecimal string representation into a bytes array.\\nBytes array cannot be represented on the stack.\\n\\n@param `input` A valid hexadecimal string.\\n\\n@param `output` Bytes Array from input. Seen as null on the stack.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H3KNAIs\"},{\"name\":\"HEXTOB64\",\"detail\":\"HEXTOB64( input:STRING ): output:STRING\",\"documentation\":\"Decodes the hex encoded content on top of the stack and \\nimmediately re-encode it in base64. This enables you to \\nconvert encoded content which would not be valid UTF-8 encoding \\nfrom hexadecimal to base64.      \\n\\n@param `input` A valid hexadecimal string\\n\\n@param `output` Base64 representation of input\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOB64\"},{\"name\":\"HEXTOBIN\",\"detail\":\"HEXTOBIN( input:STRING ): output:STRING\",\"documentation\":\"Converts a string representing a hexadecimal number into a string representing a binary number.\\n\\nThe `HEXTOBIN` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from hexadecimal to binary.\\n\\n@param `input` The string representing a hexadecimal number\\n\\n@param `output` The string representing a binary number\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOBIN\"},{\"name\":\"HHCODE->\",\"detail\":\"HHCODE->( hhcode:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE->( hhcode:STRING ): lat:DOUBLE lon:DOUBLE\\nHHCODE->( hhcode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"documentation\":\"The `HHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"H3W2IoG4AIs\"},{\"name\":\"HHCODE.BBOX\",\"detail\":\"HHCODE.BBOX( hhCode:STRING resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:LONG resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:BYTES resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:STRING ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:BYTES ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\",\"documentation\":\"The `HHCODE.BBOX` function returns the bounding box of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the bounding box representing the lat/lon of North-Easth and South-West corners of the bbox.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `latSW` Latitude of the south west corner of the bounding box\\n\\n@param `lonSW` Longitude of the south west corner of the bounding box\\n\\n@param `latNE` Latitude of the north east corner of the bounding box\\n\\n@param `lonNE` Longitude of the north east corner of the bounding box\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.BBOX\"},{\"name\":\"HHCODE.CENTER\",\"detail\":\"HHCODE.CENTER( hhCode:STRING resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:LONG resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:BYTES resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:STRING ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"documentation\":\"The `HHCODE.CENTER` function returns the center of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the center and returns its lat/lon.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `lat` Latitude of the center of the given HHCode\\n\\n@param `lon` Longitude of the center of the given HHCode\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.CENTER\"},{\"name\":\"HHCODE.EAST\",\"detail\":\"HHCODE.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.EAST` function returns the cell east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.EAST\"},{\"name\":\"HHCODE.NORTH\",\"detail\":\"HHCODE.NORTH( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.NORTH` function returns the cell north of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH\"},{\"name\":\"HHCODE.NORTH.EAST\",\"detail\":\"HHCODE.NORTH.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.NORTH.EAST` function returns the cell north east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.EAST\"},{\"name\":\"HHCODE.NORTH.WEST\",\"detail\":\"HHCODE.NORTH.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.NORTH.WEST` function returns the cell north west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.WEST\"},{\"name\":\"HHCODE.SOUTH\",\"detail\":\"HHCODE.SOUTH( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.SOUTH` function returns the cell south of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH\"},{\"name\":\"HHCODE.SOUTH.EAST\",\"detail\":\"HHCODE.SOUTH.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.SOUTH.EAST.EAST` function returns the cell south east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.EAST\"},{\"name\":\"HHCODE.SOUTH.WEST\",\"detail\":\"HHCODE.SOUTH.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.SOUTH.WEST` function returns the cell south west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.WEST\"},{\"name\":\"HHCODE.WEST\",\"detail\":\"HHCODE.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"documentation\":\"The `HHCODE.WEST` function returns the cell west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.WEST\"},{\"name\":\"HIDE\",\"detail\":\"HIDE( levels:LONG ): hidden:LONG\",\"documentation\":\"The `HIDE` function hides some levels of the stack to the rest of the executing code. This allows a kind of protection for levels which should not be accessed by a macro call for example. Note that this is not a real protection since a call to [`SHOW`](/doc/SHOW) could reveal the hidden levels.\\n\\nThe hidden levels are always the deepest. Depending on the `levels` parameter to the call to `HIDE`, the hidden levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there remains at most a certain number ((*abs(`levels`)*) with `levels` < 0).\\n\\nWhen called with `NULL` as parameter, `HIDE` will hide all the visible levels.\\n\\nThe number of newly hidden levels is returned.\\n\\n@param `levels` Number of levels to hide or to remain visible, or `NULL` to hide them all.\\n\\n@param `hidden` Number of levels actually hidden.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"HIDE\"},{\"name\":\"HLOCATE\",\"detail\":\"HLOCATE( gts:LIST<GTS> ): result:LIST\",\"documentation\":\"The `HLOCATE` function locates the HBase regions containing a list of Geo Time Series™.\\n\\nThis function only works with the distributed version of Warp 10™.\\n\\nIt outputs a list of lists containing a GTS selector, the host and port of the RegionServer currently serving the region and the region id of a region containing data for this GTS.\\n\\n@param `gts` List of Geo Time Series™ to locate.\\n\\n@param `result` List of GTS, RegionServer, region tuples.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.2.13\",\"OPB64name\":\"HLOCATE\"},{\"name\":\"HULLSHAPE\",\"detail\":\"HULLSHAPE( list:LIST ): shape:LIST\\nHULLSHAPE( { list:LIST  } ): shape:LIST\",\"documentation\":\"Return the shape of a tensor (or multidimensional array) that would be able to contain all the values of an input nested list. The size of the returned shape is equal to the deepest level of nesting plus one. Its i-th value is equal to the size of the largest list that is nested i levels deep.\\n\\n@param `list` The input list.\\n\\n@param `shape` The hull shape of the input list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"HULLSHAPE\"},{\"name\":\"HUMANDURATION\",\"detail\":\"HUMANDURATION( duration:LONG ): humanReadableDuration:STRING\",\"documentation\":\"The `HUMANDURATION` function consumes a **LONG** duration and push back an easily readable **STRING** representation of this duration.\\n\\nThe format of the pushed back **STRING** is **[Dd][Hh][Mm]S.XXXXXXs** with D as days, H as hours, M as minutes, S as seconds and XXXXXX the number of ms (3 digits), us (6 digits) or ns (9 digits) depending on the platform configuration. If the duration is less than a day, Dd is omitted, sames goes with Hh and Mm.\\n\\n@param `duration` Duration expressed in the platform time unit.\\n\\n@param `humanReadableDuration`  A representation of the duration, easily readable for a human.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"HUMANDURATION\"},{\"name\":\"HYBRIDTEST\",\"detail\":\"HYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE parameters:MAP ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG parameters:MAP ): result:LIST<LONG>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE parameters:MAP ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG parameters:MAP ): result:LIST<LIST<LONG>>\",\"documentation\":\"The `HYBRIDTEST` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\nLike [`STLESDTEST`](/doc/STLESDTEST), `HYBRIDTEST` performs an [`ESDTEST`](/doc/ESDTEST) onto a GTS that have been relieved of its seasonal and trend part. \\nBut unlike the mentioned test, [`STL`](/doc/STL) and [`ESDTEST`](/doc/ESDTEST) are performed piecewise. Plus, the trend is approximated with the piecewise \\nmedian instead of the trend part of the [`STL`](/doc/STL) decomposition.\\n\\nA LIST of ticks (or a LIST of LIST of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis technique was first developped at [Twitter](https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series).\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ## References\\n> - Owen Vallis, Jordan Hochenbaum, Arun Kejariwal. “A Novel Technique for Long-Term Anomaly Detection in the Cloud”, Twitter Inc (2014).\\n> - Cleveland, Robert B., et al. “STL: A seasonal-trend decomposition procedure based on loess.” Journal of Official Statistics 6.1 (1990): 3-73.\\n> - Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n\\n@param `parameters` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `lgts` List of [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST\"},{\"name\":\"HYBRIDTEST2\",\"detail\":\"HYBRIDTEST2( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nHYBRIDTEST2( gts:GTS period:LONG piece:LONG k:LONG ): result:LIST<LONG>\\nHYBRIDTEST2( gtsList:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LIST<LONG>>\\nHYBRIDTEST2( gtsList:LIST<GTS> period:LONG piece:LONG k:LONG ): result:LIST<LIST<LONG>>\",\"documentation\":\"The `HYBRIDTEST2` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\n`HYBRIDTEST2` is almost the same procedure than [`HYBRIDTEST`](/doc/HYBRIDTEST) except that it does not use [`STL`](/doc/STL) decomposition for the \\nseasonal extract.\\n\\nThe seasonal part is approximated by pondering each value with the [entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29) of the \\n[modified Z-score](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm) of its seasonal subseries (series with only the values of the \\nsame season).\\n\\nThis test is usually preferred when it is meaningful to think in term of entropy, for example when the GTS represents counters of events. Also as it \\ndoes not use [`STL`](/doc/STL) decomposition, it is not prone to border effects, but at the cost of not detecting slight outliers.\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n@param `gtsList` List of GTS\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST2\"},{\"name\":\"HYPOT\",\"detail\":\"HYPOT( x:NUMBER y:NUMBER ): result:DOUBLE\\nHYPOT( x:NUMBER ly:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nHYPOT( lx:LIST<NUMBER> y:NUMBER ): lresult:LIST<DOUBLE>\",\"documentation\":\"HYPOT function returns the radius r from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta), r = sqrt(x²+y²).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `result` radius r in polar coordinates\\n\\n@param `lresult` List of radiuses r in polar coordinates\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYPOT\"},{\"name\":\"IDENT\",\"detail\":\"IDENT(): ident:STRING\",\"documentation\":\"The `IDENT` function pushes onto the stack the value of the system property `warp.ident`.\\n\\n@param `ident` The value of the `warp.ident` property.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDENT\"},{\"name\":\"IDWT\",\"detail\":\"IDWT( gts:GTS wavelet:STRING ): result:GTS\",\"documentation\":\"The `IDWT` function computes an Inverse [Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Discrete_wavelet_transform) on a Geo Time Series™.\\n\\nThe names of the available Wavelet are the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\n\\n@param `wavelet` Wavelet to consider\\n\\n@param `gts` Geo Time Series™ which contains the wavelet coefficients as is returned by [`FDWT`](/doc/FDWT).\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDWT\"},{\"name\":\"IEEEREMAINDER\",\"detail\":\"IEEEREMAINDER( dividend:NUMBER divisor:NUMBER ): result:LONG\\nIEEEREMAINDER( dividend:NUMBER ldivisor:LIST<NUMBER> ): lresult:LIST<LONG>\\nIEEEREMAINDER( ldividend:LIST<NUMBER> divisor:NUMBER ): lresult:LIST<LONG>\",\"documentation\":\"The `IEEEREMAINDER` function consumes two parameters, a dividend f1 and a divisor f2. This function push the remainder onto the stack as\\nprescribed by the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_754-1985).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` Dividend, converted as DOUBLE if not already the case.\\n\\n@param `divisor` Divisor, converted as DOUBLE if not already the case.\\n\\n@param `result` Remainder\\n\\n@param `ldividend` List of dividends, converted as DOUBLE if not already the case.\\n\\n@param `ldivisor` List of divisors, converted as DOUBLE if not already the case.\\n\\n@param `lresult` List of remainders\\n\\n\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"IEEEREMAINDER\"},{\"name\":\"IFFT\",\"detail\":\"IFFT( real:GTS im:GTS ): result:GTS\",\"documentation\":\"The `IFFT` function computes an Inverse [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) of two Geo Time Series™ \\nrepresenting real and imaginary parts of FFT coefficients.\\n\\nThe result is the reconstructed Geo Time Series™. The ticks of this reconstructed GTS are the coefficient indices. They must be multipled by the original \\nbucketspan to space the ticks according to the decomposed Geo Time Series™. The bucketspan is equal to `X / (n * factor)` where `X` is the number of time \\nunits in a second, `n` is the number of coefficients and `factor` is the scale factor returned by `FFT`.\\n\\n@param `im` GTS containing the imaginary part\\n\\n@param `real` GTS containing the real parts of the `FFT` coefficients\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFFT\"},{\"name\":\"IFT\",\"detail\":\"IFT( if:MACRO then:MACRO ): result:ANY*\\nIFT( check:BOOLEAN then:MACRO ): result:ANY*\",\"documentation\":\"The `IFT` function is a conditional construct which will run a macro only if a boolean condition is true. The condition can either be a boolean on the stack or the result of a macro run.\\n\\n@param `check` Boolean which will be checked as the conditional test.\\n\\n@param `if` Macro which will be executed to determine the conditional test. This macro must leave a boolean on the stack.\\n\\n@param `then` Macro which is executed if the conditional test is `true`.\\n\\n@param `result` State of the stack after the `then` macro is executed.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFT\"},{\"name\":\"IFTE\",\"detail\":\"IFTE( if:MACRO then:MACRO else:MACRO ): result:ANY*\\nIFTE( condition:BOOLEAN then:MACRO else:MACRO ): result:ANY*\",\"documentation\":\"The `IFTE` function is a conditional construct which evaluates a condition and executes one of two macros depending on the condition (`true` or `false`). The condition can either be a BOOLEAN value on the stack or a macro which will be executed and must leave a BOOLEAN on the stack.\\n\\n@param `else` Macro executed if the condition is `false`.\\n\\n@param `then` Macro executed if the condition is `true`.\\n\\n@param `if` Macro executed to evaluate the condition. Must leave a BOOLEAN on top of the stack.\\n\\n@param `condition` Boolean value used as the condition.\\n\\n@param `result` Result of the execution of either the `then` or `else` macro.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFTE\"},{\"name\":\"IMMUTABLE\",\"detail\":\"IMMUTABLE( list:LIST ): immutableList:LIST\\nIMMUTABLE( map:MAP ): immutableMap:MAP\\nIMMUTABLE( set:SET ): immutableSet:SET\\nIMMUTABLE( vector:VLIST ): immutableVector:VLIST\",\"documentation\":\"Transforms a collection (**LIST**, **MAP**, **VLIST**, **SET**) into an immutable one. Any attempt to modify the immutable collection will fail. The original collection is not modified.\\n\\n@param `list` List to wrap into an immutable wrapper.\\n\\n@param `map` Map to wrap into an immutable wrapper.\\n\\n@param `set` Set to wrap into an immutable wrapper.\\n\\n@param `vector` Vector to wrap into an immutable wrapper.\\n\\n@param `immutableList` Immutable version of 'list'.\\n\\n@param `immutableMap` Immutable version of 'map'.\\n\\n@param `immutableSet` Immutable version of 'set'.\\n\\n@param `immutableVector` Immutable version of 'vector'.\\n\\n\",\"tags\":[\"lists\",\"maps\",\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"IMMUTABLE\"},{\"name\":\"IMPORT\",\"detail\":\"IMPORT( prefix:STRING as:STRING ): \",\"documentation\":\"The `IMPORT` function allows to create aliases for macro name prefixes. This is handy when accessing macros from WarpFleet™ repositories which might have multiple versions and/or long group and artifact ids. When fetching a macro, the *imported* prefixes will be scanned and the longest matching one will be replaced by the associated alias.\\n\\n@param `prefix` Original prefix to *import*.\\n\\n@param `as` Name under which `prefix` will be imported.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"IMPORT\"},{\"name\":\"INCREMENTEXACT\",\"detail\":\"INCREMENTEXACT( value:NUMBER ): result:DOUBLE\\nINCREMENTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `INCREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value incremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be incremented by one\\n\\n@param `result` The incremented value\\n\\n@param `lvalue` List of values to be incremented by one\\n\\n@param `lresult` List of incremented values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"INCREMENTEXACT\"},{\"name\":\"INFLATE\",\"detail\":\"INFLATE( compressed:BYTES ): uncompressed:BYTES\",\"documentation\":\"Decompresses a byte array containing data compressed by [`DEFLATE`](doc/DEFLATE).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"INFLATE\"},{\"name\":\"INFO\",\"detail\":\"INFO( { plugin:STRING ext:STRING name:STRING since:STRING deprecated:STRING deleted:STRING version:STRING tags:LIST desc:STRING sig:LIST params:MAP related:LIST examples:LIST conf:LIST  } ): \",\"documentation\":\"Generate documentation of a function or a macro.\\n\\n@param `conf` String list of related configuration keys existing in the Warp 10 configuration.\\n\\n@param `examples` String list of WarpScript examples.\\n\\n@param `related` String list of related functions.\\n\\n@param `params` Map describing the parameters defined in `sig`.\\n\\n@param `sig` List of signatures. Each signature is a **LIST** with 2 lists (input and output) which contain parameter definitions: *eg* `param1:STRING` in stack order (top first)\\n\\n@param `desc` Description of the function or macro.\\n\\n@param `tags` String list tags (*eg* categories).\\n\\n@param `version` Version of the Warp 10 distribution on which this funcion is available (`standalone` | `distributed` | `all` | `pkg` | `ext` | `plugin`)\\n\\n@param `deleted` Version's number of Warp 10 where this function (or macro) was deleted.\\n\\n@param `deprecated` Version's number of Warp 10 where this function (or macro) was deprecated.\\n\\n@param `since` Version's number of Warp 10 where this function (or macro) was included.\\n\\n@param `name` Name of the function or macro.\\n\\n@param `ext` Fully qualified class name of the WarpScript Extension defining the function.\\n\\n@param `plugin` Fully qualified class name of the WarpScript Plugin defining the function.\\n\\n\",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFO\"},{\"name\":\"INFOMODE\",\"detail\":\"INFOMODE(): \",\"documentation\":\"Toggles the info mode ON or OFF depending on its current state. Default is OFF when the stack is created.\\n\\nWhen info mode is ON, the [`INFO`](/doc/INFO) function pushes its map parameter on the stack and stops the current execution as [`STOP`](/doc/STOP) would do.\\n\\n\",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFOMODE\"},{\"name\":\"INTEGRATE\",\"detail\":\"INTEGRATE( gts:GTS initial:NUMBER ): result:GTS\\nINTEGRATE( lgts:LIST<GTS> initial:NUMBER ): lresult:LIST<GTS>\",\"documentation\":\"The `INTEGRATE` function takes a GTS or a list thereof and integrates it/them, considering the value at each tick is a rate of change per second.\\n\\n@param `initial` Initial value\\n\\n@param `gts` GTS to integrate\\n\\n@param `lgts` List of GTS to integrate\\n\\n@param `result` Integrated GTS\\n\\n@param `lresult` List of integrated GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTEGRATE\"},{\"name\":\"INTERPOLATE\",\"detail\":\"INTERPOLATE( gts:GTS ): result:GTS\\nINTERPOLATE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `INTERPOLATE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with by interpolating linearly. \\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled bucketized GTS\\n\\n@param `resultList` list of filled bucketized GTS\\n\\n\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERPOLATE\"},{\"name\":\"INTERSECTION\",\"detail\":\"INTERSECTION( setA:SET setB:SET ): output:SET\",\"documentation\":\"Computes the intersection &#x2229; of two sets.\\n\\nThe `INTERSECTION` function consumes two sets from the top of the stack and pushes back its mathematical intersection (ie: the elements in common).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x2229; *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERSECTION\"},{\"name\":\"INV\",\"detail\":\"INV( matrix:MATRIX ): inverse:MATRIX\",\"documentation\":\"Inverts a matrix. The inversion is attempted using the [LU Decomposition](https://en.wikipedia.org/wiki/LU_decomposition) algorithm.\\n\\nIf the matrix is singular or not square an error will be raised.\\n\\n@param `matrix` Matrix to invert.\\n\\n@param `inverse` Inverse of the original matrix.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"INV\"},{\"name\":\"ISAUTHENTICATED\",\"detail\":\"ISAUTHENTICATED(): result:BOOLEAN\",\"documentation\":\"Returns true or false whether or not the stack is authenticated\\n\\n@param `result` True if the stack is authenticated, false otherwise\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ISAUTHENTICATED\"},{\"name\":\"ISNULL\",\"detail\":\"ISNULL( p:ANY ): result:BOOLEAN\",\"documentation\":\"The `ISNULL` function consumes a parameter p from the top of the stack and pushes onto the stack true if p is null, else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p is null\\n\\n\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNULL\"},{\"name\":\"ISNaN\",\"detail\":\"ISNaN( p:ANY ): result:BOOLEAN\",\"documentation\":\"The `ISNaN` function consumes a numeric parameter p from the top of the stack and pushes onto the stack true if p is Not a Number (NaN), else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p a Double and is NaN, false  otherwise\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNaN\"},{\"name\":\"ISO8601\",\"detail\":\"ISO8601( timestamp:LONG ): iso8601dateAndTime:STRING\\nISO8601( timestamp:LONG timezone:STRING ): iso8601dateAndTime:STRING\",\"documentation\":\"The `ISO8601` function consumes an optional **STRING** timezone and a **LONG** UTC timestamp and pushes back a **STRING** representing the date and time according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\\n\\nDepending on the platform time unit, the part representing seconds can have 3, 6 or 9 significant figures respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time representation.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `iso8601dateAndTime` Representation of the date and time of the given timestamp for the givent timezone according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISO8601\"},{\"name\":\"ISODURATION\",\"detail\":\"ISODURATION( duration:LONG ): iso8601duration:STRING\",\"documentation\":\"The `ISODURATION` function consumes a **LONG** duration in platform unit and pushes back a **STRING** reresenting an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Whatever the platform time unit is, the representation maximum resolution is milliseconds.\\n\\nThe format of the ISO 8601 representation is `PThHmMs.xS` with `h` as hours, `m` as minutes, `s` as seconds and `x` as milliseconds. If any of these value is zero, the value and unit are omitted. The only exception is for a duration of 0 which is represented as `PT0S`. If the duration is negative, `h`, `m` and `s`, if displayed, are negative numbers. \\n\\n@param `duration` A duration expressed in platform time unit.\\n\\n@param `iso8601duration` A representation of the consumed duration according to ISO 8601.\\n\\n\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISODURATION\"},{\"name\":\"ISONORMALIZE\",\"detail\":\"ISONORMALIZE( gts:GTS ): result:GTS\\nISONORMALIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `ISONORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between -1 and 1 (i.e. it replaces X by \\n(X - mean)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISONORMALIZE\"},{\"name\":\"JOIN\",\"detail\":\"JOIN( string:STRING* sep:STRING n:LONG ): result:STRING\\nJOIN( objects:LIST sep:STRING ): result:STRING\",\"documentation\":\"Join N strings with the given separator.\\n\\n@param `n` Number of elements to join that it needs to take from the top of the stack.\\n\\n@param `sep` Separator used to join the strings.\\n\\n@param `string` One or more string on the stack.\\n\\n@param `objects` List of objects whose string representations are to be joined.\\n\\n@param `result` Joined string.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"JOIN\"},{\"name\":\"JSON->\",\"detail\":\"JSON->( json:STRING ): resultMap:MAP\\nJSON->( json:STRING ): resultList:LIST\",\"documentation\":\"The `JSON->` function parses a string as [JSON](http://json.org/) from the top of the stack and pushes the result onto the stack.\\n\\n@param `json` String JSON representation\\n\\n@param `resultMap` Map JSON representation if it is a JSON object\\n\\n@param `resultList` List JSON representation if it is a JSON array\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H_CEIXoy\"},{\"name\":\"JSONLOOSE\",\"detail\":\"\",\"documentation\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONLOOSE` function configures the stack to send results in a loose [JSON](http://json.org/) format where `NaN` and `Infinite` are valid values.\\n\\nIf the [JSON](http://json.org/) parser you’re using is strict, you should either configurate the [`JSONSTRICT`](/doc/JSONSTRICT) mode or dealing with \\n`NaN` and `Infinite` values outside the parser.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONLOOSE\"},{\"name\":\"JSONSTACK\",\"detail\":\"JSONSTACK(): \",\"documentation\":\"Select the JSON format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"JSONSTACK\"},{\"name\":\"JSONSTRICT\",\"detail\":\"\",\"documentation\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONSTRICT` function configures the stack to send results in strict [JSON](http://json.org/) format.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONSTRICT\"},{\"name\":\"KEYLIST\",\"detail\":\"KEYLIST( map:MAP ): result:LIST\",\"documentation\":\"Gets keys from a **MAP**.\\n\\nThe function `KEYLIST` extracts the keys of a map on the top of the stack and pushes on the stack a list with those keys. The map is consumed.      \\n\\n@param `map` Map from which you want to extract keys\\n\\n@param `result` List of keys\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"KEYLIST\"},{\"name\":\"KURTOSIS\",\"detail\":\"KURTOSIS( gts:GTS bessel:BOOLEAN ): kurtosis:DOUBLE\\nKURTOSIS( lgts:LIST<GTS> bessel:BOOLEAN ): lkurtosis:LIST<DOUBLE>\",\"documentation\":\"The `KURTOSIS` function computes the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a Geo Time Series™ or a list thereof.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the kurtosis.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `kurtosis` Computed kurtosis of the Geo Time Series™ instance.\\n\\n@param `lkurtosis` List of computed kurtosis of the Geo Time Series™ instances.\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.2.13\",\"OPB64name\":\"KURTOSIS\"},{\"name\":\"LABELS\",\"detail\":\"LABELS( gts:GTS ): return:MAP\\nLABELS( encoder:GTSENCODER ): return:MAP\",\"documentation\":\"The `LABELS` function consumes a GTS from the stack, extracts its labels, puts them in a map and pushes the map onto the stack.\\n\\n@param `gts` The Geo Time Series™ to get the labels from.\\n\\n@param `encoder` The Geo Time Series™ Encoder to get the labels from.\\n\\n@param `return` Labels MAP\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LABELS\"},{\"name\":\"LASTACTIVITY\",\"detail\":\"LASTACTIVITY( gts:GTS ): lastactivity:LONG\\nLASTACTIVITY( encoder:GTSENCODER ): lastactivity:LONG\\nLASTACTIVITY( lgts:LIST<GTS> ): llastactivity:LONG\\nLASTACTIVITY( lencoder:LIST<GTSENCODER> ): llastactivity:LONG\",\"documentation\":\"Extracts the timestamp of last activity recorded in the Geo Time Series™ metadata.\\n\\nThe timestamp is expressed as platform time units elapsed since the Unix Epoch.\\n\\n@param `gts` Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `encoder` Geo Time Series™ encoder from which to extract the last activity timestamp.\\n\\n@param `lgts` List of Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `lencoder` List of Geo Time Series™ encoders from which to extract the last activity timestamp.\\n\\n@param `lastactivity` Timestamp of last activity.\\n\\n@param `llastactivity` List of timestamps of last activity.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.0.0\",\"OPB64name\":\"LASTACTIVITY\"},{\"name\":\"LASTBUCKET\",\"detail\":\"LASTBUCKET( gts:GTS ): result:LONG\",\"documentation\":\"The function `LASTBUCKET` consumes a GTS off the stack and pushes its lastbucket onto the stack.\\n\\nNote: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Last bucket timestamp\\n\\n\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTBUCKET\"},{\"name\":\"LASTSORT\",\"detail\":\"LASTSORT( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"documentation\":\"Sorts a list of Geo Time Series™ according to their most recent value. If most recent values are identical, ticks will be compared, the most recent \\nappearing first. If the ticks are also identical, then metadata (class and labels) will be compared.\\n\\nUse this function to compute Top N queries.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Sorted list of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTSORT\"},{\"name\":\"LASTTICK\",\"detail\":\"LASTTICK( gts:GTS ): result:LONG\\nLASTTICK( lgts:LIST<GTS> ): result:LONG\",\"documentation\":\"The `LASTTICK` function pushes on the stack the newest tick of the Geo Time Series™ on top of the stack or, if the GTS is bucketized, its last bucket.\\n\\nWhen applied to a list of GTS, `LASTTICK` will return the greatest last tick found across all Geo Time Series™.\\n\\nIf the GTS does not have values, `Long.MIN_VALUE` is pushed.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `result` Last tick value.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTTICK\"},{\"name\":\"LBOUNDS\",\"detail\":\"LBOUNDS( lower:DOUBLE upper:DOUBLE n:LONG ): bounds:LIST<DOUBLE>\",\"documentation\":\"The `LBOUNDS` function computes bounds which divide a specified interval into `n` intervals of equal length.\\n\\nThe result of `LBOUNDS` is a list of `n+1` bounds, defining `n` intervals inside the specified range plus the two bounds of this range which define the intervals before and after the range.\\n\\n@param `n` Number of intervals to generate.\\n\\n@param `upper` Upper bound of the range to subdivide.\\n\\n@param `lower` Lower bound of the range to subdivide.\\n\\n@param `bounds` List of computed bounds.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LBOUNDS\"},{\"name\":\"LFLATMAP\",\"detail\":\"LFLATMAP( inputlist:LIST macro:MACRO ): results:LIST\\nLFLATMAP( inputlist:LIST macro:MACRO index:BOOLEAN ): results:LIST\",\"documentation\":\"The `LFLATMAP` function applies a macro on each element of a list, producing a list \\nwith the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the list index on top and the element \\nat that particular index below it. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\nDifference with `LMAP`: if the macro returns a list, then LFLATMAP will produce a \\nlist with the elements of the macro output list (_i.e._ it will _flatten_ the list). \\n\\nDifference with `LMAP FLATTEN`: flatten will do the list flattening recursively. \\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count -1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LFLATMAP\"},{\"name\":\"LIMIT\",\"detail\":\"LIMIT( maxDataPoints:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and \\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `LIMIT` function modifies the maximum number of datapoints which can be fetched during a script execution by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call `AUTHENTICATE` with a valid token.\\n\\n@param `maxDataPoints` Maximal data points retrieved from database in a single FETCH\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"LIMIT\"},{\"name\":\"LINEOFF\",\"detail\":\"\",\"documentation\":\"The `LINEOFF` function disables the automatic labelling of WarpScript code as enabled by `LINEON`.      \\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEOFF\"},{\"name\":\"LINEON\",\"detail\":\"\",\"documentation\":\"The `LINEON` function enables the automatic section labelling at the beginning of each line of the input WarpScript code. This handy feature greatly simplifies the debug process as the exact line number where an error happens will appear in the error message embedded as a section name of the form `[Line #xx]`.\\n\\nThis automatic labelling only works with the `/exec` endpoint of Warp 10.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEON\"},{\"name\":\"LIST->\",\"detail\":\"LIST->( input:LIST ): elements:ANY* listlength:LONG\",\"documentation\":\"The `LIST->` function extracts the elements of the **LIST** at the top of the stack\\nand pushes them onto the stack one by one. The function then pushes\\nonto the stack the number of elements that were in the **LIST**.\\n\\n@param `input` The input list, will be consumbed\\n\\n@param `listlength` The length N of input\\n\\n@param `elements` N elements pushed on the stack\\n\\n\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"I3_IK1oy\"},{\"name\":\"LMAP\",\"detail\":\"LMAP( inputlist:LIST macro:MACRO ): results:LIST\\nLMAP( inputlist:LIST macro:MACRO index:BOOLEAN ): results:LIST\",\"documentation\":\"The `LMAP` function applies a macro on each element of a **LIST**, producing a **LIST** with the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **LIST** index on top and the element at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LMAP\"},{\"name\":\"LOAD\",\"detail\":\"LOAD( name:STRING ): value:ANY\\nLOAD( register:LONG ): value:ANY\",\"documentation\":\"The `LOAD` function pushes onto the stack the value currently associated with a symbol name.      \\n\\nIf the symbol is not defined, an error will be raised.\\n\\n@param `name` Name of symbol whose value should be retrieved.\\n\\n@param `register` Register number whose value should be retrieved.\\n\\n@param `value` Retrieved value.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOAD\"},{\"name\":\"LOCATIONOFFSET\",\"detail\":\"LOCATIONOFFSET( gts:GTS distance:NUMBER ): result:GTS\\nLOCATIONOFFSET( gtsList:LIST<GTS> distance:NUMBER ): resultList:LIST<GTS>\",\"documentation\":\"The `LOCATIONOFFSET` function downsamples a Geo Time Series™ by retaining the first and last datapoints and only those datapoints which are \\nmore than a given distance away.\\n\\n@param `distance` Distance in meters\\n\\n@param `gts` Geo Time Series™ to downsample\\n\\n@param `gtsList` List of Geo Time Series™ to downsample\\n\\n@param `result` Downsampled Geo Time Series™\\n\\n@param `resultList` List of downsampled Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONOFFSET\"},{\"name\":\"LOCATIONS\",\"detail\":\"LOCATIONS( gts:GTS ): latitudes:LIST<DOUBLE> longitudes:LIST<DOUBLE>\",\"documentation\":\"The `LOCATIONS` function consumes a Geo Time Series™ from the stack, extracts the locations of a Geo Time Series™, puts them in two lists \\n(a list of latitudes and a list of longitudes) and pushes the two lists onto the stack.\\n\\n@param `gts` GTS\\n\\n@param `longitudes` List of longitudes\\n\\n@param `latitudes` List of latitudes\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONS\"},{\"name\":\"LOCSTRINGS\",\"detail\":\"LOCSTRINGS( gts:GTS ): result:LIST<STRING>\",\"documentation\":\"The `LOCSTRINGS` function extract the locations from a Geo Time Series™ and builds a list of the 64 bits hexadecimal representation of their \\n[HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` List of [HHCode](https://en.wikipedia.org/wiki/HHCode)\\n\\n\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCSTRINGS\"},{\"name\":\"LOG\",\"detail\":\"LOG( value:NUMBER ): result:DOUBLE\\nLOG( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `LOG` function consumes a floating point number x from the top of the stack and pushes back its natural logarithm, log<sub>e</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Natural logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of natural logarithms of the given values\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG\"},{\"name\":\"LOG10\",\"detail\":\"LOG10( value:NUMBER ): result:DOUBLE\\nLOG10( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `LOG10` function consumes a floating point number x from the top of the stack and pushes back its common logarithm, log<sub>10</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Common logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of common logarithms of the given values\\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG10\"},{\"name\":\"LOG1P\",\"detail\":\"LOG1P( value:NUMBER ): result:DOUBLE\\nLOG1P( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"Returns the natural logarithm of the sum of the argument and 1.\\n\\nThe `LOG1P` function consumes a number from the top of the stack and pushes back the natural logarithm for (arg + 1).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Logarithm of (value + 1)\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of logarithm of (value + 1)\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG1P\"},{\"name\":\"LOGEVENT->\",\"detail\":\"LOGEVENT->( logline:STRING ): decodedlog:STRING\",\"documentation\":\"Warp&nbsp;10™ runner execution logs are encrypted. See [this documentation](/content/03_Documentation/06_Operations/05_Logs/).\\n\\nThe easiest way to read logs is to copy the log output and use this function.\\n\\n\\n@param `logline` The opb64 representation of the aes encrypted log line\\n\\n@param `decodedlog` The decoded logs.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"I3x6GKO4I_FhEV\"},{\"name\":\"LOGMSG\",\"detail\":\"LOGMSG( msg:STRING ): \",\"documentation\":\"`LOGMSG` function prints millisecond timestamp and input text on the standard output.\\n\\nThe `LOGMSG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOGMSG\"},{\"name\":\"LOWESS\",\"detail\":\"LOWESS( gts:GTS bandwidth:LONG ): result:GTS\\nLOWESS( gtsList:LIST<GTS> bandwidth:LONG ): lresult:LIST<GTS>\",\"documentation\":\"The `LOWESS` function consumes a bandwidth (a **LONG**) from the top of the stack, then smooths a GTS or a **LIST** of GTS that are below by using \\nlocal regression.\\n\\nTo obtain a good smoothing, it is advised to choose an odd number of at least 5 as the bandwidth parameter.\\n\\n@param `bandwidth` The bandwitdth parameter is the number of nearest neighbours to consider when applying the local regression.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `gtsList` List of Geo Time Series™.\\n\\n@param `lresult` List of Geo Time Series™ result.\\n\\n@param `result` Geo Time Series™ result.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOWESS\"},{\"name\":\"LR\",\"detail\":\"LR( gts:GTS ): alpha:DOUBLE beta:DOUBLE\",\"documentation\":\"Compute the [simple linear regression](https://en.wikipedia.org/wiki/Linear_regression) parameters `alpha` (y-intercept) and `beta` (line slope) for the given numerical Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ on which to compute linear regression.\\n\\n@param `beta` The slope of the line fitted on the GTS values.\\n\\n@param `alpha` The y-intercept of the lined fitted on the GTS values.\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.13\",\"OPB64name\":\"LR\"},{\"name\":\"LSORT\",\"detail\":\"LSORT( inputlist:LIST ): sortedlist:LIST\",\"documentation\":\"The `LSORT` function sorts the list on the top of the stack.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `inputlist` The reference of the list to sort\\n\\n@param `sortedlist` The original list sorted, this is not a new list object\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LSORT\"},{\"name\":\"LTTB\",\"detail\":\"LTTB( gts:GTS samples:LONG ): downsampled:GTS\\nLTTB( lgts:LIST<GTS> samples:LONG ): ldownsampled:LIST<GTS>\",\"documentation\":\"The `LTTB` function downsamples a Geo Time Series™ or list thereof using the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"LTTB\"},{\"name\":\"MACROBUCKETIZER\",\"detail\":\"MACROBUCKETIZER( macro:MACRO ): result:AGGREGATOR\",\"documentation\":\"`MACROBUCKETIZER` converts a macro into a bucketizer which can be used with the [`BUCKETIZE`](/doc/BUCKETIZE) framework.\\n\\nFor each tick in the mapped GTS, the macro will be called with a list containing the following elements on the stack:\\n\\n```js\\n[tick_of_computation,[gts_classes],[label_bucketize],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n@param `macro` Macro used as a bucketizer\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketize\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROBUCKETIZER\"},{\"name\":\"MACROCONFIG\",\"detail\":\"MACROCONFIG( key:STRING ): \",\"documentation\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration keys looked up are those built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIG`.\\n\\n`MACROCONFIG` will check if the keys exists, if not it will remove the part of the macro name after the last `/` and will try that new key. It will successively try all names up to the last part of the macro name.\\n\\nIf none of those keys existed, the call will end in error.\\n\\nSo for example, if `MACROCONFIG` is called from a macro `my/test/macro` to retrieve the value associated with `mykey`, it will look up the following keys in the configuration:\\n\\n```\\nmykey@my/test/macro\\nmykey@my/test\\nmykey@my\\n```\\n\\n@param `key` Configuration key to look up.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIG\"},{\"name\":\"MACROCONFIGDEFAULT\",\"detail\":\"MACROCONFIGDEFAULT( key:STRING default:STRING ): \",\"documentation\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration key looked is built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIGDEFAULT`.\\n\\n`MACROCONFIGDEFAULT` will check if the keys exists, if not it will push the provided default value onto the stack, or fail with an error if the default was `NULL`. If the key is found, the associated value is pushed on the stack.\\n\\n@param `key` Configuration key to look up.\\n\\n@param `default` Default value to use if the key was not found, or `NULL` to fail if the key is absent.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGDEFAULT\"},{\"name\":\"MACROCONFIGSECRET\",\"detail\":\"MACROCONFIGSECRET( oldSecret:STRING newSecret:STRING ): \",\"documentation\":\"The `MACROCONFIGSECRET` macro consumes 2 elements on the stack, the current and new secret to be set. If no secret has been set, the function will throw an error.\\n\\nThe secret set by this function is the secret used by [`SETMACROCONFIG`](/doc/SETMACROCONFIG).\\n\\n@param `newSecret` New secret to override the current one.\\n\\n@param `oldSecret` Currently set secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGSECRET\"},{\"name\":\"MACROFILLER\",\"detail\":\"MACROFILLER( macro:MACRO prewindow:LONG postwindow:LONG ): filler:FILLER\",\"documentation\":\"`MACROFILLER` converts a macro into a *filler* which can be used with the [`FILL`](/doc/FILL) function.\\n\\nThe macro will find the following elements on the stack when it is called:\\n\\n```\\n6: Geo Time Series™ to fill. Both this GTS and the one above are only meant to expose the metadata\\n5: Geo Time Series™ of the *other* GTS with a value at the current tick\\n4: list of [ tick latitude longitude elevation value ] for the pre window\\n3: [ tick latitude longitude elevation value ] of the *other* Geo Time Series™\\n2: list of [ tick latitude longitude elevation value ] for the post window\\nTOP: tick which is being filled\\n```\\n\\nIt must leave on the stack a list containing the following elements, in this order:\\n\\n*tick*, *latitude* or `NaN`, *longitude* or `NaN`, *elevation* or `NaN`, *value*\\n\\n\\n@param `macro` Macro to wrap.\\n\\n@param `prewindow` Number of datapoints needed ahead of the missing datapoint.\\n\\n@param `postwindow` Number of datapoints needed after the missing datapoint.\\n\\n@param `filler` Filler instance.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"MACROFILLER\"},{\"name\":\"MACROFILTER\",\"detail\":\"MACROFILTER( macro:MACRO ): result:FILTER\",\"documentation\":\"`MACROFILTER` converts a macro into a filter which can be used with the [`FILTER`](/doc/FILTER) framework\\n\\nFor each equivalence classes in the filter set of Geo Time Series™, the macro will be called with the following elements on the stack:\\n\\n```\\n[gts], {labels_equivalence_class}\\n```\\n\\nAfter each call the macro is expected to leave a list on the stack.\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROFILTER\"},{\"name\":\"MACROMAPPER\",\"detail\":\"MACROMAPPER( macro:MACRO ): result:AGGREGATOR\",\"documentation\":\"`MACROMAPPER` converts a macro into a mapper which can be used with the [`MAP`](/doc/MAP) framework.\\n\\nFor each tick in the mapped Geo Time Series™, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROMAPPER` can also create a multivariate mapper, that is, a mapper that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate mapper with MAP, each input GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n\\n@param `macro` Macro to convert\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROMAPPER\"},{\"name\":\"MACROREDUCER\",\"detail\":\"MACROREDUCER( macro:MACRO ): result:AGGREGATOR\",\"documentation\":\"`MACROREDUCER` converts a macro into a reducer which can be used with the [`REDUCE`](/doc/REDUCE) framework\\n\\nFor each tick in the Geo Time Series™ to reduce, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nEach list have a length of the number of GTSs in the partition. Each missing value are replaced by `null`, each missing tick by the minimum value of long and each missing latitude, longitude or elevation by NaN. The `label_maps` list as one more element at the end compared to the other lists: the common labels for the GTSs of the partition.\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROREDUCER` can also create a multivariate reducer, that is, a reducer that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate reducer with REDUCE, each input List of GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROREDUCER\"},{\"name\":\"MACROTTL\",\"detail\":\"MACROTTL( ttl:LONG ): \",\"documentation\":\"In a file defining a server side macro, the `MACROTTL` function defines the time to live of the macro code. If the macro is accessed after this delay has expired and ondemand loading of macros is enabled, it will unconditionnaly be reloaded from disk.\\n\\nThis feature is very useful when you have macros generated dynamically on the server side which change frequently. Using `MACROTTL` you can ensure the newest code is loaded regardless of the rescan interval of the macro directory.\\n\\nIn a the file defining a server side macro, the call to `MACROTTL` should appear before or after the actual macro definition but not within.\\n\\nThe time after which the macro will no longer be valid is the time of the call to `MACROTTL` plus its parameter.\\n\\n@param `ttl` The time to live to apply to the macro, in ms.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MACROTTL\"},{\"name\":\"MAKEGTS\",\"detail\":\"MAKEGTS( timestamps:LIST latitudes:LIST longitudes:LIST elevations:LIST values:LIST ): result:GTS\",\"documentation\":\"The `MAKEGTS` function builds a Geo Time Series™ from **LIST**s.\\n\\nThe timestamp and values lists must be of the exact same size.\\nHowever, as latitudes, longitudes and elevations are optional in a Geo Time Series™, these lists can be shorter than the timestamps lists or even empty. If there are missing latitudes, longitudes and elevations, use [`NaN`](/doc/NaN).\\n\\n@param `values` Values of the GTS\\n\\n@param `elevations` Elevations of the GTS\\n\\n@param `longitudes` Longitudes of the GTS\\n\\n@param `latitudes` Latitudes of the GTS\\n\\n@param `timestamps` Timestamps of the GTS\\n\\n@param `result` Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAKEGTS\"},{\"name\":\"MAN\",\"detail\":\"MAN( function:STRING ): url:STRING\\nMAN( any:ANY ): url:STRING\\nMAN(): url:STRING\",\"documentation\":\"The `MAN` function returns the help link for a function name.\\n\\nIf the function does not exists, it returns http://www.warp10.io/\\n\\n\\n@param `function` The function name\\n\\n@param `any` Anything except a function name\\n\\n@param `url` URL of the online help\\n\\n\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.2.18\",\"OPB64name\":\"MAN\"},{\"name\":\"MAP\",\"detail\":\"MAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG ] ): result:LIST<GTS>\\nMAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG ] ): result:LIST<GTS>\\nMAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN ] ): result:LIST<GTS>\\nMAP( gts:GTS+ { mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN outputTicks:LIST<LONG>  } ): result:LIST<GTS>\\nMAP( gtsList:LIST<GTS>+ { mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN outputTicks:LIST<LONG>  } ): result:LIST<GTS>\",\"documentation\":\"The `MAP` framework applies a function on values of a Geo Time Series™ that fall into a sliding window.\\n\\nThe `MAP` framework is designed to use an existing MAPPER or a custom MACROMAPPER. It could also accept a macro: the current window is passed as a GTS to the macro. See examples below.\\n\\n@param `result` List of Geo Time Series™, one for each input, whose values are the results of the function application on each sliding window. If the input series is bucketized, the result series will be too unless outputTicks is non null.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `mapper` Mapper function to apply\\n\\n@param `pre` Width of the sliding window before the current tick. This parameter is interpreted as a number of ticks if its value is positive, and as a number of time units if its value is negative. A value of 0 means the sliding window does not cover the past. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the past. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `post` Width of the sliding window after the current tick. Values have the same semantics as for the `pre` parameter. A value of 0 means the sliding window does not cover the future. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the future. Defaults to 0.\\n\\n@param `occurrences` Limit the number of computations to that number. If the value is 0, compute a value for each tick of the input Geo Time Series™. If it is non-negative, compute that many values starting from the oldest to the most recent tick. In the other case, do that many computations in the reverse order. This is useful when you are interested in a single result, like the max or sum of all values. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `step` The step size in number of ticks. The mapper beggins at the oldest tick and goes to the tick `step` after the current one and so on. Defaults to 1.\\n\\n@param `overrideTick` If set to true, the tick value returned by the mapper is used to update the current tick, else it is ignored and the original tick is kept. Defaults to false.\\n\\n@param `outputTicks` If non null, it sets the list of ticks that is traversed to anchor the sliding windows (instead of the ticks of the input Geo Time Series™). In that case, a tick of the input Geo Time Series™ that would be equal to one of these anchor points is counted by a positive `post` if `occurences` is non-negative, or by a positive `pre` if `occurences` is negative.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAP\"},{\"name\":\"MAP->\",\"detail\":\"MAP->( map:MAP ): key:ANY* value:ANY* mapsize:LONG\",\"documentation\":\"The `MAP->` function expands the **MAP** on top of the stack into pairs of elements followed by the number of elements extracted. If the **MAP** was \\ncreated by a call to `->MAP`, the order of the elements will be the same as prior to calling `->MAP`.\\n\\n@param `map` Map to expand\\n\\n@param `key` Key of the pair\\n\\n@param `value` Value of the pair\\n\\n@param `mapsize` The number of key value pushed on the stack.\\n\\n\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"IJ4FAIs\"},{\"name\":\"MAPID\",\"detail\":\"MAPID( input:MAP ): result:STRING\",\"documentation\":\"Generates a fingerprint of a map.\\n\\n@param `input` Input map\\n\\n@param `result` Fingerprint of the map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAPID\"},{\"name\":\"MARK\",\"detail\":\"MARK(): mark:MARK\",\"documentation\":\"Pushes a mark onto the stack.\\n\\n@param `mark` A MARK instance.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MARK\"},{\"name\":\"MAT->\",\"detail\":\"MAT->( input:MATRIX ): [  result:LIST<LIST<DOUBLE>>  ]\",\"documentation\":\"The `MAT->` function converts a Matrix into nested lists.\\n\\n\\n@param `input` Matrix to convert\\n\\n@param `result` Nested list of values\\n\\n\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"IJ4JAIs\"},{\"name\":\"MATCH\",\"detail\":\"MATCH( string:STRING regexp:STRING ): result:LIST<STRING>\\nMATCH( string:STRING regexp:MATCHER ): result:LIST<STRING>\",\"documentation\":\"The `MATCH` function applies a regular expression (regexp) to a string.\\n\\nIt consumes two parameters from the top of the stack: the regexp pattern and the string to test matching with.\\n\\nIf the string doesn’t match the regexp, the function return an empty list. If it matches, the function will return a list of every matching group.\\n\\nInstead of using a regular expression **STRING**, you can also use the result of [`MATCHER`](/doc/MATCHER) for improved performance.\\n\\n@param `regexp` Regular expression to apply\\n\\n@param `string` String to evaluate\\n\\n@param `result` List of every matching group.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCH\"},{\"name\":\"MATCHER\",\"detail\":\"MATCHER( regexp:STRING ): result:MATCHER\",\"documentation\":\"The `MATCHER` function will compile a regular expression into an efficient object which can be used by [`MATCH`](/doc/MATCH).\\n\\n@param `regexp` Regular expression to compile\\n\\n@param `result` Compiled regula expression\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCHER\"},{\"name\":\"MAX\",\"detail\":\"MAX( p1:LONG p2:LONG ): result:LONG\\nMAX( p1:LONG p2:DOUBLE ): result:DOUBLE\\nMAX( p1:DOUBLE p2:LONG ): result:DOUBLE\\nMAX( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\nMAX( p1:COUNTER p2:COUNTER ): result:LONG\\nMAX( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\nMAX( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\nMAX( p1:COUNTER p2:LONG ): result:DOUBLE\\nMAX( p1:LONG p2:COUNTER ): result:DOUBLE\\nMAX( llist:LIST<LONG> ): sresult:LONG\\nMAX( dlist:LIST<DOUBLE> ): sresult:DOUBLE\\nMAX( clist:LIST<COUNTER> ): sresult:LONG\\nMAX( llist:LIST<LONG> value:LONG ): lresult:LIST<LONG>\\nMAX( clist:LIST<COUNTER> value:COUNTER ): lresult:LIST<LONG>\\nMAX( dlist:LIST<DOUBLE> value:DOUBLE ): lresult:LIST<DOUBLE>\",\"documentation\":\"Returns the greater of two numeric values.\\n\\nThe `MAX` function consumes two numeric parameters from the top of the stack and pushes back the greatest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The larger of p1 and p2.\\n\\n@param `sresult` The larger of the elements in the given list.\\n\\n@param `lresult` A list where each value is the max between the element in the list and the given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAX\"},{\"name\":\"MAXBUCKETS\",\"detail\":\"MAXBUCKETS( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXBUCKETS` function modifies the maximum number of buckets which can be created by a call to [`BUCKETIZE`](/doc/BUCKETIZE) by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXBUCKETS\"},{\"name\":\"MAXDEPTH\",\"detail\":\"MAXDEPTH( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXDEPTH` function modifies the maximum depth (number of levels) of the execution stack by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXDEPTH\"},{\"name\":\"MAXGEOCELLS\",\"detail\":\"MAXGEOCELLS( maxcells:LONG ): \",\"documentation\":\"Modifies the maximum number of cells a **GEOSHAPE** created by [`GEO.WKT`](/doc/GEO.WKT) or [`GEO.JSON`](/doc/GEO.JSON) can have. The limit can be modified up to the configured value for `warpscript.maxgeocells.hard`.\\n\\n@param `maxcells` New limit to set.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.11\",\"OPB64name\":\"MAXGEOCELLS\"},{\"name\":\"MAXGTS\",\"detail\":\"MAXGTS( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard limit \\nwhich can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXGTS` function modifies the maximum number of Geo Time Series™ which can be fetched by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXGTS\"},{\"name\":\"MAXJSON\",\"detail\":\"MAXJSON( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to\\nthe hard limit value.\\n\\nThe `MAXJSON` function modifies the maximum number of characters in a json produced by [`->JSON`](/doc/AIt9JoxD).\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"MAXJSON\"},{\"name\":\"MAXLONG\",\"detail\":\"MAXLONG(): result:LONG\",\"documentation\":\"Pushes [Long.MAX_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MAX_VALUE) onto the stack.\\n\\n@param `result` Long.MAX_LONG\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLONG\"},{\"name\":\"MAXLOOP\",\"detail\":\"MAXLOOP( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard\\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe MAXLOOP function modifies the maximum number of milliseconds which can be spent in a loop setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLOOP\"},{\"name\":\"MAXOPS\",\"detail\":\"MAXOPS( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXOPS` function modifies the maximum number of operations which can be performed during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXOPS\"},{\"name\":\"MAXPIXELS\",\"detail\":\"MAXPIXELS( pixels:LONG ): \",\"documentation\":\"Modifies the maximum size (in pixels) of images which can be created by [`PGraphics`](/doc/PGraphics). The limit can be modified up to the value configured in `warpscript.maxpixels.hard`.\\n\\n@param `pixels` Maximum size (in pixels).\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXPIXELS\"},{\"name\":\"MAXRECURSION\",\"detail\":\"MAXRECURSION( depth:LONG ): \",\"documentation\":\"Modifies the maximum nesting depth of macro calls. The limit can be modified up to the value configured in `warpscript.maxrecursion.hard`.\\n\\n@param `depth` Maximum nesting depth.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MAXRECURSION\"},{\"name\":\"MAXSYMBOLS\",\"detail\":\"MAXSYMBOLS( limit:LONG ): \",\"documentation\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a \\nhard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXSYMBOLS` function modifies the maximum number of simultaneous symbols which can be defined on the stack during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXSYMBOLS\"},{\"name\":\"MAXURLFETCHCOUNT\",\"detail\":\"MAXURLFETCHCOUNT( limit:LONG ): \",\"documentation\":\"The `MAXURLFETCHCOUNT` function modifies the maximum number of URLs which can be fetched with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.MAXURLFETCHCOUNT.limit.hard`.\\n\\n@param `limit` The maximum number of URLs which can be fetched.\\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHCOUNT\"},{\"name\":\"MAXURLFETCHSIZE\",\"detail\":\"MAXURLFETCHSIZE( limit:LONG ): \",\"documentation\":\"The `MAXURLFETCHSIZE` function modifies the maximum cumulative size of fetched payloads with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.urlfetch.maxsize.hard` and is expressed as a number of bytes.\\n\\n@param `limit` The maximum cumulative size of fetched payloads.\\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHSIZE\"},{\"name\":\"MD5\",\"detail\":\"MD5( input:BYTES ): result:BYTES\",\"documentation\":\"The `MD5` function digests a byte array on the stack with the cryptographic hash function [`MD5`](https://en.wikipedia.org/wiki/MD5).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"MD5\"},{\"name\":\"MERGE\",\"detail\":\"MERGE( gtsList:LIST<GTS> ): result:GTS\",\"documentation\":\"Merge several Geo Time Series™ together.\\n\\nThe `MERGE` function expects a **LIST** of Geo Time Series™ on the top of the stack. It will consume these GTS and push onto the stack a single GTS instance\\nwith all measurements found in the GTS instances present in the **LIST**. The name and labels of the resulting GTS instance are those of the first one of the\\n**LIST**.\\n\\n`MERGE` do not override values on the same timestamp, they are appenned.\\n\\n@param `gtsList` The list of Geo Time Series™\\n\\n@param `result` The merged Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MERGE\"},{\"name\":\"META\",\"detail\":\"META( gtsList:LIST<GTS> writeToken:STRING ): \",\"documentation\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `META` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"META\"},{\"name\":\"METADIFF\",\"detail\":\"METADIFF( gtsList:LIST<GTS> writeToken:STRING ): \",\"documentation\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend in an incremental manner. New attributes are added and already existing attributes are updated or removed if their value is an empty string.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `METADIFF` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"METADIFF\"},{\"name\":\"METAOFF\",\"detail\":\"METAOFF( message:STRING secret:STRING ): \",\"documentation\":\"Disables meta operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a meta operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAOFF\"},{\"name\":\"METAON\",\"detail\":\"METAON( secret:STRING ): \",\"documentation\":\"Enables meta operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAON\"},{\"name\":\"METASET\",\"detail\":\"METASET( [ token:STRING class:STRING labels:MAP notbefore:LONG notafter:LONG maxduration:LONG ttl:LONG ] ): metaset:STRING\",\"documentation\":\"Performs a [`FIND`](/doc/FIND), retrieving a list of Geo Time Series™ and builds a *metaset* which can be distributed to allow access to those GTS without having to give away credentials.\\n\\nMetaset support is only available if a key has been set for `warp.aes.metasets`.\\n\\n@param `ttl` Time to live of the produces metaset. It will not be usable after that much time has elapsed since the current time. The ttl is specified in time units.\\n\\n@param `maxduration` The maximum span of data which can be retrieved using this metaset, in time units.\\n\\n@param `notafter` Most recent timestamp of the data this metaset can retrieve.\\n\\n@param `notbefore` Most ancient timestamp of the data this meataset can retrieve.\\n\\n@param `labels` Map of label selectors.\\n\\n@param `class` Geo Time Series™ class selector.\\n\\n@param `token` Read token to use for retrieving the GTS.\\n\\n@param `metaset` Encrypted metaset which can be used with a [`FETCH`](/doc/FETCH).\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"METASET\"},{\"name\":\"METASORT\",\"detail\":\"METASORT( gts:LIST<GTS> elements:LIST ): sorted:LIST<GTS>\",\"documentation\":\"Sorts a list of Geo Time Series™ according to elements of their metadata. The list of elements to consider for sorting can contain label names or NULL to consider the classname. Elements will be considered in the order in which they appear in the list.\\n\\n@param `gts` List of Geo Time Series™ to sort.\\n\\n@param `elements` Metadata elements to consider for sorting.\\n\\n@param `sorted` Sorted list of GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"METASORT\"},{\"name\":\"MIN\",\"detail\":\"MIN( p1:LONG p2:LONG ): result:LONG\\nMIN( p1:LONG p2:DOUBLE ): result:DOUBLE\\nMIN( p1:DOUBLE p2:LONG ): result:DOUBLE\\nMIN( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\nMIN( p1:COUNTER p2:COUNTER ): result:LONG\\nMIN( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\nMIN( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\nMIN( p1:COUNTER p2:LONG ): result:DOUBLE\\nMIN( p1:LONG p2:COUNTER ): result:DOUBLE\\nMIN( llist:LIST<LONG> ): sresult:LONG\\nMIN( dlist:LIST<DOUBLE> ): sresult:DOUBLE\\nMIN( clist:LIST<COUNTER> ): sresult:LONG\\nMIN( llist:LIST<LONG> value:LONG ): lresult:LIST<LONG>\\nMIN( clist:LIST<COUNTER> value:COUNTER ): lresult:LIST<LONG>\\nMIN( dlist:LIST<DOUBLE> value:DOUBLE ): lresult:LIST<DOUBLE>\",\"documentation\":\"Returns the smaller of two numeric values.\\n\\nThe `MIN` function consumes two numeric parameters from the top of the stack and pushes back the smallest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The smaller of p1 and p2.\\n\\n@param `sresult` The smaller of the elements in the given list.\\n\\n@param `lresult` A list where each value is the min between the element in the list and the given value.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MIN\"},{\"name\":\"MINLONG\",\"detail\":\"MINLONG(): result:LONG\",\"documentation\":\"Pushes [Long.MIN_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MIN_VALUE) onto the stack.\\n\\n@param `result` Long.MIN_VALUE\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MINLONG\"},{\"name\":\"MINREV\",\"detail\":\"MINREV( revision:STRING ): newer:BOOLEAN\",\"documentation\":\"The `MINREV` function consumes a string representing a revision on the stack and puts back a boolean indicating if the revision of the current Warp 10™ platform is newer or equal.\\n\\n@param `revision` A string representing a revision (semantic versioning). Given a version number MAJOR.MINOR.PATCH, .MINOR or .MINOR.PATCH can be omitted.\\n\\n@param `newer` A boolean indicating wether the revision of the current Warp 10™ platform is newer or equal to the given revision.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.2.23\",\"OPB64name\":\"MINREV\"},{\"name\":\"MMAP\",\"detail\":\"MMAP( inputmap:MAP macro:MACRO ): results:MAP\\nMMAP( inputmap:MAP macro:MACRO index:BOOLEAN ): results:MAP\",\"documentation\":\"The `MMAP` function applies a macro on each key/value pair of a **MAP**, producing a **MAP** with the two elements on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **MAP** index on top and the key/value pair at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each entry in inputmap.\\n\\n@param `inputmap` Map to iterate on.\\n\\n@param `results` Map of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"MMAP\"},{\"name\":\"MODE\",\"detail\":\"MODE( gts:GTS ): result:LIST\\nMODE( gtsList:LIST<GTS> ): [  result:LIST<LIST>  ]\",\"documentation\":\"The `MODE` function computes the mode(s) for a given Geo Time Series™ or a GTS **LIST**. Foreach Geo Time Series™ pushes back on the stack a list containing \\ntheir mode(s).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Mode of the list (the items that occurs most often)\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"MODE\"},{\"name\":\"MONOTONIC\",\"detail\":\"MONOTONIC( gts:GTS trend:BOOLEAN ): result:GTS\\nMONOTONIC( gtsList:LIST<GTS> trend:BOOLEAN ): resultList:LIST<GTS>\",\"documentation\":\"Produces a new Geo Time Series™ from an input by modifying the value so the result is monotonous. This is technically applying a ratchet effect on values.\\n\\nThe `MONOTONIC` function expects a boolean on top of the stack and a Geo Time Series™ or list thereof below the boolean. The boolean indicates whether the\\nresult should be monotonically increasing (false) or decreasing (true).\\n\\n@param `trend` Whether the result should be monotonically increasing (false) or decreasing (true)\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` New Geo Time Series™\\n\\n@param `resultList` List of new Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MONOTONIC\"},{\"name\":\"MOTIONSPLIT\",\"detail\":\"MOTIONSPLIT( gts:GTS parameters:MAP ): splits:LIST<GTS>\\nMOTIONSPLIT( lgts:LIST<GTS> parameters:MAP ): lsplits:LIST<LIST<GTS>>\",\"documentation\":\"The `MOTIONSPLIT` function splits Geo Time Series™ instances based on several possible motion criteria. Split parameters can be combined to split on multiple criteria.\\n\\n`MOTIONSPLIT` can split on:\\n- stopped state detection\\n- moving to stopped transition\\n- time difference between two ticks (just as [`TIMESPLIT`](/doc/TIMESPLIT) does).\\n- maximal distance between two consecutive positions.\\n\\n`MOTIONSPLIT` parameters:\\n- **timesplit**: LONG value, time in platform time unit. Splits if the time difference between two consecutive ticks is strictly greater than this parameter. If defined, the split type label will be \\\"timesplit\\\".\\n- **distance.split**: DOUBLE value, distance in meter. Splits if the orthodromic distance between two consecutive locations is strictly greater than this parameter. If defined, the split type label will be \\\"distancesplit\\\".\\n- **stopped.min.time**: LONG value, time in platform time unit. This is the minimum time the consecutive locations should stay in the stopped zone radius to consider a stop state. If defined, the split type label will be \\\"stopped\\\".\\n- **stopped.max.radius**: DOUBLE value, distance in meter. As long as consecutive positions remains in the radius during stopped.min.time, `MOTIONSPLIT` detect a stopped state.\\n- **stopped.max.speed**: DOUBLE value, speed in m/s. If the speed is greater than this value while in stopped state, `MOTIONSPLIT` exits the stopped state.\\n- **stopped.max.mean.speed**: DOUBLE value, speed in m/s. Maximum mean speed in the proximity zone that prevent the split. `MOTIONSPLIT` will split only if there is a full stop during the given time and radius, and if the mean speed in the proximity zone is less than this parameter.\\n- **stopped.split**: BOOLEAN value. If true, `MOTIONSPLIT` also splits between stopped and moving sequences. If defined, the split type label will be \\\"stopped\\\" or \\\"moving\\\".\\n- **label.stopped.time**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the time in stopped state. If the split source is not a stop detection, this label won't be set.\\n- **label.split.number**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the split number, starting from 1.\\n- **label.split.type**: STRING value. If defined, `MOTIONSPLIT` will add an extra label that contains the split reason. It could be \\\"timesplit\\\", \\\"distancesplit\\\", \\\"end\\\", \\\"stopped\\\" or \\\"moving\\\".\\n\\n`MOTIONSPLIT` split type priorities:\\n- If stopped.min.time and stopped.max.radius are set, the stop detection has the first priority.\\n- If `MOTIONSPLIT` does not detect a stopped state, it looks for a distance split.\\n- If `MOTIONSPLIT` does not detect a stopped state or a distance split, it looks for a time split.\\n\\n\\n@param `parameters` List of splitting parameters. See the function description.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"MOTIONSPLIT\"},{\"name\":\"MSGFAIL\",\"detail\":\"MSGFAIL( message:STRING ): \",\"documentation\":\"The `MSGFAIL` function stops the execution of WarpScript code by throwing an exception. \\n\\n@param `message` The exception message\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSGFAIL\"},{\"name\":\"MSORT\",\"detail\":\"MSORT( map:MAP ): result:MAP\",\"documentation\":\"The function `MSORT` inspects the top of the stack. If it is a **MAP**, it sorts the **MAP** according to its keys. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\n@param `map` Map to sort\\n\\n@param `result` Sorted map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSORT\"},{\"name\":\"MSTU\",\"detail\":\"MSTU(): numberTimeUnits:LONG\",\"documentation\":\"The `MSTU` function pushes onto the stack the number of platform time units in one millisecond. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one millisecond.\\n\\n\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSTU\"},{\"name\":\"MULTIPLYEXACT\",\"detail\":\"MULTIPLYEXACT( x:NUMBER y:NUMBER ): prod:LONG\\nMULTIPLYEXACT( list:LIST<NUMBER> ): sprod:LONG\\nMULTIPLYEXACT( lx:LIST<NUMBER> y:NUMBER ): lprod:LIST<LONG>\",\"documentation\":\"The `MULTIPLYEXACT` function consumes two LONGs from the top of the stack and puts back the product. If the product overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `prod` The product of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sprod` The product of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lprod` List of **LONG** where each value is the product of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"MULTIPLYEXACT\"},{\"name\":\"MUSIGMA\",\"detail\":\"MUSIGMA( gts:GTS bessel:BOOLEAN ): mu:DOUBLE sigma:DOUBLE\",\"documentation\":\"The `MUSIGMA` function calculates the mean and the standard deviation of a Geo Time Series. It consumes two parameters from the top of the stack: a boolean \\n(to choose if [Bessel's correction](https://en.wikipedia.org/wiki/Bessel%27s_correction) should be applied on the standard deviation) and a numeric GTS, and \\nit pushes onto the stack its mean (mu) and its standard deviation (sigma).\\n\\n@param `bessel` True if apply a [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `sigma` Standard deviation\\n\\n@param `mu` Mean\\n\\n@param `gts` A single Geo Time Series\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MUSIGMA\"},{\"name\":\"MUTEX\",\"detail\":\"MUTEX( macro:MACRO mutex:STRING ): \",\"documentation\":\"Attempts to hold a named lock, creating it if needed, and execute a macro while holding the lock. When the macro execution terminates, either normally or with an error, the lock is released.\\n\\n@param `mutex` Name of lock to hold.\\n\\n@param `macro` Macro to execute while holding the lock.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"MUTEX\"},{\"name\":\"MVELEVATIONS\",\"detail\":\"MVELEVATIONS( input:GTSENCODER ): output:LIST\\nMVELEVATIONS( input:GTS ): output:LIST\\nMVELEVATIONS( linput:LIST ): output:LIST\",\"documentation\":\"The `MVELEVATIONS` function extracts elevations from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVELEVATIONS` function will emit a list with two elements (a pair), the first element will be the elevation associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the elevations of the Multivariate value itself.\\n\\nIf a tick has no associated elevation, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted elevations.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVELEVATIONS\"},{\"name\":\"MVHHCODES\",\"detail\":\"MVHHCODES( input:GTSENCODER ): output:LIST\\nMVHHCODES( input:GTS ): output:LIST\\nMVHHCODES( linput:LIST ): output:LIST\",\"documentation\":\"The `MVHHCODES` function extracts [`HHCodes`](https://en.wikipedia.org/wiki/HHCode) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVHHCODES` function will emit a list with two elements (a pair), the first element will be the HHCode associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the HHCodes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted HHCodes.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVHHCODES\"},{\"name\":\"MVINDEXSPLIT\",\"detail\":\"MVINDEXSPLIT( input:GTSENCODER ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER indices:LIST ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER indices:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS indices:LIST ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS indices:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> indices:LIST ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> indices:LIST renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> indices:LIST ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> indices:LIST renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\",\"documentation\":\"The `MVINDEXSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVINDEXSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element index (first element being at index 0).\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:INDEX` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of indices or indices ranges can be specified to only produce encoders for the indices which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `indices` List of indices or indices ranges (list of two indices), used to restrict which indices to consider.\\n\\n@param `renaming` Map of index (LONG) to parameter to `RENAME`. If no entry is present for an index, `+:INDEX` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVINDEXSPLIT\"},{\"name\":\"MVLOCATIONS\",\"detail\":\"MVLOCATIONS( input:GTSENCODER ): output:LIST\\nMVLOCATIONS( input:GTS ): output:LIST\\nMVLOCATIONS( linput:LIST ): output:LIST\",\"documentation\":\"The `MVLOCATIONS` function extracts location (latitude, longitude) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVLOCATIONS` function will emit a list with two elements (a pair), the first element will be the latitude and longitude (a list) associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the latitudes and longitudes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `[ NaN NaN ]` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted locations.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVLOCATIONS\"},{\"name\":\"MVTICKS\",\"detail\":\"MVTICKS( input:GTSENCODER ): output:LIST\\nMVTICKS( input:GTS ): output:LIST\\nMVTICKS( linput:LIST ): output:LIST\",\"documentation\":\"The `MVTICKS` function extracts ticks from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVTICKS` function will emit a list with two elements (a pair), the first element will be the tick at which the Multivariate value was encountered, the second element will be a list containing the ticks of the Multivariate value itself.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted ticks.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKS\"},{\"name\":\"MVTICKSPLIT\",\"detail\":\"MVTICKSPLIT( input:GTSENCODER ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER timestamps:LIST ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER timestamps:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS timestamps:LIST ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS timestamps:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> timestamps:LIST ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> timestamps:LIST renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> timestamps:LIST ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> timestamps:LIST renaming:MAP ): loutput:LIST<GTSENCODER>\",\"documentation\":\"The `MVTICKSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVTICKSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element timestamp.\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:TIMESTAMP` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of timestamps or timestamp ranges can be specified to only produce encoders for the timestamps which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `timestamps` List of timestamps or timestamps ranges (list of two timestamps), used to restrict which timestamps to consider.\\n\\n@param `renaming` Map of timestamp (LONG) to parameter to `RENAME`. If no entry is present for a timestamp, `+:TIMESTAMP` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKSPLIT\"},{\"name\":\"MVVALUES\",\"detail\":\"MVVALUES( input:GTSENCODER ): output:LIST\\nMVVALUES( input:GTS ): output:LIST\\nMVVALUES( linput:LIST ): output:LIST\",\"documentation\":\"The `MVVALUES` function extracts values from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted values.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVVALUES\"},{\"name\":\"NAME\",\"detail\":\"NAME( gts:GTS ): result:STRING\\nNAME( encoder:GTSENCODER ): result:STRING\",\"documentation\":\"The `NAME` function consumes a Geo Time Series™ from the stack, extracts its class name, and pushes it onto the stack.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `encoder` Geo Time Series™ Encoder\\n\\n@param `result` Class name\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NAME\"},{\"name\":\"NBOUNDS\",\"detail\":\"NBOUNDS( mu:NUMBER sigma:NUMBER n:LONG ): bounds:LIST<DOUBLE>\",\"documentation\":\"The `NBOUNDS` function computes bounds defining a specified number of intervals which have the same area under the curve of a normal distribution with a given mean and standard deviation.\\n\\n@param `n` Number of desired intervals.\\n\\n@param `sigma` Positive standard deviation to use for the normal distribution.\\n\\n@param `mu` Mean to use for the normal distribution.\\n\\n@param `bounds` List of `n`-1 bounds defining the `n` intervals.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NBOUNDS\"},{\"name\":\"NDEBUGON\",\"detail\":\"NDEBUGON( n:NUMBER ): \",\"documentation\":\"Turns on stack debugging so up to the given number of stack levels will be returned in case of error. Stack debugging is off by default.\\n\\n@param `n` Maximum number of stack levels to return in case of error.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NDEBUGON\"},{\"name\":\"NEGATEEXACT\",\"detail\":\"NEGATEEXACT( value:NUMBER ): result:DOUBLE\\nNEGATEEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `NEGATEEXACT` function consumes one LONG from the top of the stack and puts back the negated value. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be negated\\n\\n@param `result` The negated value\\n\\n@param `lvalue` List of values to be negated\\n\\n@param `lresult` List of negated values\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEGATEEXACT\"},{\"name\":\"NEWENCODER\",\"detail\":\"NEWENCODER(): encoder:GTSENCODER\",\"documentation\":\"The `NEWENCODER` function creates an empty encoder and pushes it onto the stack. An encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` A newly created empty encoder instance.\\n\\n\",\"tags\":[\"encoder\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"NEWENCODER\"},{\"name\":\"NEWGTS\",\"detail\":\"NEWGTS(): gts:GTS\",\"documentation\":\"The `NEWGTS` function pushes onto the stack an empty Geo Time Series™ instance.\\n\\n@param `gts` A newly created empty GTS instance.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEWGTS\"},{\"name\":\"NEXTAFTER\",\"detail\":\"NEXTAFTER( from:NUMBER to:NUMBER ): result:DOUBLE\\nNEXTAFTER( from:NUMBER lto:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nNEXTAFTER( lfrom:LIST<NUMBER> to:NUMBER ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `NEXTAFTER` function consumes two numeric parameter from the top of the stack and pushes back the **DOUBLE** adjacent to the first argument in the direction of the second argument. In other words, the result is between *from* and *to* and adjacent to *from*.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `from` Starting value\\n\\n@param `to` Direction used to calculate the adjacent value\\n\\n@param `result` Next **DOUBLE** from *from* to *to*\\n\\n@param `lfrom` List of starting values\\n\\n@param `lto` List of directions used to calculate the adjacent value\\n\\n@param `lresult` List of next **DOUBLE** from *from* to *to*\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTAFTER\"},{\"name\":\"NEXTDOWN\",\"detail\":\"NEXTDOWN( value:NUMBER ): result:DOUBLE\\nNEXTDOWN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `NEXTDOWN` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of negative infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of negative infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of negative infinity\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEXTDOWN\"},{\"name\":\"NEXTUP\",\"detail\":\"NEXTUP( value:NUMBER ): result:DOUBLE\\nNEXTUP( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `NEXTUP` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of positive infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of positive infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of positive infinity\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTUP\"},{\"name\":\"NOLOG\",\"detail\":\"NOLOG(): \",\"documentation\":\"The `NOLOG` function resets java.util.logging.LogManager.\\n\\nIt can be useful to do this during developments and tests of an extension.\\n\\nThe `NOLOG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.2.19\",\"OPB64name\":\"NOLOG\"},{\"name\":\"NONEMPTY\",\"detail\":\"NONEMPTY( gtsList:LIST<GTS> ): results:LIST<GTS>\",\"documentation\":\"Filter a list of Geo Time Series™ in order to retain only those that have at least one value.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `results` Filtered list of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NONEMPTY\"},{\"name\":\"NONNULL\",\"detail\":\"NONNULL( list:LIST ): nonnulls:LIST\",\"documentation\":\"The `NONNULL` function consumes a list and produces a list containing only the non NULL elements of the argument list.\\n\\n@param `list` The argument list to filter\\n\\n@param `nonnulls` A new list with only those elements from `list` which are not NULL\\n\\n\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.2.7\",\"OPB64name\":\"NONNULL\"},{\"name\":\"NOOP\",\"detail\":\"\",\"documentation\":\"It does nothing.\\n\\nWhile it does not have a usefulness of its own, it can be used when generating code from within WarpScript code prior to executing it with [`EVAL`](/doc/EVAL).\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOOP\"},{\"name\":\"NORMALIZE\",\"detail\":\"NORMALIZE( gts:GTS ): result:GTS\\nNORMALIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"The `NORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between 0 and 1 (i.e. it replaces X by \\n(X - min)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NORMALIZE\"},{\"name\":\"NOT\",\"detail\":\"NOT( input:BOOLEAN ): result:BOOLEAN\\nNOT( gts:GTS ): negatedgts:GTS\",\"documentation\":\"Negates a boolean.\\n\\nThe `NOT` function is synonymous for [`!`](/doc/7F). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gts` A boolean Geo Time Series™\\n\\n@param `negatedgts` A boolean Geo Time Series™\\n\\n\",\"tags\":[\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOT\"},{\"name\":\"NOTAFTER\",\"detail\":\"NOTAFTER( timestamp:LONG ): \\nNOTAFTER( date:STRING ): \",\"documentation\":\"Checks that the current time is not after the provided timestamp.\\n\\nThe `NOTAFTER` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not after the provided timestamp.\\nIf it is not after the WarpScript execution continues, otherwise it throws an exception.\\n\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTAFTER\"},{\"name\":\"NOTBEFORE\",\"detail\":\"NOTBEFORE( timestamp:LONG ): \\nNOTBEFORE( date:STRING ): \",\"documentation\":\"Checks that the current time is not before the provided timestamp.\\n\\nThe `NOTBEFORE` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not before the provided timestamp.\\nIf it is not before the WarpScript execution continues, otherwise it throws an exception.\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTBEFORE\"},{\"name\":\"NOTIMINGS\",\"detail\":\"\",\"documentation\":\"Use of the `NOTIMINGS` function disables the collection of timing information for each line of the input script. Use [`TIMINGS`](/doc/TIMINGS) to enable it again.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTIMINGS\"},{\"name\":\"NOW\",\"detail\":\"NOW(): timestamp:LONG\",\"documentation\":\"The `NOW` function pushes onto the stack the current **LONG** timestamp expressed in the platform time unit. This timestamp is the number of platform time unit elapsed since 00:00:00 on 1 January 1970 UTC minus the number of leap seconds, see [Unix time](https://en.wikipedia.org/wiki/Unix_time).\\n\\nThis function is mostly linear with time but this property is violated when the OS resynchronises its clock (ie consecutive calls to `NOW` may 'jump' or 'go backward').\\n\\n@param `timestamp` The current timestamp in platform time unit.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOW\"},{\"name\":\"NPDF\",\"detail\":\"NPDF( mu:NUMBER sigma:NUMBER ): npdf:FUNCTION\",\"documentation\":\"The `NPDF` function builds a function which outputs the probability of occurrence of a given value under a specified normal distribution.\\n\\nThe normal distribution is defined by its mean and standard deviation. The result of the `NPDF` function is itself a function which can be invoked via [`EVAL`](doc/EVAL).\\n\\n*NPDF* stands for Normal (Gaussian) distribution Probability Density Function.\\n\\n@param `sigma` Standard deviation of the normal distribution to consider.\\n\\n@param `mu` Mean of the normal distribution to consider.\\n\\n@param `npdf` Function which given an input number outputs the probability of its occurence under the given normal distribution.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NPDF\"},{\"name\":\"NPEEK\",\"detail\":\"NPEEK( levels:NUMBER ): \",\"documentation\":\"Displays a given number of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of stack levels to display.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"NPEEK\"},{\"name\":\"NRETURN\",\"detail\":\"NRETURN( levelnumber:LONG ): \",\"documentation\":\"Immediately exit a certain number of macros being executed. The `NRETURN` function expects a number of levels on top of the stack.\\n\\n@param `levelnumber` Number of levels of macro to exit.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"NRETURN\"},{\"name\":\"NSUMSUMSQ\",\"detail\":\"NSUMSUMSQ( gts:GTS ): cardinality:LONG sum:DOUBLE square:DOUBLE\",\"documentation\":\"Computes the cardinality, sum of values and sum of squared values of a Geo Time Series™. Pushes those results on the stack in the order they were mentioned.\\n\\nOnly numeric series are allowed.\\n\\n@param `square` Sum of squared values\\n\\n@param `sum` Sum of values\\n\\n@param `cardinality` Values count\\n\\n@param `gts` Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NSUMSUMSQ\"},{\"name\":\"NULL\",\"detail\":\"NULL(): result:NULL\",\"documentation\":\"The `NULL` function pushes the symbolic value *null* onto the stack.\\n\\n@param `result` Symbolic value *null*\\n\\n\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NULL\"},{\"name\":\"NaN\",\"detail\":\"NaN(): result:DOUBLE\",\"documentation\":\"Pushes the double value *NaN* (Not a Number) onto the stack.\\n\\n@param `result` Value *NaN*\\n\\n\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NaN\"},{\"name\":\"ONLYBUCKETS\",\"detail\":\"ONLYBUCKETS( gts:GTS ): result:GTS\\nONLYBUCKETS( lgts:LIST<GTS> ): lresult:LIST<GTS>\",\"documentation\":\"Only retains ticks from Geo Time Series™ with timestamps which are bucket ends. If an input GTS is not bucketized, a clone of the GTS will be returned.\\n\\nThe `ONLYBUCKETS` function does not remove duplicate ticks, please consider using [`DEDUP`](/doc/DEDUP) for that purpose.\\n\\n@param `gts` Single instance of Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `result` Transformed GTS.\\n\\n@param `lresult` List of transformed GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ONLYBUCKETS\"},{\"name\":\"OPB64->\",\"detail\":\"OPB64->( input:STRING ): output:BYTES\",\"documentation\":\"Decode a String in order preserving base64 into a byte array.\\n\\nBytes array cannot be represented on the stack.\\n\\n@param `input` Any valid opbbase64 string.\\n\\n@param `output` Byte array of the input decoded input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.7\",\"OPB64name\":\"Ip01CYFhEV\"},{\"name\":\"OPB64TOHEX\",\"detail\":\"OPB64TOHEX( input:STRING ): output:STRING\",\"documentation\":\"The OPB64TOHEX function decodes the order preserving base64 string on top of the stack and immediately re-encode it in hex string.\\n\\n\\n@param `input` OPBase64 encoded string\\n\\n@param `output` hexadecimal representation\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.2\",\"OPB64name\":\"OPB64TOHEX\"},{\"name\":\"OPS\",\"detail\":\"OPS(): ops:LONG\",\"documentation\":\"Pushes onto the stack the current number of operations which were performed by the WarpScript code execution.\\n\\n@param `ops` number of operations\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPS\"},{\"name\":\"OPTDTW\",\"detail\":\"OPTDTW( data:LIST query:LIST match:LONG ): result:LIST\",\"documentation\":\"The `OPTDTW` function finds the top subsequence matches in a sequence for a given query sequence. The function uses [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping)\\nto assess the subsequence similarity with the query.\\n\\n@param `match` Number of top matches. Use 0 as the number of matches to return to return them all.\\n\\n@param `query` Query numerical sequence, thr shortest\\n\\n@param `data` Data sequence in which to find matches\\n\\n@param `result` List of matches, each match being a pair of (index, distance).\\n\\n\",\"tags\":[\"math\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPTDTW\"},{\"name\":\"OPTIMIZE\",\"detail\":\"OPTIMIZE( gts:GTS ratio:NUMBER ): gts:GTS\\nOPTIMIZE( encoder:GTSENCODER ratio:NUMBER ): optencoder:GTSENCODER\\nOPTIMIZE( lgts:LIST<GTS> ratio:NUMBER ): lgts:LIST<GTS>\\nOPTIMIZE( lencoder:LIST<GTSENCODER> ratio:NUMBER ): loptencoder:LIST<GTSENCODER>\",\"documentation\":\"Optimizes the memory footprint of Geo Time Series™ and GTS Encoder instances.\\n\\n@param `ratio` Ratio of memory footprint to number of values, if this ratio is not exceeded, no optimization will take place. As a result, optimization is always done when ratio <= 1 or ratio is NaN.\\n\\n@param `gts` Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `encoder` Instance of GTS Encoder to optimize.\\n\\n@param `optencoder` Optimized version of the encoder, or the original instance if no optimization occurred.\\n\\n@param `lgts` List of Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `lencoder` List of instances of GTS Encoder to optimize.\\n\\n@param `loptencoder` List of optimized version of the encoders or the original instances if no optimization occurred.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"OPTIMIZE\"},{\"name\":\"OR\",\"detail\":\"OR( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\nOR( l:LIST ): result:BOOLEAN\\nOR( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"documentation\":\"The `OR` operator is a synonymous for [`||`](/doc/U6k).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `OR` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"OR\"},{\"name\":\"PACK\",\"detail\":\"PACK( input:LIST format:STRING ): result:BYTES\",\"documentation\":\"The `PACK` function packs a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n@param `input` List to pack\\n\\n@param `format` Format used to pack\\n\\n@param `result` Bytes array\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"PACK\"},{\"name\":\"PAPPLY\",\"detail\":\"PAPPLY( [ op:OPERATOR labels:LIST gts:LIST<GTS>+ ] ): result:MAP\",\"documentation\":\"The `PAPPLY` function performs operations in a way identical to the [`APPLY`](/doc/APPLY) framework but produces a map of results keyed by the label map of each equivalence class.\\n\\nAs [`APPLY`](/doc/APPLY), `PAPPLY` provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can due. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` Map of resulting GTS, one per equivalence class, keyed with the equivalence class labels.\\n\\n@param `op` Operation to perform.\\n\\n\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"PAPPLY\"},{\"name\":\"PARSE\",\"detail\":\"PARSE( data:STRING ): result:LIST<GTS>\",\"documentation\":\"The `PARSE` function parses an input **STRING** containing datapoints in the [Geo Time Series™ input format](/content/03_Documentation/03_Interacting_with_Warp_10/03_Ingesting_data/02_GTS_input_format) and pushes onto the stack the parsed Geo Time Series™.\\n\\n@param `data` Datapoints in the Geo Time Series™ input format\\n\\n@param `result` List of parsed Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.0.11\",\"OPB64name\":\"PARSE\"},{\"name\":\"PARSESELECTOR\",\"detail\":\"PARSESELECTOR( selector:STRING ): classselector:STRING labelselector:MAP\",\"documentation\":\"The `PARSESELECTOR` function parses a GTS Selector (STRING) returnss the class selector and labels selectors.\\n\\nIn order for `PARSESELECTOR` to parse correctly a selector, the following characters MUST appear percent-encoded in the `STRING` to parse, the equal sign (`=`, `%3D`), the comma (`,` `%2C`) and closing curly brace (`}` `%7D`). Due to the way WarpScript parses `STRING` constants, the `%` sign MUST be percent-encoded (`%25`) in the `STRING` if it appears in WarpScript code:\\n\\nThe `STRING` `class{label=comm%2Cequal%3Dsign}` must appear in WarpScript as:\\n\\n```\\n'class{label=comm%252Cequal%253Dsign'\\n```\\n\\nCombined with `TOSELECTOR`, it can be used to build a selector from a subset of GTS.\\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature'\\n  { 'sensorId' '=01' }\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\nFETCH\\n\\n```\\nThis can be used to simplify the syntax of a FETCH or FIND request. \\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature{sensorId=01}' PARSESELECTOR\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\n\\nFETCH\\n```\\n\\n\\n\\n@param `selector` String selector.\\n\\n@param `labelselector` MAP of label selectors.\\n\\n@param `classselector` Class name selector.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARSESELECTOR\"},{\"name\":\"PARSEVALUE\",\"detail\":\"PARSEVALUE( input:STRING ): value:ANY\",\"documentation\":\"The `PARSEVALUE` function parses a STRING representing a valid value in the Geo Time Series™ input format.\\n\\nThe underlying implementation being the internal WarpScript function, some of the returned types might not be easily handled in the rest of the calling script. Most notably, some floating point representations might lead to BigDecimal instances being produced.\\n\\n@param `input` String representation of the value to parse.\\n\\n@param `value` Parsed value, could be a STRING, LONG, DOUBLE, BIGDECIMAL, BOOLEAN or BYTES elements.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.1.0\",\"OPB64name\":\"PARSEVALUE\"},{\"name\":\"PARTITION\",\"detail\":\"PARTITION( lgts:LIST<GTS> labels:LIST<STRING> ): result:MAP\",\"documentation\":\"The `PARTITION` function splits a Geo Time Series™ list in equivalence classes based on label values.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels` plus all labels with common values among the GTS in the equivalence class.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARTITION\"},{\"name\":\"PATTERNDETECTION\",\"detail\":\"PATTERNDETECTION( gts:GTS patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nPATTERNDETECTION( lgts:LIST<GTS> patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"documentation\":\"The `PATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNDETECTION\"},{\"name\":\"PATTERNS\",\"detail\":\"PATTERNS( gts:GTS wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nPATTERNS( lgts:LIST<GTS> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"documentation\":\"The `PATTERNS` function extracts symbolic patterns (or motifs) from a Geo Time Series™. Those patterns are similar to [iSAX](http://www.cs.ucr.edu/~eamonn/iSAX/iSAX.html) symbols.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNS` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNS\"},{\"name\":\"PEEK\",\"detail\":\"PEEK(): \",\"documentation\":\"Displays the top of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEK\"},{\"name\":\"PEEKN\",\"detail\":\"PEEKN( distance:NUMBER ): \",\"documentation\":\"Displays the content of the level of the stack at the given distance from the top.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `distance` Distance (in stack levels) between the top of the stack and the level to display.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEKN\"},{\"name\":\"PERMUTE\",\"detail\":\"PERMUTE( tensor:LIST pattern:LIST ): tensor:LIST\\nPERMUTE( { tensor:LIST pattern:LIST fast:BOOLEAN  } ): tensor:LIST\",\"documentation\":\"Permute the dimensions of a nested LIST as if it were a tensor or a multidimensional array.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent before operating. Default to false.\\n\\n@param `pattern` The permutation pattern (a LIST of LONG).\\n\\n@param `tensor` The resulting nested LIST.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"PERMUTE\"},{\"name\":\"PFILTER\",\"detail\":\"PFILTER( [ gtsList:LIST<GTS> labels:LIST<STRING> filter:FILTER ] ): result:MAP\",\"documentation\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `PFILTER framework allows for advanced filtering using N-ary functions \\n(functions which accept N parameters). Returned GTS are grouped by equivalence classes.\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A map keyed by the label set of each equivalence class whose values are lists of selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `PFILTER`.\\n\\n\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"PFILTER\"},{\"name\":\"PGraphics\",\"detail\":\"PGraphics( width:LONG height:LONG imgtype:STRING ): pg:PGRAPHICS\",\"documentation\":\"Warp 10 includes a large subset of the [Processing](http://www.processing.org) drawing library. You can create and manipulate images, then push a base64 encoded png onto the stack.\\n\\n+ Step 1: create a processing graphic object with `PGraphics` function.\\n+ Step 2: manipulate this object with Processing functions.\\n+ Step 3: render the processing graphic with `Pencode` function.\\n\\nDocumentation of every function has a link to original Processing website. Original website includes more examples for each function.\\n\\nProcessing functions offers a lot of different signatures for colors. The most efficient is to keep the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n\\nUp to Warp 10 1.2.18, antialiasing was not available. It is now available, by appending a digit to the **imgtype** string argument. The maximum anti-aliasing level is determined by the hardware of the machine that is running the software, so 2D4 and 2D8 mode will not work with every computer.\\n\\n+ \\\"2D\\\": no antialiasing\\n+ \\\"2D2\\\": bilinear smoothing\\n+ \\\"2D3\\\": bicubic smoothing\\n+ \\\"2D4\\\": 4x antialiasing\\n+ \\\"2D8\\\": 8x antialiasing\\n\\n\\nYou can adjust the maximal number of pixel allowed in Warp 10 configuration file.\\n\\n@param `imgtype` '2D', '3D', or '2Dx', where x is the level of anti aliasing (2, 3, 4, or 8).\\n\\n@param `width` Pixel width of the image.\\n\\n@param `height` Pixel height of the image.\\n\\n@param `pg` Processing graphic object.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PGraphics\"},{\"name\":\"PI\",\"detail\":\"PI(): pi:DOUBLE\",\"documentation\":\"Alias of [pi](/doc/R5Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"J3Z\"},{\"name\":\"PICK\",\"detail\":\"PICK( level:NUMBER ): result:ANY\",\"documentation\":\"The `PICK` function copies on top of the stack the element at level N. Parameter N is consumed off the top of the stack when `PICK` is called.\\n\\n@param `level` Level of the stack\\n\\n@param `result` What is on stack at *level*\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"PICK\"},{\"name\":\"PICKLE->\",\"detail\":\"PICKLE->( input:BYTES ): output:ANY\",\"documentation\":\"The `PICKLE->` function decodes some Pickle encoded content contained in a byte array.\\nThe conversion is done using [Pyrolite v4](https://github.com/irmen/pickle).\\n\\nIt can read all pickle protocol versions (0 to 4, so this includes\\nthe latest additions made in Python 3.4).\\n\\n```python\\n>>> myobject={ 'apple':3.5,'banana':18 }\\n>>> pickle.dumps(myobject).encode(\\\"hex\\\")\\n'286470300a53276170706c65270a70310a46332e350a73532762616e616e61270a70320a4931380a732e'\\n```\\n\\n@param `input` Byte array of a pickle encoded content\\n\\n@param `output` Warp 10 object\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"J3_2Hol4AIs\"},{\"name\":\"PIGSCHEMA\",\"detail\":\"PIGSCHEMA( elt:ANY* ): elt:ANY* schema:STRING\",\"documentation\":\"The `PIGSCHEMA` function produces on top of the stack a STRING representing the [Pig](https://en.wikipedia.org/wiki/Pig_(programming_tool)) schema definition for the current stack content.\\n\\n@param `elt` Stack content.\\n\\n@param `schema` Schema for the current stack, usable when working with WarpScript in Pig.\\n\\n\",\"tags\":[\"pig\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"PIGSCHEMA\"},{\"name\":\"PIVOT\",\"detail\":\"PIVOT( input:LIST<GTS> pivot:LIST<GTS> ): result:LIST<GTS>\",\"documentation\":\"The `PIVOT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick of GTS from the first list, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n1// C3{C1=C} 2\\n2// C4{C2=F} 30\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n4// C3{} 5\\n4// C4{} 50\\n```\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOT\"},{\"name\":\"PIVOTSTRICT\",\"detail\":\"PIVOTSTRICT( input:LIST<GTS> pivot:LIST<GTS> ): result:LIST<GTS>\",\"documentation\":\"The `PIVOTSTRICT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™ in a way similar to what [`PIVOT`](/doc/PIVOT) does.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick common to Geo Time Series™ of both lists, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOTSTRICT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n```\\n\\nOnly ticks 0 and 3 appear in the result as those are the only ticks present in both `C1` and `C2`.\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOTSTRICT\"},{\"name\":\"POPR\",\"detail\":\"POPR( value:ANY ): \",\"documentation\":\"Pops a value from the top of the stack and stores it into the designated register.\\n\\nThe `POPR` function is really a family of functions named `POPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"POPR\"},{\"name\":\"PREDUCE\",\"detail\":\"PREDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR ] ): result:MAP\",\"documentation\":\"Behaves as [`REDUCE`](/doc/REDUCE) but produces a map of results keyed by the label map of each equivalence class.\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` Map keyed by the label map of each equivalence class and whose values are the Geo Time Series™ produced for each class.\\n\\n\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.5\",\"OPB64name\":\"PREDUCE\"},{\"name\":\"PRNG\",\"detail\":\"PRNG( seed:LONG ): \",\"documentation\":\"The `PRNG` function initializes the stack's seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator). This PRNG can later be used by the [`SRAND`](/doc/SRAND) function to produce random numbers in a deterministic way (!).\\n\\n@param `seed` The seed to use for initializing the PRNG.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"PRNG\"},{\"name\":\"PROB\",\"detail\":\"PROB( gts:GTS ): result:GTS\\nPROB( gtslist:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"Computes probability for each value of the input Geo Time Series™.\\n\\nThe function `PROB` consumes a GTS or a list of the GTS from the top of the stack. It pushes back the probability for each value.\\n\\nThe probabilities are computed using the value histogram.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `gtslist` The input list of Geo Time Series™\\n\\n@param `result` The Geo Time Series™ wit probability for each value\\n\\n@param `resultList` The List of Geo Time Series™ with probability for each value\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.6\",\"OPB64name\":\"PROB\"},{\"name\":\"PROBABILITY\",\"detail\":\"PROBABILITY( valueHistogram:MAP ): result:STRING\",\"documentation\":\"Pushes on the stack a function which computes probabilities according to a provided value histogram.\\n\\nTo use the function pushed by `PROBABILITY` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function expects a value on top of the stack and will output the probability of occurrence of this value.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"PROBABILITY\"},{\"name\":\"PSTACK\",\"detail\":\"\",\"documentation\":\"When in interactive (REPL) mode, prints the content of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PSTACK\"},{\"name\":\"PUSHR\",\"detail\":\"PUSHR(): value:ANY\",\"documentation\":\"Pushes onto the stack the value currently contained in the designated register.\\n\\nThe `PUSHR` function is really a family of functions named `PUSHRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PUSHR\"},{\"name\":\"PUT\",\"detail\":\"PUT( inputmap:MAP newvalue:ANY newkey:ANY ): outputmap:MAP\",\"documentation\":\"The `PUT` function inserts a new key-value pair in a map.\\nIf the key already exists in the input MAP, the value is replaced by the new one.\\n\\n`PUT` function puts the reference of the MAP on top of the stack.\\n\\n@param `newkey` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `newvalue` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `inputmap` reference to the map to be modified\\n\\n@param `outputmap` copy of input map reference. Useful to chain other instructions on the same map.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"PUT\"},{\"name\":\"Palpha\",\"detail\":\"Palpha( pg:PGRAPHICS color:NUMBER ): pg:PGRAPHICS alpha:DOUBLE\",\"documentation\":\"Extracts the alpha value from a color.\\n\\nThe `Palpha` function is easy to use and understand, but it is slower than bit shifting... \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/alpha_.html)\\n\\n@param `color` Any value of the color datatype\\n\\n@param `alpha` Alpha component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Palpha\"},{\"name\":\"Parc\",\"detail\":\"Parc( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE start:DOUBLE stop:DOUBLE ): pg:PGRAPHICS\\nParc( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE start:DOUBLE stop:DOUBLE mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined by the **a**, **b**, **c**, and **d** parameters. The origin of the arc's ellipse may be changed with the [`PellipseMode`](/doc/PellipseMode) function. Use the **start** and **stop** parameters to specify the angles (in radians) at which to draw the arc.\\n\\n\\n\\nThere are three ways to draw an arc; the rendering technique used is defined by the optional seventh parameter. The three options, depicted in the examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with a PIE fill.\\n\\n\\n\\nIn some cases, the `Parc` function isn't accurate enough for smooth drawing. For example, the shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are rendered, you'll need to draw the arc yourself with [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) or a **PShape**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/arc_.html)\\n\\n@param `b` y-coordinate of the arc's ellipse\\n\\n@param `a` x-coordinate of the arc's ellipse\\n\\n@param `c` width of the arc's ellipse by default\\n\\n@param `d` height of the arc's ellipse by default\\n\\n@param `start` angle to start the arc, specified in radians\\n\\n@param `stop` angle to stop the arc, specified in radians\\n\\n@param `mode` closing mode. either PIE, OPEN, or CHORD\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Parc\"},{\"name\":\"Pbackground\",\"detail\":\"Pbackground( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS gray:DOUBLE ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS image:PIMAGE ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS rgb:LONG alpha:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS gray:DOUBLE alpha:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"The `Pbackground` function sets the color used for the background of the processing graphics object. \\n\\nAn image object can also be used as the background for a sketch, although the image's width and height must match that of the processing object. Images used with `Pbackground` will ignore the current [`Ptint`](/doc/Ptint) setting. \\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pbackground` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/background_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `rgb` any rgb color value.\\n\\n@param `alpha` opacity of the background. 0 = transparent, 255 = opaque.\\n\\n@param `gray` a value between white (255) and black (0)\\n\\n@param `image` PImage to set as background (must be same size as pg)\\n\\n@param `v1` red or hue value (depending on the current color mode)\\n\\n@param `v2` green or saturation value (depending on the current color mode)\\n\\n@param `v3` blue or brightness value (depending on the current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbackground\"},{\"name\":\"PbeginContour\",\"detail\":\"PbeginContour( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Use the `PbeginContour` and [`PendContour`](/doc/PendContour) function to create negative shapes within shapes such as the center of the letter 'O'. `PbeginContour` begins recording vertices for the shape and [`PendContour`](/doc/PendContour) stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\n\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a `PbeginContour`/[`PendContour`](/doc/PendContour) pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginContour\"},{\"name\":\"PbeginShape\",\"detail\":\"PbeginShape( pg:PGRAPHICS kind:STRING ): pg:PGRAPHICS\\nPbeginShape( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Using the `PbeginShape` and [`PendShape`](/doc/PendShape) functions allow creating more complex forms. `PbeginShape` begins recording vertices for a shape and [`PendShape`](/doc/PendShape) stops recording. \\n\\nThe value of the **kind** parameter tells it which types of shapes to create from the provided vertices. The parameters available for beginShape() are POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the `PbeginShape` function, a series of [`Pvertex`](/doc/Pvertex) commands must follow. To stop drawing the shape, call [`PendShape`](/doc/PendShape). The [`Pvertex`](/doc/Pvertex) function with two parameters specifies a position in 2D. Each shape will be outlined with the current stroke color and filled with the fill color. \\n\\n\\nTransformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within `PbeginShape`. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within `PbeginShape`. \\n\\n\\nThe P2D and P3D renderers allow [`Pstroke`](/doc/Pstroke) and [`Pfill`](/doc/Pfill) to be altered on a per-vertex group basis. Settings such as [`PstrokeWeight`](/doc/PstrokeWeight), [`PstrokeCap`](/doc/PstrokeCap), and [`PstrokeJoin`](/doc/PstrokeJoin) cannot be changed while inside a `PbeginShape`/[`PendShape`](/doc/PendShape) block with any renderer.\\n\\nUp to Warp 10 1.2.18, `PbeginShape` could be called without the **kind** parameter. It defaults to POLYGON.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginShape_.html)\\n\\n@param `kind` Either POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginShape\"},{\"name\":\"Pbezier\",\"detail\":\"Pbezier( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\\nPbezier( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE x3:DOUBLE y3:DOUBLE z3:DOUBLE x4:DOUBLE y4:DOUBLE z4:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezier_.html)\\n\\n@param `x1` coordinates for the first anchor point\\n\\n@param `y1` coordinates for the first anchor point\\n\\n@param `z1` coordinates for the first anchor point\\n\\n@param `x2` coordinates for the first control point\\n\\n@param `y2` coordinates for the first control point\\n\\n@param `z2` coordinates for the first control point\\n\\n@param `x3` coordinates for the second control point\\n\\n@param `y3` coordinates for the second control point\\n\\n@param `z3` coordinates for the second control point\\n\\n@param `x4` coordinates for the second anchor point\\n\\n@param `y4` coordinates for the second anchor point\\n\\n@param `z4` coordinates for the second anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbezier\"},{\"name\":\"PbezierDetail\",\"detail\":\"PbezierDetail( pg:PGRAPHICS detail:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the **P3D** renderer; the default **P2D** renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierDetail_.html)\\n\\n@param `detail` resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierDetail\"},{\"name\":\"PbezierPoint\",\"detail\":\"PbezierPoint( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"documentation\":\"Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierPoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierPoint\"},{\"name\":\"PbezierTangent\",\"detail\":\"PbezierTangent( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"documentation\":\"Calculates the tangent of a point on a Bezier curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierTangent\"},{\"name\":\"PbezierVertex\",\"detail\":\"PbezierVertex( pg:PGRAPHICS x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Specifies vertex coordinates for Bezier curves. Each call to `PbezierVertex` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PbezierVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only with POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierVertex_.html)\\n\\n@param `x2` The x-coordinate of the 1st control point\\n\\n@param `y2` The y-coordinate of the 1st control point\\n\\n@param `x3` The x-coordinate of the 2nd control point\\n\\n@param `y3` The y-coordinate of the 2nd control point\\n\\n@param `x4` The x-coordinate of the anchor point\\n\\n@param `y4` The y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierVertex\"},{\"name\":\"Pblend\",\"detail\":\"Pblend( pg:PGRAPHICS src:PIMAGE sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG mode:STRING ): pg:PGRAPHICS\\nPblend( pg:PGRAPHICS sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Blends a region of pixels from one image into another (or in itself again) with full alpha channel support.\\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels in the destination image (B):\\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - Multiply the colors, result will always be darker.\\n+ SCREEN - Opposite multiply, uses inverse values of the colors.\\n+ OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,and screens light values.\\n+ HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.\\n+ SOFT_LIGHT - Mix of DARKEST and LIGHTEST. Works like OVERLAY, but not as harsh.\\n+ DODGE - Lightens light tones and increases contrast, ignores darks.Called \\\"Color Dodge\\\" in Illustrator and Photoshop.\\n+ BURN - Darker areas are applied, increasing contrast, ignores lights.Called \\\"Color Burn\\\" in Illustrator and Photoshop.\\n\\nAll modes use the alpha information (highest byte) of source image pixels as the blending factor. If the source and destination regions are different sizes, the image will be automatically resized to match the destination size. If the **src** parameter is not used, the display window is used as the source image.\\n\\n[Link to original Processing doc](https://processing.org/reference/blend_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `mode` Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblend\"},{\"name\":\"PblendMode\",\"detail\":\"PblendMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Blends the pixels in the display window according to a defined mode. \\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels already in the display window (B). \\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B. This is the default blending mode.\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - multiply the colors, result will always be darker.\\n+ SCREEN - opposite multiply, uses inverse values of the colors.\\n+ REPLACE - the pixels entirely replace the others and don't utilize alpha (transparency) values\\n\\nA pixel's final color is the result of applying one of the above blend modes with each channel of (A) and (B) independently. For example, red is compared with red, green with green, and blue with blue.\\n\\nWe recommend using `PblendMode` and not the previous [`Pblend`](/doc/Pblend) function. However, unlike [`Pblend`](/doc/Pblend), the `PblendMode` function does not support the following: HARD_LIGHT, SOFT_LIGHT, OVERLAY, DODGE, BURN. On older hardware, the LIGHTEST, DARKEST, and DIFFERENCE modes might not be available as well. \\n\\n[Link to original Processing doc](https://processing.org/reference/blendMode_.html)\\n\\n@param `mode` The blending mode to use\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PblendMode\"},{\"name\":\"Pblue\",\"detail\":\"Pblue( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS blue:DOUBLE\",\"documentation\":\"Extracts the blue value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pblue` function is easy to use and understand, but it is slower than bit masking. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/blue_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `blue` Blue component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblue\"},{\"name\":\"Pbox\",\"detail\":\"Pbox( pg:PGRAPHICS size:NUMBER ): pg:PGRAPHICS\\nPbox( pg:PGRAPHICS w:NUMBER h:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"A box is an extruded rectangle. A box with equal dimensions on all sides is a cube.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/box_.html)\\n\\n@param `size` dimension of the box in all dimensions (creates a cube)\\n\\n@param `w` dimension of the box in the x-dimension\\n\\n@param `h` dimension of the box in the y-dimension\\n\\n@param `d` dimension of the box in the z-dimension\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbox\"},{\"name\":\"Pbrightness\",\"detail\":\"Pbrightness( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS brightness:DOUBLE\",\"documentation\":\"Extracts the brightness value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/brightness_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `brightness` Brightness component of input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbrightness\"},{\"name\":\"Pclear\",\"detail\":\"Pclear( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Clears the pixels. This function clears everything in a **PGraphics** object to make all of the pixels 100% transparent.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clear_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclear\"},{\"name\":\"Pclip\",\"detail\":\"Pclip( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Limits the rendering to the boundaries of a rectangle defined by the parameters. The boundaries are drawn based on the state of the [`PimageMode`](/doc/PimageMode) function, either CORNER, CORNERS, or CENTER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clip_.html)\\n\\n@param `a` x-coordinate of the rectangle, by default\\n\\n@param `b` y-coordinate of the rectangle, by default\\n\\n@param `c` width of the rectangle, by default\\n\\n@param `d` height of the rectangle, by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclip\"},{\"name\":\"Pcolor\",\"detail\":\"Pcolor( pg:PGRAPHICS gray:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS gray:NUMBER alpha:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS color:LONG\",\"documentation\":\"`Pcolor` creates colors for storing in ARGB LONG datatype.\\n\\n+ RGB: The most efficient is to skip Pcolor function, using the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n+ HSB: For Hue Saturation Brightness to RGB conversion, use [`PcolorMode`](/doc/PcolorMode) to specify HSB, then use Pcolor to convert to ARGB.\\n\\nThe parameters are interpreted as RGB or HSB values depending on the current [`PcolorMode`](/doc/PcolorMode). The default mode is RGB values from 0 to 255.\\n\\nNote that if only one value is provided to `Pcolor`, it will be interpreted as a grayscale value. Add a second value, and it will be used for alpha transparency. When three values are specified, they are interpreted as either RGB or HSB values. Adding a fourth value applies alpha transparency.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/color_.html)\\n\\n@param `gray` int: number specifying value between white and black\\n\\n@param `alpha` float, or int: relative to current color range\\n\\n@param `v1` float, or int: red or hue values relative to the current color range\\n\\n@param `v2` float, or int: green or saturation values relative to the current color range\\n\\n@param `v3` float, or int: blue or brightness values relative to the current color range\\n\\n@param `color` ARGB color.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcolor\"},{\"name\":\"PcolorMode\",\"detail\":\"PcolorMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max:DOUBLE ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max1:DOUBLE max2:DOUBLE max3:DOUBLE ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max1:DOUBLE max2:DOUBLE max3:DOUBLE maxA:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Changes the way Processing interprets color data. By default, the parameters for [`Pfill`](/doc/Pfill), [`Pstroke`](/doc/Pstroke), [`Pbackground`](/doc/Pbackground), and [`Pcolor`](/doc/Pcolor) are defined by values between 0 and 255 using the RGB color model. The `PcolorMode` function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling **colorMode(RGB, 1.0)** will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters **max**, **max1**, **max2**, **max3**, and **maxA**.\\n\\nWhen using max different from default values, do not work with grayscale.\\n\\nAfter changing the range of values for colors with code like **colorMode(HSB, 360, 100, 100)**, those ranges remain in use until they are explicitly changed again. For example, after running **colorMode(HSB, 360, 100, 100)** and then changing back to **colorMode(RGB)**, the range for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid this, be explicit about the ranges when changing the color mode. For instance, instead of **colorMode(RGB)**, write **colorMode(RGB, 255, 255, 255)**. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/colorMode_.html)\\n\\n@param `mode` Either 'RGB' or 'HSB', corresponding to Red/Green/Blue and Hue/Saturation/Brightness\\n\\n@param `max` range for all color elements\\n\\n@param `max1` range for the red or hue depending on the current color mode\\n\\n@param `max2` range for the green or saturation depending on the current color mode\\n\\n@param `max3` range for the blue or brightness depending on the current color mode\\n\\n@param `maxA` range for the alpha\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcolorMode\"},{\"name\":\"Pconstrain\",\"detail\":\"Pconstrain( pg:PGRAPHICS x:DOUBLE low:DOUBLE high:DOUBLE ): pg:PGRAPHICS clamped:DOUBLE\",\"documentation\":\"Constrains a value to not exceed a maximum and minimum value. Also known as clamping a value. \\n\\nIt could be done with warpscript MIN MAX functions, see example.\\n\\n[Link to original Processing doc](https://processing.org/reference/constrain_.html)\\n\\n@param `x` The value to clamp.\\n\\n@param `low` Minimum limit.\\n\\n@param `high` Maximum limit.\\n\\n@param `clamped` Clamped value of x in [low high] range.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pconstrain\"},{\"name\":\"Pcopy\",\"detail\":\"Pcopy( pg:PGRAPHICS src:PIMAGE sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG ): pg:PGRAPHICS\\nPcopy( pg:PGRAPHICS sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG ): pg:PGRAPHICS\\nPcopy( pg:PGRAPHICS ): pg:PGRAPHICS img:PIMAGE\",\"documentation\":\"Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the **src** parameter into the display window. If the source and destination regions are not the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/copy_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `img` PIMAGE object, copy of pg\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcopy\"},{\"name\":\"PcreateFont\",\"detail\":\"PcreateFont( pg:PGRAPHICS name:STRING ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER smooth:BOOLEAN ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER smooth:BOOLEAN charset:STRING ): pg:PGRAPHICS font:PFONT\",\"documentation\":\"Dynamically converts a font to the format used by Processing from a font that is installed on the computer.  Not all fonts can be used and some might work with one operating system and not others.\\n\\nThe **size** parameter states the font size you want to generate. The **smooth** parameter specifies if the font should be antialiased or not.\\n\\nSince the 2.5.0 version, the name of the font can be a URI to a OpenType or Type1 font which will be resolved by a macro defined by the `processing.font.resolver` configuration.\\n\\n[Link to original Processing doc](https://processing.org/reference/createFont_.html)\\n\\n@param `name` Name of the font to load or URI from where to load the font.\\n\\n@param `size` Point size of the font\\n\\n@param `smooth` True for an antialiased font, false for aliased\\n\\n@param `charset` subset of ascii characters to be generated.\\n\\n@param `font` Processing font object compatible with PtextFont.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcreateFont\"},{\"name\":\"Pcurve\",\"detail\":\"Pcurve( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\\nPcurve( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE x3:DOUBLE y3:DOUBLE z3:DOUBLE x4:DOUBLE y4:DOUBLE z4:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of `Pcurve` functions together or using [`PcurveVertex`](/doc/PcurveVertex). An additional function called [`PcurveTightness`](/doc/PcurveTightness) provides control for the visual quality of the curve. The `Pcurve` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n[Link to original Processing doc](https://processing.org/reference/curve_.html)\\n\\n@param `x1` float: coordinates for the beginning control point\\n\\n@param `y1` float: coordinates for the beginning control point\\n\\n@param `x2` float: coordinates for the first point\\n\\n@param `y2` float: coordinates for the first point\\n\\n@param `x3` float: coordinates for the second point\\n\\n@param `y3` float: coordinates for the second point\\n\\n@param `x4` float: coordinates for the ending control point\\n\\n@param `y4` float: coordinates for the ending control point\\n\\n@param `z1` float: coordinates for the beginning control point\\n\\n@param `z2` float: coordinates for the first point\\n\\n@param `z3` float: coordinates for the second point\\n\\n@param `z4` float: coordinates for the ending control point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcurve\"},{\"name\":\"PcurveDetail\",\"detail\":\"PcurveDetail( pg:PGRAPHICS detail:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D renderer as the default P2D renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveDetail_.html)\\n\\n@param `detail` Resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveDetail\"},{\"name\":\"PcurvePoint\",\"detail\":\"PcurvePoint( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"documentation\":\"Evaluates the curve at point **t** for points **a**, **b**, **c**, **d**. The parameter **t** may range from 0 (the start of the curve) and 1 (the end of the curve). **a** and **d** are points on the curve, and **b** and **c** are the control points. This can be used once with the **x** coordinates and a second time with the **y** coordinates to get the location of a curve at **t**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curvePoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of second point on the curve\\n\\n@param `c` coordinate of third point on the curve\\n\\n@param `d` coordinate of fourth point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurvePoint\"},{\"name\":\"PcurveTangent\",\"detail\":\"PcurveTangent( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"documentation\":\"Calculates the tangent of a point on a curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTangent\"},{\"name\":\"PcurveTightness\",\"detail\":\"PcurveTightness( pg:PGRAPHICS tightness:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Modifies the quality of forms created with [`Pcurve`](/doc/Pcurve) and [`PcurveVertex`](/doc/PcurveVertex). The parameter **tightness** determines how the curve fits to the vertex points. The value 0.0 is the default value for **tightness** (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTightness_.html)\\n\\n@param `tightness` Amount of deformation from the original vertices\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTightness\"},{\"name\":\"PcurveVertex\",\"detail\":\"PcurveVertex( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPcurveVertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Specifies vertex coordinates for curves. This function may only be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). The first and last points in a series of `PcurveVertex` lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with `PcurveVertex` will draw the curve between the second, third, and fourth points. The `PcurveVertex` function is an implementation of Catmull-Rom splines. \\n\\n[Link to original Processing doc](https://processing.org/reference/curveVertex_.html)\\n\\n@param `x` The x-coordinate of the vertex\\n\\n@param `y` The y-coordinate of the vertex\\n\\n@param `z` The z-coordinate of the vertex\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveVertex\"},{\"name\":\"Pdecode\",\"detail\":\"Pdecode( b64img:STRING ): img:PIMAGE\\nPdecode( rawimg:BYTES ): img:PIMAGE\",\"documentation\":\"`Pdecode` takes the image representation on the stack and pushes a Pimage object on the stack. This object can only be used as an input for [`Pset`](/doc/Pset), [`Pimage`](/doc/Pimage), [`Pbackground`](/doc/Pbackground).\\n\\nInput string must start with the header `data:image/png;base64,`.\\n\\nSupported input types: PNG, GIF, JPG.\\n\\n@param `img` Processing Pimage object.\\n\\n@param `rawimg` Image bytes.\\n\\n@param `b64img` Base64 encoded image string\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdecode\"},{\"name\":\"Pdist\",\"detail\":\"Pdist( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE ): pg:PGRAPHICS\\nPdist( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Calculates the distance between two points, in 2D or 3D space.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/dist_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdist\"},{\"name\":\"Pellipse\",\"detail\":\"Pellipse( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the [`PellipseMode`](/doc/PellipseMode) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipse_.html)\\n\\n@param `a` float: x-coordinate of the ellipse\\n\\n@param `b` float: y-coordinate of the ellipse\\n\\n@param `c` float: width of the ellipse by default\\n\\n@param `d` float: height of the ellipse by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pellipse\"},{\"name\":\"PellipseMode\",\"detail\":\"PellipseMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Modifies the location from which ellipses are drawn by changing the way in which parameters given to [`Pellipse`](/doc/Pellipse) are intepreted.\\n\\nThe default mode is **ellipseMode(CENTER)**, which interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(RADIUS)** also uses the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\n**ellipseMode(CORNER)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(CORNERS)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipseMode_.html)\\n\\n@param `mode` Either CENTER, RADIUS, CORNER, or CORNERS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PellipseMode\"},{\"name\":\"Pencode\",\"detail\":\"Pencode( pg:PGRAPHICS ): b64img:STRING\\nPencode( pg:PGRAPHICS metadata:MAP ): b64img:STRING\",\"documentation\":\"`Pencode` function takes a processing graphic object on the top of the stack, render it to a png file, encode it in base64, prefix the result with the standard png header \\\"data:image/png;base64,\\\".\\n\\nThe resulting string is ready to use in an html document.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `b64img` Base64 encoded image string, ready to use in an html page.\\n\\n@param `metadata` Map of metadata to add to the PNG. Accepted keys are 'tEXt', 'zTXt' and 'iTXt', while values are lists of maps with 'keyword' and 'text' keys.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pencode\"},{\"name\":\"PendContour\",\"detail\":\"PendContour( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Use the [`PbeginContour`](/doc/PbeginContour) and `PendContour` function to create negative shapes within shapes such as the center of the letter 'O'. [`PbeginContour`](/doc/PbeginContour) begins recording vertices for the shape and `PendContour` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a [`PbeginContour`](/doc/PbeginContour)/`PendContour` pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n[Link to original Processing doc](https://processing.org/reference/endContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendContour\"},{\"name\":\"PendShape\",\"detail\":\"PendShape( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\\nPendShape( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"The `PendShape` function is the companion to [`PbeginShape`](/doc/PbeginShape) and may only be called after [`PbeginShape`](/doc/PbeginShape). When `Pendshape` is called, all of image data defined since the previous call to [`PbeginShape`](/doc/PbeginShape) is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end). \\n\\nUp to Warp 10 1.2.18, `PendShape` could be called without the **mode** parameter. It defaults to OPEN.\\n\\n[Link to original Processing doc](https://processing.org/reference/endShape_.html)\\n\\n@param `mode` Use CLOSE to close the shape, OPEN otherwise.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendShape\"},{\"name\":\"Pfill\",\"detail\":\"Pfill( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS gray:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS argb:LONG alpha:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS v1:LONG v2:LONG v3:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS v1:LONG v2:LONG v3:LONG alpha:LONG ): pg:PGRAPHICS\",\"documentation\":\"Sets the color used to fill shapes. For example, if you run **fill(204, 102, 0)**, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current [`PcolorMode`](/doc/PcolorMode). The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\nThe value for the \\\"gray\\\" parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\nTo change the color of an image or a texture, use [`Ptint`](/doc/Ptint).\\n\\n[Link to original Processing doc](https://processing.org/reference/fill_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pfill\"},{\"name\":\"Pfilter\",\"detail\":\"Pfilter( pg:PGRAPHICS kind:STRING ): pg:PGRAPHICS\\nPfilter( pg:PGRAPHICS kind:STRING param:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Filters the display window using a preset filter or with a custom shader. Using a shader with `Pfilter` is much faster than without. Shaders require the P2D or P3D renderer in size().\\n\\n\\nThe presets options are:\\n\\n+ **THRESHOLD** Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n+ **GRAY** Converts any colors in the image to grayscale equivalents. No parameter is used.\\n+ **OPAQUE** Sets the alpha channel to entirely opaque. No parameter is used.\\n+ **INVERT** Sets each pixel to its inverse value. No parameter is used.\\n+ **POSTERIZE** Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.\\n+ **BLUR** Executes a Guassian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Guassian blur of radius 1. Larger values increase the blur.\\n+ **ERODE** Reduces the light areas. No parameter is used.\\n+ **DILATE** Increases the light areas. No parameter is used.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/filter_.html)\\n\\n@param `kind` Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, or DILATE\\n\\n@param `param` unique for each, see above\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.17\",\"OPB64name\":\"J5OdQ6G_RV\"},{\"name\":\"Pget\",\"detail\":\"Pget( pg:PGRAPHICS ): pg:PGRAPHICS img:PIMAGE\\nPget( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS color:LONG\\nPget( pg:PGRAPHICS x:NUMBER y:NUMBER w:NUMBER h:NUMBER ): pg:PGRAPHICS img:PIMAGE\",\"documentation\":\"Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned (same as `Pcopy`). Use the **x** and **y** parameters to get the value of one pixel. Get a section of the display window by specifying additional **w** and **h** parameters. When getting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\nIf the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with **colorMode(HSB)**, the numbers returned will be in RGB format.\\n\\nGetting the color of a single pixel with **get(x, y)** is easy, but not as fast as grabbing the data directly from [`Ppixels`](/doc/Ppixels).\\n\\n[Link to original Processing doc](https://processing.org/reference/get_.html)\\n\\n@param `x` int: x-coordinate of the pixel\\n\\n@param `y` int: y-coordinate of the pixel\\n\\n@param `w` int: width of pixel rectangle to get\\n\\n@param `h` int: height of pixel rectangle to get\\n\\n@param `img` PIMAGE object\\n\\n@param `color` Color of the pixel, 32bits ARGB format.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pget\"},{\"name\":\"Pgreen\",\"detail\":\"Pgreen( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS green:DOUBLE\",\"documentation\":\"Extracts the green value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pgreen` function is easy to use and understand, but it is slower than bit shifting. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/green_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `green` Green component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pgreen\"},{\"name\":\"Phue\",\"detail\":\"Phue( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS hue:DOUBLE\",\"documentation\":\"Extracts the hue value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/hue_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `hue` Hue component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Phue\"},{\"name\":\"Pimage\",\"detail\":\"Pimage( pg:PGRAPHICS img:PIMAGE a:NUMBER b:NUMBER ): pg:PGRAPHICS\\nPimage( pg:PGRAPHICS img:PIMAGE a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"The `Pimage` function draws a Pimage (see [`Pdecode`](/doc/Pdecode)) on a PGraphic object.\\n\\nThe **img** parameter specifies the image to display and by default the **a** and **b** parameters define the location of its upper-left corner. The image is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PimageMode`](/doc/PimageMode) function can be used to change the way these parameters draw the image.\\n\\nThe color of an image may be modified with the [`Ptint`](/doc/Ptint) function. This function will maintain transparency for GIF and PNG images.\\n\\n[Link to original Processing doc](https://processing.org/reference/image_.html)\\n\\n@param `img` PImage: the image to display\\n\\n@param `a` float: x-coordinate of the image by default\\n\\n@param `b` float: y-coordinate of the image by default\\n\\n@param `c` float: width to display the image by default\\n\\n@param `d` float: height to display the image by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pimage\"},{\"name\":\"PimageMode\",\"detail\":\"PimageMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Modifies the location from which images are drawn by changing the way in which parameters given to [`Pimage`](/doc/Pimage) are intepreted.\\n\\nThe default mode is **imageMode(CORNER)**, which interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n**imageMode(CENTER)** interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/imageMode_.html)\\n\\n@param `mode` could be CORNER or CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PimageMode\"},{\"name\":\"Plerp\",\"detail\":\"Plerp( pg:PGRAPHICS start:NUMBER stop:NUMBER amt:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Calculates a number between two numbers at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines, or any linear interpolation.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerp_.html)\\n\\n@param `start` first value\\n\\n@param `stop` second value\\n\\n@param `amt` float between 0.0 and 1.0\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Plerp\"},{\"name\":\"PlerpColor\",\"detail\":\"PlerpColor( pg:PGRAPHICS c1:NUMBER c2:NUMBER amt:NUMBER ): pg:PGRAPHICS outcolor:LONG\",\"documentation\":\"Calculates a color between two colors at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is halfway in between, etc. \\n\\nAn amount below 0 will be treated as 0. Likewise, amounts above 1 will be capped at 1. This is different from the behavior of `Plerp`, but necessary because otherwise numbers outside the range will produce strange and unexpected colors.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerpColor_.html)\\n\\n@param `c1` interpolate from this color\\n\\n@param `c2` interpolate to this color\\n\\n@param `amt` between 0.0 and 1.0\\n\\n@param `outcolor` the interpolated result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PlerpColor\"},{\"name\":\"Pline\",\"detail\":\"Pline( pg:PGRAPHICS x1:NUMBER y1:NUMBER x2:NUMBER y2:NUMBER ): pg:PGRAPHICS\\nPline( pg:PGRAPHICS x1:NUMBER y1:NUMBER z1:NUMBER x2:NUMBER y2:NUMBER z2:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Draws a line (a direct path between two points) to the screen. The version of `Pline` with four parameters draws the line in 2D.  To color a line, use the [`Pstroke`](/doc/Pstroke) function. A line cannot be filled, therefore the [`Pfill`](/doc/Pfill) function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the [`PstrokeWeight`](/doc/PstrokeWeight) function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the **z** parameter requires the P3D parameter.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/line_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pline\"},{\"name\":\"PloadShape\",\"detail\":\"PloadShape( svg:STRING ): Pshape:PSHAPE\",\"documentation\":\"`PloadShape` can load a [SVG image](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) and return a PSHAPE object. WarpScript does not support [OBJ files](https://en.wikipedia.org/wiki/Wavefront_.obj_file) yet. \\n\\nThis feature is experimental, some files may render empty. \\n\\n@param `svg` A one line or a multiline SVG string.\\n\\n@param `Pshape` A PSHAPE object which can be used with Pshape.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"PloadShape\"},{\"name\":\"Pmag\",\"detail\":\"Pmag( pg:PGRAPHICS a:NUMBER b:NUMBER ): pg:PGRAPHICS mag:DOUBLE\",\"documentation\":\"Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \\\"start\\\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, `Pmag` is a shortcut for writing **0 0 x y Pdist**. It is exactly the same as warpscript function [`HYPOT`](/doc/HYPOT).\\n\\n3D is not yet supported.\\n\\n[Link to original Processing doc](https://processing.org/reference/mag_.html)\\n\\n@param `a` first value\\n\\n@param `b` second value\\n\\n@param `mag` result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmag\"},{\"name\":\"Pmap\",\"detail\":\"Pmap( pg:PGRAPHICS value:DOUBLE start1:DOUBLE stop1:DOUBLE start2:DOUBLE stop2:DOUBLE ): pg:PGRAPHICS output:DOUBLE\",\"documentation\":\"Re-maps a number from one range to another.\\n\\nIn the first example, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width).\\n\\n\\nAs shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/map_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start1` lower bound of the value's current range\\n\\n@param `stop1` upper bound of the value's current range\\n\\n@param `start2` lower bound of the value's target range\\n\\n@param `stop2` upper bound of the value's target range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmap\"},{\"name\":\"Pmask\",\"detail\":\"Pmask( mask_image:PIMAGE orginal_img:PIMAGE ): masked_image:PIMAGE\\nPmask( mask_image:PIMAGE orginal_grp:PGRAPHICS ): masked_grp:PGRAPHICS\\nPmask( mask_grp:PGRAPHICS orginal_img:PIMAGE ): masked_image:PIMAGE\\nPmask( mask_grp:PGRAPHICS orginal_grp:PGRAPHICS ): masked_grp:PGRAPHICS\",\"documentation\":\"The `Pmask` function copies the blue channel of an image to the alpha channel of an other.\\n\\nAs **PGRAPHICS** intances are alse **PIMAGE** instances, you can use this fonction with **PGRAPHICS**.\\n\\n@param `orginal_img` PImage to be masked\\n\\n@param `mask_image` Pimage to serve as mask\\n\\n@param `masked_image` Masked Pimage\\n\\n@param `orginal_grp` PGraphics to be masked\\n\\n@param `mask_grp` PGraphics to serve as mask\\n\\n@param `masked_grp` Masked PGraphics\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.7.0\",\"OPB64name\":\"Pmask\"},{\"name\":\"PnoClip\",\"detail\":\"PnoClip( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Disables the clipping previously started by the [`Pclip`](/doc/Pclip) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noClip_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoClip\"},{\"name\":\"PnoFill\",\"detail\":\"PnoFill( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Disables filling geometry. If both [`PnoStroke`](/doc/PnoStroke) and `PnoFill` are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noFill_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoFill\"},{\"name\":\"PnoStroke\",\"detail\":\"PnoStroke( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Disables drawing the stroke (outline). If both `PnoStroke` and [`PnoFill`](/doc/PnoFill) are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noStroke_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoStroke\"},{\"name\":\"PnoTint\",\"detail\":\"PnoTint( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Removes the current fill value for displaying images and reverts to displaying images with their original hues.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noTint_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoTint\"},{\"name\":\"Pnorm\",\"detail\":\"Pnorm( pg:PGRAPHICS value:NUMBER start:NUMBER stop:NUMBER ): pg:PGRAPHICS output:DOUBLE\",\"documentation\":\"Normalizes a number from another range into a value between 0 and 1. Identical to `value low high 0 1 Pmap`.\\n\\nNumbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/norm_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start` lower bound of the value's current range\\n\\n@param `stop` upper bound of the value's current range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pnorm\"},{\"name\":\"Ppixels\",\"detail\":\"Ppixels( pg:PGRAPHICS ): pg:PGRAPHICS pixels:LIST<LONG>\\nPpixels( img:PIMAGE ): img:PIMAGE pixels:LIST<LONG>\",\"documentation\":\"Returns an array containing the values for all the pixels in the display window. These values are of the color datatype. This array is the size of the display window. For example, if the image is 100x100 pixels, there will be 10000 values and if the window is 200x300 pixels, there will be 60000 values. After **pixels** has been modified, the [`PupdatePixels`](/doc/PupdatePixels) function must be run to update the content of the display window.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pixels.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppixels\"},{\"name\":\"Ppoint\",\"detail\":\"Ppoint( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPpoint( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point.\\n\\nUse [`Pstroke`](/doc/Pstroke) to set the color of a `Ppoint`.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/point_.html)\\n\\n@param `x` x-coordinate of the point\\n\\n@param `y` y-coordinate of the point\\n\\n@param `z` z-coordinate of the point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppoint\"},{\"name\":\"PpopMatrix\",\"detail\":\"PpopMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The [`PpushMatrix`](/doc/PpushMatrix) function saves the current coordinate system to the stack and `PpopMatrix` restores the prior coordinate system. [`PpushMatrix`](/doc/PpushMatrix) and `PpopMatrix` are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopMatrix\"},{\"name\":\"PpopStyle\",\"detail\":\"PpopStyle( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"The [`PpushStyle`](/doc/PpushStyle) function saves the current style settings and `PpopStyle` restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with [`PpushStyle`](/doc/PpushStyle), it builds on the current style information. The [`PpushStyle`](/doc/PpushStyle) and `PpopStyle` functions can be nested to provide more control (see example for a demonstration.)\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopStyle\"},{\"name\":\"PpushMatrix\",\"detail\":\"PpushMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Pushes the current transformation matrix onto the matrix stack. Understanding `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) requires understanding the concept of a matrix stack. The `PpushMatrix` function saves the current coordinate system to the stack and [`PpopMatrix`](/doc/PpopMatrix) restores the prior coordinate system. `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushMatrix\"},{\"name\":\"PpushStyle\",\"detail\":\"PpushStyle( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"The `PpushStyle` function saves the current style settings and [`PpopStyle`](/doc/PpopStyle) restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `PpushStyle`, it builds on the current style information. The `PpushStyle` and [`PpopStyle`](/doc/PpopStyle) functions can be nested to provide more control. (See example for a demonstration.)\\n\\n\\nThe style information controlled by the following functions are included in the style:fill, stroke, tint, strokeWeight, strokeCap, strokeJoin, imageMode, rectMode, ellipseMode, shapeMode, colorMode, textAlign, textFont, textMode, textSize, textLeading, emissive, specular, shininess, ambient.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushStyle\"},{\"name\":\"Pquad\",\"detail\":\"Pquad( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quad_.html)\\n\\n@param `x1` float: x-coordinate of the first corner\\n\\n@param `y1` float: y-coordinate of the first corner\\n\\n@param `x2` float: x-coordinate of the second corner\\n\\n@param `y2` float: y-coordinate of the second corner\\n\\n@param `x3` float: x-coordinate of the third corner\\n\\n@param `y3` float: y-coordinate of the third corner\\n\\n@param `x4` float: x-coordinate of the fourth corner\\n\\n@param `y4` float: y-coordinate of the fourth corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pquad\"},{\"name\":\"PquadraticVertex\",\"detail\":\"PquadraticVertex( pg:PGRAPHICS cx:DOUBLE cy:DOUBLE x3:DOUBLE y3:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Specifies vertex coordinates for quadratic Bezier curves. Each call to `PquadraticVertex` defines the position of one control point and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PquadraticVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when there is no MODE parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quadraticVertex_.html)\\n\\n@param `cx` the x-coordinate of the control point\\n\\n@param `cy` the y-coordinate of the control point\\n\\n@param `x3` the x-coordinate of the anchor point\\n\\n@param `y3` the y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PquadraticVertex\"},{\"name\":\"Prect\",\"detail\":\"Prect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\\nPrect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER r:NUMBER ): pg:PGRAPHICS\\nPrect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER tl:NUMBER tr:NUMBER br:NUMBER bl:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the [`PrectMode`](/doc/PrectMode) function.\\n\\n\\n\\nTo draw a rounded rectangle, add a fifth parameter, which is used as the radius value for all four corners.\\n\\n\\n\\nTo use a different radius value for each corner, include eight parameters. When using eight parameters, the latter four set the radius of the arc at each corner separately, starting with the top-left corner and moving clockwise around the rectangle.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rect_.html)\\n\\n@param `a` float: x-coordinate of the rectangle by default\\n\\n@param `b` float: y-coordinate of the rectangle by default\\n\\n@param `c` float: width of the rectangle by default\\n\\n@param `d` float: height of the rectangle by default\\n\\n@param `r` float: radii for all four corners\\n\\n@param `tl` float: radius for top-left corner\\n\\n@param `tr` float: radius for top-right corner\\n\\n@param `br` float: radius for bottom-right corner\\n\\n@param `bl` float: radius for bottom-left corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Prect\"},{\"name\":\"PrectMode\",\"detail\":\"PrectMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Modifies the location from which rectangles are drawn by changing the way in which parameters given to [`Prect`](/doc/Prect) are intepreted.\\n\\nThe default mode is **CORNER**, which interprets the first two parameters of [`Prect`](/doc/Prect) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**CORNERS** interprets the first two parameters of [`Prect`](/doc/Prect) as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\\n\\n**CENTER** interprets the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**RADIUS** also uses the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, but uses the third and fourth parameters to specify half of the shape's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\\n\\n[Link to original Processing doc](https://processing.org/reference/rectMode_.html)\\n\\n@param `mode` either CORNER, CORNERS, CENTER, or RADIUS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PrectMode\"},{\"name\":\"Pred\",\"detail\":\"Pred( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS red:DOUBLE\",\"documentation\":\"Extracts the red value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pred` function is easy to use and understand, but it is slower than bit shifting. \\n\\n[Link to original Processing doc](https://processing.org/reference/red_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `red` Red component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pred\"},{\"name\":\"PresetMatrix\",\"detail\":\"PresetMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"documentation\":\"Replaces the current matrix with the identity matrix. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/resetMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PresetMatrix\"},{\"name\":\"Protate\",\"detail\":\"Protate( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Rotates the amount specified by the **angle** parameter. Angles must be specified in radians (values from **0** to **2 PI**). \\n\\nThe coordinates are always rotated around their relative position to the origin. Positive numbers rotate objects in a clockwise direction and negative numbers rotate in the couterclockwise direction. Transformations apply to everything that happens afterward, and subsequent calls to the function compound the effect. For example, calling `pi 2.0 / Protate` once and then calling `pi 2.0 / Protate` a second time is the same as a single `pi Protate`. \\n \\n\\nTechnically, `Protate` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rotate_.html)\\n\\n@param `angle` angle of rotation specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Protate\"},{\"name\":\"Psaturation\",\"detail\":\"Psaturation( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS saturation:DOUBLE\",\"documentation\":\"Extracts the saturation value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/saturation_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `saturation` Saturation component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psaturation\"},{\"name\":\"Pscale\",\"detail\":\"Pscale( pg:PGRAPHICS s:NUMBER ): pg:PGRAPHICS\\nPscale( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPscale( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call `2.0 Pscale` increases the dimension of a shape by 200%.\\n\\n\\n\\nTransformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `2.0 Pscale` and then `1.5 Pscale` is the same as `3.0 Pscale`. This function can be further controlled with [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/scale_.html)\\n\\n@param `s` percentage to scale the object\\n\\n@param `x` percentage to scale the object in the x-axis\\n\\n@param `y` percentage to scale the object in the y-axis\\n\\n@param `z` percentage to scale the object in the z-axis\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pscale\"},{\"name\":\"Pset\",\"detail\":\"Pset( pg:PGRAPHICS x:NUMBER y:NUMBER c:NUMBER ): pg:PGRAPHICS\\nPset( pg:PGRAPHICS x:NUMBER y:NUMBER img:PIMAGE ): pg:PGRAPHICS\",\"documentation\":\"Changes the color of any pixel, or writes an image directly to the display window.\\n\\n\\n\\nThe **x** and **y** parameters specify the pixel to change and the **c** parameter specifies the color value. The **c** parameter is interpreted according to the current color mode.  (The default color mode is RGB values from 0 to 255.)  When setting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\n\\n\\nSetting the color of a single pixel with **set(x, y)** is easy, but not as fast as putting the data directly into the list of pixels returned by  [`Ppixels`](/doc/Ppixels).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/set_.html)\\n\\n@param `x` X-coordinate of the pixel\\n\\n@param `y` Y-coordinate of the pixel\\n\\n@param `c` Any value of the color datatype\\n\\n@param `img` Image to copy into the original image\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pset\"},{\"name\":\"Pshape\",\"detail\":\"Pshape( pg:PGRAPHICS shape:PSHAPE ): pg:PGRAPHICS\\nPshape( pg:PGRAPHICS shape:PSHAPE x:DOUBLE y:DOUBLE ): pg:PGRAPHICS\\nPshape( pg:PGRAPHICS shape:PSHAPE a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Draws shapes to the display window. Shapes must be loaded with [`PloadShape`](/doc/PloadShape). Processing currently works with SVG, OBJ, and custom-created shapes. WrapScript only support SVG. The **shape** parameter specifies the shape to display and the coordinate parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PshapeMode`](/doc/PshapeMode) function can be used to change the way these parameters are interpreted.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shape_.html)\\n\\n@param `shape` the shape to display\\n\\n@param `x` x-coordinate of the shape\\n\\n@param `y` y-coordinate of the shape\\n\\n@param `a` x-coordinate of the shape\\n\\n@param `b` y-coordinate of the shape\\n\\n@param `c` width to display the shape\\n\\n@param `d` height to display the shape\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"Pshape\"},{\"name\":\"PshapeMode\",\"detail\":\"PshapeMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Modifies the location from which shapes draw. The default mode is **shapeMode(CORNER)**, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. The syntax **shapeMode(CORNERS)** uses the first and second parameters of [`Pshape`](/doc/Pshape) to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax **shapeMode(CENTER)** draws the shape from its center point and uses the third and forth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shapeMode_.html)\\n\\n@param `mode` int: either CORNER, CORNERS, CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshapeMode\"},{\"name\":\"PshearX\",\"detail\":\"PshearX( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Shears a shape around the x-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearX` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearX_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearX\"},{\"name\":\"PshearY\",\"detail\":\"PshearY( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Shears a shape around the y-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearY` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearY_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearY\"},{\"name\":\"Psize\",\"detail\":\"Psize( img:PIMAGE ): width:LONG height:LONG\\nPsize( pg:PGRAPHICS ): width:LONG height:LONG\",\"documentation\":\"The `Psize` function returns the pixel `width` and `height` of a Pimage or PGraphics object.\\n\\n@param `img` PImage instance to measure.\\n\\n@param `pg` PGraphics instance to measure.\\n\\n@param `height` Object height in pixels.\\n\\n@param `width` Object height in pixels.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.6.0\",\"OPB64name\":\"Psize\"},{\"name\":\"Psphere\",\"detail\":\"Psphere( pg:PGRAPHICS r:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"A sphere is a hollow ball made from tessellated triangles.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphere_.html)\\n\\n@param `r` the radius of the sphere\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psphere\"},{\"name\":\"PsphereDetail\",\"detail\":\"PsphereDetail( pg:PGRAPHICS res:NUMBER ): pg:PGRAPHICS\\nPsphereDetail( pg:PGRAPHICS ures:NUMBER vres:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you are going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until `PsphereDetail` is called again with a new parameter and so should **not** be called prior to every [`Psphere`](/doc/Psphere) statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphereDetail_.html)\\n\\n@param `res` int: number of segments (minimum 3) used per full circle revolution\\n\\n@param `ures` int: number of segments used longitudinally per full circle revolutoin\\n\\n@param `vres` int: number of segments used latitudinally from top to bottom\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PsphereDetail\"},{\"name\":\"Pstroke\",\"detail\":\"Pstroke( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS gray:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS argb:LONG alpha:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS gray:DOUBLE alpha:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current **colorMode** The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/stroke_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pstroke\"},{\"name\":\"PstrokeCap\",\"detail\":\"PstrokeCap( pg:PGRAPHICS cap:STRING ): pg:PGRAPHICS\",\"documentation\":\"Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeCap_.html)\\n\\n@param `cap` Either SQUARE, PROJECT, or ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeCap\"},{\"name\":\"PstrokeJoin\",\"detail\":\"PstrokeJoin( pg:PGRAPHICS join:STRING ): pg:PGRAPHICS\",\"documentation\":\"Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeJoin_.html)\\n\\n@param `join` Either MITER, BEVEL, ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeJoin\"},{\"name\":\"PstrokeWeight\",\"detail\":\"PstrokeWeight( pg:PGRAPHICS weight:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight. See [`Ppoint`](/doc/Ppoint) example.\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeWeight_.html)\\n\\n@param `weight` The weight (in pixels) of the stroke.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeWeight\"},{\"name\":\"Ptext\",\"detail\":\"Ptext( pg:PGRAPHICS s:STRING x:DOUBLE y:DOUBLE ): pg:PGRAPHICS\\nPtext( pg:PGRAPHICS s:STRING x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the [`PtextFont`](/doc/PtextFont) function and a default size will be used unless a font is set with [`PtextSize`](/doc/PtextSize). Change the color of the text with the [`Pfill`](/doc/Pfill) function. The text displays in relation to the [`PtextAlign`](/doc/PtextAlign) function, which gives the option to draw to the left, right, and center of the coordinates.\\n\\n\\n\\nThe **x2** and **y2** parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current [`PrectMode`](/doc/PrectMode) setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen.\\n\\n\\n\\nNote that Processing now lets you call `Ptext` without first specifying a PFont with [`PtextFont`](/doc/PtextFont). In that case, a generic sans-serif font will be used instead.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/text_.html)\\n\\n@param `s` the string to be displayed\\n\\n@param `x` by default, x-coordinate of text\\n\\n@param `y` by default, y-coordinate of text\\n\\n@param `x1` by default, the x-coordinate of text, see PrectMode for more info\\n\\n@param `y1` by default, the y-coordinate of text, see PrectMode for more info\\n\\n@param `x2` by default, the width of the text box, see PrectMode for more info\\n\\n@param `y2` by default, the height of the text box, see PrectMode for more info\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptext\"},{\"name\":\"PtextAlign\",\"detail\":\"PtextAlign( pg:PGRAPHICS alignX:STRING ): pg:PGRAPHICS\\nPtextAlign( pg:PGRAPHICS alignX:STRING alignY:STRING ): pg:PGRAPHICS\",\"documentation\":\"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the **x** and **y** parameters of the [`Ptext`](/doc/Ptext) function.\\n\\n\\n\\nAn optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current [`PtextDescent`](/doc/PtextDescent). For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.\\n\\n\\n\\nWhen using [`Ptext`](/doc/Ptext) with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)\\n\\n\\n\\nThe vertical alignment is based on the value of [`PtextAscent`](/doc/PtextAscent), which many fonts do not specify correctly. It may be necessary to use a hack and offset by a few pixels by hand so that the offset looks correct. To do this as less of a hack, use some percentage of [`PtextAscent`](/doc/PtextAscent) or [`PtextDescent`](/doc/PtextDescent) so that the hack works even if you change the size of the font.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAlign_.html)\\n\\n@param `alignX` Horizontal alignment, either LEFT, CENTER, or RIGHT\\n\\n@param `alignY` Vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAlign\"},{\"name\":\"PtextAscent\",\"detail\":\"PtextAscent( pg:PGRAPHICS ): pg:PGRAPHICS ascent:DOUBLE\",\"documentation\":\"Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline. For example, adding the `PtextAscent` and [`PtextDescent`](/doc/PtextDescent) values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAscent_.html)\\n\\n@param `ascent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAscent\"},{\"name\":\"PtextDescent\",\"detail\":\"PtextDescent( pg:PGRAPHICS ): pg:PGRAPHICS descent:DOUBLE\",\"documentation\":\"Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline. For example, adding the [`PtextAscent`](/doc/PtextAscent) and `PtextDescent` values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textDescent_.html)\\n\\n@param `descent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextDescent\"},{\"name\":\"PtextFont\",\"detail\":\"PtextFont( pg:PGRAPHICS font:PFONT ): pg:PGRAPHICS\\nPtextFont( pg:PGRAPHICS font:PFONT size:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the current font that will be drawn with the [`Ptext`](/doc/Ptext) function. Fonts must be created for Processing with [`PcreateFont`](/doc/PcreateFont) before they can be used. The font set through `PtextFont` will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textFont_.html)\\n\\n@param `font` Any variable of the type PFont\\n\\n@param `size` the size of the letters in pixel.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextFont\"},{\"name\":\"PtextLeading\",\"detail\":\"PtextLeading( pg:PGRAPHICS leading:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.  Note, however, that the leading is reset by [`PtextSize`](/doc/PtextSize). For example, if the leading is set to 20 with `20 PtextLeading`, then if `48 PtextSize` is run at a later point, the leading will be reset to the default for the text size of 48.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textLeading_.html)\\n\\n@param `leading` The size in pixels for spacing between lines\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextLeading\"},{\"name\":\"PtextMode\",\"detail\":\"PtextMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"documentation\":\"Sets the way text draws to the screen, either as texture maps or as vector geometry. The default **textMode(MODEL)**, uses textures to render the fonts. The **textMode(SHAPE)** mode draws text using the glyph outlines of individual characters rather than as textures. This mode is only supported with the **PDF** and **P3D** renderer settings. With the **PDF** renderer, you must call **textMode(SHAPE)** before any other drawing occurs. If the outlines are not available, then **textMode(SHAPE)** will be ignored and **textMode(MODEL)** will be used instead.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textMode_.html)\\n\\n@param `mode` int: either MODEL or SHAPE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextMode\"},{\"name\":\"PtextSize\",\"detail\":\"PtextSize( pg:PGRAPHICS size:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the current font size. This size will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function. Font size is measured in units of pixels.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textSize_.html)\\n\\n@param `size` float: the size of the letters in units of pixels\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextSize\"},{\"name\":\"PtextWidth\",\"detail\":\"PtextWidth( pg:PGRAPHICS str:STRING ): pg:PGRAPHICS w:DOUBLE\",\"documentation\":\"Calculates and returns the width of any character or text string.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textWidth_.html)\\n\\n@param `str` The String of characters to measure\\n\\n@param `w` The width of the input string\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextWidth\"},{\"name\":\"Ptint\",\"detail\":\"Ptint( pg:PGRAPHICS argb:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS gray:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS argb:NUMBER alpha:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.\\n\\n\\n\\nTo apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, **tint(255, 128)** will make an image 50pc transparent (assuming the default alpha range of 0-255, which can be changed with [`PcolorMode`](/doc/PcolorMode)).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/tint_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `alpha` opacity of the image\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptint\"},{\"name\":\"PtoImage\",\"detail\":\"PtoImage( pg:PGRAPHICS ): img:PIMAGE\",\"documentation\":\"The `PtoImage` function transforms a `PGRAPHICS` to a `PIMAGE`.\\n\\nThe `PGRAPHICS` can still be used after the transformation as this function copies the pixel values. This is equivalent to `Pencode Pdecode` but it is a lot faster.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `img` Processing Pimage object.\\n\\n\",\"tags\":[\"processing\"],\"since\":\"2.1.0\",\"OPB64name\":\"PtoImage\"},{\"name\":\"Ptranslate\",\"detail\":\"Ptranslate( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"Specifies an amount to displace objects within the display window. The **x** parameter specifies left/right translation, the **y** parameter specifies up/down translation.\\n\\n\\n\\nTransformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling **50 0 Ptranslate** and then **20 0 Ptranslate** is the same as **70 0 Ptranslate**. This function can be further controlled by using [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/translate_.html)\\n\\n@param `x` left/right translation\\n\\n@param `y` up/down translation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptranslate\"},{\"name\":\"Ptriangle\",\"detail\":\"Ptriangle( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE ): pg:PGRAPHICS\",\"documentation\":\"A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/triangle_.html)\\n\\n@param `x1` float: x-coordinate of the first point\\n\\n@param `y1` float: y-coordinate of the first point\\n\\n@param `x2` float: x-coordinate of the second point\\n\\n@param `y2` float: y-coordinate of the second point\\n\\n@param `x3` float: x-coordinate of the third point\\n\\n@param `y3` float: y-coordinate of the third point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptriangle\"},{\"name\":\"PupdatePixels\",\"detail\":\"PupdatePixels( pg:PGRAPHICS pixels:LIST<LONG> ): pg:PGRAPHICS\\nPupdatePixels( img:PIMAGE pixels:LIST<LONG> ): img:PIMAGE\",\"documentation\":\"Updates the display window with the data in the **pixels[]** array. Use in conjunction with [`Ppixels`](/doc/Ppixels). If you are only reading pixels from the array, there's no need to call `PupdatePixels` - updating is only necessary to apply changes.\\n\\n[Link to original Processing doc](https://processing.org/reference/updatePixels_.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PupdatePixels\"},{\"name\":\"Pvertex\",\"detail\":\"Pvertex( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER u:NUMBER v:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER u:NUMBER v:NUMBER ): pg:PGRAPHICS\",\"documentation\":\"All shapes are constructed by connecting a series of vertices. `Pvertex` is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/vertex_.html)\\n\\n@param `x` x-coordinate of the vertex\\n\\n@param `y` y-coordinate of the vertex\\n\\n@param `z` float: z-coordinate of the vertex\\n\\n@param `u` float: horizontal coordinate for the texture mapping\\n\\n@param `v` float: vertical coordinate for the texture mapping\\n\\n@param `pg` Processing graphic object\\n\\n\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pvertex\"},{\"name\":\"Q->\",\"detail\":\"Q->( input:LONG ): w:DOUBLE x:DOUBLE y:DOUBLE z:DOUBLE\",\"documentation\":\"The `Q->` function consumes on the stack a [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long and push back the quaternion into\\n4 doubles (w, x, y, z, with z being on top).\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `input` Quaternion representation\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"JHoy\"},{\"name\":\"QCONJUGATE\",\"detail\":\"QCONJUGATE( quaternion:LONG ): result:LONG\",\"documentation\":\"The `QCONJUGATE` function performs a [conjugation](https://en.wikipedia.org/wiki/Quaternion#Conjugation,_the_norm,_and_reciprocal) of a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the quaternion conjugate into a long.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `result` The conjugated quaternion\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QCONJUGATE\"},{\"name\":\"QDIVIDE\",\"detail\":\"QDIVIDE( q:LONG r:LONG ): result:LONG\",\"documentation\":\"The `QDIVIDE` function divides a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of dividing them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from division *q* by *r*\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QDIVIDE\"},{\"name\":\"QMULTIPLY\",\"detail\":\"QMULTIPLY( q:LONG r:LONG ): result:LONG\",\"documentation\":\"The `QMULTIPLY` function multiplies a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of multiplying them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from multiplication *q* by *r*\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QMULTIPLY\"},{\"name\":\"QROTATE\",\"detail\":\"QROTATE( x:DOUBLE y:DOUBLE z:DOUBLE quaternion:LONG ): x:DOUBLE y:DOUBLE z:DOUBLE\",\"documentation\":\"Rotates a vector by a [quaternion](https://en.wikipedia.org/wiki/Quaternion).\\n\\nThe `QROTATE` function consumes on the top of the stack three doubles representing a vector(x, y, z) and a long representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the vector rotated into 3 doubles (x, y, z with z being on top).\\n\\n@param `quaternion` The quaternion used to rotate the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATE\"},{\"name\":\"QROTATION\",\"detail\":\"QROTATION( quaternion:LONG ): x:DOUBLE y:DOUBLE z:DOUBLE angle:DOUBLE\",\"documentation\":\"The `QROTATION` extracts the axis and angle of the rotation represented by the [quaternion](https://en.wikipedia.org/wiki/Quaternion) on the stack.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `angle` The angle of rotation\\n\\n@param `x` The X axis\\n\\n@param `y` The Y axis\\n\\n@param `z` The Z axis\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATION\"},{\"name\":\"QUANTIZE\",\"detail\":\"QUANTIZE( gts:GTS bounds:LIST<DOUBLE> values:LIST ): qgts:GTS\\nQUANTIZE( lgts:LIST<GTS> bounds:LIST<DOUBLE> values:LIST ): lqgts:LIST<GTS>\",\"documentation\":\"The `QUANTIZE` function produces a quantized version of a Geo Time Series™ by replacing each value with a value from a finite list according to the interval the original value falls in. This function only works on numeric Geo Time Series™.\\nThis function can help to \\\"discretify\\\" data before calling [`VALUEHISTOGRAM`](/doc/VALUEHISTOGRAM).\\nThe list of intervals is defined as: [-∞,bounds<sub>0</sub>], (bounds<sub>0</sub>,bounds_<sub>1</sub>], (bounds<sub>1</sub>,bounds<sub>2</sub>], ..., (bounds<sub>n-1</sub>,+∞]\\n\\n@param `values` List of `n+1` values, one for each interval defined by `bounds`. If empty, the list `[ `0` `1` ... `n+1` ]` will be used.\\n\\n@param `bounds` Sorted list of `n` finite bounds defining `n+1` intervals.\\n\\n@param `gts` Geo Time Series™ to quantize.\\n\\n@param `qgts` Quantized GTS.\\n\\n@param `lgts` List of Geo Time Series™ to quantize.\\n\\n@param `lqgts` List of quantized GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"QUANTIZE\"},{\"name\":\"RAND\",\"detail\":\"RAND(): num:DOUBLE\",\"documentation\":\"The `RAND` function pushes onto the stack a random floating point number between 0.0 (inclusive) and 1.0 (exlusive) generated by the default random generator.\\n\\nThis generation is cryptographically secure.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RAND\"},{\"name\":\"RANDOM\",\"detail\":\"RANDOM(): num:DOUBLE\",\"documentation\":\"The `RANDOM` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThis function is very similar to [SRAND](/doc/SRAND) except the seed is choosen pseudorandomly when the function is first called. Subsequent calls use the same generator.\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"RANDOM\"},{\"name\":\"RANDPDF\",\"detail\":\"RANDPDF( valueHistogram:MAP ): result:STRING\",\"documentation\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe result if a function pushed onto the stack. This function does not have any arguments.\\n\\nTo use the function pushed by `RANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.7\",\"OPB64name\":\"RANDPDF\"},{\"name\":\"RANGE\",\"detail\":\"RANGE( [ end:LONG ] ): output:LIST<LONG>\\nRANGE( [ start:LONG end:LONG ] ): output:LIST<LONG>\\nRANGE( [ start:LONG end:LONG step:LONG ] ): output:LIST<LONG>\",\"documentation\":\"`RANGE` pushes onto the stack a list of integers in the given range [start included, end excluded[. If start is not in the parameter list, start=0.\\n\\n`RANGE` also accepts a step parameter in the parameter list.\\n\\n\\n@param `start` The start of range, default is 0\\n\\n@param `end` The end of range\\n\\n@param `step` The step between integers, default is 1\\n\\n@param `output` The list of every integers in the range [start end[\\n\\n\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGE\"},{\"name\":\"RANGECOMPACT\",\"detail\":\"RANGECOMPACT( gts:GTS ): compacted:GTS\\nRANGECOMPACT( lgts:LIST<GTS> ): lcompacted:LIST<GTS>\",\"documentation\":\"The `RANGECOMPACT` simplifies a Geo Time Series™ by simplifying ranges of identical values (with identical latitude, longitude and elevation), retaining only the first and last ticks of each range.\\n\\n@param `gts` Geo Time Series™ to compact.\\n\\n@param `compacted` Compacted GTS.\\n\\n@param `lgts` List of Geo Time Series™ to compact.\\n\\n@param `lcompacted` List of compacted GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGECOMPACT\"},{\"name\":\"RAWDTW\",\"detail\":\"RAWDTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe computation is performed on the raw Geo Time Series™, no transformation is applied to them.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"RAWDTW\"},{\"name\":\"REDEFS\",\"detail\":\"REDEFS( flag:BOOLEAN ): \",\"documentation\":\"The `REDEFS` function allows or disallows execution of redefined functions.\\n\\n@param `flag` Shall we allow or disallow the execution of redefined functions.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REDEFS\"},{\"name\":\"REDUCE\",\"detail\":\"REDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR ] ): result:LIST<GTS>\\nREDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR overrideTick:BOOLEAN ] ): result:LIST<GTS>\",\"documentation\":\"The `REDUCE` framework groups Geo Time Series™ by equivalence classes based on label values and applies a function on each equivalence class of Geo Time Series™, considering the values of each tick and producing one GTS per equivalence class.\\n\\nAs the selected reducer function is applied tick by tick, it is usually wise to [`BUCKETIZE`](/doc/BUCKETIZE) the GTS first with a common value of `lastbucket`.\\n\\nThe labels whose values are common to all the GTS in an equivalence class will be retained.\\n\\nSince 2.1 you can make REDUCE override the GTSs ticks. This usage in mainly to be used in conjuction with [`MACROREDUCER`](/doc/MACROREDUCER).\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` List of resulting Geo Time Series™.\\n\\n@param `overrideTick` Boolean, if true allows the reducer to modify the ticks of the GTSs. If not set, the reducer cannot modify the ticks.\\n\\n\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"REDUCE\"},{\"name\":\"RELABEL\",\"detail\":\"RELABEL( gts:GTS labels:MAP ): gts:GTS\\nRELABEL( lgts:LIST<GTS> labels:MAP ): lgts:LIST<GTS>\\nRELABEL( encoder:GTSENCODER labels:MAP ): encoder:GTSENCODER\\nRELABEL( lencoder:LIST<GTSENCODER> labels:MAP ): lencoder:LIST<GTSENCODER>\",\"documentation\":\"Modifies the labels of a Geo Time Series™. The `RELABEL` function expects a parameter MAP whose entries are labels to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `RELABEL` function will use the rest of the MAP as the actual labels to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing labels.\\n\\nAn entry with an empty STRING value or a NULL value will have the effect of removing the label from the GTS' labels.        \\n\\n@param `labels` Parameter map of label names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `encoder` Encoder to relabel\\n\\n@param `lencoder` List of encoders to relabel\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RELABEL\"},{\"name\":\"REMOVE\",\"detail\":\"REMOVE( inputlist:LIST index:LONG ): outputlist:LIST removeditem:ANY\\nREMOVE( inputmap:MAP key:ANY ): outputmap:MAP removeditem:ANY\\nREMOVE( inputgts:GTS pointindex:LONG ): outputgts:GTS removedpoint:LIST\",\"documentation\":\"Removes an entry from a MAP or from a LIST.\\n\\nThe `REMOVE` function consumes a list (or a map) and a index (or a key), then remove the entry.\\nIt lets the input on the stack and puts the removed item on top of the stack. \\nAs a result, the input map or list is modified and the map or list left on top of the stack is *not* a copy. \\n\\nIf the index is out of bound, the returned value is `NULL` and the list or array is unmodified.\\nIf the key does not exist in the map, it returns null as the removed entry.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **GTS**.\\n\\nSince 2.7, `REMOVE` can be called on a **GTS**.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `inputmap` The reference to the map to be modified\\n\\n@param `index` The index of the list, 0 for the first item\\n\\n@param `inputlist` The reference to the list to be modified\\n\\n@param `removeditem` Depending on map or list content, could be any type\\n\\n@param `outputmap` The input map modified\\n\\n@param `outputlist` The input list modified\\n\\n@param `pointindex` Index of the point in the GTS, 0-indexed, handles negative indexing.\\n\\n@param `inputgts` The GTS to remove the point from.\\n\\n@param `removedpoint` The removed point. List of timestamp, latitude, longitude, elevation and value.\\n\\n@param `outputgts` The acopy of the original GTS with the requested point removed.\\n\\n\",\"tags\":[\"maps\",\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"REMOVE\"},{\"name\":\"REMOVETICK\",\"detail\":\"REMOVETICK( gts:GTS tick:LONG ): pruned:GTS\\nREMOVETICK( gts:GTS lticks:LIST<LONG> ): pruned:GTS\\nREMOVETICK( gts:GTS lticks:SET<LONG> ): pruned:GTS\",\"documentation\":\"The `REMOVETICK` function transforms a Geo Time Series™ by removing all occurrences of a tick or ticks.\\n\\n@param `tick` Tick (timestamp) to remove.\\n\\n@param `lticks` List or Set of ticks to remove.\\n\\n@param `gts` Geo Time Series™ to transform.\\n\\n@param `pruned` Tranformed Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.19\",\"OPB64name\":\"REMOVETICK\"},{\"name\":\"RENAME\",\"detail\":\"RENAME( gts:GTS name:STRING ): gts:GTS\\nRENAME( lgts:LIST<GTS> name:STRING ): lgts:LIST<GTS>\\nRENAME( encoder:GTSENCODER name:STRING ): encoder:GTSENCODER\\nRENAME( lencoder:LIST<GTSENCODER> name:STRING ): lencoder:LIST<GTSENCODER>\",\"documentation\":\"The `RENAME` function changes the name of a Geo Time Series™, an Encoder or a list thereof. This operation may be required prior to using some functions. If the name starts with '+', the specified name will be appended to the current name of the GTS or Encoder.\\n\\nIf you want to rename a Geo Time Series™ or an Encoder so its name starts with a '+', you must first set its name to the empty string then use rename with the desired name prefixed with an additional '+'.\\n\\n@param `gts` Geo Time Series™ instance to rename.\\n\\n@param `lgts` List of Geo Time Series™ instances to rename.\\n\\n@param `encoder` Encoder to rename.\\n\\n@param `lencoder` Encoder to rename.\\n\\n@param `name` New name to give to the GTS.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"RENAME\"},{\"name\":\"REOPTALT\",\"detail\":\"REOPTALT( alternatives:LIST<STRING> ): regexp:STRING\",\"documentation\":\"Produces a **R**egular **E**xpression **OPT**imized for **ALT**ernation from a list of STRINGs. Large alternations in regular expressions can lead to excessive backtracking and poor matching performance. In order to mitigate this, the `REOPTALT` function will produce a regular expression from a list of STRINGs which reduces the backtracking thus leading to better matching performance.\\n\\n@param `alternatives` List of STRINGs which should be used in the alternation.\\n\\n@param `regexp` Regular expression\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.2.16\",\"OPB64name\":\"REOPTALT\"},{\"name\":\"REPLACE\",\"detail\":\"REPLACE( original:ANY pattern:ANY replacement:ANY ): result:STRING\",\"documentation\":\"Replaces the first occurrence of a pattern by its substitution.\\n\\nThe `REPLACE` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with the replaced value if it was found\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACE\"},{\"name\":\"REPLACEALL\",\"detail\":\"REPLACEALL( original:ANY pattern:ANY replacement:ANY ): result:STRING\",\"documentation\":\"Replaces all occurrence of a pattern by its substitution.\\n\\nThe `REPLACEALL` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with all occurrences of pattern replaced by its value\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACEALL\"},{\"name\":\"REPORT\",\"detail\":\"REPORT( secret:STRING ): report:STRING\",\"documentation\":\"The `REPORT` function pushes onto the stack a STRING containing configuration and usage informations which can be useful when investigating issues.\\n\\n@param `secret` Secret configured for using the `REPORT` function.\\n\\n@param `report` Actual report.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"REPORT\"},{\"name\":\"RESET\",\"detail\":\"RESET( depth:LONG ): \",\"documentation\":\"The `RESET` function resets the stack to the given depth, discarding any items above those 'depth' items.\\n\\n@param `depth` Depth at which the stack should be reset.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESET\"},{\"name\":\"RESETS\",\"detail\":\"RESETS( gts:GTS decreasingGTS:BOOLEAN ): result:GTS\\nRESETS( lgts:LIST<GTS> decreasingGTS:BOOLEAN ): lresult:LIST<GTS>\",\"documentation\":\"The `RESETS` functions transforms a numerical Geo Time Series™, shifting values so no offset (*i.e.* a decrease or increase of values) appears after the operation.\\n\\nThe parameter to `RESETS` determines if the Geo Time Series should be considered as decreasing instead of increasing.\\n\\n@param `decreasingGTS` Flag set to `true` to indicate the GTS is decreasing.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `lgts` List of Geo Time Series™ or list thereof to transform.\\n\\n@param `result` GTS with resets compensated.\\n\\n@param `lresult` List of GTS with resets compensated.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESETS\"},{\"name\":\"RESHAPE\",\"detail\":\"RESHAPE( input:LIST shape:LIST<LONG> ): output:LIST\",\"documentation\":\"The `RESHAPE` function modifies the shape of a list.\\n\\nThe new shape is specified using a list of dimensions, the first being the outer dimension. Such a shape can be produced by `SHAPE`.\\n\\nNote that the number of elements in the array must be compatible with the requested shape, i.e. the product of the dimensions must match the number of elements in the input list.\\n\\n@param `input` List to reshape.\\n\\n@param `shape` Shape specification, list of dimensions, the first element being the outer list.\\n\\n@param `output` Reshaped list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"RESHAPE\"},{\"name\":\"RESTORE\",\"detail\":\"RESTORE( context:CONTEXT ): \",\"documentation\":\"The `RESTORE` function resets the stack's symbol table to the state recorded in the context passed as parameter.\\n\\n@param `context` Stack context produced by [`SAVE`](doc/SAVE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESTORE\"},{\"name\":\"RETHROW\",\"detail\":\"RETHROW(): \",\"documentation\":\"Inside the *catch* or *finally* macro of a [`TRY`](/doc/TRY), rethrows the last thrown error. If no error was previously thrown, `RETHROW` does nothing.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"RETHROW\"},{\"name\":\"RETURN\",\"detail\":\"RETURN(): \",\"documentation\":\"Returns immediately from the currently executing macro. If called outside a macro, `RETURN` will stop the execution of the current script, behaving like [`STOP`](/doc/STOP).\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"RETURN\"},{\"name\":\"REV\",\"detail\":\"REV(): revision:STRING\",\"documentation\":\"The `REV` function pushes onto the stack the revision of the Warp 10 instance.`\\n\\n@param `revision` Revision of the Warp 10 platform.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"REV\"},{\"name\":\"REVBITS\",\"detail\":\"REVBITS( long:LONG ): gnol:LONG\",\"documentation\":\"Reverses the order of the bits of a LONG value.\\n\\n@param `long` LONG value from which to revert the bits.\\n\\n@param `gnol` LONG value whose bits are in reverse order compared to those of `long`.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVBITS\"},{\"name\":\"REVERSE\",\"detail\":\"REVERSE( originalList:LIST ): reversedObj:LIST\\nREVERSE( originalString:STRING ): reversedObj:STRING\\nREVERSE( originalString:BYTES ): reversedObj:BYTES\",\"documentation\":\"Reverses the order of the elements of the list or the string.\\n\\nThe `REVERSE` function inverts the order of the elements of the list or the string on the top of the stack.\\nBeware, `REVERSE` do not create a new object. Use [`CLONEREVERSE`](/doc/CLONEREVERSE) if you want to keep input.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n\\n@param `originalList` The list to reverse\\n\\n@param `originalString` The string to reverse\\n\\n@param `reversedObj` The original object with the elements in reverse order\\n\\n\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVERSE\"},{\"name\":\"REXEC\",\"detail\":\"REXEC( warpscript:STRING endpoint:STRING ): stack:ANY*\",\"documentation\":\"The `REXEC` function executes some WarpScript code on a remote Warp 10 instance. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.0.8\",\"OPB64name\":\"REXEC\"},{\"name\":\"REXECZ\",\"detail\":\"REXECZ( warpscript:STRING endpoint:STRING ): stack:ANY*\",\"documentation\":\"The `REXECZ` function executes some WarpScript code on a remote Warp 10 instance just like [`REXEC`](/doc/REXEC) does, but compresses the WarpScript code prior to sending it. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REXECZ\"},{\"name\":\"RINT\",\"detail\":\"RINT( value:NUMBER ): result:DOUBLE\\nRINT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `RINT` function consumes a numeric parameter from the top of the stack and pushes back the DOUBLE the closest to the parameter and equal to a mathematical integer.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `result` Closest floating-point value to a that is equal to a mathematical integer.\\n\\n@param `lvalue` List of Numeric values.\\n\\n@param `lresult` List of closest floating-point values to a that is equal to a mathematical integer.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RINT\"},{\"name\":\"RLOWESS\",\"detail\":\"RLOWESS( gts:GTS q:LONG r:LONG d:LONG p:LONG ): result:GTS\\nRLOWESS( gtsList:LIST<GTS> q:LONG r:LONG d:LONG p:LONG ): resultList:LIST<GTS>\",\"documentation\":\"The `RLOWESS` function applies an iterative smoothing program on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is done via locally weighted regression, and is robust to outliers.\\n\\n> ### REFERENCE\\n>\\n> **Cleveland, W. S.** (1979) Robust locally weighted regression and smoothing scatterplots. J. American Statistical Association 74, 829–836.\\n> **Cleveland, W. S.** (1981) LOWESS: A program for smoothing scatterplots by robust locally weighted regression. The American Statistician 35, 54.\\n\\n@param `p` The degree for the polynomial fit of the regression\\n\\n@param `d` The delta radius (in time units) whithin which the local regression is computed only once (other points are interpolated). For very large datasets, it can be wise to set `d` > 0 to speed up the computations.\\n\\n@param `r` The number of robustifying iterations. The higher the value of `r`, the better the program is robust to outliers.\\n\\n@param `q` The bandwidth of the local regression. To obtain a good smoothing, it is advised to choose an odd number of at least 5.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RLOWESS\"},{\"name\":\"ROLL\",\"detail\":\"ROLL( eltN:ANY elt2:ANY elt1:ANY N:LONG ): elt2:ANY elt1:ANY eltN:ANY\",\"documentation\":\"`ROLL` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element at level *N* to the top of the stack and moving the other elements up one level.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLL\"},{\"name\":\"ROLLD\",\"detail\":\"ROLLD( eltN:ANY elt2:ANY elt1:ANY N:LONG ): elt1:ANY eltN:ANY elt2:ANY\",\"documentation\":\"`ROLLD` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element on top of the stack to level *N* and moving the other *N-1* elements down the stack.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLLD\"},{\"name\":\"ROT\",\"detail\":\"ROT( level3:ANY level2:ANY top:ANY ): level2:ANY top:ANY level3:ANY\",\"documentation\":\"`ROT` cycles through the 3 topmost elements of the stack by moving the element at level 3 to the top of the stack and pushing the other 2 elements up the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n@param `level3` The element at the third level of the stack prior to the function execution\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROT\"},{\"name\":\"ROTATIONQ\",\"detail\":\"ROTATIONQ( x:DOUBLE y:DOUBLE z:DOUBLE angle:DOUBLE ): quaternion:QUATERNION\",\"documentation\":\"The `ROTATIONQ` function consumes on the stack 4 doubles representing a rotation vector and pushes back [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long.\\n\\n@param `quaternion` The quaternion representation\\n\\n@param `angle` The angle of the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROTATIONQ\"},{\"name\":\"ROUND\",\"detail\":\"ROUND( input:NUMBER ): output:LONG\",\"documentation\":\"The `ROUND` function consumes a numeric parameter from the top of the stack and pushes back the long number the closest to the parameter.\\n\\n@param `input` Input to round.\\n\\n@param `output` Input rounded to the nearest Long.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROUND\"},{\"name\":\"RSADECRYPT\",\"detail\":\"RSADECRYPT( cipher:BYTES key:KEY ): data:BYTES\",\"documentation\":\"Decrypts content encrypted with an RSA key.\\n\\n@param `key` RSA key to use for decryption (a public key if content was encrypted with a private key, a private key otherwise).\\n\\n@param `cipher` Encrypted data.\\n\\n@param `data` Cleartext data.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSADECRYPT\"},{\"name\":\"RSAENCRYPT\",\"detail\":\"RSAENCRYPT( data:BYTES key:KEY ): encrypted:BYTES\",\"documentation\":\"Encrypts a byte array using an RSA key (either public or private).\\n\\n@param `key` Instance of the RSA private or public key to use for encryption.\\n\\n@param `data` Data to encrypt.\\n\\n@param `encrypted` Ciphered version of `data`.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAENCRYPT\"},{\"name\":\"RSAGEN\",\"detail\":\"RSAGEN( publicExponent:LONG keylen:LONG ): privkeyparams:MAP pubkeyparams:MAP\",\"documentation\":\"Generates an RSA public key pair.\\n\\n@param `keylen` Key length in bits.\\n\\n@param `publicExponent` RSA public exponent, typically 65537.\\n\\n@param `pubkeyparams` Parameters of the generated RSA public key. Can be converted to a public key using [`RSAPUBLIC`](/doc/RSAPUBLIC).\\n\\n@param `privkeyparams` Parameters of the generated RSA privsate key. Can be converted to a private key using [`RSAPRIVATE`](/doc/RSAPRIVATE)\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAGEN\"},{\"name\":\"RSAPRIVATE\",\"detail\":\"RSAPRIVATE( privkeyparams:MAP ): privkey:KEY\",\"documentation\":\"Creates an RSA private key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `privkeyparams` Map of private key parameters.\\n\\n@param `privkey` RSA private key instance.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPRIVATE\"},{\"name\":\"RSAPUBLIC\",\"detail\":\"RSAPUBLIC( pubkeyparams:MAP ): pubkey:KEY\",\"documentation\":\"Creates an RSA public key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `pubkeyparams` Map of public key parameters.\\n\\n@param `pubkey` RSA public key instance.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPUBLIC\"},{\"name\":\"RSASIGN\",\"detail\":\"RSASIGN( data:BYTES alg:STRING privkey:KEY ): signature:BYTES\",\"documentation\":\"Signs a byte array with an RSA private key.\\n\\n@param `privkey` RSA private key to use for signing.\\n\\n@param `alg` Name of algorithm to use for computing the data fingerprint. Supported algorithms are those provided by [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `data` Data to sign.\\n\\n@param `signature` Computed signature.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSASIGN\"},{\"name\":\"RSAVERIFY\",\"detail\":\"RSAVERIFY( content:BYTES signature:BYTES alg:STRING pubkey:KEY ): verified:BOOLEAN\",\"documentation\":\"The `RSAVERIFY` function verify a signature generated with [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) cryptosystem and a hash algorithm.\\n\\nAlgorithms are those supported by [BouncyCastle](http://stackoverflow.com/questions/8778531/bouncycastle-does-not-find-algorithms-that-it-provides).\\n\\n@param `pubkey` RSA public key to use for verifying the signature.\\n\\n@param `alg` Algorithm used for generating the signature. See [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `signature` Signature to verify.\\n\\n@param `content` Signed content.\\n\\n@param `verified` Status of the signature verification.\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAVERIFY\"},{\"name\":\"RSORT\",\"detail\":\"RSORT( gts:GTS ): result:GTS\\nRSORT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"Sort Geo Time Series™ values (and associated locations/elevations) by reverse order of their ticks (i.e. most recent ticks first).\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RSORT\"},{\"name\":\"RTFM\",\"detail\":\"RTFM(): url:STRING\",\"documentation\":\"The `RTFM` function pushes onto the stack the URL of the Warp 10 documentation, so whenever you are lost you can rapidly retrieve the URL you need to get back on track!\\n\\n@param `url` URL of the Warp 10 documentation.\\n\\n\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.0.7\",\"OPB64name\":\"RTFM\"},{\"name\":\"RUN\",\"detail\":\"RUN( macroName:STRING ): \\nRUN( macroRegister:LONG ): \",\"documentation\":\"The `RUN` function attempts to execute the macro whose name is on top of the stack. It is equivalent to `@macro` if called with `macro` on top of the stack.\\n\\n@param `macroName` Name of macro to execute, without a leading '@'\\n\\n@param `macroRegister` Register number in which the macro is stored, without a leading '@'\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"RUN\"},{\"name\":\"RUNNERNONCE\",\"detail\":\"RUNNERNONCE( nonce:STRING ): time:LONG\",\"documentation\":\"The `RUNNERNONCE` function decrypts the content of a runner *nonce* as generated when a script is executed by a Warp 10 runner instance.\\n\\nWhen a script is executed by a runner instance, the following symbols are defined when the script is invoked:\\n\\n| Symbol | Description |\\n| --- | --- |\\n| `runner.periodicity` | Periodicity at which the script is supposed to run, in ms. |\\n| `runner.path` | Path of the script. |\\n| `runner.scheduledat` | Time at which the current execution was scheduled, in ms since the [UNIX Epoch](). |\\n| `runner.nonce` | Encrypted time of execution, in time units since the [UNIX Epoch](). |\\n\\nNote that if the runner pre-shared key is not configured via `runner.psk`, the `RUNNERNONCE` function will push `NULL` onto the stack. Note that in this case, the `runner.nonce` symbol will not be defined.\\n\\n@param `nonce` Runner *nonce* as stored in `runner.nonce`.\\n\\n@param `time` Time retrieved from the *nonce*.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.7\",\"OPB64name\":\"RUNNERNONCE\"},{\"name\":\"RUNR\",\"detail\":\"RUNR(): \",\"documentation\":\"Run the macro currently contained in the designated register.\\n\\nThe `RUNR` function is really a family of functions named `RUNRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"RUNR\"},{\"name\":\"RVALUESORT\",\"detail\":\"RVALUESORT( gts:GTS ): result:GTS\\nRVALUESORT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"Sort Geo Time Series™ values (and associated locations/elevations) by by reverse order of their values.\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RVALUESORT\"},{\"name\":\"SAVE\",\"detail\":\"SAVE(): context:CONTEXT\",\"documentation\":\"The `SAVE` function pushes onto the stack a *context* object which contains all the symbols currently defined in the current stack. This context can be passed as a parameter to the [`RESTORE`](doc/RESTORE) function to later reset the symbol table to the state store in the context. Any symbol created after the context was saved and before it is restored will be discarded when `RESTORE` is called.\\n\\n@param `context` Stack context, suitable as a parameter to [`RESTORE`](doc/RESTORE).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SAVE\"},{\"name\":\"SCALB\",\"detail\":\"SCALB( d:NUMBER scaleFactor:LONG ): result:TYPE\",\"documentation\":\"The `SCALB` function consumes a scale factor *scaleFactor* and a numeric parameter *d* and pushes back <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><mi>d</mi><mo>&#xD7;</mo><msup><mn>2</mn><mi>scaleFactor</mi></msup></math>. The scale factor must fit into an INT.\\n\\n@param `scaleFactor` The scaling factor, must fit into an INT\\n\\n@param `d` The value to be scaled\\n\\n@param `result` The scaled value\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SCALB\"},{\"name\":\"SECTION\",\"detail\":\"SECTION( section:STRING ): \",\"documentation\":\"The `SECTION` function modifies the value of the *section* attribute of the stack. This value appears in the error messages and can therefore help you debug your WarpScript code. Typically, the `SECTION` function is used to separate your code in different logical units.\\n\\n@param `section` Name to assign to the *section* attribute.\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"SECTION\"},{\"name\":\"SECURE\",\"detail\":\"SECURE( script:STRING ): encrypted:STRING\",\"documentation\":\"The `SECURE` function encrypts a STRING representing a WarpScript code fragment using the platform's secure script cryptographic key and the current secret set via [`SECUREKEY`](doc/SECUREKEY).\\n\\nSecure scripts can also be created using the `<S .... S>` syntax.\\n\\n@param `script` Cleartext version of the WarpScript fragment to encrypt.\\n\\n@param `encrypted` Encrypted secure script.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"SECURE\"},{\"name\":\"SECUREKEY\",\"detail\":\"SECUREKEY( key:STRING ): \",\"documentation\":\"The `SECUREKEY` function sets the secret which will be used to decrypt further secure scripts.\\n\\nSecure scripts are WarpScript fragments which are encrypted with a cryptographic key specific to the platform they were created on. They can be executed on a platform configured with the same cryptographic key.\\n\\n@param `key` Secret to use for unlocking the cleartext versions of future secure scripts.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SECUREKEY\"},{\"name\":\"SENSISION.DUMP\",\"detail\":\"SENSISION.DUMP( valueTimestamp:BOOLEAN ): dump:STRING\",\"documentation\":\"The `SENSISION.DUMP` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) metrics in the JVM.\\n\\nThe STRING produced by `SENSISION.DUMP` can be parsed using `PARSE`.\\n\\n@param `valueTimestamp` Flag indicating whether to dump the Geo Time Series™ with the timestamp of last updates or the timestamp at which the value is read.\\n\\n@param `dump` Latest values of all Geo Time Series™ known to Sensision in Geo Time Series™ output input.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMP\"},{\"name\":\"SENSISION.DUMPEVENTS\",\"detail\":\"SENSISION.DUMPEVENTS(): dump:STRING\",\"documentation\":\"The `SENSISION.DUMPEVENTS` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) events in the events history.\\n\\nThe STRING produced by `SENSISION.DUMPEVENTS` can be parsed using `PARSE`.\\n\\nNote that if the system property `sensision.events.history` is not set to a value greater than 0, the function will always return an empty STRING.\\n\\nThe Sensision event history is a circular buffer.\\n\\n@param `dump` Latest values of all events in the Sensision event history.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMPEVENTS\"},{\"name\":\"SENSISION.EVENT\",\"detail\":\"SENSISION.EVENT( [ value:LONG labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:STRING labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:BOOLEAN labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:LONG labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:DOUBLE labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:STRING labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:BOOLEAN labels:MAP class:STRING ts:LONG ] ): \",\"documentation\":\"The `SENSISION.EVENT` function creates a [Sensision](https://github.com/senx/sensision) event.\\n\\n@param `class` Name of the class of the Sensision event to emit.\\n\\n@param `labels` Map of label names to values, both STRINGs of the Sensision event.\\n\\n@param `value` Value associated with the event.\\n\\n@param `ts` Optional timestamp for the event (in Sensision time units), if omitted, the current timestamp will be used.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.EVENT\"},{\"name\":\"SENSISION.GET\",\"detail\":\"SENSISION.GET( selector:STRING ): gts:GTS\\nSENSISION.GET( class:STRING labels:MAP ): gts:GTS\",\"documentation\":\"The `SENSISION.GET` function reads the current value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to read.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to read.\\n\\n@param `selector` Geo Time Series™ selector (`class{labels}`) of the Sensision metric to read.\\n\\n@param `gts` A Geo Time Series™ containing the current value of the Sensision metric. If the metric does not exist, the resulting GTS will be empty.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.GET\"},{\"name\":\"SENSISION.SET\",\"detail\":\"SENSISION.SET( [ value:LONG labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:STRING labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:BOOLEAN labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:LONG labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:STRING labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:BOOLEAN labels:MAP class:STRING ] ): \",\"documentation\":\"The `SENSISION.SET` function sets a value for a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `value` Value to assign to the Sensision metric.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.SET\"},{\"name\":\"SENSISION.UPDATE\",\"detail\":\"SENSISION.UPDATE( [ delta:LONG labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ delta:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ ttl:LONG delta:LONG labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ ttl:LONG delta:DOUBLE labels:MAP class:STRING ] ): \",\"documentation\":\"The `SENSISION.UPDATE` function updates the numerical value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `delta` Delta to add to the current value of the Sensision metric. If the metric does not exist it will be created with this value.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.UPDATE\"},{\"name\":\"SET\",\"detail\":\"SET( inputlist:LIST item:ANY index:LONG ): outputlist:LIST\\nSET( inputlist:LIST item:ANY index:LIST ): outputlist:LIST\\nSET( array:BYTES bytevalue:LONG index:LONG ): outputarray:LIST\",\"documentation\":\"The `SET` function replaces item at specified index in a list.\\nIf the index is greater than the size of the list, it will raise an error.\\n\\nWhen used on a **BYTE ARRAY**, SET replaces the byte by the byte value. The byte value, signed or not, must be in the range of [-128,255].\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, SET can set an element in a nested list. In this case, the index is a list.\\n\\n@param `index` The index in the list, 0 for the first item.\\n\\n@param `inputlist` The input list to modified.\\n\\n@param `outputlist` The input list modified,  this is not a new list object.\\n\\n@param `item` The item to update in the inputlist at index, could be any type.\\n\\n@param `array` Byte array to which write a byte.\\n\\n@param `bytevalue` The value of the byte, signed or unsigned (from -128 to 255).\\n\\n@param `outputarray` The input byte array modified, this is not a new byte array.\\n\\n\",\"tags\":[\"lists\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SET\"},{\"name\":\"SET->\",\"detail\":\"SET->( input:SET ): output:LIST\",\"documentation\":\"The `SET->` function converts the set on top of the stack into a **LIST**.\\n\\n@param `input` Input set.\\n\\n@param `output` A list containing input elements.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"JoKJAIs\"},{\"name\":\"SETATTRIBUTES\",\"detail\":\"SETATTRIBUTES( gts:GTS attributes:MAP ): gts:GTS\\nSETATTRIBUTES( lgts:LIST<GTS> attributes:MAP ): lgts:LIST<GTS>\\nSETATTRIBUTES( encoder:GTSENCODER attributes:MAP ): encoder:GTSENCODER\\nSETATTRIBUTES( lencoder:LIST<GTS> attributes:MAP ): lencoder:LIST<GTS>\",\"documentation\":\"Modifies the attributes of a Geo Time Series™, an encoder or a list thereof. The `SETATTRIBUTES` function expects a parameter MAP whose entries are attributes to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `SETATTRIBUTES` function will use the rest of the MAP as the actual attributes to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing attributes.\\n\\nAn entry with an empty STRING value will have the effect of removing the attribute from the attributes of the GTSs or encoders.   \\n\\n@param `attributes` Parameter map of attributes names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lencoder` List of Encoders.\\n\\n@param `encoder` Encoder to relabel\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETATTRIBUTES\"},{\"name\":\"SETMACROCONFIG\",\"detail\":\"SETMACROCONFIG( value:STRING key:STRING secret:STRING ): \",\"documentation\":\"The `SETMACROCONFIG` function allows you to set or modify the value of a configuration key accessible via the [`MACROCONFIG`](/doc/MACROCONFIG) or [`MACROCONFIGDEFAULT`](/doc/MACROCONFIGDEFAULT) functions or via the runner script variable expansion.\\n\\nThis function can only be used if the `warpscript.macroconfig.secret` is set in the Warp 10™ configuration.\\n\\nThe configuration keys which can be set using `SETMACROCONFIG` must have the format `key@path/tomacro` or `key@/path/to/runner/script`.\\n\\nSetting the value of a configuration key to `NULL` has the effect of removing the configuration key altogether.\\n\\n@param `key` Configuration key to set.\\n\\n@param `secret` Macro config secret.\\n\\n@param `value` String value to set for the key or `NULL`.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"SETMACROCONFIG\"},{\"name\":\"SETVALUE\",\"detail\":\"SETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:STRING ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BOOLEAN ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:DOUBLE ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:LONG ): result:GTS\",\"documentation\":\"The `SETVALUE` function adds a value to a GTS or override an existing value. If the tick already exists, this function will overwrite the first one it encounters in the GTS. If the tick does not exist, it is appended. \\nThe [`ADDVALUE`](/doc/ADDVALUE) function adds a value to a GTS but do not override an existing value.\\n\\nThe `SETVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `SETVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, using [`GET`](/doc/GET) for instance.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Serie\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `elevation` Elevation or NaN\\n\\n@param `result` modified Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETVALUE\"},{\"name\":\"SHA1\",\"detail\":\"SHA1( input:BYTES ): result:BYTES\",\"documentation\":\"The `SHA1` function digests a byte array on the stack with the cryptographic hash function [SHA-1](https://en.wikipedia.org/wiki/SHA-1).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1\"},{\"name\":\"SHA1HMAC\",\"detail\":\"SHA1HMAC( message:BYTES secret:BYTES ): result:BYTES\",\"documentation\":\"The `SHA1HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-1](https://en.wikipedia.org/wiki/SHA-1) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1HMAC\"},{\"name\":\"SHA256\",\"detail\":\"SHA256( input:BYTES ): result:BYTES\",\"documentation\":\"The `SHA256` function digests a byte array on the stack with the cryptographic hash function [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256\"},{\"name\":\"SHA256HMAC\",\"detail\":\"SHA256HMAC( message:BYTES secret:BYTES ): result:BYTES\",\"documentation\":\"The `SHA256HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-256](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256HMAC\"},{\"name\":\"SHAPE\",\"detail\":\"SHAPE( list:LIST ): shape:LIST\\nSHAPE( { list:LIST fast:BOOLEAN  } ): shape:LIST\",\"documentation\":\"Return the shape of an input list if it could be a tensor (or multidimensional array), or raise an Exception.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent and it returns a shape based on the first nested lists at each level. Default to false.\\n\\n@param `list` The input list.\\n\\n@param `shape` The shape of the input list.\\n\\n\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHAPE\"},{\"name\":\"SHMLOAD\",\"detail\":\"SHMLOAD( symbol:STRING ): object:ANY\",\"documentation\":\"The `SHMLOAD` function loads data previously stored by [`SHMSTORE`](/doc/SHMSTORE) in shared memory, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the requested shared symbol is not known or if the calling script does not currently hold the mutex associated with the symbol.\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to retrieve.\\n\\n@param `object` Object currently stored under `symbol`.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMLOAD\"},{\"name\":\"SHMSTORE\",\"detail\":\"SHMSTORE( object:ANY symbol:STRING ): \",\"documentation\":\"The `SHMSTORE` function stores an object in a named shared memory location, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the calling script is not currently holding a mutex (in a call to [`MUTEX`](/doc/MUTEX)). The call will have no effect if the named memory location was already set by a previous call to `SHMSTORE`.\\n\\nIn order to overwrite a shared memory location, its content must first be cleared by storing [`NULL`](/doc/NULL).\\n\\n\\nIf the calling script currently holds a mutex, this mutex will be associated with the shared memory location, the same mutex will have to be held when retrieving the content of the memory location via [`SHMLOAD`](/doc/SHMLOAD).\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to store.\\n\\n@param `object` Object to store under `symbol` or `NULL` to clear its content.\\n\\n\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMSTORE\"},{\"name\":\"SHOW\",\"detail\":\"SHOW( levels:LONG ): \",\"documentation\":\"The `SHOW` function makes visible some levels of the stack which were previously hidden by a call to [`HIDE`](/doc/HIDE).\\n\\nThe levels made visible are the ones closest to the top of the stack. Depending on the `levels` parameter to the call to `SHOW`, the revealed levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there are at most a certain number ((*abs(`levels`)*) with `levels` < 0) of visible levels after the call.\\n\\nWhen called with `NULL` as parameter, `SHOW` wil reveal all levels currently hidden.\\n\\n@param `levels` Number of levels to reveal, or `NULL` to reveal them all.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"SHOW\"},{\"name\":\"SHRINK\",\"detail\":\"SHRINK( gts:GTS size:LONG ): result:GTS\",\"documentation\":\"Shrink the number of values of a Geo Time Series™ to `size`. The oldest values are kept if `size` is non negative. The earliest ones are kept in the other case.\\n\\nThis function has the side effect of sorting the Geo Time Series™. If the Geo Time Series™ has fewer than `size` values the function raises an error.\\n\\n@param `size` Size used to shrink the Geo Time Series™\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `result` A shrinked Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SHRINK\"},{\"name\":\"SHUFFLE\",\"detail\":\"SHUFFLE( input:LIST ): shuffled:LIST\",\"documentation\":\"The `SHUFFLE` function shuffles a list.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `input` The reference of the list to shuffle\\n\\n@param `shuffled` The original list shuffled, this is not a new list object\\n\\n\",\"tags\":[\"lists\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHUFFLE\"},{\"name\":\"SIGNUM\",\"detail\":\"SIGNUM( value:NUMBER ): result:DOUBLE\\nSIGNUM( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `SIGNUM` function consumes a numeric parameter from the top of the stack and pushes back its signum.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Signum, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of signum for each given value, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIGNUM\"},{\"name\":\"SIN\",\"detail\":\"SIN( value:NUMBER ): result:DOUBLE\\nSIN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `SIN` function consumes a floating point number from the top of the stack and pushes back its sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Sine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of sine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIN\"},{\"name\":\"SINGLEEXPONENTIALSMOOTHING\",\"detail\":\"SINGLEEXPONENTIALSMOOTHING( gts:GTS alpha:DOUBLE ): result:GTS\",\"documentation\":\"The `SINGLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Simple Exponential Smoothing](https://www.otexts.org/fpp/7/1) formula.\\n\\nIt consumes two parameters from the top of the stack:\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** is pushed onto the stack.\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The smoothed Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINGLEEXPONENTIALSMOOTHING\"},{\"name\":\"SINH\",\"detail\":\"SINH( value:NUMBER ): result:DOUBLE\\nSINH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `SINH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic sine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic sine of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINH\"},{\"name\":\"SIZE\",\"detail\":\"SIZE( input:LIST ): size:LONG\\nSIZE( input:MAP ): size:LONG\\nSIZE( input:GTS ): size:LONG\\nSIZE( input:STRING ): size:LONG\\nSIZE( input:BYTES ): size:LONG\\nSIZE( input:GEOSHAPE ): size:LONG\\nSIZE( input:GTSENCODER ): size:LONG\\nSIZE( input:SET ): size:LONG\",\"documentation\":\"Returns the size of the input parameter.\\n\\nThe `SIZE` function computes the size of a LIST, MAP, GTS or ENCODER (number of values), STRING, byte array of GEOSHAPE (number of cells).\\n\\n@param `input` The input parameter\\n\\n@param `size` The size of the input parameter\\n\\n\",\"tags\":[\"strings\",\"lists\",\"maps\",\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIZE\"},{\"name\":\"SKEWNESS\",\"detail\":\"SKEWNESS( gts:GTS bessel:BOOLEAN ): skewness:DOUBLE\\nSKEWNESS( lgts:LIST<GTS> bessel:BOOLEAN ): lskewness:LIST<DOUBLE>\",\"documentation\":\"The `SKEWNESS` function computes the [skewness](https://en.wikipedia.org/wiki/Skewness) of a Geo Time Series™.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the skewness.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `skewness` Computed skewness of the Geo Time Series™ instance.\\n\\n@param `lskewness` List of computed skewness of the Geo Time Series™ instances.\\n\\n\",\"tags\":[\"statistics\",\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"SKEWNESS\"},{\"name\":\"SMARTPARSE\",\"detail\":\"SMARTPARSE( string:STRING regexp:STRING ): results:LIST<GTS>\\nSMARTPARSE( gts:GTS regexp:STRING ): results:LIST<GTS>\\nSMARTPARSE( lgts:LIST<GTS> regexp:STRING ): lresults:LIST<LIST<GTS>>\",\"documentation\":\"The `SMARTPARSE` function parses STRING values, either from a single STRING parameter or from STRING Geo Time Series™, and produces a number of GTS from the parsed data.\\n\\nThe parsing is done according to a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) which contains [named capturing groups](https://www.regular-expressions.info/named.html) with the Java/.NET syntax, *i.e.* `(?<name>...)`.\\n\\nThe captured group is interpreted differently based on the syntax of the name.\\n\\n| Syntax | Interpretation |\\n| --- | --- |\\n| Lxxx | Captured content is used as the value of label `xxx` |\\n| TU | Captured group is interpreted as a timestamp in unit `U` from the [UNIX Epoch](https://en.wikipedia.org/wiki/Unix_time) origin. Valid values for U are `s`, `ms`, `us`, `ns` |\\n| lat | Captured group is interpreted as the latitude if another group named `lon` is also present |\\n| lon | Captured group is interpreted as the longitude if another group named `lat` is also present |\\n| elevU | Captured group is interpreted as the elevation in unit `U`, where `U` can be `m`, `cm`, `mm`, `ft`, `km`, `mi`, `nm` (Nautical Mile). The value is parsed as a DOUBLE and converted to a LONG in `mm` |\\n| VTxxx | Captured group is interpreted as a value for a GTS with class `xxx`. The type of the value is determined by the value of `T` which can be `B`(oolean) `S`(tring) `L`(ong) or `D`(ouble) |\\n\\nThis function is ideally suited for parsing log messages and producing Geo Time Series™ from their content.\\n\\n@param `regexp` Regular expression to use for parsing. See the function description for the syntax to use.\\n\\n@param `string` String to parse\\n\\n@param `results` List of Geo Time Series™ created from the parsed data.\\n\\n@param `lresults` List of list of GTS created from the parsed data.\\n\\n@param `gts` STRING valued Geo Time Series™ whose values are to be parsed.\\n\\n@param `lgts` List of STRING valued GTS whose values are to be parsed.\\n\\n\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.2.13\",\"OPB64name\":\"SMARTPARSE\"},{\"name\":\"SNAPSHOT\",\"detail\":\"SNAPSHOT( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOT` functions produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOT` was called.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.6\",\"OPB64name\":\"SNAPSHOT\"},{\"name\":\"SNAPSHOTALL\",\"detail\":\"SNAPSHOTALL( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTALL` functions acts similarly as [`SNAPSHOT`](/doc/SNAPSHOT) and produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOTALL` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALL\"},{\"name\":\"SNAPSHOTALLTOMARK\",\"detail\":\"SNAPSHOTALLTOMARK( mark:MARK stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTALLTOMARK` functions acts similarly as [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) and produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTALLTOMARK` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALLTOMARK\"},{\"name\":\"SNAPSHOTCOPY\",\"detail\":\"SNAPSHOTCOPY( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTCOPY` function behaves like [`SNAPSHOT`](/doc/SNAPSHOT) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPY` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPY\"},{\"name\":\"SNAPSHOTCOPYALL\",\"detail\":\"SNAPSHOTCOPYALL( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTCOPYALL` function behaves like [`SNAPSHOTALL`](/doc/SNAPSHOTALL) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALL\"},{\"name\":\"SNAPSHOTCOPYALLTOMARK\",\"detail\":\"SNAPSHOTCOPYALLTOMARK( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTCOPYALLTOMARK` function behaves like [`SNAPSHOTALLTOMARK`](/doc/SNAPSHOTALLTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALLTOMARK\"},{\"name\":\"SNAPSHOTCOPYN\",\"detail\":\"SNAPSHOTCOPYN( stack:ANY* n:LONG ): snapshot:STRING\",\"documentation\":\"Performs a [`SNAPSHOTCOPY`](/doc/SNAPSHOTCOPY) on the top *N* elements of the stack.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTCOPYN\"},{\"name\":\"SNAPSHOTCOPYTOMARK\",\"detail\":\"SNAPSHOTCOPYTOMARK( stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTCOPYTOMARK` function behaves like [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYTOMARK\"},{\"name\":\"SNAPSHOTN\",\"detail\":\"SNAPSHOTN( stack:ANY* n:LONG ): snapshot:STRING\",\"documentation\":\"Produces a WarpScript code fragment which will regenerate the *N* top levels of the stack. The content of those levels is consumed off the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTN\"},{\"name\":\"SNAPSHOTTOMARK\",\"detail\":\"SNAPSHOTTOMARK( mark:MARK stack:ANY* ): snapshot:STRING\",\"documentation\":\"The `SNAPSHOTTOMARK` functions produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTTOMARK` was called.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTTOMARK\"},{\"name\":\"SORT\",\"detail\":\"SORT( gts:GTS ): sgts:GTS\\nSORT( lgts:LIST<GTS> ): slist:LIST<GTS>\",\"documentation\":\"Sorts a Geo Time Series™ or each GTS of a list of GTS in ascending tick order.\\n\\n@param `gts` Single Geo Time Series™ instance to sort.\\n\\n@param `sgts` Sorted Geo Time Series™, this is the same instance as `gts`.\\n\\n@param `lgts` List of Geo Time Series™ instances to sort.\\n\\n@param `slist` List of sorted Geo Time Series™. Each instance is the same as the input one.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SORT\"},{\"name\":\"SORTBY\",\"detail\":\"SORTBY( list:LIST macro:MACRO ): lsorted:LIST\\nSORTBY( map:MAP macro:MACRO ): msorted:MAP\",\"documentation\":\"The `SORTBY` function sorts a **LIST** or a **MAP** according to a value returned by a macro. The macro must return a value of the same type (LONG, DOUBLE or STRING) for each element.\\n\\nOnly **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nBefore release `1.2.22`, the `SORTBY` function could only sort lists of Geo Time Series™.\\n\\nBefore release `2.7.0`, the `SORTBY` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for sorting, consumes a list element off the stack and produces a LONG, DOUBLE or STRING value.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"tags\":[\"lists\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"SORTBY\"},{\"name\":\"SORTWITH\",\"detail\":\"SORTWITH( list:LIST macro:MACRO ): lsorted:LIST\\nSORTWITH( map:MAP macro:MACRO ): msorted:MAP\",\"documentation\":\"The `SORTWITH` function sorts a **LIST** or a **MAP** according to a value returned by a comparison macro. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nIn used a on **LIST**, the comparison macro is given 2 elements of the **LIST** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest element in the stack is respectively strictly less than, equal to or strictly more than than the element on the stack.\\n\\nIn used a on **MAP**, the comparison macro is given 2 entries (key deepest, value shallowest) of the **MAP** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest entry in the stack is respectively strictly less than, equal to or strictly more than than the shallowest entry on the stack.\\n\\nBefore release `2.7.0`, the `SORTWITH` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for comparison, must consume two elements of the stack and produces a LONG.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"tags\":[\"lists\",\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"SORTWITH\"},{\"name\":\"SPLIT\",\"detail\":\"SPLIT( s:STRING delimiter:STRING ): result:LIST<STRING>\",\"documentation\":\"The SPLIT function split a string in segments given a delimiter.\\n\\n\\nIt consumes two parameters from the top of the stack: the delimiter and the string to test matching with. The delimiter must be a string of length 1, i.e. only one character.\\n\\n\\nThe function will return a list with all the segments. If delimiter is not found, the output list contains the input string.\\n\\n@param `delimiter` One character delimiter.\\n\\n@param `s` The string to split\\n\\n@param `result` List of strings.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"SPLIT\"},{\"name\":\"SQRT\",\"detail\":\"SQRT( value:NUMBER ): result:DOUBLE\\nSQRT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `SQRT` function consumes a numeric parameter from the top of the stack and pushes back its square root.\\n\\nFor negative numbers, SQRT returns NaN.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Square root of the given value, NaN if it is negative.\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of square root of each given value, NaN if it is negative.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SQRT\"},{\"name\":\"SRAND\",\"detail\":\"SRAND(): num:DOUBLE\",\"documentation\":\"The `SRAND` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThe seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"SRAND\"},{\"name\":\"SRANDPDF\",\"detail\":\"SRANDPDF( valueHistogram:MAP ): result:STRING\",\"documentation\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe randomization is seeded. The seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThe result is a function. This function does not have any arguments.\\n\\nTo use the function pushed by `SRANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"tags\":[\"math\",\"statistics\"],\"since\":\"2.2.1\",\"OPB64name\":\"SRANDPDF\"},{\"name\":\"STACKATTRIBUTE\",\"detail\":\"STACKATTRIBUTE( name:STRING ): value:ANY\",\"documentation\":\"Retrieves the value of a stack attribute.\\n\\n@param `name` Name of the stack attribute to retrieve.\\n\\n@param `value` Associated value or null if attribute is not set.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STACKATTRIBUTE\"},{\"name\":\"STACKPSSECRET\",\"detail\":\"STACKPSSECRET( newsecret:STRING secret:STRING ): \",\"documentation\":\"Modifies the secret needed for using functions such as `WSPS`, `WSSTOP` and `WSKILL`.\\n\\nThis function is only useable if a secret was configured using `stackps.secret`.\\n\\n@param `secret` Current secret for process status operations, initially the value configured via `stackps.secret`.\\n\\n@param `newsecret` New secret to set for process status operations.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"STACKPSSECRET\"},{\"name\":\"STACKTOLIST\",\"detail\":\"STACKTOLIST( stack:ANY* ): list:LIST\",\"documentation\":\"Converts the whole stack into a list and pushes this list on top of the stack. The elements are consumed off the stack in the way [`->LIST`](/doc/AItBHKCJ) does it.\\n\\n@param `stack` Content of the stack.\\n\\n@param `list` List containing the elements of the stack.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"STACKTOLIST\"},{\"name\":\"STANDARDIZE\",\"detail\":\"STANDARDIZE( gts:GTS ): result:GTS\\nSTANDARDIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"documentation\":\"Standardizes a single (or a list of) numeric Geo Time Series™ (i.e. it replaces X by (X-mu)/sd).\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STANDARDIZE\"},{\"name\":\"STDERR\",\"detail\":\"STDERR( msg:STRING ): \",\"documentation\":\"The `STDERR` function prints text to the standard error stream.\\n\\nThe `STDERR` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDERR\"},{\"name\":\"STDOUT\",\"detail\":\"STDOUT( obj:ANY ): \",\"documentation\":\"The `STDOUT` function prints text to the standard output stream.\\n\\nThe `STDOUT` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `obj` The object to print. Its `.toString()` method is used to generate the outputed String.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDOUT\"},{\"name\":\"STL\",\"detail\":\"STL( gts:GTS { p:LONG  } ): result:GTS\\nSTL( gtsList:LIST<GTS> { p:LONG  } ): resultList:LIST<GTS>\",\"documentation\":\"The `STL` function applies a Seasonal Trend decomposition on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is based on multiple calls of [`RLOWESS`](/doc/RLOWESS).\\n\\nThese Geo Time Series™ are the seasonal part and the trend part of the input Geo Time Series™. Their classnames are suffixed with \\\"_seasonal\\\" and \\\"_trend\\\".\\n\\nThis function can only be applied to [bucketized](/doc/BUCKETIZE) Geo Time Series™ of numeric type.\\n\\nThe **MAP** parameter must have at least the field `PERIOD`. You can provide additional optional parameters:\\n\\n## Optional parameters\\n### Global\\n- `ROBUST` if TRUE, set defaults of number of inner and outer loops to 1 and 15 instead of 2 and 0. Default is FALSE\\n- `PRECISION` number of inner loops (a LONG). Default is 2 or 1\\n- `ROBUSTNESS` number of outer loops (a LONG). Default is 0 or 15\\n\\n### Seasonal extract\\n- `BANDWIDTH_S` the bandwidth (a LONG) of the local regression. Default is 7\\n- `DEGREE_S` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_S` the number of values interpolated instead of estimated. Default is BANDWIDTH_S/10\\n\\n### Low frequency filtering\\n- `BANDWIDTH_L` the bandwidth (a LONG) of the local regression. Default is nextOdd(PERIOD)\\n- `DEGREE_L` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_L` the number of values interpolated instead of estimated. Default is BANDWIDTH_L/10\\n\\n### Trend extract\\n- `BANDWIDTH_T` the bandwidth (a LONG) of the local regression. Default is nextOdd(ceiling(1.5*PERIOD/(1-(1.5/BANDWIDTH_S))))\\n- `DEGREE_T` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_T` the number of values interpolated instead of estimated. Default is BANDWIDTH_T/10\\n\\n### Post seasonal smoothing\\n- `BANDWIDTH_P` the bandwidth (a LONG) of the local regression. Default is 0 (i.e. no post smoothing)\\n- `DEGREE_P` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_P` the number of values interpolated instead of estimated. Default is BANDWIDTH_P/10\\n\\n### Additional fields\\n- `BANDWIDT` value of all BANDWIDTH_X fields that are not set\\n- `DEGREE` value of all DEGREE_X fields that are not set\\n- `SPEED` value of all SPEED_X fields that are not set\\n\\n> ### REFERENCE\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"tags\":[\"gts\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"STL\"},{\"name\":\"STLESDTEST\",\"detail\":\"STLESDTEST( gts:GTS p:LONG k:LONG alpha:DOUBLE STLOption:MAP ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG STLOption:MAP ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG ): result:LIST<LONG>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG alpha:DOUBLE STLOption:MAP ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG alpha:DOUBLE ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG STLOption:MAP ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG ): resultList:LIST<LIST<LONG>>\",\"documentation\":\"The 'STLESDTEST' function detects outliers in a Geo Time Series™ (or a **LIST** of Geo Time Series™) which has a seasonal part.\\n\\nThe seasonal part and the trend part of the Geo Time Series™ are extracted using [`STL`](/doc/STL) decomposition, then an [`ESDTEST`](/doc/ESDTEST) is performed on the remainder.\\n\\nThis function only applies to [bucketized](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ### References\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n> **Rosner, Bernard (May 1983)**, \\\"Percentage Points for a Generalized ESD Many-Outlier Procedure\\\",Technometrics, 25(2), pp. 165-172.\\n\\n@param `STLOption` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `resultList` A **LIST** of ticks corresponding to the outliers\\n\\n@param `result` A **LIST** of LIST of ticks corresponding to the outliers\\n\\n\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STLESDTEST\"},{\"name\":\"STOP\",\"detail\":\"\",\"documentation\":\"The `STOP` function stops the current execution by throwing a `WarpScriptStopException`. This means that the current script execution will be aborted unless the call to `STOP` was in a macro invoked via [`TRY`](/doc/TRY).\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"STOP\"},{\"name\":\"STORE\",\"detail\":\"STORE( value:ANY symbol:STRING ): \\nSTORE( value:ANY register:LONG ): \\nSTORE( values:ANY* symbols:LIST<STRING> ): \",\"documentation\":\"The `STORE` function stores a value in a symbol.\\n\\nSince 2.7, when the list of symbols contains duplicates only the last occurence in the list is assigned to its corresponding value.\\n\\n@param `symbol` Name of the symbol to modify.\\n\\n@param `register` Index of the register to modify.\\n\\n@param `symbols` List of symbols or registers to modify. The last element of the list will contain the top of the stack.\\n\\n@param `value` Value to store under `symbol`.\\n\\n@param `values` Multiple values to store in `symbols`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STORE\"},{\"name\":\"STRICTMAPPER\",\"detail\":\"STRICTMAPPER( mapper:AGGREGATOR min:NUMBER max:NUMBER ): wrapped:AGGREGATOR\",\"documentation\":\"Wraps a *mapper* in such a way that the mapper will only be called if the number of ticks in the window is in the specified range.\\n\\nSince 2.1 STRICTMAPPER can also take a timespan definition by inputing negative numbers. Number of ticks and timespan can also be mixed to specify, for instance, more than 2 points but less than 5 seconds.\\n\\n@param `max` If positive, maximum number of ticks in the window. If negative, maximum timespan of the window.\\n\\n@param `min` If positive, minimum number of ticks in the window. If negative, minimum timespan of the window.\\n\\n@param `mapper` Mapper to wrap.\\n\\n@param `wrapped` Wrapped mapper.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTMAPPER\"},{\"name\":\"STRICTPARTITION\",\"detail\":\"STRICTPARTITION( lgts:LIST<GTS> labels:LIST<STRING> ): result:MAP\",\"documentation\":\"The `STRICTPARTITION` splits a Geo Time Series™ list in equivalence classes based on label values just like [`PARTITION`](/doc/PARTITION) but only retains in each equivalence class key the labels on which the partitioning was done.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels`.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTPARTITION\"},{\"name\":\"STRICTREDUCER\",\"detail\":\"STRICTREDUCER( reducer:AGGREGATOR ): wrapped:AGGREGATOR\",\"documentation\":\"Wraps a *reducer* so it is only applied if there are values for all the Geo Time Series™ being reduced.\\n\\n@param `reducer` Reducer to wrap.\\n\\n@param `wrapped` Wrapped version of the reducer.\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.6\",\"OPB64name\":\"STRICTREDUCER\"},{\"name\":\"STRINGFORMAT\",\"detail\":\"STRINGFORMAT( format:STRING args:LIST ): formattedString:STRING\\nSTRINGFORMAT( format:STRING args:LIST locale:STRING ): formattedString:STRING\",\"documentation\":\"The STRINGFORMAT function format a String in the same ways as Java [String.format](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.util.Locale-java.lang.String-java.lang.Object...-) does.\\n\\nThis fonction consumes an optional locale in [ISO 639](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry), a list of Objects to be used in the format string and a [format string](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax).\\n\\nIf no locale is specified, it defaults to the default JVM locale.\\n\\n@param `format` A format string.\\n\\n@param `args` Arguments referenced by the format specifiers in the format string.\\n\\n@param `locale` The locale to apply during formatting.\\n\\n@param `formattedString` A formatted string.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"2.2.0\",\"OPB64name\":\"STRINGFORMAT\"},{\"name\":\"STU\",\"detail\":\"STU(): numberTimeUnits:LONG\",\"documentation\":\"The `STU` function pushes onto the stack the number of platform time units in one second. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one second.\\n\\n\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"STU\"},{\"name\":\"SUBLIST\",\"detail\":\"SUBLIST( base:LIST<ANY> arguments:LIST<LONG> ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER end:NUMBER ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER end:NUMBER step:NUMBER ): result:LIST<ANY>\",\"documentation\":\"It creates a new list with the elements of the base list whose indices are in the argument list.\\n\\nIf the argument list contains two indices [a,b] then `SUBLIST` returns the list of elements from index a to index b (included). If the argument list contains more than two indices, the result of `SUBLIST` contains all the elements at the specified indices, with possible duplicates.\\n\\nNegative indexing is allowed, with negative index effectively refering to index + size.\\n\\nSince 2.1 a new signature allowing the step to be defined has been introduced. Instead of specifying a list has range, you can put the start, end (optional) and step (optional) as **LONG** values.\\n\\n@param `arguments` List of indices. Negative indices are considered to be calculated from the end of the list.\\n\\n@param `base` Base list\\n\\n@param `result` Filtred list\\n\\n@param `start` The first index to consider, will be included.\\n\\n@param `end` The last index to consider, will be included. If not specified, defaults to -1.\\n\\n@param `step` The delta between two consecutive indexes to consider. If end is after start in the list, step must be strictly positive. If start is after end in the list, step must be strictly negative. If not specified, defaults to 1 or -1 depending on start and end.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBLIST\"},{\"name\":\"SUBMAP\",\"detail\":\"SUBMAP( base:MAP arguments:LIST<STRING> ): result:MAP\",\"documentation\":\"It creates a new map with the key-value pairs from the base map whose keys are in the argument list.\\n\\n@param `arguments` List of indices.\\n\\n@param `base` Base map\\n\\n@param `result` Filtred map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBMAP\"},{\"name\":\"SUBSTRING\",\"detail\":\"SUBSTRING( str:STRING start:LONG len:LONG ): substr:STRING\\nSUBSTRING( str:STRING start:LONG ): substr:STRING\\nSUBSTRING( array:BYTES start:LONG len:LONG ): subarray:BYTES\\nSUBSTRING( array:BYTES start:LONG ): subarray:BYTES\",\"documentation\":\"Extract a substring from a **STRING** input, or a subarray from a **BYTE ARRAY** input.  \\nIf the length is ommitted, it extracts until the end of the string or byte array. If length is greater than max length, extract stops at the input end.\\n\\nIf the start is greater than the input size, `SUBSTRING` raises an error.\\n\\nSince 2.1, the start index can be negative. In this case the effective index is index + size of the **STRING**.\\n\\n@param `len` Length of substring to extract.\\n\\n@param `start` First character to include in the substring (0 based).\\n\\n@param `str` String from which to extract a substring.\\n\\n@param `substr` Extracted substring.\\n\\n@param `array` Byte array from which to extract a sub array.\\n\\n@param `subarray` Extracted sub array.\\n\\n\",\"tags\":[\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBSTRING\"},{\"name\":\"SUBTRACTEXACT\",\"detail\":\"SUBTRACTEXACT( x:NUMBER y:NUMBER ): diff:LONG\\nSUBTRACTEXACT( list:LIST<NUMBER> ): sdiff:LONG\\nSUBTRACTEXACT( lx:LIST<NUMBER> y:NUMBER ): ldiff:LIST<LONG>\",\"documentation\":\"The `SUBTRACTEXACT` function consumes two LONGs from the top of the stack and puts back the difference between them. If the difference overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `diff` The difference of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sdiff` The first element of the list minus all the others\\n\\n@param `lx` List of numeric values\\n\\n@param `ldiff` List of **LONG** where each value is the difference of y and an element in lx\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SUBTRACTEXACT\"},{\"name\":\"SWAP\",\"detail\":\"SWAP( level2:ANY top:ANY ): top:ANY level2:ANY\",\"documentation\":\"Exchanges the positions of the top two elements of the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWAP\"},{\"name\":\"SWITCH\",\"detail\":\"SWITCH( cond1:MACRO exec1:MACRO condn:MACRO execn:MACRO default:MACRO n:LONG ): \",\"documentation\":\"Performs a [switch statement](https://en.wikipedia.org/wiki/Switch_statement) allowing to select a macro execution based on a series of condition macros or to fallback on to the execution of a default macro.\\n\\n@param `n` Number of cases to consider. The `SWITCH` function will expect `n` pairs of condition/execution macros plus a default macro on the stack.\\n\\n@param `default` Macro which will be executed if all condition macros returned false.\\n\\n@param `cond1` First condition macro. All condition macros are expected to push a boolean on the stack.\\n\\n@param `condn` `n`th condition macro.\\n\\n@param `exec1` First execution macro, this macro will be executed if `cond1` left `true` on the stack.\\n\\n@param `execn` `n`th execution macro.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWITCH\"},{\"name\":\"SYMBOLS\",\"detail\":\"SYMBOLS(): symbols:LIST\",\"documentation\":\"The `SYMBOLS` function outputs the list of all defined symbols.\\n\\n@param `symbols` The list of the names of all defined symbols.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.2.1\",\"OPB64name\":\"SYMBOLS\"},{\"name\":\"SYNC\",\"detail\":\"SYNC( macro:MACRO ): \",\"documentation\":\"Executes a macro in a synchronized way while in a parallel execution triggered by a call to [`CEVAL`](/doc/CEVAL). If `SYNC` is called outside of a parallel execution, it simply executes the macro.\\n\\nWhen called within a `CEVAL` execution, the use of `SYNC` guarantees that only one of the concurrently executing threads will execute the specified macro at any given time.\\n\\n@param `macro` Macro to execute in a synchronized way.\\n\\n\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"SYNC\"},{\"name\":\"T\",\"detail\":\"T(): b:BOOLEAN\",\"documentation\":\"`T` stand for `true`. It is a boolean constant.\\n\\n\\n@param `b` true\\n\\n\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"T\"},{\"name\":\"TAN\",\"detail\":\"TAN( value:NUMBER ): result:DOUBLE\\nTAN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `TAN` function consumes a floating point number from the top of the stack and pushes back its tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Tangent of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of tangent of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TAN\"},{\"name\":\"TANH\",\"detail\":\"TANH( value:NUMBER ): result:DOUBLE\\nTANH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"The `TANH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic tangent of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic tangent of the given values.\\n\\n\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TANH\"},{\"name\":\"TDESCRIBE\",\"detail\":\"TDESCRIBE( object:ANY ): description:STRING\",\"documentation\":\"The `TDESCRIBE` function is a recursive [`TYPEOF`](/doc/TYPEOF).\\n\\nWhen `TDESCRIBE` finds a LIST, it takes the first element of the list to look for his type. When `TDESCRIBE` finds a MAP, it takes a random key in the map to look for the type of the key and the type of the value.\\n\\n**By design, TDESCRIBE cannot describe heterogeneous lists or maps.**\\n\\nTDESCRIBE output is subject to change in the future. Do not try to parse it. This function is here to help you during Warpscript development.\\n\\n\\nThe `TDESCRIBE` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `object` Any kind of reference\\n\\n@param `description` The description of the object\\n\\n\",\"tags\":[\"extensions\",\"debug\"],\"since\":\"1.2.19\",\"OPB64name\":\"TDESCRIBE\"},{\"name\":\"TEMPLATE\",\"detail\":\"TEMPLATE( template:STRING dictionnary:MAP ): output:STRING\\nTEMPLATE( template:STRING listofmaps:LIST<MAP> ): output:STRING\",\"documentation\":\"`TEMPLATE` fills a template with values contained in a map. See example for syntax help.\\n\\nThe `TEMPLATE` function expects the map of values on top of the stack and will operate on the string template below it.\\n\\nValues speficied with `{{key}}` will be url-escaped. If you do not want that behavior, use `{{{key}}}`.\\n\\n@param `dictionnary` Each key will be replaced in a {{key}} template. Value could be string long, double, boolean, or a list of maps. If Value is a list of maps, each subkey/value will be replaced in a {{#key}}{{subkey}}{{/key}} template. \\n\\n@param `listofmaps` Contains a list of subkey/value map. Will be replaced in a {{#key}}{{subkey}}{{/key}} template.\\n\\n@param `template` Input template.\\n\\n@param `output` Result of substitution.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TEMPLATE\"},{\"name\":\"THRESHOLDTEST\",\"detail\":\"THRESHOLDTEST( gts:GTS threshold:DOUBLE ): ticks:LIST<LONG>\\nTHRESHOLDTEST( lgts:LIST<GTS> threshold:DOUBLE ): lticks:LIST<LIST<LONG>>\",\"documentation\":\"Analyzes Geo Time Series™, identifying ticks where values are outliers above the given threshold.\\n\\n@param `threshold` Threshold above which values are considered outliers.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `ticks` List of ticks where outliers were found.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lticks` List of lists of ticks where outliers were found.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"THRESHOLDTEST\"},{\"name\":\"TICKINDEX\",\"detail\":\"TICKINDEX( gts:GTS ): indexed:GTS\\nTICKINDEX( lgts:LIST<GTS> ): lindexed:LIST<GTS>\\nTICKINDEX( encoder:GTSENCODER ): indexedenc:GTSENCODER\\nTICKINDEX( lencoder:LIST<GTSENCODER> ): lindexedenc:LIST<GTSENCODER>\",\"documentation\":\"Creates a clone of a Geo Time Series™, replacing each tick with the index (0 based) at which it appears at the moment of the call.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `encoder` Geo Time Series™ Encoder instance to transform.\\n\\n@param `indexed` Transformed GTS.\\n\\n@param `indexedenc` Transformed GTS Encoder.\\n\\n@param `lgts` List of Geo Time Series™ instances to transform.\\n\\n@param `lencoder` List of Geo Time Series™ Encoder instances to transform.\\n\\n@param `lindexed` List of indexed Geo Time Series™.\\n\\n@param `lindexedenc` List of indexed Geo Time Series™ Encoder.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKINDEX\"},{\"name\":\"TICKLIST\",\"detail\":\"TICKLIST( gts:GTS ): ticks:LIST<LONG>\\nTICKLIST( lgts:LIST<GTS> ): lticks:LIST<LIST<LONG>>\\nTICKLIST( encoder:GTSENCODER ): ticks:LIST<LONG>\\nTICKLIST( lencoder:LIST<GTSENCODER> ): lticks:LIST<LIST<LONG>>\",\"documentation\":\"Pushes onto the stack the list of ticks of a Geo Time Series™ or encoder. The ticks appear in the order in which they are found.\\n\\nIf a list of Geo Time Series™ is given, the result is a list of list of ticks as if the TICKLIST function was applied to each Geo Time Series™ separately.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n@param `encoder` Instance of encoder from which to extract the ticks.\\n\\n@param `lencoder` List of encoders.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `lticks` List of lists of ticks.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKLIST\"},{\"name\":\"TICKS\",\"detail\":\"TICKS( gts:GTS ): ticks:LIST<LONG>\\nTICKS( lgts:LIST<GTS> ): ticks:LIST<LONG>\",\"documentation\":\"Pushes onto the stack the sorted list of **distinct** ticks of a Geo Time Series™. If a list of Geo Time Series™ is given, all the **distinct** ticks are returned in a single sorted list as if all Geo Time Series™ were merged.\\n\\nThis function is not to be confused with [`TICKLIST`](/doc/TICKLIST) as this function returns **distinct** ticks and acts as it merges Geo Time Series™.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKS\"},{\"name\":\"TIMEBOX\",\"detail\":\"TIMEBOX( macro:MACRO maxtime:LONG ): \",\"documentation\":\"The `TIMEBOX` executes a macro with a maximum execution time. If the maximum time is reached, an exception will be thrown which can be caught using [`TRY`](/doc/TRY).\\n\\n@param `maxtime` Maximum execution time, in platform time units.\\n\\n@param `macro` Macro to execute.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TIMEBOX\"},{\"name\":\"TIMECLIP\",\"detail\":\"TIMECLIP( gts:GTS end:LONG duration:LONG ): clipped:GTS\\nTIMECLIP( lgts:LIST<GTS> end:LONG duration:LONG ): lclipped:LIST<GTS>\\nTIMECLIP( gts:GTS stop:STRING start:STRING ): clipped:GTS\\nTIMECLIP( lgts:LIST<GTS> stop:STRING start:STRING ): lclipped:LIST<GTS>\\nTIMECLIP( encoder:GTSENCODER end:LONG duration:LONG ): clippedEncoder:GTSENCODER\\nTIMECLIP( lencoder:LIST<GTSENCODER> end:LONG duration:LONG ): lclippedEncoders:LIST<GTSENCODER>\\nTIMECLIP( encoder:GTSENCODER stop:STRING start:STRING ): clippedEncoder:GTSENCODER\\nTIMECLIP( lencoder:LIST<GTSENCODER> stop:STRING start:STRING ): lclippedEncoders:LIST<GTSENCODER>\",\"documentation\":\"Clips Geo Time Series™ instances by restricting their ticks to those within a time interval.      \\n\\n@param `duration` Width of the time interval to retain, in time units.\\n\\n@param `end` Most recent timestamp to retain.\\n\\n@param `start` Start timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `stop` End timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `clipped` Clipped Geo Time Series™.\\n\\n@param `lclipped` List of clipped GTS.\\n\\n@param `encoder` Single GTS Encoder instance.\\n\\n@param `lencoder` List of GTS Encoder instances.\\n\\n@param `clippedEncoder` Clipped GST encoder.\\n\\n@param `lclippedEncoders` List of clipped GTS encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMECLIP\"},{\"name\":\"TIMED\",\"detail\":\"TIMED( macro:MACRO name:STRING ): timedMacro:MACRO\",\"documentation\":\"The `TIMED` function converts a macro to a timed macro, recording its execution time and its number of calls.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\n@param `name` A name identifying the macro.\\n\\n@param `macro` The macro you want to monitor.\\n\\n@param `timedMacro` A macro which, when called, will update the statitics associated with the given name.\\n\\n\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"TIMED\"},{\"name\":\"TIMEMODULO\",\"detail\":\"TIMEMODULO( gts:GTS modulus:LONG label:STRING ): splits:LIST<GTS>\\nTIMEMODULO( lgts:LIST<GTS> modulus:LONG label:STRING ): lsplits:LIST<LIST<GTS>>\",\"documentation\":\"Splits Geo Time Series™ into sub-GTS whose timestamps are the original timestamp modulo a given modulus value. Each sub-GTS will bear a label with the quotient of the original timestamps divided by the modulus. The output list order is not guaranteed, use [`SORTBY`](/doc/SORTBY) if you want to order the output by label.\\n\\nThis function can be used to generate for example one Geo Time Series™ per day with ticks from 0 to 86400 s (excluded).\\n\\n@param `label` Name of the label which will have the quotient value.\\n\\n@param `modulus` Value by which to divide the original timestamps.\\n\\n@param `gts` Geo Time Series™ to split.\\n\\n@param `splits` Resulting splits.\\n\\n@param `lgts` List of GTS to split.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMEMODULO\"},{\"name\":\"TIMEOFF\",\"detail\":\"TIMEOFF(): \",\"documentation\":\"Turns off the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEOFF\"},{\"name\":\"TIMEON\",\"detail\":\"TIMEON(): \",\"documentation\":\"Turns on the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEON\"},{\"name\":\"TIMESCALE\",\"detail\":\"TIMESCALE( gts:GTS scale:DOUBLE ): scaled:GTS\\nTIMESCALE( gts:GTS scale:LONG ): scaled:GTS\\nTIMESCALE( lgts:LIST<GTS> scale:DOUBLE ): lscaled:LIST<GTS>\\nTIMESCALE( lgts:LIST<GTS> scale:LONG ): lscaled:LIST<GTS>\",\"documentation\":\"Modifies the ticks of Geo Time Series™ instances by multiplying each tick by a provided scale.      \\n\\nThe resulting tick will be converted to a LONG after multiplication by the scale.\\n\\nIf the Geo Time Series™ instance is bucketized, the `lastbucket` and `bucketspan` parameters will also be scaled. If the scale would incur a `bucketspan` of 0, the call will end with an error.\\n\\n@param `scale` Scale by which to multiply each tick.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `scaled` Geo Time Series™ result.\\n\\n@param `lscaled` List of Geo Time Series™ result.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESCALE\"},{\"name\":\"TIMESHIFT\",\"detail\":\"TIMESHIFT( gts:GTS offset:LONG ): shifted:GTS\\nTIMESHIFT( lgts:LIST<GTS> offset:LONG ): lshifted:LIST<GTS>\",\"documentation\":\"Shifts the ticks of Geo Time Series™ instances by a given amount.\\n\\n@param `offset` Offset to apply to the ticks, in time units.\\n\\n@param `gts` Single Geo Time Series™ instance to shift.\\n\\n@param `lgts` List of GTS to shift.\\n\\n@param `shifted` Shifted Geo Time Series™.\\n\\n@param `lshifted` List of shifted Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESHIFT\"},{\"name\":\"TIMESPLIT\",\"detail\":\"TIMESPLIT( gts:GTS quietperiod:LONG minvalues:LONG label:STRING ): splits:LIST<GTS>\\nTIMESPLIT( lgts:LIST<GTS> quietperiod:LONG minvalues:LONG label:STRING ): lsplits:LIST<LIST<GTS>>\",\"documentation\":\"The `TIMESPLIT` functions splits Geo Time Series™ instances based on *quiet periods*, *i.e.* periods during which the GTS has no values.\\n\\nWhenever a quiet period longer than a minimum duration is encountered, the Geo Time Series™ is split.\\n\\nIf input gts has no values or if 'label' is already part of the labels of 'gts', then the resulting list of GTS will only contain a clone of 'gts'. **Make sure to test your GTS split size if needed.**\\n\\n@param `label` Name of label in which to store the sequence number.\\n\\n@param `minvalues` Minimum number of values a split should contain. Splits with less than that many values will be discarded.\\n\\n@param `quietperiod` Minimum duration of the silent period (*i.e.* with no values) between splits.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESPLIT\"},{\"name\":\"TIMINGS\",\"detail\":\"\",\"documentation\":\"Turns on the collection of timing information for each line of the script. The collected timings can be put onto the stack by using [`ELAPSED`](/doc/ELAPSED).\\n\\n\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMINGS\"},{\"name\":\"TLTTB\",\"detail\":\"TLTTB( gts:GTS samples:LONG ): downsampled:GTS\\nTLTTB( lgts:LIST<GTS> samples:LONG ): ldownsampled:LIST<GTS>\",\"documentation\":\"The `TLTTB` function performs downsampling of Geo Time Series™ by applying the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data. It differs from the [`LTTB`](doc/LTTB) function by the fact that it considers time based buckets instead of buckets based on a number of values.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"TLTTB\"},{\"name\":\"TOBIN\",\"detail\":\"TOBIN( param:LONG ): result:STRING\",\"documentation\":\"Converts the long on top of the stack to its 64 bits binary representation.\\n\\n@param `param` value to convert\\n\\n@param `result` String converted binary representation of param\\n\\n\",\"tags\":[\"conversion\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBIN\"},{\"name\":\"TOBITS\",\"detail\":\"TOBITS( number:NUMBER ): bits:LONG\\nTOBITS( gts:GTS ): longgts:GTS\",\"documentation\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n**Deprecation notice** the `TOBITS` function will be removed, please use `->DOUBLEBITS` or `->FLOATBITS`.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBITS\"},{\"name\":\"TOBOOLEAN\",\"detail\":\"TOBOOLEAN( value:BOOLEAN ): result:BOOLEAN\\nTOBOOLEAN( value:NUMBER ): result:BOOLEAN\\nTOBOOLEAN( value:STRING ): result:BOOLEAN\",\"documentation\":\"Converts a value of primitive type into a boolean value.\\n\\nThe `TOBOOLEAN` function consumes a parameter from the top of the stack and pushes back its conversion to boolean.\\nNumbers will be false if they are equal to 0 and true otherwise.\\nStrings will be false if they are equals to '' and true otherwise.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The boolean conversion of the value\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.5\",\"OPB64name\":\"TOBOOLEAN\"},{\"name\":\"TODEGREES\",\"detail\":\"TODEGREES( angle:NUMBER ): result:DOUBLE\\nTODEGREES( langle:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"Converts an angle measured in radians to its equivalent in degrees.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from radians to degrees.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in radian to convert in degree\\n\\n@param `result` Result of the conversion from radians to degrees\\n\\n@param `langle` List of angles in radian to convert in degree\\n\\n@param `lresult` List of results of the conversion from radians to degrees\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODEGREES\"},{\"name\":\"TODOUBLE\",\"detail\":\"TODOUBLE( value:BOOLEAN ): result:DOUBLE\\nTODOUBLE( value:NUMBER ): result:DOUBLE\\nTODOUBLE( value:STRING ): result:DOUBLE\",\"documentation\":\"Converts a value of primitive type into a double value.\\n\\nThe `TODOUBLE` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to double.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The double conversion of the value\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODOUBLE\"},{\"name\":\"TOHEX\",\"detail\":\"TOHEX( input:LONG ): output:STRING\",\"documentation\":\"Converts a long to its 64 bits hexadecimal representation.\\n\\n@param `input` Signed long integer.\\n\\n@param `output` Hexadecimal string representation of input.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOHEX\"},{\"name\":\"TOINTEXACT\",\"detail\":\"TOINTEXACT( value:NUMBER ): result:LONG\\nTOINTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<LONG>\",\"documentation\":\"The `TOINTEXACT` function consumes one LONG from the top of the stack and puts back the value. If the result overflows an INT, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be checked not to overflow an INT\\n\\n@param `result` The given value, converted to Long\\n\\n@param `lvalue` List of values to be checked not to overflow an INT\\n\\n@param `lresult` List of given values, converted to Long\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"TOINTEXACT\"},{\"name\":\"TOKENDUMP\",\"detail\":\"TOKENDUMP( token:STRING ): map:MAP\\nTOKENDUMP( token:STRING secret:STRING ): map:MAP\",\"documentation\":\"Deciphers a token and outputs a map describing the various elements of the token.\\n\\nThe map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Original token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| params | MAP | Map of token parameters, can be used as input to [`TOKENGEN`](/doc/TOKENGEN) |\\n\\nThe `params` map contains the following entries for both `READ` and `WRITE` tokens:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| type  | STRING | `READ` or `WRITE` depending on the type of token |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in ms since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in ms since the Unix Epoch |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nAdditionally, for `READ` tokens, the map contains those entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, those will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nNote that the `TOKENDUMP` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration key was not set.\\n\\n\\n@param `token` Token to decode.\\n\\n@param `map` Map with the extracted parameters, the original token and its *ident*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENDUMP` from Worf.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENDUMP\"},{\"name\":\"TOKENGEN\",\"detail\":\"TOKENGEN( params:MAP ): result:MAP\\nTOKENGEN( params:MAP secret:STRING ): result:MAP\",\"documentation\":\"Generates a token given a map of parameters. The `TOKENGEN` function outputs a map.\\n\\nThe input parameter map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| id | STRING | Optional identifier that will be put verbatim in the result map |\\n| type  | STRING | `READ` or `WRITE` depending on the type of token to generate |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| ttl | LONG | If `expiry` is not specified, a time to live can be set with this key. The TTL is expressed in **milliseconds**, the computed expiry timestamp will be the issuance timestamp plus the ttl |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nWhen generating a `READ` token, the following parameters are needed to ensure data isolation:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, they will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nIf one of these parameter key is not set or set to an empty list, then the generated `READ` token will be granted access to all the scope associated with the parameter key. For example, if `owners` is not set, data from all owners will be accessible to this token.\\n\\nThe `TOKENGEN` function outputs a map with the following keys:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Generated token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| id | STRING | Optional identifier if the `id` key was specified in the parameter map |\\n\\nNote that the `TOKENGEN` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration was not set.\\n\\n@param `params` Map of parameters used to generate the token.\\n\\n@param `result` Map containing the token, its *ident* and an optional *id*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENGEN` from Worf.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENGEN\"},{\"name\":\"TOKENINFO\",\"detail\":\"TOKENINFO( token:STRING ): infos:MAP\",\"documentation\":\"Retrieves information from token.\\n\\nThe `TOKENINFO` function consumes a token from the top of the stack and pushes back a map containing the token information:\\n* type: type of token 'Read' or 'Write'\\n* issuance: timestamp of token creation, in **milliseconds** since the Unix Epoch \\n* expiry: timestamp of token expiration, in **milliseconds** since the Unix Epoch \\n* application: name of the application accessing the data\\n* apps: list of applications whose data can be accessed (usually limited to a single application)\\n\\n@param `token` Token to extract informations\\n\\n@param `infos` Token informations extract from the tokens\\n\\n\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOKENINFO\"},{\"name\":\"TOKENSECRET\",\"detail\":\"TOKENSECRET( newsecret:STRING secret:STRING ): \",\"documentation\":\"Modifies the secret needed for using `TOKENGEN` or `TOKENDUMP`.\\n\\nThis function is only useable if a secret was configured using `token.secret`.\\n\\n@param `secret` Current secret for token operations, initially the value configured via `token.secret`.\\n\\n@param `newsecret` New secret to set for token operations.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TOKENSECRET\"},{\"name\":\"TOLONG\",\"detail\":\"TOLONG( value:BOOLEAN ): result:LONG\\nTOLONG( value:NUMBER ): result:LONG\\nTOLONG( value:STRING ): result:LONG\\nTOLONG( array:BYTES ): result:LONG\",\"documentation\":\"Converts a value of primitive type or a **BYTE ARRAY** into a long value.\\n\\nThe `TOLONG` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to long.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The long conversion of the value\\n\\n@param `array` Maximum 8 bytes to convert to a LONG. Sign is kept.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLONG\"},{\"name\":\"TOLOWER\",\"detail\":\"TOLOWER( input:STRING ): output:STRING\",\"documentation\":\"Converts the **STRING** on top of the stack to lower case.\\n\\n@param `input` input string\\n\\n@param `output` Lower case string\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLOWER\"},{\"name\":\"TORADIANS\",\"detail\":\"TORADIANS( angle:NUMBER ): result:DOUBLE\\nTORADIANS( langle:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"documentation\":\"Converts an angle measured in degrees to its equivalent in radians.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from degrees to radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in degree to convert in radian\\n\\n@param `result` Result of the conversion from degree to radian\\n\\n@param `langle` List of angles in degree to convert in radian\\n\\n@param `lresult` List of results of the conversion from degree to radian\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TORADIANS\"},{\"name\":\"TOSELECTOR\",\"detail\":\"TOSELECTOR( gts:GTS ): selector:STRING\\nTOSELECTOR( gtslist:LIST<GTS> ): selectorlist:LIST<STRING>\\nTOSELECTOR( encoder:GTSENCODER ): selector:STRING\\nTOSELECTOR( encoderlist:LIST<GTSENCODER> ): selectorlist:LIST<STRING>\",\"documentation\":\"The `TOSELECTOR` function takes a Geo Time Series™ or Geo Time Series™ LIST from the top of the stack and, for each encountered GTS, replace it with a selector which would select it.\\n\\nThis selector can be used as input of [`PARSESELECTOR`](/doc/PARSESELECTOR) for a [`FETCH`](/doc/FETCH).\\n\\n@param `gts` The input Geo Time Series™.\\n\\n@param `gtslist` The input list of Geo Time Series™.\\n\\n@param `encoder` The input encoder.\\n\\n@param `encoderlist` The input list of encoders.\\n\\n@param `selector` The selector string.\\n\\n@param `selectorlist` The list of selector strings, one per GTS in gtslist.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSELECTOR\"},{\"name\":\"TOSTRING\",\"detail\":\"TOSTRING( value:NUMBER ): result:STRING\\nTOSTRING( value:BOOLEAN ): result:STRING\\nTOSTRING( value:STRING ): result:STRING\\nTOSTRING( value:GTS ): result:STRING\",\"documentation\":\"Converts a value of primitive type into a string value.\\n\\nThe `TOSTRING` function consumes a parameter from the top of the stack and pushes back its conversion to string.\\n\\nNote that GTS are converted to input format and that the string ends with CRLF to follow HTTP recommendations.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The string conversion of the value\\n\\n\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSTRING\"},{\"name\":\"TOTIMESTAMP\",\"detail\":\"TOTIMESTAMP( input:STRING ): result:LONG\",\"documentation\":\"Converts a date in format ISO8601 into a timestamp in the platform's time unit.\\n\\nThe `TOTIMESTAMP` function consumes a string parameter (date + time + time zone) from the top of the stack and pushes back its conversion to a number of time units since the Unix Epoch.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nThe supported format is ISO8601 and are:\\n* yyyy-mm-dddThh:mm:ss.ssssssZ\\n* yyyy-mm-dddThh:mm:ss+hh:mm\\n\\nAs the string are URL encoded, the symbol + have to be replaced by %2B, otherwise a space will replace the + in the string.\\n\\n@param `input` ISO8601 string.\\n\\n@param `result` timestamp in the platform unit.\\n\\n\",\"tags\":[\"conversion\",\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOTIMESTAMP\"},{\"name\":\"TOUPPER\",\"detail\":\"TOUPPER( input:STRING ): output:STRING\",\"documentation\":\"Converts the **STRING** on top of the stack to upper case.\\n\\n@param `input` input string\\n\\n@param `output` Upper case string\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOUPPER\"},{\"name\":\"TR\",\"detail\":\"TR( matrix:MATRIX ): trace:DOUBLE\",\"documentation\":\"Computes the [trace](https://en.wikipedia.org/wiki/Trace_(linear_algebra)) of a square matrix. If the input matrix is not square, an error is raised.\\n\\n@param `matrix` The square matrix for which to compute the trace.\\n\\n@param `trace` The computed trace.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TR\"},{\"name\":\"TRANSPOSE\",\"detail\":\"TRANSPOSE( matrix:MATRIX ): transpose:MATRIX\",\"documentation\":\"Computes the [transpose](https://en.wikipedia.org/wiki/Transpose) of a matrix.\\n\\n@param `matrix` Matrix to transpose.\\n\\n@param `transpose` The transpose of the original matrix.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TRANSPOSE\"},{\"name\":\"TRIM\",\"detail\":\"TRIM( str:STRING ): trimmedstr:STRING\",\"documentation\":\"Trims whitespaces from both ends of the string on top of the stack.\\n\\n@param `str` String to trim\\n\\n@param `trimmedstr` String trimmed\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TRIM\"},{\"name\":\"TRY\",\"detail\":\"TRY( try:MACRO catch:MACRO finally:MACRO ): \",\"documentation\":\"The `TRY` function provides a way to execute a macro in a safety harness with [Exception handling](https://en.wikipedia.org/wiki/Exception_handling).\\n\\nIf an error is thrown, it is recorded and will be available via [`ERROR`](/doc/ERROR).\\n\\n@param `try` Macro whose execution is *attempted*.\\n\\n@param `catch` Macro which will be executed if an error is encountered while executing the `try` macro.\\n\\n@param `finally` Macro which will be executed unconditionally after either the `try` or `try`/`catch` execution.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"TRY\"},{\"name\":\"TSELEMENTS\",\"detail\":\"TSELEMENTS( timestamp:LONG ): dateAndTimeElements:LIST<LONG>\\nTSELEMENTS( timestamp:LONG timezone:STRING ): dateAndTimeElements:LIST<LONG>\",\"documentation\":\"Alias of [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nThe `TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"TSELEMENTS\"},{\"name\":\"TSELEMENTS->\",\"detail\":\"TSELEMENTS->( dateAndTimeElements:LIST<LONG> ): timestamp:LONG\\nTSELEMENTS->( dateAndTimeElements:LIST<LONG> timezone:STRING ): timestamp:LONG\",\"documentation\":\"The `TSELEMENTS->` function consumes an optional **STRING** timezone and a **LIST** of **LONG** describing a time and date and pushes back the **LONG** timestamp. The **LIST** of **LONG** follows the format given by [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"K4C4I3KCGJtJJmoy\"},{\"name\":\"TYPEOF\",\"detail\":\"TYPEOF( object:ANY ): type:STRING\",\"documentation\":\"Gets the type of an element.\\n\\nThe `TYPEOF` function consumes the top element on the stack and pushes back a string containing the type. The output could be:\\n+ AGGREGATOR\\n+ BITSET\\n+ BOOLEAN\\n+ BYTES\\n+ CONTEXT\\n+ COUNTER\\n+ DOUBLE\\n+ FILLER\\n+ FILTER\\n+ GEOSHAPE\\n+ GTS\\n+ GTSENCODER\\n+ KEY\\n+ LIST\\n+ LONG\\n+ MACRO\\n+ MAP\\n+ MARK\\n+ MATCHER\\n+ MATRIX\\n+ NULL\\n+ OPERATOR\\n+ PFONT\\n+ PGRAPHICS\\n+ PIMAGE\\n+ PSHAPE\\n+ REDUCER\\n+ SET\\n+ STRING\\n+ VECTOR\\n+ VLIST\\n\\nFor any object introduced by a WarpScript extension whose output of TYPEOF is not in the list thereof, the output would be preceded by \\\"X-\\\".\\n\\nNote: since revision 2.5.0, the TYPEOF output of bucketizers, mappers, reducers is changed from 'MAPPER' to 'AGGREGATOR'.\\n\\n\\n@param `object` Any kind of reference\\n\\n@param `type` The type of the object\\n\\n\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"TYPEOF\"},{\"name\":\"UDF\",\"detail\":\"UDF( class:STRING ): \",\"documentation\":\"The `UDF` function invokes a User Defined Function from a Jar. A new function instance is loaded at each invocation.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UDF\"},{\"name\":\"ULP\",\"detail\":\"ULP( value:NUMBER ): ulp:DOUBLE\\nULP( lvalue:LIST<NUMBER> ): lulp:LIST<DOUBLE>\",\"documentation\":\"Returns the size of the [ULP (Unit in the Last Place)](https://en.wikipedia.org/wiki/Unit_in_the_last_place) for the argument. The ulp for a DOUBLE is the positive distance between this floating-point value and the DOUBLE value next larger in magnitude.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `ulp` Computed ULP.\\n\\n@param `lvalue` List of numeric values.\\n\\n@param `lulp` List of computed ULPs.\\n\\n\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ULP\"},{\"name\":\"UNBUCKETIZE\",\"detail\":\"UNBUCKETIZE( gts:GTS ): gts:GTS\\nUNBUCKETIZE( lgts:LIST<GTS> ): lgts:LIST<GTS>\",\"documentation\":\"Transforms a bucketized Geo Time Series™ into a non bucketized one. Note that this function transforms the original GTS, it does not clone it.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™ instances.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNBUCKETIZE\"},{\"name\":\"UNBUCKETIZE.CALENDAR\",\"detail\":\"UNBUCKETIZE.CALENDAR( gts:GTS ): gts:GTS\\nUNBUCKETIZE.CALENDAR( lgts:LIST<GTS> ): lgts:LIST<GTS>\",\"documentation\":\"On a GTS that is calendar-bucketized, this function replaces the ticks with the timestamp end boundaries of each bucket, and unbucketize it.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `lgts` One or more lists of Geo Time Series™\\n\\n\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"UNBUCKETIZE.CALENDAR\"},{\"name\":\"UNGZIP\",\"detail\":\"UNGZIP( compressed:BYTES ): uncompressed:BYTES\",\"documentation\":\"Decompresses a byte array containing data compressed by [`GZIP`](doc/GZIP).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNGZIP\"},{\"name\":\"UNION\",\"detail\":\"UNION( setA:SET setB:SET ): output:SET\",\"documentation\":\"Computes the union &#x222a; of two sets.\\n\\nThe `UNION` function consumes two sets from the top of the stack and pushes back its mathematical union.\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x222a; *B*\\n\\n\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNION\"},{\"name\":\"UNIQUE\",\"detail\":\"UNIQUE( input:LIST ): output:LIST\",\"documentation\":\"The `UNIQUE` function eliminates duplicate elements on the LIST on the top of the stack.\\nThe order of the resulting LIST is not the same than the original one.\\n\\nIt makes elements of a list unique by converting it to a set temporarily. See [()](/doc/91Z) for more informations.\\n\\n@param `input` The list to parse\\n\\n@param `output` The new list object, without any duplicates\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNIQUE\"},{\"name\":\"UNLIST\",\"detail\":\"UNLIST( list:LIST ): mark:MARK elts:ANY*\",\"documentation\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`]`](/doc/MF).\\n\\n@param `list` List to expand.\\n\\n@param `elts` Elements of `list`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNLIST\"},{\"name\":\"UNMAP\",\"detail\":\"UNMAP( map:MAP ): mark:MARK k1:ANY v1:ANY kN:ANY vN:ANY\",\"documentation\":\"Unpacks a map, pushing its keys and values onto the stack along a mark as the deepest stack element such that one can use [`}`](/doc/UF) to rebuild the map.\\n\\n@param `k1` First map key.\\n\\n@param `v1` First map value.\\n\\n@param `kN` Nth map key.\\n\\n@param `vN` Nth map value.\\n\\n@param `map` Map to unpack.\\n\\n@param `mark` Mark indicating the deepest level to consider when building the map.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNMAP\"},{\"name\":\"UNPACK\",\"detail\":\"UNPACK( list:BYTES format:STRING ): result:LIST<ANY>\",\"documentation\":\"The `UNPACK` function unpacks a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n* **<**: No bigendian\\n* **>**: Bigendian\\n* **L**: Long\\n* **B**: Boolean\\n* **D**: Double length always equals 64.\\n* **<L32**: No bigendian 32 bits Long\\n\\n@param `list` Pqcked list to unpack\\n\\n@param `format` Format used to unpack\\n\\n@param `result` Unpacked list\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"UNPACK\"},{\"name\":\"UNSECURE\",\"detail\":\"UNSECURE( secure:STRING ): script:STRING\",\"documentation\":\"The `UNSECURE` function decrypts a secure script. The correct secret MUST have been set unsing [`SECUREKEY`](doc/SECUREKEY) prior to calling this function.\\n\\n@param `secure` STRING with the secure script to decode.\\n\\n@param `script` Decoded scripted.\\n\\n\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNSECURE\"},{\"name\":\"UNSET\",\"detail\":\"UNSET( set:SET ): mark:MARK elts:ANY*\",\"documentation\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`)`](/doc/9F).\\n\\n@param `set` Set to expand.\\n\\n@param `elts` Elements of `set`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"tags\":[\"sets\"],\"since\":\"2.6.0\",\"OPB64name\":\"UNSET\"},{\"name\":\"UNTIL\",\"detail\":\"UNTIL( code:MACRO condition:MACRO ): \\nUNTIL( code:MACRO condition:MACRO index:BOOLEAN ): \",\"documentation\":\"The `UNTIL` function implements an until loop. It takes two macros as arguments from the stack: the code to execute until the condition is true and the condition to evaluate after every iteration.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force UNTIL to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `code` Macro executed on each loop\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNTIL\"},{\"name\":\"UNWRAP\",\"detail\":\"UNWRAP( wrapped:STRING ): gts:GTS\\nUNWRAP( wrappedbytes:BYTES ): gts:GTS\\nUNWRAP( lwrapped:LIST<STRING> ): lgts:LIST<GTS>\\nUNWRAP( lwrapped:LIST<BYTES> ): lgts:LIST<GTS>\",\"documentation\":\"Unwraps packed Geo Time Series™ instances.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNWRAP\"},{\"name\":\"UNWRAPEMPTY\",\"detail\":\"UNWRAPEMPTY( wrapped:STRING ): gts:GTS\\nUNWRAPEMPTY( wrappedbytes:BYTES ): gts:GTS\\nUNWRAPEMPTY( lwrapped:LIST<STRING> ): lgts:LIST<GTS>\\nUNWRAPEMPTY( lwrapped:LIST<BYTES> ): lgts:LIST<GTS>\",\"documentation\":\"Unwraps wrapped Geo Time Series™ instances without unpacking the actual datapoints. This is handy to extract the metadata (class, labels, attributes) from a set of wrapped GTS.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPEMPTY\"},{\"name\":\"UNWRAPENCODER\",\"detail\":\"UNWRAPENCODER( wrapped:STRING ): encoder:GTSENCODER\\nUNWRAPENCODER( wrappedbytes:BYTES ): encoder:GTSENCODER\\nUNWRAPENCODER( lwrapped:LIST<STRING> ): lencoder:LIST<GTSENCODER>\\nUNWRAPENCODER( lwrapped:LIST<BYTES> ): lencoder:LIST<GTSENCODER>\",\"documentation\":\"Unwraps packed Geo Time Series™ into encoders.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `encoder` Encoder with decoded Geo Time Series™ datapoints.\\n\\n@param `lencoder` List of encoders with decoded Geo Time Series™.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"UNWRAPENCODER\"},{\"name\":\"UNWRAPSIZE\",\"detail\":\"UNWRAPSIZE( wrapped:STRING ): size:LONG\\nUNWRAPSIZE( wrappedbytes:BYTES ): size:LONG\\nUNWRAPSIZE( lwrapped:LIST<STRING> ): lsize:LIST<LONG>\\nUNWRAPSIZE( lwrapped:LIST<BYTES> ): lsize:LIST<LONG>\",\"documentation\":\"Extracts the size (number of datapoints) of wrapped Geo Time Series™ instances.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `size` Decoded Geo Time Series™ size.\\n\\n@param `lsize` List of decoded Geo Time Series™ sizes.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPSIZE\"},{\"name\":\"UPDATE\",\"detail\":\"UPDATE( gts:GTS token:STRING ): \\nUPDATE( encoder:GTSENCODER token:STRING ): \\nUPDATE( list:LIST<GTS> token:STRING ): \\nUPDATE( list:LIST<GTSENCODER> token:STRING ): \",\"documentation\":\"Pushes Geo Time Series™ data to the Warp 10 instance.\\n\\nThe `UPDATE` function allows you to push data directly from your WarpScript code without having to retrieve the data and use the `/update` endpoint.\\n\\nThe GTS or Encoder instances to push *MUST* have a non empty name and in the case of Geo Time Series™ *MUST* have been renamed (to avoid pushing data by mistake which could override existing data you just retrieved).\\n\\n@param `token` Write token to use for pushing the data.\\n\\n@param `gts` Geo Time Series™ to push.\\n\\n@param `encoder` GTS Encoder to push.\\n\\n@param `list` List containing Geo Time Series™ and/or GTS Encoder instances to push.\\n\\n\",\"tags\":[\"gts\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"UPDATE\"},{\"name\":\"UPDATEOFF\",\"detail\":\"UPDATEOFF( message:STRING secret:STRING ): \",\"documentation\":\"Disables update operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when an update operation is attempted.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEOFF\"},{\"name\":\"UPDATEON\",\"detail\":\"UPDATEON( secret:STRING ): \",\"documentation\":\"Enables update operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEON\"},{\"name\":\"URLDECODE\",\"detail\":\"URLDECODE( encoded:STRING ): decoded:STRING\",\"documentation\":\"Decodes a [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) STRING.\\n\\n@param `encoded` Encoded STRING to decode.\\n\\n@param `decoded` Decoded STRING.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLDECODE\"},{\"name\":\"URLENCODE\",\"detail\":\"URLENCODE( string:STRING ): encoded:STRING\",\"documentation\":\"Encodes a STRING using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and replacing occurrences of '+' with '%20'.\\n\\nThe character set used is [UTF-8](https://en.wikipedia.org/wiki/UTF-8).\\n\\n@param `string` Input STRING to encode.\\n\\n@param `encoded` Encoded version of 'string' using the UTF-8 character set.\\n\\n\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLENCODE\"},{\"name\":\"URLFETCH\",\"detail\":\"URLFETCH( url:STRING ): result:LIST<LIST>\\nURLFETCH( url:STRING headers:MAP ): result:LIST<LIST>\\nURLFETCH( urls:LIST<STRING> ): result:LIST<LIST>\\nURLFETCH( urls:LIST<STRING> headers:MAP ): result:LIST<LIST>\",\"documentation\":\"The `URLFETCH` function sends HTTP(S) GET requests, waits for the responses and puts them on the stack.\\n\\nFor security reasons, the stack must be authenticated for this function to work, see [`AUTHENTICATE`](/doc/AUTHENTICATE).\\n\\nSince 2.7.0, this function also accepts a MAP of headers.\\n\\n@param `url` The URL to send the GET request to. Must begin with `http://` or `https://`.\\n\\n@param `urls` The list of URLs to send the GET requests to. Each URL must begin with `http://` or `https://`. \\n\\n@param `result` A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\\n\\n@param `headers` \\n\\n\",\"tags\":[\"extensions\",\"web\"],\"since\":\"1.0.2\",\"OPB64name\":\"URLFETCH\"},{\"name\":\"UUID\",\"detail\":\"UUID(): uuid:STRING\",\"documentation\":\"Pushes onto the stack a randomly generated [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\n\\n@param `uuid` Generated UUID string\\n\\n\",\"tags\":[\"misc\"],\"since\":\"1.0.0\",\"OPB64name\":\"UUID\"},{\"name\":\"V->\",\"detail\":\"V->( list:VLIST ): result:LIST\",\"documentation\":\"The `V->` function converts a Vector (VLIST) on top of the stack into a list.\\n\\n@param `list` Input Vector.\\n\\n@param `result` Result list.\\n\\n\",\"tags\":[\"lists\",\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"KXoy\"},{\"name\":\"VALUEDEDUP\",\"detail\":\"VALUEDEDUP( gts:GTS order:BOOLEAN ): dedupgts:GTS\\nVALUEDEDUP( lgts:LIST<GTS> order:BOOLEAN ): ldedupgts:LIST<GTS>\",\"documentation\":\"Deletes duplicated values of the Geo Time Series™.\\n\\nThe `VALUEDEDUP` function takes as parameter a **GTS** or a **LIST** of **GTS** and it removes its duplicate values.\\n\\nExpects a boolean indicating whether we keep the oldest or most recent datapoint for a given value.\\n\\n@param `order` Boolean value, true for keeping the oldest datapoint for a given value, false otherwise.\\n\\n@param `gts` Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `lgts` List of Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `dedupgts` Geo Time Series™ with unique values.\\n\\n@param `ldedupgts` List of Geo Time Series™ with unique values.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEDEDUP\"},{\"name\":\"VALUEHISTOGRAM\",\"detail\":\"VALUEHISTOGRAM( gts:GTS ): histogram:MAP\\nVALUEHISTOGRAM( encoder:GTSENCODER ): histogram:MAP\\nVALUEHISTOGRAM( list:LIST<GTS> ): lhistogram:LIST<MAP>\",\"documentation\":\"Produces the value histogram of a Geo Time Series™ or (since 2.2.0) of a GTS Encoder.\\n\\nThe histogram is a map with an entry for each value (used as the map key), with an associated value equal to the number of occurrences of the value in the series.\\n\\nIf the input is a bucketized Geo Time Series™, the `NULL` key will have an associated value which is the number of buckets without values (assuming no datapoints were added at timestamps other than those of buckets).\\n\\nWhen the input is a GTS Encoder, keys may be BigDecimal, LONG, DOUBLE, BOOLEAN or STRING, binary values are not used as keys, their STRING representation (in ISO-8859-1) is used.\\n\\n@param `gts` Geo Time Series™ for which to compute the histogram\\n\\n@param `encoder` GTS Encoder for which to compute the histogram\\n\\n@param `histogram` The value histogram for the input Geo Time Series™ or GTS Encoder\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders\\n\\n@param `lhistogram` The list of value histogram maps\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEHISTOGRAM\"},{\"name\":\"VALUELIST\",\"detail\":\"VALUELIST( map:MAP ): values:LIST\",\"documentation\":\"Gets values from a **MAP**.\\n\\nThe function `VALUELIST` extracts the values of a **MAP** on the top of the stack and pushes on the stack a list with those values. The **MAP** is consumed.\\n\\n\\n@param `map` Map for which to get the values.\\n\\n@param `values` List of values for the input MAP.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUELIST\"},{\"name\":\"VALUES\",\"detail\":\"VALUES( gts:GTS ): values:LIST\\nVALUES( lgts:LIST<GTS> ): lvalues:LIST<LIST>\\nVALUES( encoder:GTSENCODER ): values:LIST\\nVALUES( lencoder:LIST<GTSENCODER> ): lvalues:LIST<LIST>\",\"documentation\":\"Gets the values of Geo Time Series™ or encoders.\\n\\nThe `VALUES` function consumes a Geo Time Series™, an encoder or a list thereof from the stack, and it replaces each instance of Geo Time Series™ or encoder by a list of its values.\\n\\n@param `gts` Geo Time Series™ for which to get the values.\\n\\n@param `lgts` List of Geo Time Series™ for which to get the values.\\n\\n@param `encoder` Encoder for which to get the values.\\n\\n@param `lencoder` List of encoders for which to get the values.\\n\\n@param `values` List of values from the input Geo Time Series™.\\n\\n@param `lvalues` List of list of values from the input Geo Time Series™ list.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUES\"},{\"name\":\"VALUESORT\",\"detail\":\"VALUESORT( gts:GTS ): sortedgts:GTS\\nVALUESORT( lgts:LIST<GTS> ): lsortedgts:LIST<GTS>\",\"documentation\":\"Sorts values of the Geo Time Series™ in ascending order.\\n\\nThe function `VALUESORT` takes the **GTS** on top of the stack and sort its values (and associated locations/elevations) in ascending order.\\n\\n@param `gts` Geo Time Series™ for which to sort the values.\\n\\n@param `sortedgts` Geo Time Series™ with sorted values.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lsortedgts` List of Geo Time Series™ with sorted values.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESORT\"},{\"name\":\"VALUESPLIT\",\"detail\":\"VALUESPLIT( gts:GTS label:STRING ): splitedgts:LIST<GTS>\\nVALUESPLIT( lgts:LIST<GTS> label:STRING ): lsplitedgts:LIST<LIST<GTS>>\",\"documentation\":\"Splits Geo Time Series™ by values.\\n\\nThe function `VALUESPLIT` takes one **STRING** on top of the stack plus one **GTS** or a list of **GTS**. It splits **GTS** by values and creates a **GTS** for each different value. For each new **GTS**, the label specified in parameter will be added.\\n\\nThe new **GTS** will be sorted by value with `VALUESORT`.\\n\\n@param `label` Label to add to the new Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ to split by value.\\n\\n@param `splitedgts` List of Geo Time Series™ splited by value.\\n\\n@param `lgts` List of Geo Time Series™ to split by value.\\n\\n@param `lsplitedgts` List of Geo Time Series™ splited by value.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESPLIT\"},{\"name\":\"VARINT->\",\"detail\":\"VARINT->( encoded:BYTES ): numbers:LIST<LONG>\\nVARINT->( encoded:BYTES count:LONG ): numbers:LIST<LONG> processed:LONG\",\"documentation\":\"The `VARINT` function decodes [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoded numbers.\\n\\n@param `numbers` List of decoded numbers.\\n\\n@param `encoded` Byte array containing the encoded number(s) to decode.\\n\\n@param `count` Maximum number of `LONG`s to decode.\\n\\n@param `processed` Number of bytes which were processed to decode the numbers.\\n\\n\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"KZ4HHJtJAIs\"},{\"name\":\"VARS\",\"detail\":\"VARS( macro:MACRO ): vars:LIST<STRING>\\nVARS( macro:MACRO onlyPoprAndStore:BOOLEAN ): vars:LIST<STRING>\",\"documentation\":\"Extracts all variables used in a macro. The `VARS` function scans the macro for occurrences of `LOAD`, `STORE` or `CSTORE` functions and inspects the associated variable name. If such a name is not an explicit STRING, the call to `VARS` will fail with an error.\\n\\nThe list of symbols is sorted according to the number of occurrences encountered, decreasing.\\n\\n@param `macro` Macro to inspect.\\n\\n@param `vars` List of encountered symbols.\\n\\n@param `onlyPoprAndStore` Returns only variables used by POPR, CPOPR and STORE. Defaults to false.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"VARS\"},{\"name\":\"VEC->\",\"detail\":\"VEC->( input:VECTOR ): result:LIST\",\"documentation\":\"The `VEC->` function converts a Vector into a list.\\n\\n\\n@param `input` Vector to convert\\n\\n@param `result` list\\n\\n\",\"tags\":[\"lists\",\"conversion\",\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"KZK2AIs\"},{\"name\":\"WEBCALL\",\"detail\":\"WEBCALL( token:STRING method:STRING url:STRING headers:MAP body:STRING ): uuid:STRING\",\"documentation\":\"Makes an outbound HTTP call.\\n\\nNote that the hosts which may be reached via `WEBCALL` might have been restricted through the use of the `webcall.host.patterns` Warp&nbsp;10 configuration parameter.\\n\\nThe write token is here to check you have the right to send a webcall. If the write token is valid, then the request is sent. It will never be sent in the request.\\n\\nThe call to `WEBCALL` returns a UUID on the stack. The actual request is performed asynchronously, the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`.\\n\\n@param `body` body of the request.\\n\\n@param `headers` map of additionnal http headers.\\n\\n@param `url` supported schemes are http and https.\\n\\n@param `method` `GET` or `POST` string.\\n\\n@param `token` valid write token\\n\\n@param `uuid` the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`\\n\\n\",\"tags\":[\"web\"],\"since\":\"1.0.0\",\"OPB64name\":\"WEBCALL\"},{\"name\":\"WF.ADDREPO\",\"detail\":\"WF.ADDREPO( url:STRING ): \",\"documentation\":\"The `WF.ADDREPO` function allows you to add a repository to the list of repositories taken into account by the WarpFleet™ macro resolver.\\n\\nIf the URL is valid (syntaxically), then it will be added at the end of the current list of repositories scanned by the resolver. All repository URLs will then be validated by the `validator` macro defined in the configuration (`warpfleet.macros.validator`). Those URLs for which the `validator` macro returned true will be retained.\\n\\nNote that the repository is only added in the scope of the current stack.\\n\\n@param `url` URL to add to the list of repositories.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.ADDREPO\"},{\"name\":\"WF.GETREPOS\",\"detail\":\"WF.GETREPOS(): repos:LIST<STRING>\",\"documentation\":\"Retrieves the current list of repositories used by the WarpFleet™ resolver.\\n\\nNote that if the configuration disabled the use of this function (via `warpfleet.getrepos.disable`), the returned list will be empty even though it contains repositories.\\n\\n@param `repos` Current list of repository URLs.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.GETREPOS\"},{\"name\":\"WF.SETREPOS\",\"detail\":\"WF.SETREPOS( repos:LIST<STRING> ): \",\"documentation\":\"Sets the list of repositories used by the WarpFleet™ resolver to the given value (list of valid URLs).\\n\\nEach URL is tested against WarpFleet™ validator macro to check if it is allowed. Non-valid ones are discarded.\\n\\nNote that this changes the list only for the scope of the current WarpScript execution.\\n\\n@param `repos` List of URLs to use for the WarpFleet™ resolver.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.SETREPOS\"},{\"name\":\"WFOFF\",\"detail\":\"WFOFF(): \",\"documentation\":\"The `WFOFF` function disables the WarpFleet™ Resolver. It can be re-enabled using `WFON`.\\n\\nThis is useful when you want to ensure that a macro call only looks it up locally.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFOFF\"},{\"name\":\"WFON\",\"detail\":\"WFON(): \",\"documentation\":\"The `WFON` function enables the WarpFleet™ Resolver after it has been disabled by `WFOFF`.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFON\"},{\"name\":\"WHILE\",\"detail\":\"WHILE( condition:MACRO code:MACRO ): \\nWHILE( condition:MACRO code:MACRO index:BOOLEAN ): \",\"documentation\":\"The `WHILE` function implements a while loop. It takes two macros as arguments from the stack: the condition macro to evaluate and the macro to execute while the condition is true.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force WHILE to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `code` Macro executed on each loop\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"WHILE\"},{\"name\":\"WRAP\",\"detail\":\"WRAP( encoder:GTSENCODER ): wrapped:STRING\\nWRAP( lencoder:GTSENCODER ): lwrapped:LIST<STRING>\\nWRAP( gts:GTS ): wrapped:STRING\\nWRAP( lgts:LIST<GTS> ): lwrapped:LIST<STRING>\",\"documentation\":\"The `WRAP` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a STRING.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"WRAP\"},{\"name\":\"WRAPFAST\",\"detail\":\"WRAPFAST( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPFAST( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPFAST( gts:GTS ): wrapped:BYTES\\nWRAPFAST( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"documentation\":\"The `WRAPFAST` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a byte array. For fast execution, the content of the GTS is not compressed, so the resulting byte array will be larger than that produced by `WRAPRAW`.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPFAST\"},{\"name\":\"WRAPMV\",\"detail\":\"WRAPMV( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPMV( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPMV( gts:GTS ): wrapped:BYTES\\nWRAPMV( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPRAWOPT`, `WRAPMV` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPMV\"},{\"name\":\"WRAPMV!\",\"detail\":\"WRAPMV!( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPMV!( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPMV!( gts:GTS ): wrapped:BYTES\\nWRAPMV!( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPMV`, `WRAPMV!` attempts to optimize the representation of DOUBLE values for Geo Time Series™ but unlike `WARPMV`, it does not increase the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.6.0\",\"OPB64name\":\"Kp80J3pL7F\"},{\"name\":\"WRAPOPT\",\"detail\":\"WRAPOPT( encoder:GTSENCODER ): wrapped:STRING\\nWRAPOPT( lencoder:GTSENCODER ): lwrapped:LIST<STRING>\\nWRAPOPT( gts:GTS ): wrapped:STRING\\nWRAPOPT( lgts:LIST<GTS> ): lwrapped:LIST<STRING>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a STRING. The packing performed by `WRAPOPT` differs from that of [`WRAP`](/doc/WRAP) only by the fact that `WRAPOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPOPT\"},{\"name\":\"WRAPRAW\",\"detail\":\"WRAPRAW( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPRAW( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPRAW( gts:GTS ): wrapped:BYTES\\nWRAPRAW( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"documentation\":\"The `WRAPRAW` function packs a Geo Time Series™ into a byte array.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.7\",\"OPB64name\":\"WRAPRAW\"},{\"name\":\"WRAPRAWOPT\",\"detail\":\"WRAPRAWOPT( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPRAWOPT( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPRAWOPT( gts:GTS ): wrapped:BYTES\\nWRAPRAWOPT( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"documentation\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES. The packing performed by `WRAPRAWOPT` differs from that of [`WRAPRAW`](/doc/WRAPRAW) only by the fact that `WRAPRAWOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPRAWOPT\"},{\"name\":\"WSINFO\",\"detail\":\"WSINFO( session:STRING ): infos:LIST<MAP>\",\"documentation\":\"Displays informations about WarpScript environments with a given session id. The informations are returned as a map identical to that returned by [`WSPS`](/doc/WSPS):\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `session` Session of the environments to inspect.\\n\\n@param `infos` List of informations about each WarpScript execution environment with 'session' as their session name.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSINFO\"},{\"name\":\"WSKILL\",\"detail\":\"WSKILL( uuid:STRING secret:STRING ): status:BOOLEAN\",\"documentation\":\"Kills the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP) and marking the environment as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to kill.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILL\"},{\"name\":\"WSKILLSESSION\",\"detail\":\"WSKILLSESSION( session:STRING ): count:LONG\",\"documentation\":\"Kills the execution WarpScript programs by forcing a call to [`STOP`](/doc/STOP) and marking the environments as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `session` Session id of the WarpScript execution environments to kill.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILLSESSION\"},{\"name\":\"WSNAME\",\"detail\":\"WSNAME( name:STRING ): current:STRING\",\"documentation\":\"Modifies the name associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stack.name` in the attributes map.\\n\\nName size is limited to 128 characters.\\n\\n@param `name` Name to assign to the calling execution environment, or `NULL` to simply read the current name.\\n\\n@param `current` Name assigned to the execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSNAME\"},{\"name\":\"WSPS\",\"detail\":\"WSPS( secret:STRING ): procs:LIST<MAP>\",\"documentation\":\"Lists all the registers WarpScript execution environments. For each environment a map is returned with the following fields:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `procs` List of informations about each registered WarpScript execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSPS\"},{\"name\":\"WSSESSION\",\"detail\":\"WSSESSION( session:STRING ): current:STRING\",\"documentation\":\"Modifies the session id associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stackps.session` in the attributes map.\\n\\nSession id size is limited to 128 characters.\\n\\nSession can also be set by setting the `X-Warp10-WarpScriptSession` header.\\n\\nOnce the session has been set it cannot be modified.\\n\\n@param `session` Session id to assign to the calling execution environment, or NULL to simply read the current session id.\\n\\n@param `current` The session id assigned to the execution environment.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSESSION\"},{\"name\":\"WSSTACK\",\"detail\":\"WSSTACK(): \",\"documentation\":\"Select the WarpScript™ (*i.e.* SNAPSHOT) format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"WSSTACK\"},{\"name\":\"WSSTOP\",\"detail\":\"WSSTOP( uuid:STRING secret:STRING ): status:BOOLEAN\",\"documentation\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to stop.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOP\"},{\"name\":\"WSSTOPSESSION\",\"detail\":\"WSSTOPSESSION( session:STRING ): count:LONG\",\"documentation\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\nThe environments to stop are identified by a session id.\\n\\n@param `session` Session of the WarpScript execution environments to stop.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOPSESSION\"},{\"name\":\"Z->\",\"detail\":\"Z->( z:BYTES n:LONG bitwidth:LONG ): longs:LIST<LONG>\",\"documentation\":\"Unpacks LONG values from a [Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) stored in a byte array.\\n\\n@param `bitwidth` Size in bits of the LONG values to extract, from 1 to 63.\\n\\n@param `n` Number of LONG values to extract.\\n\\n@param `z` Byte array containing the Morton Code to unpack.\\n\\n@param `longs` List of extracted LONG values.\\n\\n\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"LXoy\"},{\"name\":\"ZDISCORDS\",\"detail\":\"ZDISCORDS( window_size:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): result:GTS\",\"documentation\":\"The `ZDISCORDS` function detects discords in a standardized ([`STANDARDIZE`](/doc/STANDARDIZE) Geo Time Series™. The discord detection\\n algorithm is based on identifying outlier patterns in the Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `ZDISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\nGiven the `ZDISCORDS` expects the Geo Time Series™ it operates on to be standardized ([`STANDARDIZE`](/doc/STANDARDIZE), the discord detection \\nalgorithm is more sensitive than that of [`DISCORDS`](/doc/DISCORDS).\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0.\\n\\n@param `overlapping` Flag indicating whether or not the `ZDISCORDS` function should report overlapping discords.\\n\\n@param `maximum` The maximum number of discords to identify.\\n\\n@param `window_size` Window size which is the width of each interval on which the pattern extraction should be performed, a pattern length which will determine how the window is segmented, and lastly a quantization scale which will determine how many different buckets will be used to ventilate the series values. (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `result` Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™.\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZDISCORDS\"},{\"name\":\"ZDTW\",\"detail\":\"ZDTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"documentation\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be Z-normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"ZDTW\"},{\"name\":\"ZIP\",\"detail\":\"ZIP( input:LIST<LIST> ): output:LIST<LIST>\",\"documentation\":\"The function ZIP takes a list of lists as parameters. Each list which are not singletons must be of same size.\\n\\nIt returns a list of lists where the i-th list contains the i-th elements of each input list in the same order.\\n\\nAlso, it considers singletons as a list of the same size with a duplicated value.\\n\\n@param `input` List of lists\\n\\n@param `output` List of lists\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZIP\"},{\"name\":\"ZPATTERNDETECTION\",\"detail\":\"ZPATTERNDETECTION( gts:GTS patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nZPATTERNDETECTION( lgts:LIST<GTS> patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"documentation\":\"The `ZPATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`ZPATTERNS`](/doc/ZPATTERNS) or [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe `ZPATTERNDETECTION` does not standardize the datapoints in the sliding window, assuming (wrongly) they already are.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `ZPATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform.\\n\\n@param `gts` The single GTS to transform.\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it.\\n\\n@param `lresult` The list of result GTS.\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNDETECTION\"},{\"name\":\"ZPATTERNS\",\"detail\":\"ZPATTERNS( gts:GTS wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nZPATTERNS( lgts:LIST<GTS> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"documentation\":\"Extracts symbolic patterns from Geo Time Series™ as [`PATTERNS`](/doc/PATTERNS) does, but does not standardize each window, assuming (wrongly) the GTS windows are already standardized.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNS\"},{\"name\":\"ZSCORE\",\"detail\":\"ZSCORE( gts:GTS flag:BOOLEAN ): result:GTS\\nZSCORE( gtsList:LIST<GTS> flag:BOOLEAN ): resultList:LIST<GTS>\",\"documentation\":\"The 'ZSCORE' function consumes a flag, then normalizes a Geo Time Series™ or a **LIST** of Geo Time Series™ that are below by replacing their values by their [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe flag indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median).\\n\\nIf the GTS isn’t of type **DOUBLE** or if the deviation equals 0, an exception is raised.\\n\\n@param `flag` Indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORE\"},{\"name\":\"ZSCORETEST\",\"detail\":\"ZSCORETEST( gts:GTS mad:BOOLEAN ): result:LIST<LONG>\\nZSCORETEST( lgts:LIST<GTS> mad:BOOLEAN ): lresult:LIST<LIST<LONG>>\\nZSCORETEST( gts:GTS mad:BOOLEAN trigger:DOUBLE ): result:LIST<LONG>\\nZSCORETEST( lgts:LIST<GTS> mad:BOOLEAN trigger:DOUBLE ): lresult:LIST<LIST<LONG>>\",\"documentation\":\"The ZSCORETEST function detects outliers in a GTS by comparing the Z-score of its values with a given threshold.\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median). If this value is greater than the given threshold, it is flagged as an outlier.\\n\\nA LIST of ticks, corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n@param `gts` The Geo Time Series™ to test\\n\\n@param `result` List of the detected outliers timestamps\\n\\n@param `lgts` The list of Geo Time Series™ to test\\n\\n@param `lresult` List of list of the detected outliers timestamps\\n\\n@param `mad` False: use the mean/sigma, true: use the median/mad to calculate the Z-score\\n\\n@param `trigger` Optional threshold. Default value is 3.5\\n\\n\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORETEST\"},{\"name\":\"[\",\"detail\":\"[(): mark:MARK\",\"documentation\":\"Starts a list creation.\\n\\nThe `[` function creates a list by pushing a mark onto the stack. This is a syntactic help to better present list constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"lists\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lk\"},{\"name\":\"[[\",\"detail\":\"[[(): mark:MARK\",\"documentation\":\"Pushes a MARK on the stack. This is a syntaxic help to better present Vector (VLIST) constructions.\\n \\n\\n@param `mark` A MARK instance.\\n\\n\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"Lpg\"},{\"name\":\"[[]]\",\"detail\":\"[[]](): vector:VLIST\",\"documentation\":\"Pushes an empty Vector onto the stack.\\n\\n@param `vector` Empty Vector.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.2.13\",\"OPB64name\":\"LphSMF\"},{\"name\":\"[]\",\"detail\":\"[]( content:ANY ): newlist:LIST\",\"documentation\":\"The [] function creates an empty LIST on the top of the stack.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newlist` list instance, initialized with content.\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lpo\"},{\"name\":\"]\",\"detail\":\"]( mark:MARK v1:ANY vN:ANY ): list:LIST\",\"documentation\":\"Closes a currently open list and pushes it onto the stack.\\n\\n  The `]` function pops from the stack the elements of the list up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"MF\"},{\"name\":\"]]\",\"detail\":\"]]( mark:MARK v1:ANY vN:ANY ): list:VLIST\",\"documentation\":\"Closes a currently open Vector (VLIST) and pushes it onto the stack. The elements on the stack are those up to the first mark encountered. The mark is discarded.\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"MKo\"},{\"name\":\"^\",\"detail\":\"^( p1:LONG p2:LONG ): result:LONG\\n^( inputgts:GTS mask:LONG ): maskedgts:GTS\\n^( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Performs a bitwise **XOR** operation.\\n\\nThe `^` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **XOR**.\\n\\nSince Warp 10™ 2.1, `^` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be XOR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with XOR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts XOR with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"MV\"},{\"name\":\"bucketizer.and\",\"detail\":\"bucketizer.and(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.and` function applies the logical operator **AND** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.and\"},{\"name\":\"bucketizer.count\",\"detail\":\"bucketizer.count(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.count` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count\"},{\"name\":\"bucketizer.count.exclude-nulls\",\"detail\":\"bucketizer.count.exclude-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.count.exclude-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.exclude-nulls` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.exclude-nulls\"},{\"name\":\"bucketizer.count.include-nulls\",\"detail\":\"bucketizer.count.include-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.count.include-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.include-nulls function computes the number of values, including null values, found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.include-nulls\"},{\"name\":\"bucketizer.count.nonnull\",\"detail\":\"bucketizer.count.nonnull(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.count.nonnull` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.nonnull\"},{\"name\":\"bucketizer.first\",\"detail\":\"bucketizer.first(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.first` function returns the first value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.first` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.first\"},{\"name\":\"bucketizer.join\",\"detail\":\"bucketizer.join( separator:STRING ): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.join` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join\"},{\"name\":\"bucketizer.join.forbid-nulls\",\"detail\":\"bucketizer.join.forbid-nulls( separator:STRING ): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.join.forbid-nulls` has the same behavior as `bucketizer.join`, use `bucketizer.join` instead.\\n\\nThe `bucketizer.join.forbid-nulls` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join.forbid-nulls\"},{\"name\":\"bucketizer.last\",\"detail\":\"bucketizer.last(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.last` function returns the last value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.last` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.last\"},{\"name\":\"bucketizer.mad\",\"detail\":\"bucketizer.mad(): bucketizer:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) of each bucket.\\n\\nThe returned location is the median of all the locations in the bucket, and the returned elevation is the median of all the elevations in the bucket.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.0\",\"OPB64name\":\"bucketizer.mad\"},{\"name\":\"bucketizer.max\",\"detail\":\"bucketizer.max(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.max` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max\"},{\"name\":\"bucketizer.max.forbid-nulls\",\"detail\":\"bucketizer.max.forbid-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.max.forbid-nulls` has the same behavior as `bucketizer.max`, use `bucketizer.max` instead.\\n\\nThe `bucketizer.max.forbid-nulls` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\nThe `bucketizer.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max.forbid-nulls\"},{\"name\":\"bucketizer.mean\",\"detail\":\"bucketizer.mean(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.mean` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean\"},{\"name\":\"bucketizer.mean.circular\",\"detail\":\"bucketizer.mean.circular( modulo:NUMBER ): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.mean.circular` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`bucketizer.mean.circular.exclude-nulls`](/doc/bucketizer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `bucketizer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular\"},{\"name\":\"bucketizer.mean.circular.exclude-nulls\",\"detail\":\"bucketizer.mean.circular.exclude-nulls( modulo:NUMBER ): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.mean.circular.exclude-nulls` has the same behavior as `bucketizer.mean.circular`, use `bucketizer.mean.circular` instead.\\n        \\nThe `bucketizer.mean.circular.exclude-nulls` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular.exclude-nulls\"},{\"name\":\"bucketizer.mean.exclude-nulls\",\"detail\":\"bucketizer.mean.exclude-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.mean.exclude-nulls` has the same behavior as `bucketizer.mean`, use `bucketizer.mean` instead.\\n \\nThe `bucketizer.mean.exclude-nulls` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.exclude-nulls\"},{\"name\":\"bucketizer.median\",\"detail\":\"bucketizer.median(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.median` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.median\"},{\"name\":\"bucketizer.median.forbid-nulls\",\"detail\":\"bucketizer.median.forbid-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.median.forbid-nulls` has the same behavior as `bucketizer.median`, use `bucketizer.median` instead.\\n\\nThe `bucketizer.median.forbid-nulls` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.4.0\",\"OPB64name\":\"bucketizer.median.forbid-nulls\"},{\"name\":\"bucketizer.min\",\"detail\":\"bucketizer.min(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.min` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min\"},{\"name\":\"bucketizer.min.forbid-nulls\",\"detail\":\"bucketizer.min.forbid-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.min.forbid-nulls` has the same behavior as `bucketizer.min`, use `bucketizer.min` instead.\\n\\nThe `bucketizer.min.forbid-nulls` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min.forbid-nulls\"},{\"name\":\"bucketizer.or\",\"detail\":\"bucketizer.or(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.or` function applies the logical operator **OR** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.or\"},{\"name\":\"bucketizer.percentile\",\"detail\":\"bucketizer.percentile( percentile:NUMBER ): bucketizer:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the bucket.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `percentile` Percentile to consider\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.percentile\"},{\"name\":\"bucketizer.rms\",\"detail\":\"bucketizer.rms(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.rms` function returns the root mean square of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are the last one encountered for each bucket.\\n\\nThe `bucketizer.rms` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.18\",\"OPB64name\":\"bucketizer.rms\"},{\"name\":\"bucketizer.sd\",\"detail\":\"bucketizer.sd( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd\"},{\"name\":\"bucketizer.sd.forbid-nulls\",\"detail\":\"bucketizer.sd.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.sd.forbid-nulls` has the same behavior as `bucketizer.sd`, use `bucketizer.sd` instead.\\n\\nThis bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd.forbid-nulls\"},{\"name\":\"bucketizer.sum\",\"detail\":\"bucketizer.sum(): bucketizer:AGGREGATOR\",\"documentation\":\"The `bucketizer.sum` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum\"},{\"name\":\"bucketizer.sum.forbid-nulls\",\"detail\":\"bucketizer.sum.forbid-nulls(): bucketizer:AGGREGATOR\",\"documentation\":\"**Deprecated**: `bucketizer.sum.forbid-nulls` has the same behavior as `bucketizer.sum`, use `bucketizer.sum` instead.\\n\\nThe `bucketizer.sum.forbid-nulls` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum.forbid-nulls\"},{\"name\":\"d\",\"detail\":\"d( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of days (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of days from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of days to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of days\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"d\"},{\"name\":\"e\",\"detail\":\"e(): eValue:DOUBLE\",\"documentation\":\"Alias of [E](/doc/GF).\\n\\nThe `e` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"OF\"},{\"name\":\"filler.interpolate\",\"detail\":\"filler.interpolate(): filler:FILLER\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with a linear interpolation of enclosing values in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading or trailing ticks as there is no possible interpolation.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.interpolate\"},{\"name\":\"filler.next\",\"detail\":\"filler.next(): filler:FILLER\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the next value in a Geo Time Series™.\\n\\nNote that this function will not fill missing trailing ticks as there is no next value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.next\"},{\"name\":\"filler.previous\",\"detail\":\"filler.previous(): filler:FILLER\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the previous value in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading ticks as there is no previous value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.previous\"},{\"name\":\"filler.trend\",\"detail\":\"filler.trend(): filler:FILLER\",\"documentation\":\"Pushes onto the stack a *filler* function which fills missing values with the centroid of the points computed by projecting trends from both sides of the missing point.\\n\\nNote that this function will fill all missing points.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.trend\"},{\"name\":\"filter.all.eq\",\"detail\":\"filter.all.eq( filter-value:LONG ): result:FILTER\\nfilter.all.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.all.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.all.eq( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.eq\"},{\"name\":\"filter.all.ge\",\"detail\":\"filter.all.ge( filter-value:LONG ): result:FILTER\\nfilter.all.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.all.ge( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ge\"},{\"name\":\"filter.all.gt\",\"detail\":\"filter.all.gt( filter-value:LONG ): result:FILTER\\nfilter.all.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.all.gt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.gt\"},{\"name\":\"filter.all.le\",\"detail\":\"filter.all.le( filter-value:LONG ): result:FILTER\\nfilter.all.le( filter-value:DOUBLE ): result:FILTER\\nfilter.all.le( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.le\"},{\"name\":\"filter.all.lt\",\"detail\":\"filter.all.lt( filter-value:LONG ): result:FILTER\\nfilter.all.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.all.lt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.lt\"},{\"name\":\"filter.all.ne\",\"detail\":\"filter.all.ne( filter-value:LONG ): result:FILTER\\nfilter.all.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.all.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.all.ne( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose every value does not equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ne\"},{\"name\":\"filter.any.eq\",\"detail\":\"filter.any.eq( filter-value:LONG ): result:FILTER\\nfilter.any.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.any.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.any.eq( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.eq\"},{\"name\":\"filter.any.ge\",\"detail\":\"filter.any.ge( filter-value:LONG ): result:FILTER\\nfilter.any.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.any.ge( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ge\"},{\"name\":\"filter.any.gt\",\"detail\":\"filter.any.gt( filter-value:LONG ): result:FILTER\\nfilter.any.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.any.gt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.gt\"},{\"name\":\"filter.any.le\",\"detail\":\"filter.any.le( filter-value:LONG ): result:FILTER\\nfilter.any.le( filter-value:DOUBLE ): result:FILTER\\nfilter.any.le( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.le\"},{\"name\":\"filter.any.lt\",\"detail\":\"filter.any.lt( filter-value:LONG ): result:FILTER\\nfilter.any.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.any.lt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.lt\"},{\"name\":\"filter.any.ne\",\"detail\":\"filter.any.ne( filter-value:LONG ): result:FILTER\\nfilter.any.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.any.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.any.ne( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose at least one value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ne\"},{\"name\":\"filter.byattr\",\"detail\":\"filter.byattr( filter:MAP ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose attributes match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.byattr\"},{\"name\":\"filter.byclass\",\"detail\":\"filter.byclass( filter:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose class name matches the filter parameter.\\n\\n@param `filter` The filter parameter is a **STRING**, if it starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.byclass\"},{\"name\":\"filter.bylabels\",\"detail\":\"filter.bylabels( filter:MAP ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bylabels\"},{\"name\":\"filter.bylabelsattr\",\"detail\":\"filter.bylabelsattr( filter:MAP ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose attributes or labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes or labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.bylabelsattr\"},{\"name\":\"filter.bymetadata\",\"detail\":\"filter.bymetadata( lgts:LIST<GTS> ): filter:FILTER\",\"documentation\":\"Filter GTSs by retaining those whose metadata **exactly** match at least one metadata from the given GTS list. \\n\\nThe metadata consists of the classname and labels.\\n\\n@param `lgts` List of GTSs to extract the metadata from.\\n\\n@param `filter` Filter to apply which will keep only GTSs with exact metadata matching.\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bymetadata\"},{\"name\":\"filter.byselector\",\"detail\":\"filter.byselector( selector:STRING ): result:FILTER\",\"documentation\":\"This filter allow to select GTS with a standard or an extended selector.\\n###### Standard selector: `classname{labelOrAttribute=x}`\\n- If classname match, `filter.byselector` looks into input labels to check if labelOrAttribute exists and equals x. If labelOrAttribute is not found among input labels, it looks into input attributes if the label exists and equals x.\\n###### Extended selector: `classname{labelname=x}{attributename=y}` matches if:\\n- classname matches\\n- input have labelname in its labels, and label value matches\\n- input have attributename in its labels, and attribute value matches\\n\\n###### Selectors example:\\n- `~.*{}` matches everything.\\n- `={}` matches only emtpy classnames, whatever the labels and attributes.\\n- `~.*{label=value}{} filter.byselector` is equivalent to `{ 'label' 'value' } filter.bylabels`.\\n- `~.*{}{attribute~value} filter.byselector` is equivalent to `{ 'attribute' '~value' } filter.byattr`.\\n\\n\\n@param `selector` The selector parameter. It could be a standard or an extended selector.\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.byselector\"},{\"name\":\"filter.bysize\",\"detail\":\"filter.bysize( min:LONG max:LONG ): result:FILTER\",\"documentation\":\"Filter GTSs by retaining those whose size is contained between specified bounds (inclusive).\\n\\n@param `min` The minimum size\\n\\n@param `max` The maximum size\\n\\n@param `result` The filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.bysize\"},{\"name\":\"filter.last.eq\",\"detail\":\"filter.last.eq( filter-value:LONG ): result:FILTER\\nfilter.last.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.last.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.last.eq( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.eq\"},{\"name\":\"filter.last.ge\",\"detail\":\"filter.last.ge( filter-value:LONG ): result:FILTER\\nfilter.last.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.last.ge( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ge\"},{\"name\":\"filter.last.gt\",\"detail\":\"filter.last.gt( filter-value:LONG ): result:FILTER\\nfilter.last.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.last.gt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.gt\"},{\"name\":\"filter.last.le\",\"detail\":\"filter.last.le( filter-value:LONG ): result:FILTER\\nfilter.last.le( filter-value:DOUBLE ): result:FILTER\\nfilter.last.le( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is less or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.le\"},{\"name\":\"filter.last.lt\",\"detail\":\"filter.last.lt( filter-value:LONG ): result:FILTER\\nfilter.last.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.last.lt( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value is less than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.lt\"},{\"name\":\"filter.last.ne\",\"detail\":\"filter.last.ne( filter-value:LONG ): result:FILTER\\nfilter.last.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.last.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.last.ne( filter-value:STRING ): result:FILTER\",\"documentation\":\"This filter function only selects the Geo Time Series™ whose last value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ne\"},{\"name\":\"filter.latencies\",\"detail\":\"filter.latencies( minLatency:LONG maxLatency:LONG options:LIST<STRING> ): filter:FILTER\",\"documentation\":\"Pushes onto the stack a *pseudo* FILTER which computes latencies in a network. It uses the [`FILTER`](/doc/FILTER) framework for conveniency but really returns new GTS.\\n\\nThe input Geo Time Series™ are assumed to have values which are fingerprints of packet payloads. The first GTS is assumed to be the *uplink* and all the other GTS the *downlinks*.\\n\\nThe ticks are the time at which a packet with the given fingerprint was observed.\\n\\nThe generated Geo Time Series™ will have the same ticks as the uplink one, except the values will be latencies instead of packet fingerprints.\\n\\nThe `filter.latencies` function accepts a number of options:\\n\\n| Option | Description |\\n|--------|-------------|\\n| uplink.latency.min | Compute minimum latency on the uplink. |\\n| uplink.latency.max | Compute maximum latency on the uplink. |\\n| downlink.latency.min | Compute minimum latency on each downlink. |\\n| downlink.latency.max | Compute maximum latency on each downlink. |\\n| downlink.matches | Compute the number of matches for each downlink. |\\n| downlinks.totalmatches | Computes the total number of matches across downlinks. |\\n| downlinks.bitsets | Computes a bitset of downlinks which saw the packet (limited to 64 downlinks). |\\n| downlinks.withmatches | Computes the number of downlinks with matches for the given packet. |\\n\\nThis pseudo FILTER is very specific to a networking use case, but it is a good demonstration of the power of WarpScript and its frameworks.\\n\\n@param `options` List of options, see above for their description.\\n\\n@param `maxLatency` Maximum allowable latency, packets with latency above this threshold are ignored.\\n\\n@param `minLatency` Minimum latency, packets with a latency below this threshold are ignored.\\n\\n@param `filter` Instance of `filter.latencies`.\\n\\n\",\"tags\":[\"filter\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.latencies\"},{\"name\":\"h\",\"detail\":\"h( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of hours (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of hours from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of hours to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of hours\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"h\"},{\"name\":\"m\",\"detail\":\"m( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of minutes (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of minutes from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of minutes to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of minutes\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"m\"},{\"name\":\"mapper.abs\",\"detail\":\"mapper.abs(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the absolute value of single value in a sliding window.\\n\\nThe `mapper.abs` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.abs\"},{\"name\":\"mapper.add\",\"detail\":\"mapper.add( constant:DOUBLE ): result:AGGREGATOR\\nmapper.add( constant:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function adds a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.add` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.add` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Value to add\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.add\"},{\"name\":\"mapper.and\",\"detail\":\"mapper.and(): result:AGGREGATOR\",\"documentation\":\"This mapper function applies the logical operator **AND** on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.and\"},{\"name\":\"mapper.ceil\",\"detail\":\"mapper.ceil(): result:AGGREGATOR\",\"documentation\":\"This mapper function rounds the single value in a sliding window to the closests greater **LONG**.\\n\\nThe `mapper.ceil` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.ceil\"},{\"name\":\"mapper.count\",\"detail\":\"mapper.count(): result:AGGREGATOR\",\"documentation\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count\"},{\"name\":\"mapper.count.exclude-nulls\",\"detail\":\"mapper.count.exclude-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.count.exclude-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.exclude-nulls\"},{\"name\":\"mapper.count.include-nulls\",\"detail\":\"mapper.count.include-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.count.include-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.include-nulls\"},{\"name\":\"mapper.count.nonnull\",\"detail\":\"mapper.count.nonnull(): result:AGGREGATOR\",\"documentation\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.nonnull\"},{\"name\":\"mapper.day\",\"detail\":\"mapper.day( timezone:STRING ): result:AGGREGATOR\\nmapper.day( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the day of the tick for which it is computed.\\n\\nThe `mapper.day` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n@param `timezone` Timezone to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.day\"},{\"name\":\"mapper.delta\",\"detail\":\"mapper.delta(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the delta between the last and first values (delta = last - first) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.delta` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does \\nnot return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.delta\"},{\"name\":\"mapper.dotproduct\",\"detail\":\"mapper.dotproduct( vector:LIST ): result:AGGREGATOR\",\"documentation\":\"The `mapper.dotproduct` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct\"},{\"name\":\"mapper.dotproduct.positive\",\"detail\":\"mapper.dotproduct.positive( vector:LIST ): result:AGGREGATOR\",\"documentation\":\"The `mapper.dotproduct.positive` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it sets all negative results to 0.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.positive\"},{\"name\":\"mapper.dotproduct.sigmoid\",\"detail\":\"mapper.dotproduct.sigmoid( vector:LIST ): result:AGGREGATOR\",\"documentation\":\"The `mapper.dotproduct.sigmoid` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the sigmoid of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.sigmoid\"},{\"name\":\"mapper.dotproduct.tanh\",\"detail\":\"mapper.dotproduct.tanh( vector:LIST ): result:AGGREGATOR\",\"documentation\":\"The `mapper.dotproduct.tanh` function consumes a vector as parameter (a **LIST* of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the \\n[hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_function) of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.tanh\"},{\"name\":\"mapper.eq\",\"detail\":\"mapper.eq( parameter:LONG ): result:AGGREGATOR\\nmapper.eq( parameter:DOUBLE ): result:AGGREGATOR\\nmapper.eq( parameter:BOOLEAN ): result:AGGREGATOR\\nmapper.eq( parameter:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.eq` function can be applied to data of any type.\\n\\nThe `mapper.eq` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.eq\"},{\"name\":\"mapper.eq.elev\",\"detail\":\"mapper.eq.elev( parameter:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is equal to a given value.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.eq.elev` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.elev\"},{\"name\":\"mapper.eq.hhcode\",\"detail\":\"mapper.eq.hhcode( parameter:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is equal to a given value.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.eq.hhcode` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.hhcode\"},{\"name\":\"mapper.eq.lat\",\"detail\":\"mapper.eq.lat( parameter:LONG ): result:AGGREGATOR\\nmapper.eq.lat( parameter:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is equal to a given value.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.eq.lat` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lat\"},{\"name\":\"mapper.eq.lon\",\"detail\":\"mapper.eq.lon( parameter:LONG ): result:AGGREGATOR\\nmapper.eq.lon( parameter:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is equal to a given value.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.eq.lon` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lon\"},{\"name\":\"mapper.eq.tick\",\"detail\":\"mapper.eq.tick( parameter:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is equal to a given value.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.eq.tick` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.tick\"},{\"name\":\"mapper.exp\",\"detail\":\"mapper.exp( constant:LONG ): result:AGGREGATOR\\nmapper.exp( constant:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function raises a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.exp` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.exp` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\n> ## Note\\n> The `mapper.exp` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n>\\n> So you are looking for a way to apply the exponential function, ex, to a series of Geo Time Series™. It’s very easy to do it using `mapper.exp` and the\\n> [`e`](/doc/OF) constant.\\n\\n@param `result` Mapper to apply\\n\\n@param `constant` Constant to use\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.exp\"},{\"name\":\"mapper.finite\",\"detail\":\"mapper.finite(): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns its input value only if it is finite (*i.e.* a non DOUBLE or a DOUBLE which is neither NaN nor Infinity).\\n\\n@param `result` Instance of mapper.finite.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.finite\"},{\"name\":\"mapper.first\",\"detail\":\"mapper.first(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.first` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.first\"},{\"name\":\"mapper.floor\",\"detail\":\"mapper.floor(): result:AGGREGATOR\",\"documentation\":\"This mapper function rounds the *single value* in a sliding window to the closests lower **LONG**.\\n\\nThe `mapper.floor` function can be applied to data of type **LONG** or **DOUBLE**.      \\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.floor\"},{\"name\":\"mapper.ge\",\"detail\":\"mapper.ge( threshold:LONG ): result:AGGREGATOR\\nmapper.ge( threshold:STRING ): result:AGGREGATOR\\nmapper.ge( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ge` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.ge` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ge\"},{\"name\":\"mapper.ge.elev\",\"detail\":\"mapper.ge.elev( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ge.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.elev\"},{\"name\":\"mapper.ge.hhcode\",\"detail\":\"mapper.ge.hhcode( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ge.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.hhcode\"},{\"name\":\"mapper.ge.lat\",\"detail\":\"mapper.ge.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.ge.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ge.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lat\"},{\"name\":\"mapper.ge.lon\",\"detail\":\"mapper.ge.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.ge.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ge.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lon\"},{\"name\":\"mapper.ge.tick\",\"detail\":\"mapper.ge.tick( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ge.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.tick\"},{\"name\":\"mapper.geo.approximate\",\"detail\":\"mapper.geo.approximate( resolution:LONG ): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack a mapper instance which will transform the input Geo Time Series™ by approximating the location to the givnen resolution.\\n\\nApproximation is done by clearing lower bits of the location [HHCode](https://en.wikipedia.org/wiki/HHCode). At resolution `R`, the lower `64 - 2R` bits are cleared.\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\n\\n\\n@param `resolution` HHCode resolution at which to approximate the locations. Resoluion is an even number between 2 (coarsest) and 32 (finest).\\n\\n@param `result` Instance of mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.approximate\"},{\"name\":\"mapper.geo.clear\",\"detail\":\"mapper.geo.clear(): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack a mapper which will discard location and elevation information when applied to a Geo Time Series™.\\n\\nThis mapper can only be applied to single values\\n\\n@param `result` Instance of the `mapper.geo.clear` mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.geo.clear\"},{\"name\":\"mapper.geo.fence\",\"detail\":\"mapper.geo.fence( zone:GEOSHAPE ): result:AGGREGATOR\",\"documentation\":\"This function produces a `mapper` which outputs a `BOOLEAN` for each point with an associated location. The value of the output is `true` if the location is inside the provided `GEOSHAPE` and `false` otherwise.\\nThe geo zone can be defined in [WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using [`GEO.WKT`](/doc/GEO.WKT) or in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) using [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `zone` Geographical zone.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"2.7.1\",\"OPB64name\":\"mapper.geo.fence\"},{\"name\":\"mapper.geo.outside\",\"detail\":\"mapper.geo.outside( geoZone:GEOSHAPE ): result:AGGREGATOR\",\"documentation\":\"This mapper filters the Geo Time Series™, keeping only the points outside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.outside\"},{\"name\":\"mapper.geo.within\",\"detail\":\"mapper.geo.within( geoZone:GEOSHAPE ): result:AGGREGATOR\",\"documentation\":\"This mapper filters the Geo Time Series™, keeping only the points inside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.within\"},{\"name\":\"mapper.gt\",\"detail\":\"mapper.gt( threshold:LONG ): result:AGGREGATOR\\nmapper.gt( threshold:STRING ): result:AGGREGATOR\\nmapper.gt( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is greater than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.gt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.gt` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.gt\"},{\"name\":\"mapper.gt.elev\",\"detail\":\"mapper.gt.elev( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is greater than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.gt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.elev\"},{\"name\":\"mapper.gt.hhcode\",\"detail\":\"mapper.gt.hhcode( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.gt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.hhcode\"},{\"name\":\"mapper.gt.lat\",\"detail\":\"mapper.gt.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.gt.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is greater than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.gt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lat\"},{\"name\":\"mapper.gt.lon\",\"detail\":\"mapper.gt.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.gt.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is greater than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.gt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lon\"},{\"name\":\"mapper.gt.tick\",\"detail\":\"mapper.gt.tick( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is greater than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.gt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.tick\"},{\"name\":\"mapper.hdist\",\"detail\":\"mapper.hdist(): hdistMapper:AGGREGATOR\",\"documentation\":\"The `mapper.hdist` function computes the total distance traveled while going through the points in the sliding window in chronological order. This distance is in meters.\\n\\nThe distance used is the loxodromic distance aka rhumb line. As a consequence, elevation is not taken into account in the distance.\\n\\nIf a point has no position in the sliding window, it is ignored.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe `mapper.hdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `hdistMapper` A function which can be used in a mapper.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hdist\"},{\"name\":\"mapper.highest\",\"detail\":\"mapper.highest(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the value associated with the highest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the most recent is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.highest\"},{\"name\":\"mapper.hour\",\"detail\":\"mapper.hour( timezone:STRING ): result:AGGREGATOR\\nmapper.hour( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the hour of the tick for which it is computed.\\n\\nThe `mapper.hour` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.hour\"},{\"name\":\"mapper.hspeed\",\"detail\":\"mapper.hspeed(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the horizontal speed along the path traveled in the sliding window.\\n\\nThe distance is computed by summing the distances along the rhumb line between two consecutive locations.\\n\\nIf there is only one tick in the sliding window, the speed is 0.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.hspeed` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hspeed\"},{\"name\":\"mapper.join\",\"detail\":\"mapper.join( separator:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join\"},{\"name\":\"mapper.join.forbid-nulls\",\"detail\":\"mapper.join.forbid-nulls( separator:STRING ): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.join.forbid-nulls` has the same behavior as `mapper.join`, use `mapper.join` instead.\\n\\nThis mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join.forbid-nulls\"},{\"name\":\"mapper.kernel.cosine\",\"detail\":\"mapper.kernel.cosine( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [cosine kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics.\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.cosine\"},{\"name\":\"mapper.kernel.epanechnikov\",\"detail\":\"mapper.kernel.epanechnikov( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using an [epanechnikov kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.epanechnikov\"},{\"name\":\"mapper.kernel.gaussian\",\"detail\":\"mapper.kernel.gaussian( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [gaussian kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.gaussian\"},{\"name\":\"mapper.kernel.logistic\",\"detail\":\"mapper.kernel.logistic( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [logistic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.logistic\"},{\"name\":\"mapper.kernel.quartic\",\"detail\":\"mapper.kernel.quartic( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [quartic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.quartic\"},{\"name\":\"mapper.kernel.silverman\",\"detail\":\"mapper.kernel.silverman( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [silverman kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.silverman\"},{\"name\":\"mapper.kernel.triangular\",\"detail\":\"mapper.kernel.triangular( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triangular kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triangular\"},{\"name\":\"mapper.kernel.tricube\",\"detail\":\"mapper.kernel.tricube( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [tricube kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.tricube\"},{\"name\":\"mapper.kernel.triweight\",\"detail\":\"mapper.kernel.triweight( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triweight kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triweight\"},{\"name\":\"mapper.kernel.uniform\",\"detail\":\"mapper.kernel.uniform( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"documentation\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [uniform kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.uniform\"},{\"name\":\"mapper.last\",\"detail\":\"mapper.last(): result:AGGREGATOR\",\"documentation\":\"This [`mapper`](/doc/MAP) function returns the last value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.last` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.last\"},{\"name\":\"mapper.le\",\"detail\":\"mapper.le( threshold:DOUBLE ): result:AGGREGATOR\\nmapper.le( threshold:LONG ): result:AGGREGATOR\\nmapper.le( threshold:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.le` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.le` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.le\"},{\"name\":\"mapper.le.elev\",\"detail\":\"mapper.le.elev( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.le.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.elev\"},{\"name\":\"mapper.le.hhcode\",\"detail\":\"mapper.le.hhcode( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.le.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.hhcode\"},{\"name\":\"mapper.le.lat\",\"detail\":\"mapper.le.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.le.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.le.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lat\"},{\"name\":\"mapper.le.lon\",\"detail\":\"mapper.le.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.le.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.le.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lon\"},{\"name\":\"mapper.le.tick\",\"detail\":\"mapper.le.tick( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.le.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.tick\"},{\"name\":\"mapper.log\",\"detail\":\"mapper.log( constant:DOUBLE ): result:AGGREGATOR\\nmapper.log( constant:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function takes the log of the **single value** in a sliding window in the base used as parameter to `mapper.log`.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.log` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.log` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\nThe `mapper.log` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n\\n@param `constant` Constant parameter\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.log\"},{\"name\":\"mapper.lowest\",\"detail\":\"mapper.lowest(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the value associated with the lowest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the one appearing first chronologically is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.lowest\"},{\"name\":\"mapper.lt\",\"detail\":\"mapper.lt( threshold:DOUBLE ): result:AGGREGATOR\\nmapper.lt( threshold:LONG ): result:AGGREGATOR\\nmapper.lt( threshold:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is less than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.lt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.lt` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.lt\"},{\"name\":\"mapper.lt.elev\",\"detail\":\"mapper.lt.elev( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is less than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.lt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.elev\"},{\"name\":\"mapper.lt.hhcode\",\"detail\":\"mapper.lt.hhcode( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.lt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.hhcode\"},{\"name\":\"mapper.lt.lat\",\"detail\":\"mapper.lt.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.lt.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is less than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.lt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lat\"},{\"name\":\"mapper.lt.lon\",\"detail\":\"mapper.lt.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.lt.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is less than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.lt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lon\"},{\"name\":\"mapper.lt.tick\",\"detail\":\"mapper.lt.tick( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is less than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.lt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.tick\"},{\"name\":\"mapper.mad\",\"detail\":\"mapper.mad(): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) over each sliding window.\\n\\nThe returned location is the median of all the locations in the sliding window, and the returned elevation is the median of all the elevations in the window.\\n\\n@param `result` Instance of `mapper.mad`.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.0\",\"OPB64name\":\"mapper.mad\"},{\"name\":\"mapper.max\",\"detail\":\"mapper.max(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max\"},{\"name\":\"mapper.max.forbid-nulls\",\"detail\":\"mapper.max.forbid-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.max.forbid-nulls` has the same behavior as `mapper.max`, use `mapper.max` instead.\\n\\nThis mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max.forbid-nulls\"},{\"name\":\"mapper.max.x\",\"detail\":\"mapper.max.x( constant:DOUBLE ): result:AGGREGATOR\\nmapper.max.x( constant:LONG ): result:AGGREGATOR\\nmapper.max.x( constant:STRING ): result:AGGREGATOR\\nmapper.max.x( constant:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the max between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.max.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.max.x\"},{\"name\":\"mapper.mean\",\"detail\":\"mapper.mean(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean\"},{\"name\":\"mapper.mean.circular\",\"detail\":\"mapper.mean.circular( modulo:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`mapper.mean.circular.exclude-nulls`](/doc/mapper.mean.circular.exclude-nulls) if your sliding windows may contain nulls.\\n\\nThe `mapper.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular\"},{\"name\":\"mapper.mean.circular.exclude-nulls\",\"detail\":\"mapper.mean.circular.exclude-nulls( modulo:NUMBER ): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.mean.circular.exclude-nulls` has the same behavior as `mapper.mean.circular`, use `mapper.mean.circular` instead.\\n\\nThis function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular.exclude-nulls` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `mapper.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular.exclude-nulls\"},{\"name\":\"mapper.mean.exclude-nulls\",\"detail\":\"mapper.mean.exclude-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.mean.exclude-nulls` has the same behavior as `mapper.mean`, use `mapper.mean` instead.\\n        \\nThis mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.exclude-nulls\"},{\"name\":\"mapper.median\",\"detail\":\"mapper.median(): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.median\"},{\"name\":\"mapper.median.forbid-nulls\",\"detail\":\"mapper.median.forbid-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.median.forbid-nulls` has the same behavior as `mapper.median`, use `mapper.median` instead.\\n\\nPushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median.forbid-nulls`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"2.4.0\",\"OPB64name\":\"mapper.median.forbid-nulls\"},{\"name\":\"mapper.min\",\"detail\":\"mapper.min(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min\"},{\"name\":\"mapper.min.forbid-nulls\",\"detail\":\"mapper.min.forbid-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.min.forbid-nulls` has the same behavior as `mapper.min`, use `mapper.min` instead.\\n\\nThis mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min.forbid-nulls\"},{\"name\":\"mapper.min.x\",\"detail\":\"mapper.min.x( constant:DOUBLE ): result:AGGREGATOR\\nmapper.min.x( constant:LONG ): result:AGGREGATOR\\nmapper.min.x( constant:STRING ): result:AGGREGATOR\\nmapper.min.x( constant:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the min between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.min.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.min.x\"},{\"name\":\"mapper.minute\",\"detail\":\"mapper.minute( timezone:STRING ): result:AGGREGATOR\\nmapper.minute( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the minute of the tick for which it is computed.\\n\\nThe `mapper.minute` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.minute\"},{\"name\":\"mapper.mod\",\"detail\":\"mapper.mod( modulus:NUMBER ): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the remainder of a value given a modulus.\\n\\nThis MAPPER can only be applied to a single value.\\n\\n@param `modulus` Modulus to consider when computing the remainder.\\n\\n@param `result` Instance of `mapper.mod`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"mapper.mod\"},{\"name\":\"mapper.month\",\"detail\":\"mapper.month( timezone:STRING ): result:AGGREGATOR\\nmapper.month( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the month of the tick for which it is computed.\\n\\nThe `mapper.month` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.month\"},{\"name\":\"mapper.mul\",\"detail\":\"mapper.mul( constant:LONG ): result:AGGREGATOR\\nmapper.mul( constant:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function multiplies by a constant the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.mul` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.mul` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.mul\"},{\"name\":\"mapper.ne\",\"detail\":\"mapper.ne( parameter:LONG ): result:AGGREGATOR\\nmapper.ne( parameter:DOUBLE ): result:AGGREGATOR\\nmapper.ne( parameter:BOOLEAN ): result:AGGREGATOR\\nmapper.ne( parameter:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first value in a sliding window which is not equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ne` function can be applied to data of any type.\\n\\nThe `mapper.ne` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ne\"},{\"name\":\"mapper.ne.elev\",\"detail\":\"mapper.ne.elev( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first elevation in a sliding window which is not equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ne.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.elev\"},{\"name\":\"mapper.ne.hhcode\",\"detail\":\"mapper.ne.hhcode( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is not equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ne.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.hhcode\"},{\"name\":\"mapper.ne.lat\",\"detail\":\"mapper.ne.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.ne.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first latitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ne.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lat\"},{\"name\":\"mapper.ne.lon\",\"detail\":\"mapper.ne.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.ne.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first longitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ne.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lon\"},{\"name\":\"mapper.ne.tick\",\"detail\":\"mapper.ne.tick( threshold:LONG ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the first tick in a sliding window which is not equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ne.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.tick\"},{\"name\":\"mapper.npdf\",\"detail\":\"mapper.npdf( mu:DOUBLE sigma:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the probability of a value given a normal distribution.\\n\\n@param `mu` Mean of the normal (Gaussian) distribution to consider.\\n\\n@param `sigma` Standard deviation of the normal (Gaussian) distribution to consider.\\n\\n@param `result` Instance of `mapper.npdf`.\\n\\n\",\"tags\":[\"gts\",\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.npdf\"},{\"name\":\"mapper.or\",\"detail\":\"mapper.or(): result:AGGREGATOR\",\"documentation\":\"This mapper function applies the logical operator OR on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.or\"},{\"name\":\"mapper.parsedouble\",\"detail\":\"mapper.parsedouble( tag:STRING ): result:AGGREGATOR\",\"documentation\":\"This mapper function converts a **STRING** single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.parsedouble` function can be applied to data of type **STRING**.\\n\\nThis function expects a [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) \\nparameter in top of the mapper. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `tag` [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) parameter. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.5\",\"OPB64name\":\"mapper.parsedouble\"},{\"name\":\"mapper.percentile\",\"detail\":\"mapper.percentile( percentile:NUMBER ): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the sliding window.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `percentile` Percentile to consider.\\n\\n@param `result` Instance of `mapper.percentile`.\\n\\n\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.percentile\"},{\"name\":\"mapper.pow\",\"detail\":\"mapper.pow( constant:LONG ): result:AGGREGATOR\\nmapper.pow( constant:DOUBLE ): result:AGGREGATOR\",\"documentation\":\"This mapper function raises the single value in a sliding window to a constant power.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.pow` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.pow` function must be parameterized with the constant.\\n\\nThe result is always of type DOUBLE.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.pow\"},{\"name\":\"mapper.product\",\"detail\":\"mapper.product(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the product of all the values found in the sliding window.\\n\\nThe `mapper.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\nOn [bucketized](/doc/BUCKETIZE) Geo Time Series™, it is necessary to fill gaps with [`FILLVALUE`](/doc/FILLVALUE)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.product\"},{\"name\":\"mapper.rate\",\"detail\":\"mapper.rate(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the rate of change between the first and last values (rate = (last - first) / (lastick - firsttick)) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.rate` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value. If the\\nsliding window contains less than 2 values, the rate of change will be 0.0.\\n\\nThe rate of change is expressed in units per second.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.rate\"},{\"name\":\"mapper.replace\",\"detail\":\"mapper.replace( constant:LONG ): result:AGGREGATOR\\nmapper.replace( constant:DOUBLE ): result:AGGREGATOR\\nmapper.replace( constant:STRING ): result:AGGREGATOR\\nmapper.replace( constant:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This mapper function replaces windows with at least one value with a constant. The location and elevation returned are those associated with the most \\nrecent value in the sliding window.\\n\\n@param `constant` constant used for replacement\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.replace\"},{\"name\":\"mapper.rms\",\"detail\":\"mapper.rms(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the root mean square of all the values found in each sliding window. The associated location is the last one of the window.\\n\\nThe `mapper.rms` function can only be applied to values of type **LONG** or **DOUBLE**.\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.18\",\"OPB64name\":\"mapper.rms\"},{\"name\":\"mapper.round\",\"detail\":\"mapper.round(): result:AGGREGATOR\",\"documentation\":\"This mapper function rounds the *single value* in a sliding window to the closests **LONG**.\\n\\nThe `mapper.round` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.round\"},{\"name\":\"mapper.sd\",\"detail\":\"mapper.sd( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd\"},{\"name\":\"mapper.sd.forbid-nulls\",\"detail\":\"mapper.sd.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.sd.forbid-nulls` has the same behavior as `mapper.sd`, use `mapper.sd` instead.\\n\\nThis mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd.forbid-nulls\"},{\"name\":\"mapper.second\",\"detail\":\"mapper.second( timezone:STRING ): result:AGGREGATOR\\nmapper.second( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the second of the tick for which it is computed.\\n\\nThe `mapper.second` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.second\"},{\"name\":\"mapper.sigmoid\",\"detail\":\"mapper.sigmoid(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the sigmoid of *single value* in a sliding window.\\n\\nThe `mapper.sigmoid` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sigmoid\"},{\"name\":\"mapper.sqrt\",\"detail\":\"mapper.sqrt(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the square root of the single value in a sliding window.\\n\\nFor negative numerics, this mapper returns **NaN**. For string values, this mapper returns 0.\\n\\nThe associated location and elevation are those of the single value.\\n\\n> ### Note\\n> The `mapper.sqrt` mapper needs a single value sliding window, i.e. pre-window and post-window to 0\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.2.11\",\"OPB64name\":\"mapper.sqrt\"},{\"name\":\"mapper.sum\",\"detail\":\"mapper.sum(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum\"},{\"name\":\"mapper.sum.forbid-nulls\",\"detail\":\"mapper.sum.forbid-nulls(): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.sum.forbid-nulls` has the same behavior as `mapper.sum`, use `mapper.sum` instead.\\n\\nThis mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum.forbid-nulls\"},{\"name\":\"mapper.tanh\",\"detail\":\"mapper.tanh(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the hyperbolic tangent of *single value* in a sliding window.\\n\\nThe `mapper.tanh` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tanh\"},{\"name\":\"mapper.tick\",\"detail\":\"mapper.tick(): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the tick for which it is computed. The associated location and elevation are those of the selected value.\\n\\nThe `mapper.tick` function can be applied to values of any type.        \\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.tick\"},{\"name\":\"mapper.toboolean\",\"detail\":\"mapper.toboolean(): result:AGGREGATOR\",\"documentation\":\"This mapper function converts the single value in a sliding window to **BOOLEAN**.\\n\\nThe `mapper.toboolean` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.toboolean\"},{\"name\":\"mapper.todouble\",\"detail\":\"mapper.todouble(): result:AGGREGATOR\",\"documentation\":\"This mapper function converts the single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.todouble` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.todouble\"},{\"name\":\"mapper.tolong\",\"detail\":\"mapper.tolong(): result:AGGREGATOR\",\"documentation\":\"This mapper function converts the single value in a sliding window to **LONG**.\\n\\nThe `mapper.tolong` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tolong\"},{\"name\":\"mapper.tostring\",\"detail\":\"mapper.tostring(): result:AGGREGATOR\",\"documentation\":\"This mapper function converts the single value in a sliding window to **STRING**.\\n\\nThe `mapper.tostring` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tostring\"},{\"name\":\"mapper.truecourse\",\"detail\":\"mapper.truecourse(): result:AGGREGATOR\",\"documentation\":\"Pushes onto the stack a mapper which will compute the initial [true course]http://www.edwilliams.org/avform.htm#Crs) on a great circle from the first to the last datapoint in the sliding window.\\n\\nThe location and elevation of the result is that of the tick being considered.\\n\\n@param `result` Instance of mapper.truecourse.\\n\\n\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.truecourse\"},{\"name\":\"mapper.var\",\"detail\":\"mapper.var( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var\"},{\"name\":\"mapper.var.forbid-nulls\",\"detail\":\"mapper.var.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"documentation\":\"**Deprecated**: `mapper.var.forbid-nulls` has the same behavior as `mapper.var`, use `mapper.var` instead.\\n\\nThis mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var.forbid-nulls\"},{\"name\":\"mapper.vdist\",\"detail\":\"mapper.vdist(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the total distance traveled in the vertical plane in the sliding window.\\n\\nThe distance is computed by summing the distances between consecutive elevations (this differs from the computation done in [`mapper.vspeed`](/doc/mapper.vspeed))\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed distance is expressed in meters.\\n\\nThe `mapper.vdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vdist\"},{\"name\":\"mapper.vspeed\",\"detail\":\"mapper.vspeed(): result:AGGREGATOR\",\"documentation\":\"This mapper function computes the vertical speed between the first and last readings of the sliding window. It does not compute the speed based on the total\\nvertical distance traveled in the sliding window, it only considers its extrema (it differs significantly of what is done for horizontal speed in\\n[`mapper.hspeed`](/doc/mapper.hspeed)), thus the result can be positive or negative.\\n\\nIf one of the extrema of the sliding window has no elevation, no value is returned.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.vspeed` function can be applied to data of any type since it only considers elevations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vspeed\"},{\"name\":\"mapper.weekday\",\"detail\":\"mapper.weekday( timezone:STRING ): result:AGGREGATOR\\nmapper.weekday( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the day of the week of the tick for which it is computed.\\n\\nThe `mapper.weekday` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.weekday\"},{\"name\":\"mapper.year\",\"detail\":\"mapper.year( timezone:STRING ): result:AGGREGATOR\\nmapper.year( offset:NUMBER ): result:AGGREGATOR\",\"documentation\":\"This mapper function returns the year of the tick for which it is computed.\\n\\nThe `mapper.year` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.year\"},{\"name\":\"max.tick.sliding.window\",\"detail\":\"max.tick.sliding.window(): max:LONG\",\"documentation\":\"Pushes onto the stack [`MAXLONG`](/doc/MAXLONG) divided by 2, to serve as the maximum number of ticks left or right of the current tick in a [`MAP`](/doc/MAP) sliding window.\\n\\nGiven that a Geo Time Series™ can have no more than 2**32 datapoints, this value is sufficient to cover the whole GTS left or right of the current tick.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.tick.sliding.window\"},{\"name\":\"max.time.sliding.window\",\"detail\":\"max.time.sliding.window(): max:LONG\",\"documentation\":\"Pushes onto the stack half of the minimum LONG value, to serve as a *pre* or *post* extension of a [`MAP`](/doc/MAP) sliding window in time units.\\n\\nThis value spans a lot of time but may not be enough to cover the entirety of a GTS.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.time.sliding.window\"},{\"name\":\"ms\",\"detail\":\"ms( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of milliseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of milliseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of milliseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of milliseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ms\"},{\"name\":\"ns\",\"detail\":\"ns( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of nanoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of nanoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of nanoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of nanoseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ns\"},{\"name\":\"op.add\",\"detail\":\"op.add(): op:OPERATOR\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter Geo Time Series™.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator forbids null values, *i.e.* if a `null` is encountered, then there will be no result for the given tick.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.add\"},{\"name\":\"op.add.ignore-nulls\",\"detail\":\"op.add.ignore-nulls(): op:OPERATOR\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter GTS.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.add.ignore-nulls\"},{\"name\":\"op.and\",\"detail\":\"op.and(): op:OPERATOR\",\"documentation\":\"To apply an `op.and` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and\"},{\"name\":\"op.and.ignore-nulls\",\"detail\":\"op.and.ignore-nulls(): op:OPERATOR\",\"documentation\":\"To apply an `op.and.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and.ignore-nulls` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and.ignore-nulls\"},{\"name\":\"op.div\",\"detail\":\"op.div(): op:OPERATOR\",\"documentation\":\"To apply an `op.div` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.div is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.div` operation can only operate on equivalence classes which have two GTS (if the equivalence class has more than two GTS, there is no result guaranted). It will divide at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.div\"},{\"name\":\"op.eq\",\"detail\":\"op.eq(): op:OPERATOR\",\"documentation\":\"To apply an `op.eq` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.eq is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.eq` operation will check for equality at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.eq\"},{\"name\":\"op.ge\",\"detail\":\"op.ge(): op:OPERATOR\",\"documentation\":\"To apply an `op.ge` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ge` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ge` operation will check at each tick if the value of the current GTS is greater or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ge\"},{\"name\":\"op.gt\",\"detail\":\"op.gt(): op:OPERATOR\",\"documentation\":\"To apply an `op.gt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.gt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.gt` operation will check at each tick if the value of the current GTS is greater than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.gt\"},{\"name\":\"op.le\",\"detail\":\"op.le(): op:OPERATOR\",\"documentation\":\"To apply an `op.le` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.le` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.le` operation will check at each tick if the value of the current GTS is lesser or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.le\"},{\"name\":\"op.lt\",\"detail\":\"op.lt(): op:OPERATOR\",\"documentation\":\"To apply an `op.lt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.lt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.lt` operation will check at each tick if the value of the current GTS is lesser than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.lt\"},{\"name\":\"op.mask\",\"detail\":\"op.mask(): op:OPERATOR\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), retains datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mask\"},{\"name\":\"op.mul\",\"detail\":\"op.mul(): op:OPERATOR\",\"documentation\":\"To apply an `op.mul` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mul\"},{\"name\":\"op.mul.ignore-nulls\",\"detail\":\"op.mul.ignore-nulls(): op:OPERATOR\",\"documentation\":\"To apply an `op.mul.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul.ignore-nulls` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.mul.ignore-nulls\"},{\"name\":\"op.ne\",\"detail\":\"op.ne(): op:OPERATOR\",\"documentation\":\"To apply an `op.ne` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ne` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ne` operation will check for inequality at each tick all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ne\"},{\"name\":\"op.negmask\",\"detail\":\"op.negmask(): op:OPERATOR\",\"documentation\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), removes datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The operator instance.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.negmask\"},{\"name\":\"op.or\",\"detail\":\"op.or(): op:OPERATOR\",\"documentation\":\"To apply an `op.or` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or\"},{\"name\":\"op.or.ignore-nulls\",\"detail\":\"op.or.ignore-nulls(): op:OPERATOR\",\"documentation\":\"To apply an `op.or.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or.ignore-nulls` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or.ignore-nulls\"},{\"name\":\"op.sub\",\"detail\":\"op.sub(): op:OPERATOR\",\"documentation\":\"To apply an `op.sub` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.sub` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe sub operator can only operate on equivalence classes which have **exactly two GTS**. It will substract at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.sub\"},{\"name\":\"pi\",\"detail\":\"pi(): pi:DOUBLE\",\"documentation\":\"Alias of [PI](/doc/J3Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"R5Z\"},{\"name\":\"ps\",\"detail\":\"ps( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of picoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of picoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of picoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of picoseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ps\"},{\"name\":\"reducer.and\",\"detail\":\"reducer.and(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.and` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and\"},{\"name\":\"reducer.and.exclude-nulls\",\"detail\":\"reducer.and.exclude-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.and.exclude-nulls` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ \\nwhich are in the same equivalence class, excluding nulls from the computation.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, \\nthe current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and.exclude-nulls\"},{\"name\":\"reducer.argmax\",\"detail\":\"reducer.argmax( label:STRING maximum:LONG ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.argmax` function outputs for each tick, the tick and the concatenation separated by ‘,’ of the values of the labels for which the\\nvalue is the maximum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the maximum to report (use 0 to report all), and a **STRING**\\nparameter to choose on which label it operates.\\n\\n@param `maximum` Maximum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmax\"},{\"name\":\"reducer.argmin\",\"detail\":\"reducer.argmin( label:STRING minimum:LONG ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.argmin` function outputs for each tick, the tick and the concatenation separated by ‘,’ \\nwith the values of the labels for which the value is the minimum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the minimum to report (use 0 to report all), and a **STRING** \\nparameter to choose on which label it operates.\\n\\n@param `minimum` Minimum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmin\"},{\"name\":\"reducer.count\",\"detail\":\"reducer.count(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.count` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe include null version, [`reducer.count.include-nulls`](/doc/reducer.count.include-nulls), will include null values when computing the count. The exclude null version, \\n[`reducer.count.exclude-nulls`](/doc/reducer.count.exclude-nulls), will exclude null values when computing the count.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count\"},{\"name\":\"reducer.count.exclude-nulls\",\"detail\":\"reducer.count.exclude-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.count.exclude-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.exclude-nulls\"},{\"name\":\"reducer.count.include-nulls\",\"detail\":\"reducer.count.include-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.count.include-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are included.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.include-nulls\"},{\"name\":\"reducer.count.nonnull\",\"detail\":\"reducer.count.nonnull(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.count.nonnull` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.nonnull\"},{\"name\":\"reducer.join\",\"detail\":\"reducer.join( separator:STRING ): reducer:AGGREGATOR\",\"documentation\":\"The 'reducer.join' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will exclude all null values when computing the join.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join\"},{\"name\":\"reducer.join.forbid-nulls\",\"detail\":\"reducer.join.forbid-nulls( separator:STRING ): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.join.nonnull`](/doc/reducer.join.nonnull).\\n\\nThe 'reducer.join.forbid-nulls' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.forbid-nulls\"},{\"name\":\"reducer.join.nonnull\",\"detail\":\"reducer.join.nonnull( separator:STRING ): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.join.forbid-nulls`](/doc/reducer.join.forbid-nulls).\\n\\nThe 'reducer.join.nonnull' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.nonnull\"},{\"name\":\"reducer.join.urlencoded\",\"detail\":\"reducer.join.urlencoded( separator:STRING ): reducer:AGGREGATOR\",\"documentation\":\"The 'reducer.join.urlencoded' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) charset.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.urlencoded\"},{\"name\":\"reducer.mad\",\"detail\":\"reducer.mad(): reducer:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) for each ticks. Null values are removed before computing the MAD for each ticks.\\n\\nThe returned location is the median of all the locations and the returned elevation is the median of all the elevations.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.0\",\"OPB64name\":\"reducer.mad\"},{\"name\":\"reducer.max\",\"detail\":\"reducer.max(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.max` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will exclude all null values when computing the maximum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max\"},{\"name\":\"reducer.max.forbid-nulls\",\"detail\":\"reducer.max.forbid-nulls(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.max.nonnull`](/doc/reducer.max.nonnull).\\n\\nThe `reducer.max.forbid-nulls` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.forbid-nulls\"},{\"name\":\"reducer.max.nonnull\",\"detail\":\"reducer.max.nonnull(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.max.forbid-nulls`](/doc/reducer.max.forbid-nulls).\\n\\nThe `reducer.max.nonnull` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.nonnull\"},{\"name\":\"reducer.mean\",\"detail\":\"reducer.mean(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.mean` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean\"},{\"name\":\"reducer.mean.circular\",\"detail\":\"reducer.mean.circular( modulo:NUMBER ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.mean.circular` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`reducer.mean.circular.exclude-nulls`](/doc/reducer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `reducer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular\"},{\"name\":\"reducer.mean.circular.exclude-nulls\",\"detail\":\"reducer.mean.circular.exclude-nulls( modulo:NUMBER ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.mean.circular.exclude-nulls` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `reducer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular.exclude-nulls\"},{\"name\":\"reducer.mean.exclude-nulls\",\"detail\":\"reducer.mean.exclude-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.mean.exclude-nulls` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will exclude all null values when computing the mean.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.exclude-nulls\"},{\"name\":\"reducer.median\",\"detail\":\"reducer.median(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.median` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.median\"},{\"name\":\"reducer.median.forbid-nulls\",\"detail\":\"reducer.median.forbid-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.median.forbid-nulls` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value, ie ticks do not match between Geo Times Series™ in the same equivalence class, it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"2.4.0\",\"OPB64name\":\"reducer.median.forbid-nulls\"},{\"name\":\"reducer.min\",\"detail\":\"reducer.min(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.min` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will exclude all null values when computing the minimum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min\"},{\"name\":\"reducer.min.forbid-nulls\",\"detail\":\"reducer.min.forbid-nulls(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.min.nonnull`](/doc/reducer.min.nonnull).\\n\\nThe `reducer.min.forbid-nulls` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.forbid-nulls\"},{\"name\":\"reducer.min.nonnull\",\"detail\":\"reducer.min.nonnull(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.min.forbid-nulls`](/doc/reducer.min.forbid-nulls).\\n\\nThe `reducer.min.nonnull` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.nonnull\"},{\"name\":\"reducer.or\",\"detail\":\"reducer.or(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.or` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or\"},{\"name\":\"reducer.or.exclude-nulls\",\"detail\":\"reducer.or.exclude-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.or.exclude-nulls` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or.exclude-nulls\"},{\"name\":\"reducer.percentile\",\"detail\":\"reducer.percentile(): reducer:AGGREGATOR\",\"documentation\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values for each tick.\\n\\nFor this reducer, GTS must be aligned and must have a value for each tick of each GTS. \\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.percentile\"},{\"name\":\"reducer.product\",\"detail\":\"reducer.product(): reducer:AGGREGATOR\",\"documentation\":\"This reducer function computes the product of all the values for each tick.\\n\\nThe `reducer.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.product\"},{\"name\":\"reducer.rms\",\"detail\":\"reducer.rms(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIf one value is null, there won't be any result for the concerned tick.\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms\"},{\"name\":\"reducer.rms.exclude-nulls\",\"detail\":\"reducer.rms.exclude-nulls(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms. Even if input GTS are misaligned, there will be one result per tick.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms.exclude-nulls\"},{\"name\":\"reducer.sd\",\"detail\":\"reducer.sd( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.sd` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd\"},{\"name\":\"reducer.sd.forbid-nulls\",\"detail\":\"reducer.sd.forbid-nulls( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.sd.forbid-nulls` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd.forbid-nulls\"},{\"name\":\"reducer.shannonentropy.0\",\"detail\":\"reducer.shannonentropy.0(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.shannonentropy.0` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 0 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.0\"},{\"name\":\"reducer.shannonentropy.1\",\"detail\":\"reducer.shannonentropy.1(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.shannonentropy.1` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 1 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.1\"},{\"name\":\"reducer.sum\",\"detail\":\"reducer.sum(): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.sum` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum\"},{\"name\":\"reducer.sum.forbid-nulls\",\"detail\":\"reducer.sum.forbid-nulls(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.sum.nonnull`](/doc/reducer.sum.nonnull).\\n\\nThe `reducer.sum.forbid-nulls` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.forbid-nulls\"},{\"name\":\"reducer.sum.nonnull\",\"detail\":\"reducer.sum.nonnull(): reducer:AGGREGATOR\",\"documentation\":\"Alias of [`reducer.sum.forbid-nulls`](/doc/reducer.sum.forbid-nulls).\\n\\nThe `reducer.sum.nonnull` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.nonnull\"},{\"name\":\"reducer.var\",\"detail\":\"reducer.var( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var\"},{\"name\":\"reducer.var.forbid-nulls\",\"detail\":\"reducer.var.forbid-nulls( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"documentation\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var.forbid-nulls\"},{\"name\":\"s\",\"detail\":\"s( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of seconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of seconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of seconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of seconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"s\"},{\"name\":\"us\",\"detail\":\"us( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of microseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of microseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of microseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of microseconds\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"us\"},{\"name\":\"w\",\"detail\":\"w( input:NUMBER ): output:LONG\",\"documentation\":\"Converts a number of weeks (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of weeks from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of weeks to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of weeks\\n\\n\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"w\"},{\"name\":\"{\",\"detail\":\"{(): mark:MARK\",\"documentation\":\"Starts a map creation.\\n\\nThe `{` function creates a map by pushing a mark onto the stack. This is a syntactic help to better present map constructions. This function behaves like [`MARK`].\\n\\n@param `mark` A MARK object.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tk\"},{\"name\":\"{}\",\"detail\":\"{}(): newmap:MAP\",\"documentation\":\"The {} function creates an empty MAP on the top of the stack.\\n\\n\\n@param `newmap` Empty map instance.\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tro\"},{\"name\":\"|\",\"detail\":\"|( p1:LONG p2:LONG ): result:LONG\\n|( inputgts:GTS mask:LONG ): maskedgts:GTS\\n|( gts1:GTS gts2:GTS ): outputgts:GTS\",\"documentation\":\"Performs a bitwise **OR** operation.\\n\\nThe `|` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **OR**.\\n \\nSince Warp 10™ 2.1, `|` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be OR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with OR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts OR with mask\\n\\n\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"U.\"},{\"name\":\"||\",\"detail\":\"||( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\n||( l:LIST ): result:BOOLEAN\\n||( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"documentation\":\"The `||` operator is a synonymous for [`OR`](/doc/OR).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `||` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"U6k\"},{\"name\":\"}\",\"detail\":\"}( mark:MARK k1:ANY v1:ANY kN:ANY vN:ANY ): map:MAP\",\"documentation\":\"Closes a currently open map and pushes it onto the stack.\\n\\nThe `}` function pops from the stack the elements (key/value pairs) of the map up to the first mark. The marks are consumed.\\n\\n@param `k1` The first key\\n\\n@param `v1` The first value\\n\\n@param `kN` The Nth key\\n\\n@param `vN` The Nth value\\n\\n@param `map` The built map\\n\\n@param `mark` The mark indicating the deepest level to consider when building the map\\n\\n\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"UF\"},{\"name\":\"~\",\"detail\":\"~( param:LONG ): result:LONG\",\"documentation\":\"Computes the unary bitwise complement of the long value on top of the stack.\\n\\n@param `param` Value to compute\\n\\n@param `result` Bitwise result\\n\\n\",\"tags\":[\"operators\",\"binary\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"UV\"},{\"name\":\"~=\",\"detail\":\"~=( p2:DOUBLE p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:LONG ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:LONG ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:COUNTER ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:COUNTER ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\",\"documentation\":\"The `~=` operator consumes three parameters from the top of the stack, two operands p1 and p2 and a tolerance factor lambda, \\nand pushes onto the stack true if *|p1-p2| < lambda*, i.e. the difference between the two operands is lesser than lambda.\\n\\nThe two parameters must be of numeric types.\\n\\nThe operator `~=` is useful when making comparaisons between doubles, where floating point operations generate rounding errors.\\n\\n@param `p1` First number\\n\\n@param `p2` Second number\\n\\n@param `lambda` Tolerance factor lambda\\n\\n@param `result` \\n\\n\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"UYo\"}];\n}\n      ","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class SnippetsFlows {\n  static snippets = {\n    macro: {\n      prefix: 'macro (example)',\n      body: [\n        'info = {',\n        '  \\'name\\': \\'${1:euclideanDivision}\\',',\n        '  \\'desc\\': \"',\n        '${2:This macro returns the quotient and the remainder of a/b.}',\n        '  \",',\n        '  \\'sig\\': [ [ [ ${3:\\'a:LONG\\', \\'b:LONG\\'} ], [ ${4:\\'q:LONG\\', \\'r:LONG\\'} ] ] ], // Signature',\n        '  \\'params\\': {',\n        '    // Signature params description',\n        '    ${5:\\'b\\': \\'parameter b TOP of the stack\\',',\n        '    \\'a\\': \\'parameter a just below on the stack\\',',\n        '    \\'q\\': \\'the quotient of a/b, N-1 on the stack\\',',\n        '    \\'r\\': \\'the remainder of a/b, on the TOP of the stack\\'}',\n        '  },',\n        '  \\'examples\\': [',\n        '    <\\'',\n        '${6:(q, r) = @mymacros/euclideanDivision(10 3);',\n        'return { ',\n        '  \\'quotient is  :\\': TOSTRING(q),',\n        '  \\'remainder is :\\': TOSTRING(r)',\n        '}',\n        '    \\'>',\n        '  ]',\n        '};',\n        '',\n        'macro =  ${7:(a, b) => {',\n        '  INFO(!info);',\n        '  context = SAVE();',\n        '  TRY(() => {',\n        '    // Code of the actual macro',\n        '    return ( TOLONG(a / b), a % b);',\n        '  },',\n        '  () => { // catch any exception',\n        '    RETHROW()',\n        '  },',\n        '  () => { // finally, restore the context',\n        '    RESTORE(context)',\n        '  })',\n        '};',\n        '',\n        '// Unit tests',\n        '${8:(q, r) = @macro(10 3)',\n        'ASSERT(q == 3)',\n        'ASSERT(r == 1)',\n        'ASSERT(TYPEOF(q) == LONG)',\n        'ASSERT(TYPEOF(r) == LONG)',\n        '',\n        'return macro'\n      ],\n      description: 'Macro'\n    },\n    'macro(empty)': {\n      prefix: 'macro (empty)',\n      body: [\n        'info = {',\n        '  \\'name\\': \\'${1: }\\'',\n        '  \\'desc\\': \"',\n        '${2: }',\n        '  \",',\n        '  \\'sig\\': [ [ [   ], [   ] ] ], // Signature',\n        '  \\'params\\': {',\n        '    // Signature params description',\n        '  },',\n        '  \\'examples\\': [ \"',\n        '',\n        '    \" ]',\n        '}',\n        '',\n        'macro = () => {',\n        '  !info INFO;',\n        '  context = SAVE();',\n        '  TRY(() => {',\n        '    // Code of the actual macro',\n        '    ${3:  }',\n        '  },',\n        '  () => { // catch any exception',\n        '    RETHROW()',\n        '  },',\n        '  () => { // finally, restore the context',\n        '    RESTORE(context)',\n        '  });',\n        '}',\n        '',\n        '// Unit tests',\n        '',\n        'return macro'\n      ],\n      description: 'Macro'\n    },\n    fetch: {\n      prefix: 'fetch',\n      body: [\n        'gts = FETCH([ \\'TOKEN\\', \\'className\\',  { \\'label0\\': \\'=value0\\',  \\'label1\\': \\'~val.\\' },  start, timespan ])'\n      ]\n    },\n    bucketize: {\n      prefix: 'bucketize',\n      body: [\n        'bucketizedGts = BUCKETIZE([ ${1:gts}, ${2|MACROBUCKETIZER((data) => { return [tick\\\\, latitude\\\\, longitude\\\\, elevation\\\\, value]; }),bucketizer.and(),bucketizer.count(),bucketizer.count().exclude-nulls(),bucketizer.count.include-nulls(),bucketizer.count.nonnull(),bucketizer.first(),bucketizer.join(\\',\\'),bucketizer.join.forbid-nulls(),bucketizer.last(),bucketizer.max(),bucketizer.max.forbid-nulls(),bucketizer.mean(),bucketizer.mean.circular(),bucketizer.mean.circular.exclude-nulls(),bucketizer.mean.exclude-nulls(),bucketizer.median(),bucketizer.min(),bucketizer.min.forbid-nulls(),bucketizer.or(),bucketizer.sum(),bucketizer.sum.forbid-nulls()|}, ${3:lastbucket}, ${4:bucketspan}, ${5:bucketcount} ])'\n      ]\n    },\n    filter: {\n      prefix: 'filter',\n      body: [\n        'filtredGts = FILTER([ ${1:gts}, [${2:labels}], ${3|MACROFILTER((data) => { return gtslist\\\\, labels_equivalence_class_map; }),filter.byattr({}),filter.byclass(\\'\\'),filter.bylabels({}),filter.bylabelsattr({}),filter.bymetadata([]),filter.last.eq(filterValue),filter.last.ge(filterValue),filter.last.gt(filterValue),filter.last.le(filterValue),filter.last.lt(filterValue),filter.last.ne(filterValue),filter.latencies(minLatency\\\\, maxLatency\\\\, [])|} ]'\n      ]\n    },\n    map: {\n      prefix: 'map',\n      body: [\n        'mappedGts = MAP([ ${1:gts}, ${2|MACROMAPPER((data) => { return [tick\\\\, latitude\\\\, longitude\\\\, elevation\\\\, value]; }),mapper.abs(),mapper.add(constant),mapper.and(),mapper.ceil(),mapper.count(),mapper.count.exclude-nulls(),mapper.count.include-nulls(),mapper.count.nonnull(),mapper.day(timezone\\\\|offset),mapper.delta(),mapper.dotproduct([]),mapper.dotproduct.positive([]),mapper.dotproduct.sigmoid([]),mapper.dotproduct.tanh([]),mapper.eq(constant),mapper.exp(constant),mapper.finite(),mapper.first(),mapper.floor(),mapper.ge(threshold),mapper.geo.approximate(resolution),mapper.geo.clear(),mapper.geo.outside(geoZone),mapper.geo.within(geoZone),mapper.gt(threshold),mapper.hdist(),mapper.highest(),mapper.hour(timezone\\\\|offset),mapper.hspeed(),mapper.join(\\',\\'),mapper.join.forbid-nulls(\\',\\'),mapper.kernel.cosine(bandwidth\\\\, step),mapper.kernel.epanechnikov(bandwidth\\\\, step),mapper.kernel.gaussian(bandwidth\\\\, step),mapper.kernel.logistic(bandwidth\\\\, step),mapper.kernel.quartic(bandwidth\\\\, step),mapper.kernel.silverman(bandwidth\\\\, step),mapper.kernel.triangular(bandwidth\\\\, step),mapper.kernel.tricube(bandwidth\\\\, step),mapper.kernel.triweight(bandwidth\\\\, step),mapper.kernel.uniform(bandwidth\\\\, step),mapper.last(),mapper.le(threshold),mapper.log(constant),mapper.lowest(),mapper.lt(threshold),mapper.mad(),mapper.max(),mapper.max.forbid-nulls(),mapper.max.x(),mapper.mean(),mapper.mean.circular(),mapper.mean.circular.exclude-nulls(),mapper.mean.exclude-nulls(),mapper.median(),mapper.min(),mapper.min.forbid-nulls(),mapper.min.x(),mapper.minute(timezone\\\\|offset),mapper.mod(modulus),mapper.month(timezone\\\\|offset),mapper.mul(constant),mapper.ne(constant),mapper.npdf(mu\\\\, sigma),mapper.or(),mapper.parsedouble(),mapper.percentile(percentile),mapper.pow(constant),mapper.product(),mapper.rate(),mapper.replace(constant),mapper.round(),mapper.sd(bessel),mapper.sd.forbid-nulls(bessel),mapper.second(timezone\\\\|offset),mapper.sigmoid(),mapper.sqrt(),mapper.sum(),mapper.sum.forbid-nulls(),mapper.tanh(),mapper.tick(),mapper.toboolean(),mapper.todouble(),mapper.tolong(),mapper.tostring(),mapper.truecourse(),mapper.var(bessel),mapper.var.forbid-nulls(bessel),mapper.vdist(),mapper.vspeed(),mapper.weekday(timezone\\\\|offset),mapper.year(timezone\\\\|offset),max.tick.sliding.window(),max.time.sliding.window()|}, ${3:pre}, ${4:post}, ${5:occurrences} ])'\n      ]\n    },\n    reduce: {\n      prefix: 'reduce',\n      body: [\n        'reducedGts = REDUCE([ ${1:gts}, [${2:labels}], ${3|MACROREDUCER((data) => { return [tick\\\\, latitude\\\\, longitude\\\\, elevation\\\\, value]; }),reducer.and(),reducer.and.exclude-nulls(),reducer.argmax(),reducer.argmin(),reducer.count(),reducer.count.exclude-nulls(),reducer.count.include-nulls(),reducer.count.nonnull(),reducer.join(),reducer.join.forbid-nulls(),reducer.join.nonnull(),reducer.join.urlencoded(),reducer.max(),reducer.max.forbid-nulls(),reducer.max.nonnull(),reducer.mean(),reducer.mean.circular(),reducer.mean.circular.exclude-nulls(),reducer.mean.exclude-nulls(),reducer.median(),reducer.min(),reducer.min.forbid-nulls(),reducer.min.nonnull(),reducer.or(),reducer.or.exclude-nulls(),reducer.sd(),reducer.sd.forbid-nulls(),reducer.shannonentropy.0(),reducer.shannonentropy.1(),reducer.sum(),reducer.sum.forbid-nulls(),reducer.sum.nonnull(),reducer.var(),reducer.var.forbid-nulls()|} ]'\n      ]\n    },\n    apply: {\n      prefix: 'apply',\n      body: [\n        'transformedGts = APPLY([ ${1:gts}, [${2:labels}], ${3|op.add(),op.add.ignore-nulls(),op.and(),op.and.ignore-nulls(),op.div(),op.eq(),op.ge(),op.gt(),op.le(),op.lt(),op.mask(),op.mul(),op.mul.ignore-nulls(),op.ne(),op.negmask(),op.or(),op.or.ignore-nulls(),op.sub()|} ])'\n      ],\n      description: 'Apply framework'\n    },\n    ift: {\n      prefix: 'ift',\n      body: [\n        'IFT(',\n        '  () => { return ${1:condition}; }, ',\n        '  () => { return ${2:action_if_true} }',\n        ');'\n      ],\n      description: 'If statement'\n    },\n    ifte: {\n      prefix: 'ifte',\n      body: [\n        'IFTE(',\n        '  () => { return ${1:condition}; }, ',\n        '  () => { return ${2:action_if_true} },',\n        '  () => { return ${2:action_if_false} }',\n        ');'\n      ],\n      description: 'If then else statement'\n    },\n    'switch': {\n      prefix: 'switch',\n      body: [\n        'SWITCH(',\n        '  () => { return ${1:case_1}; }, { return ${2:action_1}; },',\n        '  () => { return ${3:case_2}; }, { return ${4:action_2}; },',\n        '  () => { return ${5:case_3}; }, { return ${6:action_3}; },',\n        '  () => { return ${7:default}; },',\n        '  ${8:number_of_cases}',\n        ');'\n      ],\n      description: 'Switch statement'\n    },\n    'try': {\n      prefix: 'try',\n      body: [\n        'TRY(',\n        '  () => { ${1:try} },',\n        '  () => { ${2:catch} },',\n        '  () => { ${3:finally} }',\n        ');'\n      ],\n      description: 'Try/Catch statement'\n    },\n    'while': {\n      prefix: 'while',\n      body: [\n        'WHILE(',\n        '  () => { return ${1:condition}; },',\n        '  () => { ${2:action_while_true} }',\n        ');'\n      ],\n      description: 'While loop'\n    },\n    until: {\n      prefix: 'until',\n      body: [\n        'UNTIL(',\n        '  () => { ${1:action_until_true} },',\n        '  () => { return ${2:condition}; }',\n        ');'\n      ],\n      description: 'Until loop'\n    },\n    'for': {\n      prefix: 'for',\n      body: [\n        'FOR(${1:initial_value}, ${2:final_value},',\n        '  () => { ${3:action} }',\n        ');'\n      ],\n      description: 'For loop'\n    },\n    foreach: {\n      prefix: 'foreach',\n      body: [\n        'FOREACH(${1:object}, ',\n        '  (key, value) => { // object is a map',\n        '  (value) => {      // object is a list',\n        '    ${2:action}',\n        '  }',\n        ');'\n      ],\n      description: 'Foreach loop'\n    },\n    forstep: {\n      prefix: 'forstep',\n      body: [\n        'FORSTEP(${1:initial_value}, ${2:final_value}, () => { return ${3: + 1}; },',\n        '  () => { ${4:action} }',\n        ');'\n      ],\n      description: 'Forstep loop'\n    },\n    shm: {\n      prefix: 'shm',\n      body: [\n        'MUTEX(() => { // prevent a concurrent execution on the same SHM data',\n        '  TRY(() => {',\n        '    // try to read data from SHared Memory',\n        '    SHMLOAD(\\'gtsList\\')',\n        '  },',\n        '  () => {',\n        '    // when not found, store data in SHM',\n        '    SHMSTORE(\\'gtsList\\', ${1:FETCH([ token \\'classname\\' {\\\\} NOW() d(365) ]))}',\n        '  },',\n        '  () => {',\n        '    // finally, load the reference from SHM and store it ',\n        '    gtsList = SHMLOAD(\\'gtsList\\')',\n        '  });',\n        '',\n        '  // analytics on gtsList',\n        '  ${2:gtsList}',\n        '',\n        '',\n        '',\n        '}, \\'myMutex\\');'\n      ],\n      description: 'Keep fetched data in RAM. You need to enable the SHM extension.'\n    }\n  };\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, languages, Position, Thenable} from 'monaco-editor';\nimport {Flows} from '../../../model/refFLows';\nimport {W10CompletionItemProvider} from './W10CompletionItemProvider';\nimport {EditorUtils} from './editorUtils';\nimport {SnippetsFlows} from './SnippetsFlows';\nimport CompletionList = languages.CompletionList;\nimport IReadOnlyModel = editor.IReadOnlyModel;\nimport CompletionContext = languages.CompletionContext;\n\nexport class FLoWSCompletionItemProvider extends W10CompletionItemProvider {\n\n  constructor() {\n    super(EditorUtils.FLOWS_LANGUAGE);\n  }\n\n  transformKeyWord(keyword: string): string {\n    return `${keyword}()`;\n  }\n\n  // noinspection JSUnusedLocalSymbols\n  provideCompletionItems(model: IReadOnlyModel, position: Position, _context: CompletionContext, token: CancellationToken): Thenable<CompletionList> {\n    return super._provideCompletionItems(model, position, _context, token, Flows.reference, SnippetsFlows.snippets);\n  }\n}\n","export interface IEntry { description?: string; signature?: string; tags?: string[], since: string, OPB64name: string}\nexport interface IEntries { [name: string]: IEntry; }\nexport var globalfunctions: IEntries = {\"!\":{\"description\":\"Negates a boolean.\\n\\nThe `!` function is synonymous for [`NOT`](/doc/NOT). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nSince Warp 10™ 2.1, `!` can be applied on a boolean GTS to flip all values.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gtsinput` Since 2.1, a GTS with boolean value.\\n\\n@param `gtsresult` Since 2.1, a GTS with negated boolean value. GTS is not sorted by the operation. Metadata are kept.\\n\\n\",\"signature\":\"!( input:BOOLEAN ): result:BOOLEAN\\n!( gtsinput:GTS ): gtsresult:GTS\",\"tags\":[\"logic\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7F\"},\"!=\":{\"description\":\"Tests if both parameters are different.\\n\\nThe `!=` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are different, false otherwise.\\n\\nThe two parameters must be homogeneous of numeric, boolean or string types.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `!=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 !=` is strictly equivalent of a `42 mapper.ne` MAP operation, with a simplified syntax.\\n\\n@param `p1` First parameter to compare, anything except a GTS.\\n\\n@param `p2` Second parameter to compare, anything except a GTS.\\n\\n@param `result` True if p1 and p2 are different, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values different from constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is different from gts2 value.\\n\\n\",\"signature\":\"!=( p1:ANY p2:ANY ): result:BOOLEAN\\n!=( inputgts:GTS constant:ANY ): outgts:GTS\\n!=( constant:ANY inputgts:GTS ): outgts:GTS\\n!=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"7Io\"},\"%\":{\"description\":\"The `%` operator consumes two parameters from the top of the stack and pushes back the remainder of the Euclidean division of the first one by the second one.\\n\\nThe two parameters must be of numeric types.\\n\\n@param `dividend` Number divided by divisor\\n\\n@param `divisor` Number used to divide dividend\\n\\n@param `modulo` Modulo of the two given parameters\\n\\n\",\"signature\":\"%( divisor:LONG dividend:LONG ): modulo:LONG\\n%( divisor:DOUBLE dividend:LONG ): modulo:DOUBLE\\n%( divisor:LONG dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:DOUBLE dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:COUNTER dividend:COUNTER ): modulo:LONG\\n%( divisor:DOUBLE dividend:COUNTER ): modulo:DOUBLE\\n%( divisor:COUNTER dividend:DOUBLE ): modulo:DOUBLE\\n%( divisor:LONG dividend:COUNTER ): modulo:LONG\\n%( divisor:COUNTER dividend:LONG ): modulo:LONG\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8F\"},\"&\":{\"description\":\"Performs a bitwise **AND** operation.\\n\\nThe `&` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **AND**.\\n\\nSince Warp 10™ 2.1, `&` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be AND to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with AND between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts AND with mask\\n\\n\",\"signature\":\"&( p1:LONG p2:LONG ): result:LONG\\n&( inputgts:GTS mask:LONG ): maskedgts:GTS\\n&( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"8V\"},\"&&\":{\"description\":\"The `&&` operator is a synonymous for [`AND`](/doc/AND).\\n\\nIt performs a logical **&&** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `&&` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical && applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with && between each common tick input values.\\n\\n\",\"signature\":\"&&( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\n&&( l:LIST ): result:BOOLEAN\\n&&( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"8XN\"},\"(\":{\"description\":\"Starts a set creation.\\n\\nThe `(` function creates a set by pushing a mark onto the stack. This is a syntactic help to better present set constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\"((): mark:MARK\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9.\"},\"()\":{\"description\":\"The `()` function creates an empty SET on the top of the stack.\\nA Set is a collection that cannot contain duplicate elements.\\n\\nThis is an implementation of java [HashSet](https://docs.oracle.com/javase/8/docs/api/java/util/HashSet.html). NULL object is permitted. It makes no guarantees as to the iteration order of the set.\\n\\nThe SET object could not be represented on the stack.\\nIt has to be converted in a list to be displayed.\\n\\nStoring GTS into sets do not guarantee uniqueness. each GTS has a hidden id. see example.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newset` set instance, initialized with content.\\n\\n\",\"signature\":\"()( content:ANY ): newset:SET\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"91Z\"},\")\":{\"description\":\"Closes a currently open set and pushes it onto the stack.\\n\\nThe `)` function pops from the stack the elements of the set up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `set` The built set\\n\\n@param `mark` The mark indicating the deepest level to consider when building the set\\n\\n\",\"signature\":\")( mark:MARK v1:ANY vN:ANY ): set:SET\",\"tags\":[\"sets\"],\"since\":\"1.2.13\",\"OPB64name\":\"9F\"},\"*\":{\"description\":\"The `*` operator consumes two parameters from the top of the stack and pushes back the result of multiplying both of them.\\n\\nIf you want to multiply two matrices together, they have to be of the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Multiplication result\\n\\n\",\"signature\":\"*( p1:NUMBER p2:NUMBER ): result:NUMBER\\n*( p1:VECTOR p2:NUMBER ): result:VECTOR\\n*( p1:NUMBER p2:VECTOR ): result:VECTOR\\n*( p1:MATRIX p2:NUMBER ): result:MATRIX\\n*( p1:NUMBER p2:MATRIX ): result:MATRIX\\n*( p1:MATRIX p2:VECTOR ): result:VECTOR\\n*( p1:VECTOR p2:MATRIX ): result:VECTOR\\n*( p1:MATRIX p2:MATRIX ): result:VECTOR\\n*( p2:GTS p1:GTS ): result:GTS\\n*( p2:GTS p1:NUMBER ): result:GTS\\n*( p2:NUMBER p1:GTS ): result:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9V\"},\"**\":{\"description\":\"Returns the value of the first argument raised to the power of the second argument.\\n\\nThe `**` operator consumes two parameters from the top of the stack (a base **b** and an exponent **n**) and pushes back the result raising b to the power of n,\\ni.e. b<sup>n</sup>. For special cases see [pow()](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#pow-double-double- \\\"javadoc\\\").\\n\\nThe two parameters must be of numeric types.\\n\\n@param `b` First parameter, the base\\n\\n@param `n` Second parameter, the exponent\\n\\n@param `result` The result of b<sup>n</sup>\\n\\n\",\"signature\":\"**( b:LONG n:LONG ): result:LONG\\n**( b:DOUBLE n:LONG ): result:DOUBLE\\n**( b:LONG n:DOUBLE ): result:DOUBLE\\n**( b:DOUBLE n:DOUBLE ): result:DOUBLE\\n**( b:COUNTER n:COUNTER ): result:LONG\\n**( b:DOUBLE n:COUNTER ): result:DOUBLE\\n**( b:COUNTER n:DOUBLE ): result:DOUBLE\\n**( b:COUNTER n:LONG ): result:LONG\\n**( b:LONG n:COUNTER ): result:LONG\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9Xc\"},\"+\":{\"description\":\"The `+` operator consumes two parameters from the top of the stack and pushes back the result of adding them.\\n\\nThe meaning of adding depends on the type of parameter:\\n\\n- If both parameters are numbers, the result is the sum of both numbers.\\n\\n- If both parameters are strings, the result is the concatenation of both strings.\\n- If both parameters are byte arrays, the result is the concatenation of both byte arrays (version 2.1+).\\n\\n- If the first parameter is a list, the + operator clones the list and appends the second parameter to the cloned list.\\n\\n- If the first parameter is a set, the + operator clones the set and appends the second parameter to the cloned set.\\n\\n- If both parameters are macros, the result is a macro concatenating the two others in any other case + with throw an exception.\\n\\n- If the first parameter is a vector, the + operator adds the second numeric parameter to each element of the vector.\\n- If the second parameter is a vector, the + operator adds the first numeric parameter to each element of the vector.\\n- If both parameters are vectors, the + operator adds each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If the first parameter is a matrix, the + operator adds the second numeric parameter to each element of the matrix.\\n- If the second parameter is a matrix, the + operator adds the first numeric parameter to each element of the matrix.\\n- If both parameters are matrices, the + operator adds each element of matrices which are on the same index. Matrices must be the same size.\\n- If one of the parameters is a Geo Time Series™, the result will be a Geo Time Series™ of type DOUBLE.\\n\\n@param `param1` First parameter\\n\\n@param `param2` Second parameter\\n\\n@param `result` Result of the addition\\n\\n\",\"signature\":\"+( param1:STRING param2:STRING ): result:STRING\\n+( param1:LONG param2:LONG ): result:LONG\\n+( param1:DOUBLE param2:LONG ): result:DOUBLE\\n+( param1:COUNTER param2:LONG ): result:LONG\\n+( param1:LONG param2:DOUBLE ): result:DOUBLE\\n+( param1:DOUBLE param2:DOUBLE ): result:DOUBLE\\n+( param1:COUNTER param2:DOUBLE ): result:DOUBLE\\n+( param1:COUNTER param2:COUNTER ): result:LONG\\n+( param1:DOUBLE param2:COUNTER ): result:DOUBLE\\n+( param1:LONG param2:COUNTER ): result:LONG\\n+( param1:LIST param2:ANY ): result:LIST\\n+( param1:SET param2:ANY ): result:SET\\n+( param1:VECTOR param2:NUMBER ): result:VECTOR\\n+( param1:NUMBER param2:VECTOR ): result:VECTOR\\n+( param1:VECTOR param2:VECTOR ): result:VECTOR\\n+( param1:MACRO param2:MACRO ): result:MACRO\\n+( param1:MATRIX param2:NUMBER ): result:MATRIX\\n+( param1:NUMBER param2:MATRIX ): result:MATRIX\\n+( param1:MATRIX param2:MATRIX ): result:MATRIX\\n+( param2:GTS param1:GTS ): result:GTS\\n+( param2:GTS param1:DOUBLE ): result:GTS\\n+( param2:GTS param1:LONG ): result:GTS\\n+( param2:GTS param1:STRING ): result:GTS\\n+( param2:DOUBLE param1:GTS ): result:GTS\\n+( param2:LONG param1:GTS ): result:GTS\\n+( param2:STRING param1:GTS ): result:GTS\\n+( param1:BYTES param2:BYTES ): result:BYTES\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"9k\"},\"+!\":{\"description\":\"The +! operator adds the element on top of the stack to the set or list below it. \\nThe element is added to the existing collection. \\n\\n\\n@param `input` reference to the list or set to be modified\\n\\n@param `output` copy of input list or set reference.\\n\\n@param `item` the item to append to inputlist. Depending on list content, could be any type.\\n\\n\",\"signature\":\"+!( input:LIST item:ANY ): output:LIST\\n+!( input:SET item:ANY ): output:SET\",\"tags\":[\"lists\",\"operators\"],\"since\":\"1.2.0\",\"OPB64name\":\"9m3\"},\"-\":{\"description\":\"Subtracts two parameters.\\n\\nThe `-` operator consumes two parameters from the top of the stack and pushes back the result of subtracting the second one from the first one.\\n\\n- If both parameters are numbers, the result is the subtraction of both numbers.\\n\\n- If both parameters are vectors, the - operator subtracts each element of vectors which are on the same index. Vectors must be the same size.\\n\\n- If both parameters are matrices, the - operator subtracts each element of matrices which are on the same index. Matrices must be the same size.\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` Subtraction result\\n\\n\",\"signature\":\"-( p1:LONG p2:LONG ): result:LONG\\n-( p1:LONG p2:DOUBLE ): result:DOUBLE\\n-( p1:DOUBLE p2:LONG ): result:DOUBLE\\n-( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\n-( p1:COUNTER p2:COUNTER ): result:LONG\\n-( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\n-( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\n-( p1:LONG p2:COUNTER ): result:LONG\\n-( p1:COUNTER p2:LONG ): result:LONG\\n-( p1:MATRIX p2:MATRIX ): result:MATRIX\\n-( p1:VECTOR p2:VECTOR ): result:VECTOR\\n-( p2:GTS p1:GTS ): result:GTS\\n-( p2:GTS p1:NUMBER ): result:GTS\\n-( p2:NUMBER p1:GTS ): result:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"AF\"},\"->B64\":{\"description\":\"Encodes the string on top of the stack in [base64](https://en.wikipedia.org/wiki/Base64).\\n\\n@param `input` String or byte array to encode\\n\\n@param `result` Base64 encoded string\\n\\n\",\"signature\":\"->B64( input:STRING ): result:STRING\\n->B64( input:BYTES ): result:STRING\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYF\"},\"->B64URL\":{\"description\":\"Encodes the string on top of the stack in [base64url](https://en.wikipedia.org/wiki/Base64#Variants_summary_table).\\n\\n@param `input` String to encode\\n\\n@param `bytes` Byte array to encode\\n\\n@param `result` Base64url encoded string\\n\\n\",\"signature\":\"->B64URL( input:STRING ): result:STRING\\n->B64URL( bytes:BYTES ): result:STRING\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt1CYGKJZk\"},\"->BIN\":{\"description\":\"The ->BIN function converts the byte array or the string on top of the stack \\nto its binary representation.\\n\\nApplied on a string, `->BIN` replaces ` 'utf-8' ->BYTES ->BIN `\\n\\nIf the encoded content is not a \\nvalid UTF-8 representation, the resulting string will reflect that. \\n\\n@param `input` Any string or byte array.\\n\\n@param `output` Binary representation of the input.\\n\\n\",\"signature\":\"->BIN( input:STRING ): output:STRING\\n->BIN( input:BYTES ): output:STRING\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1HJs\"},\"->BYTES\":{\"description\":\"->BYTES function converts a string into a bytes array given a charset\\nand put the result on top of the stack.\\n\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\nBytes array cannot be represented on the stack.\\n\\n\\n@param `input` String input.\\n\\n@param `charset` Charset to use.\\n\\n@param `output` Byte array representation of input.\\n\\n\",\"signature\":\"->BYTES( input:STRING charset:STRING ): output:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AIt1LKG4Jk\"},\"->DOUBLEBITS\":{\"description\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"signature\":\"->DOUBLEBITS( number:NUMBER ): bits:LONG\\n->DOUBLEBITS( gts:GTS ): longgts:GTS\",\"tags\":[\"math\",\"gts\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt3IpK1I3K1HKGI\"},\"->ENCODER\":{\"description\":\"The `->ENCODER` function takes a list of points and encode them in a single encoder. Each point is a list of ( timestamp, latitude, longitude, elevation, value ). Since 2.1.1, a point can also be a Geo Time Series™ or a wrapped one. In that case all the points of the Geo Time Series™ are added to the encoder.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `elements` List of list of ( timestamp, latitude, longitude, elevation, value ). See example to see which element(s) can be omitted.\\n\\n@param `lgts` A list of Geo Time Series™ instances.\\n\\n@param `lwrappedgts` A list of wrapped Geo Time Series™ instances, such as produced by [`WRAP`](/doc/WRAP).\\n\\n@param `lrawwrappedgts` A list of raw wrapped Geo Time Series™ instances, such as produced by [`WRAPRAW`](/doc/WRAPRAW).\\n\\n@param `output` Encoder\\n\\n\",\"signature\":\"->ENCODER( elements:LIST ): output:GTSENCODER\\n->ENCODER( lgts:LIST<GTS> ): output:GTSENCODER\\n->ENCODER( lwrappedgts:LIST<STRING> ): output:GTSENCODER\\n->ENCODER( lrawwrappedgts:LIST<BYTES> ): output:GTSENCODER\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt4IZCEG3KH\"},\"->ENCODERS\":{\"description\":\"The `->ENCODERS` function converts an encoder into one encoder per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content, when a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder.\\n\\n\",\"signature\":\"->ENCODERS( encoder:GTSENCODER ): output:MAP\\n->ENCODERS( wrappedencoder:STRING ): output:MAP\\n->ENCODERS( rawwrappedencoder:BYTES ): output:MAP\",\"tags\":[\"gts\",\"encoder\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AIt4IZCEG3KHJk\"},\"->FLOATBITS\":{\"description\":\"Converts a numeric value to a **FLOAT** then to a **LONG** value of the raw bits of its representation.\\n\\nOnly the lower 32 bits of the **LONG** value are significant.\\n\\n@param `input` Double to convert\\n\\n@param `result` Raw bits representation\\n\\n\",\"signature\":\"->FLOATBITS( input:NUMBER ): result:LONG\",\"tags\":[\"math\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"AIt5I3x0K388K4B\"},\"->GEOCELL\":{\"description\":\"The `->GEOCELL` function converts a **STRING** or a **BYTES** HHCode prefix to a **LONG** geocell. The length of the input implicitly specifies the resolution of the cell.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `hhPrefixS` A HHCode prefix representing a cell. Resolution is twice the length of the **STRING**.\\n\\n@param `hhPrefixB` A HHCode prefix representing a cell. Resolution is four times the length of the **BYTES**.\\n\\n@param `geocell` The geocell representation.\\n\\n\",\"signature\":\"->GEOCELL( hhPrefixS:STRING ): geocell:LONG\\n->GEOCELL( hhPrefixB:BYTES ): geocell:LONG\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJx2GJlB\"},\"->GEOHASH\":{\"description\":\"The `->GEOHASH` function packs a latitude and a longitude into a STRING [Geohash](https://en.wikipedia.org/wiki/Geohash), converts a [HHCode](https://en.wikipedia.org/wiki/HHCode) into its Geohash counterpart, or converts a `GEOSHAPE` into a list of Geohashes covering the same geographical area.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `geohash` Geohash string packing the specified latitude and longitude.\\n\\n@param `hhcode` HHCode to transform.\\n\\n@param `shape` `GEOSHAPE` to convert.\\n\\n@param `geohashes` List of Geohashes covering the same area as `shape`.\\n\\n\",\"signature\":\"->GEOHASH( lat:DOUBLE lon:DOUBLE ): geohash:STRING\\n->GEOHASH( hhcode:LONG ): geohash:STRING\\n->GEOHASH( shape:GEOSHAPE ): geohashes:LIST<STRING>\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt6GJx7FKC7\"},\"->GEOJSON\":{\"description\":\"The `->GEOJSON` function translate the given GeoShape into a GeoJSON.\\n\\nThe resulting GeoJSON is a string representing a MultiPolygon geometry. By default, it defines the boundaries of the covered areas and any holes it these areas, if any.\\n\\nIt is also possible for this function to return a GeoJSON representing all the cells in the GeoShape.\\n\\n GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` The resulting GeoJSON.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` WKB bytes\\n\\n\",\"signature\":\"->GEOJSON( shape:GEOSHAPE ): geojson:STRING\\n->GEOJSON( shape:GEOSHAPE allCells:BOOLEAN ): geojson:STRING\\n->GEOJSON( wkt:STRING ): geojson:STRING\\n->GEOJSON( wkb:BYTES ): geojson:STRING\",\"tags\":[\"geo\"],\"since\":\"2.4.1\",\"OPB64name\":\"AIt6GJx9JoxD\"},\"->GEOSHAPE\":{\"description\":\"The `->GEOSHAPE` function converts a list of **LONG** geocells or HHCode prefixes (**STRING** or **BYTES**) to a **GEOSHAPE**.\\n\\n@param `geocells` List of geocells, as **LONGs**.\\n\\n@param `hhPrefixesS` List of HHCode prefixes, as **STRINGs**.\\n\\n@param `hhPrefixesB` List of HHCode prefixes, as **BYTESs**.\\n\\n@param `geoshape` The resulting **GEOSHAPE**.\\n\\n\",\"signature\":\"->GEOSHAPE( geocells:LIST<LONG> ): geoshape:GEOSHAPE\\n->GEOSHAPE( hhPrefixesS:LIST<STRING> ): geoshape:GEOSHAPE\\n->GEOSHAPE( hhPrefixesB:LIST<BYTES> ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"AIt6GJxIH34FGF\"},\"->GTS\":{\"description\":\"The `->GTS` function converts an encoder into one GTS per type in the encoder. The result is a map, with key describing the type. If defined, name, labels and attributes are kept in the result.\\nFunction also accepts wrapped or raw-wrapped encoders.\\n\\n###### Since 2.4.0:\\n- `->GTS` function can also take a conversion MAP input. Using this conversion MAP, the output is always a list of GTS.\\n- The conversion map can also take a list of selectors for each output type.\\n- The conversion map can be empty: In this case, the GTS type is enforced by the type of the first element in the encoder input.\\n- The first selector match stops the research. It means key order matters. See Examples.\\n- A new '.type' label is added to each output GTS. This could be overriden with the 'label.type' parameter of the conversion MAP.\\n- `->GTS` function can handle encoders, or list of encoders.\\n\\n###### What is an encoder ?\\nA Geo Time Series™ is limited to the type of the first value stored.\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) and since 2.1 also BINARY content.\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedencoder` Encoder after WRAP.\\n\\n@param `rawwrappedencoder` Encoder after WRAPRAW.\\n\\n@param `output` Map with a key/value per type encountered in the input encoder. Values are GTS.\\n\\n@param `lencoder` List of encoders input (supported since 2.4.0).\\n\\n@param `lwrappedencoder` List of encoders after WRAP (supported since 2.4.0).\\n\\n@param `lrawwrappedencoder` List of encoders after WRAPRAW (supported since 2.4.0).\\n\\n@param `loutput` Map with a key/value per type encountered in the input encoder. Values are a list of GTS.\\n\\n@param `conversionmap` Map with type as keys, selectors or list of selectors as values. The special key `label` allow to change the default `.type` label. Set label to NULL to avoid any new label. The conversion map could be empty.\\n\\n@param `conversionoutput` A GTS, or a list of GTS.\\n\\n\",\"signature\":\"->GTS( encoder:GTSENCODER ): output:MAP\\n->GTS( wrappedencoder:STRING ): output:MAP\\n->GTS( rawwrappedencoder:BYTES ): output:MAP\\n->GTS( lencoder:LIST<GTSENCODER> ): loutput:MAP\\n->GTS( lwrappedencoder:LIST<STRING> ): loutput:MAP\\n->GTS( lrawwrappedencoder:LIST<BYTES> ): loutput:MAP\\n->GTS( encoder:GTSENCODER conversionmap:MAP ): conversionoutput:GTS\\n->GTS( wrappedencoder:STRING conversionmap:MAP ): conversionoutput:GTS\\n->GTS( rawwrappedencoder:BYTES conversionmap:MAP ): conversionoutput:GTS\\n->GTS( lencoder:LIST<GTSENCODER> conversionmap:MAP ): conversionoutput:LIST<GTS>\\n->GTS( lwrappedencoder:LIST<STRING> conversionmap:MAP ): conversionoutput:LIST<GTS>\\n->GTS( lrawwrappedencoder:LIST<BYTES> conversionmap:MAP ): conversionoutput:LIST<GTS>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"AIt6K4B\"},\"->GTSHHCODE\":{\"description\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"signature\":\"->GTSHHCODE( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3J\"},\"->GTSHHCODELONG\":{\"description\":\"The `->GTSHHCODE` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode). This function is very similar to [`->HHCODE`](/doc/AIt7H3CEG3J) except that when given `NaN NaN` it pushes back the internal value used by Geo Time Series™ for a missing location.\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"signature\":\"->GTSHHCODELONG( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"AIt6K4C7H3CEG3KBIot6\"},\"->HEX\":{\"description\":\"Decodes an hex encoded string or a byte array.\\nFor different encodings, use bytes array conversion [`BYTES->`](/doc/F__JGKBhEV).\\n\\n\\nApplied on a string, `->HEX` replaces ` 'utf-8' ->BYTES ->HEX `\\n\\nIf the encoded content is not a\\nvalid UTF-8 representation, the resulting string will reflect that.\\n\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Decoded string of input, assuming utf-8 encoding of input.\\n\\n\",\"signature\":\"->HEX( input:STRING ): output:STRING\\n->HEX( input:BYTES ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt7GKV\"},\"->HHCODE\":{\"description\":\"The `->HHCODE` function packs a latitude and a longitude into a STRING [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a string of 16 hexadecimal digits.\\n\\n\",\"signature\":\"->HHCODE( lat:NUMBER lon:NUMBER ): hhcode:STRING\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"AIt7H3CEG3J\"},\"->HHCODELONG\":{\"description\":\"The `->HHCODELONG` function packs a latitude and a longitude into a LONG [HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\nThe packed HHCode uses 32 bits for each the latitude and longitude.\\n\\n@param `lon` Longitude to pack.\\n\\n@param `lat` Latitude to pack.\\n\\n@param `hhcode` Resulting HHCode, as a 64 bits LONG.\\n\\n\",\"signature\":\"->HHCODELONG( lat:NUMBER lon:NUMBER ): hhcode:LONG\",\"tags\":[\"geo\"],\"since\":\"1.2.5\",\"OPB64name\":\"AIt7H3CEG3KBIot6\"},\"->JSON\":{\"description\":\"The `->JSON` functions serialize structures containing numbers, strings, booleans, lists, vlists and maps which do not reference the same list/map multiple times.\\n\\n@param `object` Object to serialize\\n\\n@param `output` JSON formatted string\\n\\n\",\"signature\":\"->JSON( object:ANY ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AIt9JoxD\"},\"->LIST\":{\"description\":\"The `->LIST` function create a list from N elements on the stack.\\nN and the N next elements on the stack are consumed.\\n\\nIf N is greater than current stack depth, the function raises an error.\\n\\n@param `N` The number of elements to take on the top of the stack to build the list.\\n\\n@param `newlist` The list of N elements. [deepest in stack ... TOP-1 ]\\n\\n@param `content` 0 to n elements\\n\\n\",\"signature\":\"->LIST( content:ANY* N:LONG ): newlist:LIST\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItBHKCJ\"},\"->LONGBYTES\":{\"description\":\"`->LONGBYTES` converts a LONG to a byte array. It expects a number of bytes on the top of the stack.\\n\\nSince Warp 10™ 2.1, `->LONGBYTES` can also convert a list of LONG.\\n\\n@param `nbbytes` Number of bytes for number conversion: nbbytes could be 1 to 8. If less than 8, most significant bytes will be truncated.\\n\\n@param `number` must be a LONG\\n\\n@param `output` byte array, from 1 to 8 bytes per number\\n\\n@param `numberList` Since Warp 10 2.1, a list of LONG\\n\\n\",\"signature\":\"->LONGBYTES( number:LONG nbbytes:LONG ): output:BYTES\\n->LONGBYTES( numberList:LIST<LONG> nbbytes:LONG ): output:BYTES\",\"tags\":[\"binary\",\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItBIot6F__JGKB\"},\"->MAP\":{\"description\":\"The ->MAP function creates a MAP from an even number N of elements on the stack. \\nN is consumed off the top of the stack. For each pair, the deepest element is the key, the shallowest is the value.\\n\\n\\n@param `content` 0 to n pairs of key-value elements. Keys must be different.\\n\\n@param `N` Number of content elements to consume on the stack. It must be even.\\n\\n@param `newmap` map instance, initialized with content.\\n\\n\",\"signature\":\"->MAP( N:LONG content:ANY* content:ANY* ): newmap:MAP\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItCFK.\"},\"->MAT\":{\"description\":\"The `->MAT` function converts nested lists of numbers (2D array with same number of columns) into a Matrix.\\n\\nMATRIX objects cannot be represented on the stack. \\n\\nMatrix entries must be numbers.\\n\\n\\n@param `input` List of lists of values\\n\\n@param `result` A MATRIX object\\n\\n\",\"signature\":\"->MAT( [ input:LIST ] ): result:MATRIX\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItCFKF\"},\"->MVSTRING\":{\"description\":\"The `->MVSTRING` function generates a STRING representation of an ENCODER in the format expected by the `/update` endpoint for multi values.\\n\\nWhen encountering a binary element, the function attempts to interpret it as a wrapped encoder, if that fails then it will output the element as a binary (`b64:...`) value.\\n\\n@param `input` Wrapped or unwrapped Geo Time Series™ or ENCODER.\\n\\n@param `mvstring` MultiValue format representation of the wrapped encoder/GTS.\\n\\n\",\"signature\":\"->MVSTRING( input:STRING ): mvstring:STRING\\n->MVSTRING( input:BYTES ): mvstring:STRING\\n->MVSTRING( input:GTS ): mvstring:STRING\\n->MVSTRING( input:GTSENCODER ): mvstring:STRING\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"AItCK_CJJZ_DGk\"},\"->OPB64\":{\"description\":\"Encode a String in order preserving base64. OPB64 is a Base64 like encoding which preserves the lexicographic order of\\nthe original byte arrays in the encoded ones. This is useful to compare encoded byte arrays without having to first decode them.\\n\\n@param `input` Could be a string or a byte array.\\n\\n@param `output` OPB64 of input.\\n\\n\",\"signature\":\"->OPB64( input:STRING ): output:STRING\\n->OPB64( input:BYTES ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItEJ37qC.\"},\"->PICKLE\":{\"description\":\"The `->PICKLE` function converts the object on top of the stack to a Python object and serializes it using Pickle protocol version 2.\\nThe conversion table used is as follow:\\n\\n| WarpScript | Python |\\n|------------|--------|\\n| NULL | None |\\n| BOOLEAN | bool |\\n| BYTES | bytearray |\\n| STRING | str/unicode |\\n| DOUBLE | float |\\n| LONG | int |\\n| LIST | list |\\n| MAP | dict |\\n| SET | set |\\n| GTS | dict |\\n| ENCODER | dict |\\n\\nOther types are unsupported.\\n\\nPython example with `->PICKLE ->HEX` output:\\n```python\\n>>> s=\\\"80025d71002858060000005049434b4c4571015806000000535452494e4771025d7103284b0547400921fb54442d1865652e\\\"\\n>>> import pickle\\n>>> pickle.loads(s.decode(\\\"hex\\\"))\\n[u'PICKLE', u'STRING', [5, 3.141592653589793]]\\n```\\n\\n@param `input` A serializable object\\n\\n@param `output` Pickle encoded content\\n\\n\",\"signature\":\"->PICKLE( input:ANY ): output:BYTES\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"AItFHJCAI3J\"},\"->Q\":{\"description\":\"The `->Q` function consumes on the stack 4 doubles (w, x, y, z, with z being on top) representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion)\\nand push back quaternion representation into a **LONG**.\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `result` Quaternion representation\\n\\n\",\"signature\":\"->Q( w:DOUBLE x:DOUBLE y:DOUBLE z:DOUBLE ): result:LONG\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItG\"},\"->SET\":{\"description\":\"The -`>SET` function converts a **LIST** on top of the stack into a **SET**.\\n\\nSETs are not viewable, null will be return if it remains on the stack.\\n\\nThe order in the SET is not garanteed, see [`()`](/doc/91Z).\\n\\n\\n@param `input` The input list\\n\\n@param `newset` The new set reference. SETs are not viewable, null remains on the stack.\\n\\n\",\"signature\":\"->SET( input:LIST ): newset:SET\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"AItIGKF\"},\"->TSELEMENTS\":{\"description\":\"The `->TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"->TSELEMENTS( timestamp:LONG ): dateAndTimeElements:LIST<LONG>\\n->TSELEMENTS( timestamp:LONG timezone:STRING ): dateAndTimeElements:LIST<LONG>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"AItJJoKBGJp4I_GI\"},\"->V\":{\"description\":\"The `->V` function converts a list of objects into a Pig Vector (VLIST).\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `list` Input list\\n\\n@param `set` Input set\\n\\n@param `result` Result list\\n\\n\",\"signature\":\"->V( list:LIST ): result:VLIST\\n->V( set:SET ): result:VLIST\",\"tags\":[\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"AItL\"},\"->VARINT\":{\"description\":\"The `->VARINT` function encodes a `LONG` or a list of `LONG`s using [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoding. The result is a byte array containing the concatenation of the encoded numbers.\\n\\nThe `->VARINT` function is optimized for encoding unsigned `LONG`s, this means that negative numbers (with the most significant bit set to 1) will be encoded on 10 bytes. In order to reduce this footprint you can pre-process the numbers to encode so they are encoded unsing [ZigZag VarInt](https://developers.google.com/protocol-buffers/docs/encoding#types) encoding. The simple trick is to compute\\n\\n```\\n$value 1 << $value 63 >> ^\\n```\\n\\nthis will have the effect of alternatively encoding positive and negative numbers thus leading to a more efficient footprint for negative numbers.\\n\\nAt decoding time using `VARINT->`, simply undo the *Zig-Zag* trick:\\n\\n```\\n$unsigned 63 << 63 >> $unsigned ^ 1 >>\\n// Flip the top bit\\n$unsigned 1 63 << & ^\\n```\\n\\n@param `number` Single number to encode.\\n\\n@param `numbers` List of numbers to encode.\\n\\n@param `encoded` Byte array containing the encoded number(s).\\n\\n\",\"signature\":\"->VARINT( number:LONG ): encoded:BYTES\\n->VARINT( numbers:LIST<LONG> ): encoded:BYTES\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"AItLFK88I_F\"},\"->VEC\":{\"description\":\"The `->VEC` function converts a list of numbers into a Vector.\\n\\nVectors objects cannot be represented on the stack. \\n\\nVectors entries must be numbers.\\n\\n@param `list` List to convert\\n\\n@param `matrix` Matrix with a single column\\n\\n@param `result` Vector\\n\\n\",\"signature\":\"->VEC( list:LIST ): result:VECTOR\\n->VEC( matrix:MATRIX ): result:VECTOR\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItLGJB\"},\"->WKB\":{\"description\":\"The `->WKB` function converts a GeoJSON **STRING**, a WKT **STRING** or a **SHAPE** to WKB **BYTES**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` A WKT string\\n\\n@param `wkb` The resulting WKB.\\n\\n\",\"signature\":\"->WKB( shape:GEOSHAPE ): wkb:BYTES\\n->WKB( shape:GEOSHAPE allCells:BOOLEAN ): wkb:BYTES\\n->WKB( wkt:STRING ): wkb:BYTES\\n->WKB( geojson:STRING ): wkb:BYTES\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHo7\"},\"->WKT\":{\"description\":\"The `->WKT` function converts a GeoJSON **STRING**, a WKB **BYTES** or a **SHAPE** to WKT **STRING**.\\n\\nThis function accepts an optional boolean on top of the **SHAPE** to choose whether all cells are outputted or not. Defaults to false.\\n\\n@param `shape` The GeoShape to be translated.\\n\\n@param `allCells` Optional parameter specifying if all the cells (true) or only the boundaries of the overall shape (false) must be represented in the GeoJSON. Defaults to false.\\n\\n@param `geojson` A GeoJSON string.\\n\\n@param `wkt` The resulting  WKT.\\n\\n@param `wkb` WKB bytes.\\n\\n\",\"signature\":\"->WKT( shape:GEOSHAPE ): wkt:STRING\\n->WKT( shape:GEOSHAPE allCells:BOOLEAN ): wkt:STRING\\n->WKT( geojson:STRING ): wkt:STRING\\n->WKT( wkb:BYTES ): wkt:STRING\",\"tags\":[\"geo\",\"conversion\"],\"since\":\"2.7.0\",\"OPB64name\":\"AItMHpF\"},\"->Z\":{\"description\":\"The `->Z` function packs multiple **LONG** arguments into a byte array by interleaving the bits of the arguments. This produces a \\n[Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) value encoding the original arguments. The value might be right padded with bits set to 0 to reach a multiple of 8 bits.\\n\\n@param `bitwidth` Number of bits to consider for each LONG in 'longs', from 1 to 63.\\n\\n@param `longs` List of LONGs to pack. Each LONG *MUST* be positive, i.e. with bit 63 set to 0.\\n\\n@param `z` Byte array containing the packed values.\\n\\n\",\"signature\":\"->Z( longs:LIST<LONG> bitwidth:LONG ): z:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"AItP\"},\"/\":{\"description\":\"The `/` operator consumes two parameters from the top of the stack and pushes back the result of dividing the first one by the second one.\\n\\nYou can't devide by zero.\\n\\nThe two parameters must be of numeric types, or Geo Time Series™, or a mix of the two.\\n\\n@param `long` Numeric integer\\n\\n@param `long-result` Numeric floor-rounded integer\\n\\n@param `double` Numeric floating point number\\n\\n@param `double-result` Numeric floating point number\\n\\n@param `counter` Numeric counter\\n\\n@param `param1` First parameter of the division.\\n\\n@param `param2` Second parameter of the division.\\n\\n@param `result` Resulting GTS, of type DOUBLE.\\n\\n\",\"signature\":\"/( long:LONG long:LONG ): long-result:LONG\\n/( double:DOUBLE long:LONG ): double-result:DOUBLE\\n/( long:LONG double:DOUBLE ): double-result:DOUBLE\\n/( double:DOUBLE double:DOUBLE ): double-result:DOUBLE\\n/( counter:COUNTER counter:COUNTER ): long-result:LONG\\n/( double:DOUBLE counter:COUNTER ): long-result:DOUBLE\\n/( counter:COUNTER double:DOUBLE ): long-result:DOUBLE\\n/( counter:COUNTER long:LONG ): long-result:LONG\\n/( long:LONG counter:COUNTER ): long-result:LONG\\n/( double:VECTOR double:NUMBER ): double-result:VECTOR\\n/( param2:GTS param1:GTS ): result:GTS\\n/( param2:GTS param1:NUMBER ): result:GTS\\n/( param2:NUMBER param1:GTS ): result:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ak\"},\"<\":{\"description\":\"The `<` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 < p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <` is strictly equivalent of a `42 mapper.lt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 < p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less than gts2 value.\\n\\n\",\"signature\":\"<( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n<( p1:STRING p2:STRING ): result:BOOLEAN\\n<( inputgts:GTS constant:ANY ): outgts:GTS\\n<( constant:ANY inputgts:GTS ): outgts:GTS\\n<( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E.\"},\"<<\":{\"description\":\"Shifts the bits of a long by a number of positions to the left. The least significant bit is filled with 0 after each shift.\\n\\nSince Warp 10™ 2.1, `<<` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\"<<( number:LONG shift:LONG ): result:LONG\\n<<( inputgts:GTS number:LONG ): maskedgts:GTS\\n<<( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2k\"},\"<=\":{\"description\":\"The `<=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 <= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically.\\n\\nSince Warp 10™ 2.1, as every other comparison operators, `<=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 <=` is strictly equivalent of a `42 mapper.le` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 <= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values less or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is less or equal than gts2 value.\\n\\n\",\"signature\":\"<=( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n<=( p1:STRING p2:STRING ): result:BOOLEAN\\n<=( inputgts:GTS constant:ANY ): outgts:GTS\\n<=( constant:ANY inputgts:GTS ): outgts:GTS\\n<=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"E2o\"},\"==\":{\"description\":\"Tests if both parameters are equal.\\n\\nThe `==` operator consumes two parameters from the top of the stack and pushes onto the stack true if they are equal, false otherwise.\\n\\nThe two parameters must be of numeric, boolean, vector, matrix or string types.\\nFor vector or matrix, the parameters must be the same size.\\n\\nSince 2.1.0, as every other comparison operators, `==` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 ==` is strictly equivalent of a `42 mapper.eq` MAP operation, with a simplified syntax.\\n\\nSince 2.1.1, `==` can be use to check equality between Lists, Maps and Sets. For for details about how this is defined, check the [java documentation](https://docs.oracle.com/en/java/javase/index.html).\\n\\n@param `p1` First parameter to compare\\n\\n@param `p2` Second parameter to compare\\n\\n@param `result` True if p1 and p2 are equal, false otherwise\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values equal to constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value equals gts2 value.\\n\\n\",\"signature\":\"==( p1:ANY p2:ANY ): result:BOOLEAN\\n==( inputgts:GTS constant:ANY ): outgts:GTS\\n==( constant:ANY inputgts:GTS ): outgts:GTS\\n==( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EIo\"},\">\":{\"description\":\"The `>` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 > p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >` is strictly equivalent of a `42 mapper.gt` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 > p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater than gts2 value.\\n\\n\",\"signature\":\">( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n>( p1:STRING p2:STRING ): result:BOOLEAN\\n>( inputgts:GTS constant:ANY ): outgts:GTS\\n>( constant:ANY inputgts:GTS ): outgts:GTS\\n>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EV\"},\">=\":{\"description\":\"The `>=` operator consumes two parameters p1 and p2 from the top of the stack and pushes onto the stack true if p1 >= p2, else it pushes false.\\n\\nThe two parameters must be of numeric or string types.\\n\\nStrings are compared lexicographically. \\n\\nSince Warp 10™ 2.1, as every other comparison operators, `>=` can also be used between two GTS or a GTS and a constant.\\n\\n`$gts 42 >=` is strictly equivalent of a `42 mapper.ge` MAP operation, with a simplified syntax.\\n\\n\\n@param `p1` First parameter\\n\\n@param `p2` Second parameter\\n\\n@param `result` True if p1 >= p2\\n\\n@param `constant` Since Warp 10™ 2.1, a string or a number to compare with.\\n\\n@param `inputgts` Since Warp 10™ 2.1, a GTS with numbers or strings.\\n\\n@param `outgts` Since Warp 10™ 2.1, a new GTS containing only values greater or equal than constant.\\n\\n@param `gts1` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `gts2` Since Warp 10™ 2.1, an input GTS with numbers or strings.\\n\\n@param `outputgts` Since Warp 10™ 2.1, for each common ticks between gts1 and gts2, outputgts contains gts1 value and locations when gts1 value is greater or equal than gts2 value.\\n\\n\",\"signature\":\">=( p1:NUMBER p2:NUMBER ): result:BOOLEAN\\n>=( p1:STRING p2:STRING ): result:BOOLEAN\\n>=( inputgts:GTS constant:ANY ): outgts:GTS\\n>=( constant:ANY inputgts:GTS ): outgts:GTS\\n>=( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYo\"},\">>\":{\"description\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after shifting depends on the sign of the unshifted long.\\n\\nSince Warp 10™ 2.1, `>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\">>( number:LONG shift:LONG ): result:LONG\\n>>( inputgts:GTS number:LONG ): maskedgts:GTS\\n>>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYs\"},\">>>\":{\"description\":\"Shifts the bits of a long by a number of positions to the right. The most significant bit after each shift is set to 0, regardless of the sign of \\nthe unshifted long.\\n\\nSince Warp 10™ 2.1, `>>>` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n\\n@param `shift` Number of positions\\n\\n@param `number` Long to shift\\n\\n@param `result` Shifted long\\n\\n@param `inputgts` Since 2.1, GTS with long values\\n\\n@param `maskedgts` Since 2.1, a new GTS with every values shifted by number\\n\\n@param `gts1` Since 2.1, GTS with long values\\n\\n@param `gts2` Since 2.1, GTS with long values\\n\\n@param `outputgts` Since 2.1, for each common ticks between gts1 and gts2, gts1 value is shifted by gts2 value\\n\\n\",\"signature\":\">>>( number:LONG shift:LONG ): result:LONG\\n>>>( inputgts:GTS number:LONG ): maskedgts:GTS\\n>>>( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"EYsy\"},\"ABS\":{\"description\":\"Computes the absolute value of a number value.\\n\\nThe `ABS` function consumes a numeric value from the top of the stack and pushes back its absolute value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` A numeric value\\n\\n@param `result` The absolute value of the given numeric value.\\n\\n@param `lvalue` A list of numeric values\\n\\n@param `lresult` A list of the absolute values of the given values.\\n\\n\",\"signature\":\"ABS( value:LONG ): result:LONG\\nABS( value:COUNTER ): result:LONG\\nABS( value:DOUBLE ): result:DOUBLE\\nABS( lvalue:LIST<LONG> ): lresult:LIST<LONG>\\nABS( lvalue:LIST<COUNTER> ): lresult:LIST<LONG>\\nABS( lvalue:LIST<DOUBLE> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ABS\"},\"ACCEL.CACHE\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.CACHE` function will enable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.CACHE\"},\"ACCEL.NOCACHE\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOCACHE` function will disable accessing the in-memory data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOCACHE\"},\"ACCEL.NOPERSIST\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.NOPERSIST` function will disable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.NOPERSIST\"},\"ACCEL.PERSIST\":{\"description\":\"When the Warp 10 Accelerator is enabled, the `ACCEL.PERSIST` function will enable accessing the persistent (disk based) data for update, fetch and delete operations.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.PERSIST\"},\"ACCEL.REPORT\":{\"description\":\"The `ACCEL.REPORT` function will produce a map containing informations related to the Warp 10 Accelerator. The following table describes the various keys present in this map:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `accelerated` | Boolean indicating whether or not the last [`FETCH`](/doc/FETCH) accessed the in-memory data managed by the Warp 10 Accelerator. |\\n| `status` | Boolean indicating whether or not the Warp 10 Accelerator is enabled. |\\n| `cache` | Boolean indicating if the in-memory data will be considered for update, fetch and delete operations. |\\n| `persist` | Boolean indicating if the persistent data will be considered for update, fetch and delete operations. |\\n| `chunkcount` | Number of chunks managed by the accelerator for its in-memory data. |\\n| `chunkspan` | Length of each chunk expressed in platform time units. |\\n\\n@param `report` Map containing informations related to the Warp 10 Accelerator\\n\\n\",\"signature\":\"ACCEL.REPORT(): report:MAP\",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"ACCEL.REPORT\"},\"ACOS\":{\"description\":\"The `ACOS` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arccosine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arccosine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arccosine in radians of the given values.\\n\\n\",\"signature\":\"ACOS( value:NUMBER ): result:DOUBLE\\nACOS( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ACOS\"},\"ADDDAYS\":{\"description\":\"Adds days to a timestamp or a tselements.\\n\\nThe `ADDDAYS` function consumes from the top of the stack a number (positive or negative) of days, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the days and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `days` The number of days to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"ADDDAYS( timestamp:LONG timezone:STRING days:LONG ): result:LONG\\nADDDAYS( timestamp:LONG days:LONG ): result:LONG\\nADDDAYS( tselements:LIST<LONG> days:LONG ): tselementsresult:LIST<LONG>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDDAYS\"},\"ADDDURATION\":{\"description\":\"Adds an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) to a timestamp or a tselements.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `duration` The duration\\n\\n@param `factor` The number of durations to add. Can be negative. Default to 1 if not set.\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"ADDDURATION( timestamp:LONG timezone:STRING duration:STRING ): result:LONG\\nADDDURATION( timestamp:LONG timezone:STRING duration:STRING factor:LONG ): result:LONG\\nADDDURATION( timestamp:LONG duration:STRING ): result:LONG\\nADDDURATION( timestamp:LONG duration:STRING factor:LONG ): result:LONG\\nADDDURATION( tselements:LIST<LONG> duration:STRING ): tselementsresult:LIST<LONG>\\nADDDURATION( tselements:LIST<LONG> duration:STRING factor:LONG ): tselementsresult:LIST<LONG>\",\"tags\":[\"date\"],\"since\":\"2.4.0\",\"OPB64name\":\"ADDDURATION\"},\"ADDEXACT\":{\"description\":\"The `ADDEXACT` function consumes two LONGs from the top of the stack and puts back the sum. If the sum overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `sum` The sum of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `ssum` The sum of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lsum` List of **LONG** where each value is the sum of y and an element in lx\\n\\n\",\"signature\":\"ADDEXACT( x:NUMBER y:NUMBER ): sum:LONG\\nADDEXACT( list:LIST<NUMBER> ): ssum:LONG\\nADDEXACT( lx:LIST<NUMBER> y:NUMBER ): lsum:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"ADDEXACT\"},\"ADDMONTHS\":{\"description\":\"Adds months to a timestamp or a tselements.\\n\\nThe `ADDMONTHS` function consumes from the top of the stack a number (positive or negative) of months, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the months and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `months` The number of months to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"ADDMONTHS( timestamp:LONG timezone:STRING months:LONG ): result:LONG\\nADDMONTHS( timestamp:LONG months:LONG ): result:LONG\\nADDMONTHS( tselements:LIST<LONG> months:LONG ): tselementsresult:LIST<LONG>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDMONTHS\"},\"ADDVALUE\":{\"description\":\"The `ADDVALUE` function adds a value to a GTS, without checking for tick duplicates. The added data point is appended to the GTS.\\nThe [`SETVALUE`](/doc/SETVALUE) overrides an existing value.\\n\\nThe `ADDVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `ADDVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, for example by using [`GET`](/doc/GET)\\nwith value 0 as parameter.\\n\\nIf latitude or longitude are NaN (not a number), value has only timestamp, elevation, value.\\nIf elevation is NaN (not a number), value has only timestamp, latitude, longitude, value.\\nIf elevation is NaN and longitude or latitude are NaN, value has only timestamp, value.\\n\\nWhen adding a Geo Time Series™ or GTS Encoder value, the value will be wrapped (as when using `WRAPRAW`) and added as a binary value.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Series™\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `result` The Geo Time Series™ with the new datapoint added\\n\\n@param `elevation` Elevation or NaN\\n\\n\",\"signature\":\"ADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:STRING ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BYTES ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BOOLEAN ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:DOUBLE ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:LONG ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:GTSENCODER ): result:GTS\\nADDVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:GTS ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ADDVALUE\"},\"ADDYEARS\":{\"description\":\"Adds years to a timestamp or a tselements.\\n\\nThe `ADDYEARS` function consumes from the top of the stack a number (positive or negative) of years, a time parameter (timestamp or tselements) and optionally a timezone parameter.\\nIt adds the years and when an optional timezone is specified the computation is performed using it instead of `UTC`.\\nTimezone names are the ones defined in [Joda Time](http://joda-time.sourceforge.net/timezones.html \\\"Joda Time\\\").\\n\\nThis function will take into account leap years and, when working with timestamps, possible daylight saving time change.\\n\\n@param `timestamp` The timestamp to modify\\n\\n@param `tselements` The date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n@param `timezone` The timezone\\n\\n@param `years` The number of years to add\\n\\n@param `result` The new date\\n\\n@param `tselementsresult` The new date in [TSELEMENTS](doc/TSELEMENTS) format\\n\\n\",\"signature\":\"ADDYEARS( timestamp:LONG timezone:STRING years:LONG ): result:LONG\\nADDYEARS( timestamp:LONG years:LONG ): result:LONG\\nADDYEARS( tselements:LIST<LONG> years:LONG ): tselementsresult:LIST<LONG>\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"ADDYEARS\"},\"AESUNWRAP\":{\"description\":\"Unwraps a byte array with the [AES WRAP](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") and pushes back the decrypted data into an bytes array.\\n\\n`AESUNWRAP` removes the a 64bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) added by [`AESWRAP`](/doc/AESWRAP) WarpScript function\\n\\n@param `data` Encoded Byte array.\\n\\n@param `key` Byte array, 128, 192 or 256 bits key.\\n\\n@param `decoded` Decoded Byte array.\\n\\n\",\"signature\":\"AESUNWRAP( key:BYTES data:BYTES ): decoded:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESUNWRAP\"},\"AESWRAP\":{\"description\":\"Wraps a byte array or String with the [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt) algorithm and pushes a byte array containing the encrypted data onto the stack.\\n\\n`AESWRAP` adds a 64 bits [nonce](https://en.wikipedia.org/wiki/Cryptographic_nonce) prefix to the input in order to protect the encrypted data against AES block determinism as [`AES WRAP`](https://www.ietf.org/rfc/rfc3394.txt \\\"rfc3394\\\") uses a fixed Initialization Vector.\\n\\n@param `key` 128, 192 or 256 bits key to use for encryption.\\n\\n@param `string` String data to encrypt.\\n\\n@param `bytes` Byte array to encrypt.\\n\\n@param `encrypted` Encrypted result.\\n\\n\",\"signature\":\"AESWRAP( string:STRING key:BYTES ): encrypted:BYTES\\nAESWRAP( bytes:BYTES key:BYTES ): encrypted:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"AESWRAP\"},\"AGO\":{\"description\":\"The `AGO` function is a shortcut which enables you to compute timestamps by specifying an offset from the current time.\\n\\n@param `offset` The numbers of ticks in platform time unit to subtract, truncated if floating-point.\\n\\n@param `timestamp` The computed timestamp\\n\\n\",\"signature\":\"AGO( offset:NUMBER ): timestamp:LONG\",\"tags\":[\"date\"],\"since\":\"1.2.0\",\"OPB64name\":\"AGO\"},\"AND\":{\"description\":\"The `AND` operator is a synonymous for [`&&`](/doc/8XN).\\n\\nIt performs a logical **AND** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `false` value encountered.\\n\\nSince Warp 10™ 2.1, `AND` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical AND applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with AND between each common tick input values.\\n\\n\",\"signature\":\"AND( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\nAND( l:LIST ): result:BOOLEAN\\nAND( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"AND\"},\"APPEND\":{\"description\":\"The `APPEND` function consumes two paramters from the top of the stack and appends the LIST, MAP or GTS on top of the stack to the one just below.\\nThe augmented LIST, MAP or GTS is then pushed back on the stack.\\n\\n@param `newitems` items to append to input.\\n\\n@param `inputlist` LIST to be modified.\\n\\n@param `outputlist` The LIST that has been modified\\n\\n@param `inputmap` MAP to be modified.\\n\\n@param `outputmap` The AP that has been modified \\n\\n@param `inputGTS` GTS to be modified.\\n\\n@param `outputGTS` The GTS that has been modified\\n\\n\",\"signature\":\"APPEND( inputlist:LIST newitems:LIST ): outputlist:LIST\\nAPPEND( inputmap:MAP newitems:MAP ): outputmap:MAP\\nAPPEND( inputGTS:GTS newitems:GTS ): outputGTS:MAP\",\"tags\":[\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPEND\"},\"APPLY\":{\"description\":\"The `APPLY` framework provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can do. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` List of resulting GTS, one per equivalence class.\\n\\n@param `op` Operation to perform.\\n\\n\",\"signature\":\"APPLY( [ gts:LIST<GTS>+ labels:LIST op:OPERATOR ] ): result:LIST<GTS>\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"APPLY\"},\"ASENCODERS\":{\"description\":\"The `ASENCODERS` function consumes a Geo Time Series™, a wrap or a raw wrap, or a list thereof and convert each one into an encoder.\\n\\n@param `gts` Geo Time Series™ to be converted.\\n\\n@param `lgts` List of Geo Time Series™ to be converted.\\n\\n@param `wrappedgts` Wrapped Geo Time Series™ to be converted.\\n\\n@param `lwrappedgts` List of wrapped Geo Time Series™ to be converted.\\n\\n@param `rawwrappedgts` Raw wrapped Geo Time Series™ to be converted.\\n\\n@param `lrawwrappedgts` List of raw wrapped Geo Time Series™ to be converted.\\n\\n@param `encoder` Encoder of the given Geo Time Series™.\\n\\n@param `lencoder` List of encoder, one for each given Geo Time Series™.\\n\\n\",\"signature\":\"ASENCODERS( gts:GTS ): encoder:GTSENCODER\\nASENCODERS( lgts:LIST<GTS> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( wrappedgts:STRING ): encoder:GTSENCODER\\nASENCODERS( lwrappedgts:LIST<STRING> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( rawwrappedgts:BYTES ): encoder:GTSENCODER\\nASENCODERS( lrawwrappedgts:LIST<BYTES> ): lencoder:LIST<GTSENCODER>\\nASENCODERS( encoder:GTSENCODER ): encoder:GTSENCODER\\nASENCODERS( lencoder:LIST<GTSENCODER> ): lencoder:LIST<GTSENCODER>\",\"tags\":[\"encoder\",\"conversion\"],\"since\":\"2.2.0\",\"OPB64name\":\"ASENCODERS\"},\"ASIN\":{\"description\":\"The `ASIN` function consumes a floating point number between -1 and 1 from the top of the stack and pushes back its arcsine in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arcsine in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arcsine in radians of the given values.\\n\\n\",\"signature\":\"ASIN( value:NUMBER ): result:DOUBLE\\nASIN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASIN\"},\"ASREGS\":{\"description\":\"Replaces in a macro the uses of the given symbols by the use of registers.\\n\\nIf there are not enough registers available, replace each of the symbols from the start of the list until all registers are used.\\n\\nSince 2.6.0, the list of symbols is optional. In that case, `ASREGS` first recursively extracts all the symbols from given the macro and uses that list to do the replacement.\\n\\n@param `macro` Macro to transform.\\n\\n@param `vars` List of symbols.\\n\\n\",\"signature\":\"ASREGS( macro:MACRO vars:LIST<STRING> ): macro:MACRO\\nASREGS( macro:MACRO ): macro:MACRO\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ASREGS\"},\"ASSERT\":{\"description\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise.\\n\\nThe `ASSERT` function consumes a **BOOLEAN** parameter from the top of the stack. If the boolean is **true** the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception.\\n\\n`ASSERT` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n\",\"signature\":\"ASSERT( condition:BOOLEAN ): \",\"tags\":[\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"ASSERT\"},\"ASSERTMSG\":{\"description\":\"Evaluates a boolean expression, continues the execution if it is **true**, stops otherwise and displays a message.\\n\\nThe `ASSERTMSG` function consumes a **BOOLEAN** parameter and a **STRING** parameter from the top of the stack. If the boolean is **true**, the execution of\\nthe WarpScript script continues, else it stops the execution by throwing an exception with a message displaying the **STRING** parameter.\\n\\n`ASSERTMSG` is usually used in WarpScript unit tests.\\n\\n@param `condition` The boolean expression to evaluate\\n\\n@param `message` The exception message to display if the test fails\\n\\n\",\"signature\":\"ASSERTMSG( condition:BOOLEAN message:STRING ): \",\"tags\":[\"debug\"],\"since\":\"1.2.13\",\"OPB64name\":\"ASSERTMSG\"},\"ATAN\":{\"description\":\"The `ATAN` function consumes a floating point number between -1 et 1 from the top of the stack and pushes back its arctangent in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, between -1 and 1, inclusive.\\n\\n@param `result` Arctangent in radians of the given value.\\n\\n@param `lvalue` List of values, between -1 and 1, inclusive.\\n\\n@param `lresult` List of arctangent in radians of the given values.\\n\\n\",\"signature\":\"ATAN( value:NUMBER ): result:DOUBLE\\nATAN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATAN\"},\"ATAN2\":{\"description\":\"ATAN2 function returns the polar angle theta (azimut) from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of `] -pi  pi ]`.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `result` theta in polar coordinates\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `lresult` List of thetas in polar coordinates\\n\\n\",\"signature\":\"ATAN2( y:NUMBER x:NUMBER ): result:DOUBLE\\nATAN2( y:NUMBER lx:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nATAN2( ly:LIST<NUMBER> x:NUMBER ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.2.13\",\"OPB64name\":\"ATAN2\"},\"ATBUCKET\":{\"description\":\"The `ATBUCKET` function consumes a bucketized GTS from the stack, looks at its `index`-th bucket and puts on the stack a\\nlist with the timestamp, latitude, longitude, elevation and value for this bucket.\\n\\n@param `gts` Bucketized Geo Time Series™\\n\\n@param `index` Index of the bucket\\n\\n@param `result` List with the timestamp, latitude, longitude, elevation and value for the index-th bucket of the GTS\\n\\n\",\"signature\":\"ATBUCKET( gts:GTS index:LONG ): result:LIST\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATBUCKET\"},\"ATINDEX\":{\"description\":\"The `ATINDEX` function consumes a Geo Time Series™ or a list thereof from the stack, looks at its index-th point and put on the stack a list with the timestamp, longitude, \\nlatitude, elevation and value for the `index`-th point of the GTS.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the GTS.\\n\\n@param `index` Index of the tick, truncated if floating-point.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"signature\":\"ATINDEX( gts:GTS index:NUMBER ): data:LIST\\nATINDEX( lgts:LIST<GTS> index:NUMBER ): ldata:LIST<LIST>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATINDEX\"},\"ATTICK\":{\"description\":\"The `ATTICK` function consumes a Geo Time Series™ from the stack, looks at its tick-th tick (the data point with a timestamp tick) and put on the \\nstack a list with the timestamp, latitude, longitude, elevation and value for that data point.\\n\\nIf there is no data point with tick timestamp, it return a list with timestamp, latitude, longitude and elevation at **NaN** and value at **null**.\\n\\n@param `timestamp` Timestamp at which to take the data, if it is a floating-point value, it is truncated.\\n\\n@param `gts` The Geo Time Series™ from which to take the data\\n\\n@param `lgts` The list of Geo Time Series™ from which to take the data\\n\\n@param `data` A list containing timestamp, latitude, longitude, elevation and value\\n\\n@param `ldata` A list of lists, each of them containing timestamp, latitude, longitude, elevation and value\\n\\n\",\"signature\":\"ATTICK( gts:GTS timestamp:LONG ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:LONG ): ldata:LIST<LIST>\\nATTICK( gts:GTS timestamp:COUNTER ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:COUNTER ): ldata:LIST<LIST>\\nATTICK( gts:GTS timestamp:DOUBLE ): data:LIST\\nATTICK( lgts:LIST<GTS> timestamp:DOUBLE ): ldata:LIST<LIST>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTICK\"},\"ATTRIBUTES\":{\"description\":\"Retrieves the attributes of a Geo Time Series™.\\n\\nThe `ATTRIBUTES` function takes a **GTS** on top of the stack and push back a **MAP** including all its attributes.\\n\\nAn attribute corresponds to a tag for a specific series.\\nThe attribute system allows the user to add some information that can change in a series.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `encoder` The input Geo Time Series™ Encoder\\n\\n@param `return` The attributes MAP of the input Geo Time Series™\\n\\n\",\"signature\":\"ATTRIBUTES( gts:GTS ): return:MAP\\nATTRIBUTES( encoder:GTSENCODER ): return:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ATTRIBUTES\"},\"AUTHENTICATE\":{\"description\":\"The `AUTHENTICATE` function authenticates the current stack with the **read token** on top of the stack. This function removes the token from the stack.\\n\\nInside a WarpScript, the stack could be authenticated only once. An exception is thrown when the stack is already authenticated.\\n\\n@param `token` Read token\\n\\n\",\"signature\":\"AUTHENTICATE( token:STRING ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"AUTHENTICATE\"},\"B64->\":{\"description\":\"Decodes the [base64](http://tools.ietf.org/html/rfc4648#section-4) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"B64->( content:STRING ): result:BYTES\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoAIs\"},\"B64TOHEX\":{\"description\":\"Decodes the  [base64](http://tools.ietf.org/html/rfc4648#section-4) content on top of the stack and immediately re-encode it in hexadecimal.\\nThis enables you to convert encoded content which would not be valid UTF-8 encoding from base64 to hexadecimal. \\nAs the string are URL encoded, the symbol `+` have to be replaced by `%2B`, otherwise a space will replace the `+` in the string.\\n\\n@param `content` String to convert\\n\\n@param `result` Hexadecimal converted string\\n\\n\",\"signature\":\"B64TOHEX( content:STRING ): result:STRING\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"B64TOHEX\"},\"B64URL->\":{\"description\":\"Decodes the [base64url](http://tools.ietf.org/html/rfc4648#section-5) **STRING** content on top of the stack.\\n\\n@param `content` String to decode\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"B64URL->( content:STRING ): result:BYTES\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FYNoKK8BAIs\"},\"BBOX\":{\"description\":\"The `BBOX` function computes the bounding box of a Geo Time Series™ or a list thereof. It returns a list with extremas, or a list of list of extremas.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `minlat` Latitude of lower left of bounding box.\\n\\n@param `minlon` Longitude of lower left of bounding box.\\n\\n@param `maxlat` Latitude of upper right of bounding box.\\n\\n@param `maxlon` Longitude of upper right of bounding box.\\n\\n@param `extremas` List of list containing minlat, minlon, maxlat, maxlon, for every GTS in lgts.\\n\\n\",\"signature\":\"BBOX( gts:GTS ): [  minlat:DOUBLE  minlon:DOUBLE  maxlat:DOUBLE  maxlon:DOUBLE  ]\\nBBOX( lgts:LIST<GTS> ): extremas:LIST<LIST<DOUBLE>>\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BBOX\"},\"BIN->\":{\"description\":\"The `->BIN` function decodes a binary string representation into a bytes array.\\n\\n@param `binary` The binary string representation\\n\\n@param `result` The bytes array\\n\\n\",\"signature\":\"BIN->( binary:STRING ): result:BYTES\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"FZ_DAIs\"},\"BINTOHEX\":{\"description\":\"Converts a string representing a binary number into a string representing a hexadecimal number.\\n\\nThe `BINTOHEX` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from binary to hexadecimal.\\n\\n@param `content` The string representing a binary number\\n\\n@param `result` The string representing a hexadecimal number\\n\\n\",\"signature\":\"BINTOHEX( content:STRING ): result:STRING\",\"tags\":[\"strings\",\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"BINTOHEX\"},\"BITCOUNT\":{\"description\":\"Returns the logical size and the cardinality of a [BitSet](https://docs.oracle.com/javase/8/docs/api/java/util/BitSet.html).\\n\\nThe `BITCOUNT` function consumes a bitset on the top of the stack and push back its logical size and its cardinality.\\n  * The logical size is the index of the highest bit set to true plus one.\\n  * The cardinality is the number of bit set to true.\\n\\n@param `bitset` The BitSet to count\\n\\n@param `length` The logical size of the BitSet\\n\\n@param `cardinality` The number of bits set to true\\n\\n\",\"signature\":\"BITCOUNT( bitset:BITSET ): cardinality:LONG length:LONG\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITCOUNT\"},\"BITGET\":{\"description\":\"Returns the value of the bit with the specified index.\\n\\nThe `BITGET` function consumes a bitset and a long on the top of the stack. It returns the value of the bit with the specified index. The bit index starts at 0 from the right.\\n\\n@param `index` The bit index\\n\\n@param `bitset` The bitset\\n\\n@param `return` The value of the bit with the specified index\\n\\n\",\"signature\":\"BITGET( bitset:BITSET index:LONG ): return:BOOLEAN\",\"tags\":[\"bitset\",\"binary\"],\"since\":\"1.0.5\",\"OPB64name\":\"BITGET\"},\"BITSTOBYTES\":{\"description\":\"Converts a bitset into a bytes array.\\n\\n@param `bitset` Bitset\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"BITSTOBYTES( bitset:BITSET ): result:BYTES\",\"tags\":[\"bitset\",\"binary\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"BITSTOBYTES\"},\"BOOTSTRAP\":{\"description\":\"This function is executed systematically before the WarpScript stack is available for anything else. By default this function does nothing, it is equivalent \\nto [`NOOP`](/doc/NOOP).\\n\\nIf bootstrap code was specified in the Warp 10 platform configuration, for either or all of `egress`, `mobius` or `runner`, the `BOOTSTRAP` function might\\nhave been redefined and actual code could be executed.\\n\\nThis function is not meant to be used in user provided scripts.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"BOOTSTRAP\"},\"BREAK\":{\"description\":\"The `BREAK` function breaks out of the current loop. It takes no argument.\\n\\n> If used outside a loop, an error is thown\\n\\n\",\"signature\":\"\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"BREAK\"},\"BUCKETCOUNT\":{\"description\":\"The function `BUCKETCOUNT` consumes a GTS off the stack and pushes its bucketcount onto the stack.\\n\\n> Note: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Number of buckets\\n\\n\",\"signature\":\"BUCKETCOUNT( gts:GTS ): result:LONG\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETCOUNT\"},\"BUCKETIZE\":{\"description\":\"The Geo Time Series™ kept in the Warp 10 platform grow over time as more measurements are added. Some series have very regular measurements,\\nothers more sporadic ones. But when it comes to manipulating the data, it might be handy to be able to impose some kind of regularity to measurements.\\nThis is exactly what the [`BUCKETIZE`](/doc/BUCKETIZE) framework does, it provides the tooling for putting the data of a Geo Time Series™ into regularly spaced\\n**buckets**.\\n\\nA **bucket** is a time interval which spans a certain number of time units called the **bucketspan**, ending at a tick called the **lastbucket**.\\n\\nAs an example, the bucket spanning 10 time units and ending at time units 20 will contain all measurements taken at the following times:\\n\\n20, 19, 18, 17, 16, 15, 14, 13, 12, 11\\n\\nthe previous bucket with the same bucketspan ends at 10 and covers ticks 10 down to 1. The next bucket ends at 30 and covers ticks 21 to 30.\\n\\nA bucketized Geo Time Series™ is characterized by its **bucketspan**, its **bucketcount** and the **lastbucket**.\\nA bucketized Geo Time Series™ has at most one measurement per bucket, there might be buckets with no measurements.\\n\\nThe `BUCKETIZE` framework is used to convert a non bucketized Geo Time Series™ into a bucketized one. The bucketization process collects\\nthe measurements of the original geo time series which fall in each bucket and apply a bucketizer function on those data, thus leading to at most a\\nsingle measurement for each bucket.\\n\\nThe `BUCKETIZE` framework comes with a number of bucketizer which implement very common aggregation functions such as SUM, MIN, MAX, MEAN, etc.\\n\\nA macro can be used instead of the bucketizer argument. In that case, in each bucket the measurements are collected as a sub Geo Time Series™ which is taken as parameter by the macro.\\nThis macro must then push onto the stack its result (see description in signature description below).\\n\\nIf the bucketizer argument is NULL, then BUCKETIZE do not create any new Geo Time Series™ but instead sets the lastbucket, bucketspan and bucketcount of its inputs without processing their data.\\n\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so the first value of the geo time series is at the beginning of the first bucket.\\n\\n@param `bucketspan` Width in time units of each bucket. If `bucketspan` is 0 but `bucketcount` is set, WarpScript will compute `bucketspan` so `bucketcount` buckets cover the complete set of values from firsttick to lasttick. If this value is set to -1, the number of buckets is computed so the first tick is towards the end of the first bucket.\\n\\n@param `lastbucket` Specifies the timestamp in time units since the Unix Epoch of the end of the most recent bucket. If you set this value to 0, this timestamp will be computed automatically so it covers the most recent value of the geo time series and falls on a `bucketspan` boundary.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS\\n\\n\",\"signature\":\"BUCKETIZE( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gtsList:LIST<GTS>+ bucketizer:AGGREGATOR lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE( [ gtsList:LIST<GTS>+ macro:MACRO lastbucket:LONG bucketspan:LONG bucketcount:LONG ] ): result:LIST<GTS>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETIZE\"},\"BUCKETIZE.CALENDAR\":{\"description\":\"Creates bucketized Geo Time Series with buckets that span a calendar duration that can be irregular (e.g. taking into account leap years and daylight saving time).\\n\\nInstead of using a bucketspan like the BUCKETIZE framework, it uses a bucketduration: a STRING in [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) format, as `PyYmMwWdDThHmMsS` similarly to that of ADDDURATION function. However, complex bucketdurations that can be non-positive from some ticks are not allowed.\\n\\nIn the result, the tick of each bucket is its index, which is equal to the number of buckets that are ended since Unix Epoch. In particular, the tick of the bucket that contains Unix Epoch is always 0. The resulting GTS is considered bucketized for further operations. Then, the function UNBUCKETIZE.CALENDAR can be used to replace bucket indices with their timestamp end boundaries.\\n\\nThis function answers the limitation of BUCKETIZE to regular buckets. For instance, BUCKETIZE.CALENDAR can be used with a duration of one month (`P1M`) or one year (`P1Y`).\\n\\nThe delta between Unix Epoch and the first timestamp of bucket 0th is called the bucketoffset. The bucketoffset, bucketduration and buckettimezone are stored in the attributes.\\n\\n@param `timezone` The timezone to consider. Default to UTC\\n\\n@param `bucketcount` Number of buckets of the bucketized geo time series. If this value is set to 0, the number of buckets will be computed so every value of the GTS falls in a bucket.\\n\\n@param `bucketduration` Width in ISO 8601 duration format of each bucket.\\n\\n@param `lastbucket` Specifies the timestamp in platform time units of the end boundary of the most recent bucket. For coherency with BUCKETIZE, this value can not be set to 0.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `bucketizer` Bucketizer function to apply\\n\\n@param `macro` Macro to apply. Must expect a GTS as input. Must push onto the stack either [value], or [tick,value], or [tick,elev,value], or [tick,lat,lon,value], or [tick,lat,lon,elev,value], or tick, lat, lon, elev and value.\\n\\n@param `result` List of bucketized GTS in the new time referential\\n\\n\",\"signature\":\"BUCKETIZE.CALENDAR( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketduration:STRING bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketduration:STRING bucketcount:LONG ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ bucketizer:AGGREGATOR lastbucket:LONG bucketduration:STRING bucketcount:LONG timezone:STRING ] ): result:LIST<GTS>\\nBUCKETIZE.CALENDAR( [ gts:GTS+ macro:MACRO lastbucket:LONG bucketduration:STRING bucketcount:LONG timezone:STRING ] ): result:LIST<GTS>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"BUCKETIZE.CALENDAR\"},\"BUCKETSPAN\":{\"description\":\"The function `BUCKETSPAN` consumes a GTS off the stack and pushes its bucketspan onto the stack.\\n\\n> when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Bucketspan\\n\\n\",\"signature\":\"BUCKETSPAN( gts:GTS ): result:LONG\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"BUCKETSPAN\"},\"BYTES->\":{\"description\":\"Converts a bytes array into a string with given a charset and put the string on top of the stack.\\n\\nCharset could be any supported by your java platform. Example: UTF-8 US-ASCII ISO-8859-1 Cp852...\\n\\n\\n@param `charset` Charset to use\\n\\n@param `bytes` Bytes array to convert\\n\\n@param `result` String converted byte array\\n\\n\",\"signature\":\"BYTES->( bytes:BYTES charset:STRING ): result:STRING\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"F__JGKBhEV\"},\"BYTESTOBITS\":{\"description\":\"Converts a byte array into a bitset.\\n\\n@param `bytesarray` Bytes array\\n\\n@param `result` Bitset\\n\\n\",\"signature\":\"BYTESTOBITS( bytesarray:BYTES ): result:BITSET\",\"tags\":[\"bitset\",\"conversion\",\"binary\"],\"since\":\"1.0.6\",\"OPB64name\":\"BYTESTOBITS\"},\"CALL\":{\"description\":\"The `CALL` function invokes the external program whose path (relative to the `warpscript.call.directory` directory) is on top of the stack. The calling convention will pass to the external\\nprogram the **STRING** object below the path on a line by itself on standard input after having URL encoded the **STRING**. The invoked\\nprogram is expected to return a URL encoded **STRING** object if invocation was successful, or a string starting with a space and followed by a URL encoded error message if an error was encoutered.\\n\\nIf you need to pass complex structures to the invoked program, you can use functions such as [`->JSON`](/doc/AIt9JoxD), [`->PICKLE`](/doc/AItFHJCAI3J)\\nand [`->B64`](/doc/AIt1CYF) to encode the input prior to the invocation.\\n\\nExamples of callable programs are provided in [shell](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/sh/callable.sh)\\nand [python](https://github.com/senx/warp10-platform/blob/master/warp10/src/main/python/callable.py).\\n\\nThe program must be stored in the directory described by the `warpscript.call.directory` configuration parameter.\\n\\nThe program must first output on the stdout the number of concurrent thread allowed.\\n\\nExample:\\n\\n```bash\\n#!/bin/bash\\necho 5 # 5 threads allowed\\nurldecode() {\\n  # urldecode <string>\\n  local url_encoded=\\\"${1//+/ }\\\"\\n  printf '%b' \\\"${url_encoded//%/\\\\\\\\x}\\\"\\n}\\nwhile true\\n\\ndo\\n  read line\\n  line=`urldecode \\\"${line}\\\"` # read the params given by the WarpScript\\n  echo $line # Will be pushed on the stack\\ndone\\n```\\n\\n@param `program` Program path\\n\\n@param `params` URL encoded input\\n\\n@param `result` URL encoded output\\n\\n\",\"signature\":\"CALL( params:STRING program:STRING ): result:STRING\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"CALL\"},\"CBRT\":{\"description\":\"The `CBRT` function consumes a numeric parameter from the top of the stack and pushes back its cubic root.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Cubic root of the given value.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of cubic root of each given value.\\n\\n\",\"signature\":\"CBRT( value:NUMBER ): result:DOUBLE\\nCBRT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CBRT\"},\"CEIL\":{\"description\":\"The `CEIL` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number bigger than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-up value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-up values, for each given value.\\n\\n\",\"signature\":\"CEIL( value:NUMBER ): result:DOUBLE\\nCEIL( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEIL\"},\"CEVAL\":{\"description\":\"The `CEVAL` function allows you to execute macros in a concurrent way on a pool of threads.\\n\\nAll macros will be executed with the maximum parallelism level specified. Each macro is executed on its own stack. The context of the global stack is\\nreplicated to each of those stacks so each macro will have access to the existing symbols and the redefined functions. Any modification to the symbol\\ntable or redifined functions done in a concurrent macro will not be reflected in the global stack afterwards.\\n\\nEach macro is invoked with its index in the list on top of the stack.\\n\\nUpon termination of each macro, the content of their respective stacks is put into a list, with the top of the stack at index 0, and those lists are\\nmerged into a global list which is then pushed onto the stack. The resulting list for each macro appears at the index of the macro in the original macro list.\\n\\nBeware that no synchronization is implicitely performed between the concurrent macros. If you require synchronization between macros, for example because\\nyou are modifying a list accessible by all macros via a symbol, you must use the [`SYNC`](/doc/SYNC) function.\\n\\nIf one of the macros fail, an attempt to interrupt the other running macros will be done and the failure will be propagated to the other macros. For the\\ntime being, a call to [`STOP`](/doc/STOP) or [`RETURN`](/doc/RETURN) in one of the macros will stop all of them.\\n\\nUse of `CEVAL` is not available from within a macro currently executing in a `CEVAL` call.\\n\\nThe `CEVAL` function is part of the `io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```properties\\n// Enable CEVAL and SYNC functions\\nwarpscript.extension.concurrent = io.warp10.script.ext.concurrent.ConcurrentWarpScriptExtension\\n```\\n\\n@param `poolSize` Parallelism level\\n\\n@param `macros` List of macros\\n\\n@param `result` Result list\\n\\n\",\"signature\":\"CEVAL( macros:LIST poolSize:LONG ): result:LIST\",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"CEVAL\"},\"CHECKMACRO\":{\"description\":\"The `CHECKMACRO` function checks if a macro is defined and aborts the execution when it encounters an undefined macro.\\n\\n@param `name` The macro name\\n\\n\",\"signature\":\"CHECKMACRO( name:STRING ): \",\"tags\":[\"logic\",\"control\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKMACRO\"},\"CHECKSHAPE\":{\"description\":\"Return a BOOLEAN indicating whether an input list and its nested lists sizes are coherent together to form a tensor (or multidimensional array).\\n\\n@param `list` The input list.\\n\\n@param `result` true or false.\\n\\n\",\"signature\":\"CHECKSHAPE( list:LIST ): result:LIST\\nCHECKSHAPE( { list:LIST  } ): result:LIST\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHECKSHAPE\"},\"CHRONOEND\":{\"description\":\"The `CHRONOEND` function ends a stopwatch with the given name previously started with [`CHRONOSTART`](/doc/CHRONOSTART). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\nIt is a good practice to put `CHRONOEND` in the finally clause of a [`TRY`](/doc/TRY) for the timing to work even if exceptions are thrown.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"signature\":\"CHRONOEND( name:STRING ): \",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOEND\"},\"CHRONOSTART\":{\"description\":\"The `CHRONOSTART` function starts a stopwatch with the given name. To stop the stopwatch, call [`CHRONOEND`](/doc/CHRONOEND). On top of recording the cumulative time between each start and end of the stopwatch, the number of calls of `CHRONOSTART` is recorded.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\nIf calls of `CHRONOSTART` and [`CHRONOEND`](/doc/CHRONOEND) with the same name are nested, only the top level one is timed but each call to `CHRONOSTART` is counted. This allows the timing of recursive functions.\\n\\n@param `name` A name identifying the stopwatch.\\n\\n\",\"signature\":\"CHRONOSTART( name:STRING ): \",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTART\"},\"CHRONOSTATS\":{\"description\":\"The `CHRONOSTATS` function \\n\\n@param `stats` A map with stopwatches names as keys and maps as values. These maps have two keys, `total_calls` and `total_time`. The former gives the number of calls to [`CHRONOSTART`](/doc/CHRONOSTART) and the latter gives the cumulative time between [`CHRONOSTART`](/doc/CHRONOSTART) and [`CHRONOEND`](/doc/CHRONOEND) in **nanoseconds**.\\n\\n\",\"signature\":\"CHRONOSTATS(): stats:MAP\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"CHRONOSTATS\"},\"CHUNK\":{\"description\":\"The `CHUNK` is used to split a Geo Time Series™ into partial GTS. The split operation is controlled by multiple parameters.\\nThe series will be splitted in chunks, each chunks will form a new GTS, with a label value corresponding to its first tick.\\n\\n@param `keepempty` If true empty chunks are kept\\n\\n@param `chunklabel` The label name of the label added by the split operation (with a value corresponding to the first tick of the chunk).\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` An overlap duration (in time units) between chunks, this is useful when chunking a GTS to apply an algorithm which operates on a sliding window.\\n\\n@param `chunkwidth` The width in time units of each chunk.\\n\\n@param `lastchunkend` The end timestamp of the most recent split to consider.\\n\\n@param `gts` A single GTS instance.\\n\\n@param `gtsList` A GTS list to split, each GTS will be splitted individually.\\n\\n@param `encoder` A single GTS Encoder instance.\\n\\n@param `lEncoder` A GTS Encoder list to split, each GTS Encoder will be splitted individually.\\n\\n@param `result` GTS Chunks, a list formed with its partial GTS.\\n\\n@param `resultEncoders` GTS Encoders Chunks, a list formed with its partial GTS Encoders.\\n\\n\",\"signature\":\"CHUNK( gts:GTS lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTS>\\nCHUNK( gtsList:LIST<GTS> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTS>\\nCHUNK( encoder:GTSENCODER lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): resultEncoders:LIST<GTSENCODER>\\nCHUNK( lEncoder:LIST<GTSENCODER> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): resultEncoders:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CHUNK\"},\"CHUNKENCODER\":{\"description\":\"The `CHUNKENCODER` function is used to split a [GTSEncoder](/doc/NEWENCODER) into partial GTSEncoder. The user defines some parameters that will \\nbe applied to the split operation. The series will be splitted in chunks, each chunks will form a new GTSEncoder, with a label value \\ncorresponding to its first tick.\\n\\nDeprecated since 2.1, use CHUNK instead which behaves the same.\\n\\n@param `keepempty` If true empty chunk are kept\\n\\n@param `chunklabel` The label name of the label added by this split operation (add a value corresponding to the first tick of the chunk). Could be a regular expression.\\n\\n@param `chunkcount` The number of chunks to keep (starting from the last chunk).\\n\\n@param `chunkoverlap` A time overlap for each chunks in time units.\\n\\n@param `chunkwidth` The width in time unit of each chunks in time units.\\n\\n@param `lastchunkend` The split operation end when it encounters this timestamp.\\n\\n@param `GTSEncoder` A single GTSEncoder \\n\\n@param `GTSEncoderList` A GTSEncoder list to split, each GTSEncoder will be splitted individually.\\n\\n@param `result` GTSEncoder Chunks, a list formed with its partial GTSEncoder\\n\\n\",\"signature\":\"CHUNKENCODER( GTSEncoder:GTSENCODER lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<GTSENCODER>\\nCHUNKENCODER( GTSEncoderList:LIST<GTSENCODER> lastchunkend:LONG chunkwidth:LONG chunkoverlap:LONG chunkcount:LONG chunklabel:STRING keepempty:BOOLEAN ): result:LIST<LIST<GTSENCODER>>\",\"tags\":[\"encoder\"],\"since\":\"1.2.9\",\"OPB64name\":\"CHUNKENCODER\"},\"CLEAR\":{\"description\":\"The `CLEAR` function empties the stack.\\n\\n@param `input` all the input on the stack will be erased from the stack.\\n\\n\",\"signature\":\"CLEAR( input:ANY* ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEAR\"},\"CLEARDEFS\":{\"description\":\"The `CLEARDEFS` function allows you to clear all [redefined WarpScript functions](/doc/DEF).\\n\\nBy default, all redefined WarpScript function, will not be available anymore. Set the `warpscript.def.unshadow` \\nconfiguration property to change this behaviour.\\n\\nThis configuration parameter determines if undefining a function (via NULL 'XXX' DEF) will unshadow the original statement \\nthus making it available again or if it will replace it with a function that will fail with a message saying the function is undefined.\\nThe safest behavior is to leave this undefined or set to **false**.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARDEFS\"},\"CLEARREGS\":{\"description\":\"Clears all registers, setting their current value to `NULL`.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"signature\":\"CLEARREGS(): value:ANY\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CLEARREGS\"},\"CLEARSYMBOLS\":{\"description\":\"The `CLEARSYMBOLS` function clears all symbols defined with the function [`STORE`](/doc/STORE).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARSYMBOLS\"},\"CLEARTOMARK\":{\"description\":\"Removes elements from the stack up to and including the first mark encountered.\\n\\n@param `inputs` all the inputs references on the stack will be erased\\n\\n@param `mark` the mark will also be erased\\n\\n\",\"signature\":\"CLEARTOMARK( mark:MARK inputs:ANY* ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLEARTOMARK\"},\"CLIP\":{\"description\":\"The `CLIP` function clips a Geo Time Series™, encoders or list thereof according to a series of limits. The limits are lists of pair containing the lower and upper \\ntimestamps used to clip. Each pair will generate a clipped GTS or encoder for each instance.\\n\\n@param `bounds` List of timestamp pairs. Each pair is a list of LONG.\\n\\n@param `gts` GTS to clip\\n\\n@param `lgts` List of GTSs to clip\\n\\n@param `encoder` Emcoder to clip\\n\\n@param `lencoder` List of encoders to clip\\n\\n@param `result` List of clipped GTS\\n\\n\",\"signature\":\"CLIP( gts:GTS bounds:LIST<LIST<LONG>> ): result:LIST<GTS>\\nCLIP( lgts:LIST<GTS> bounds:LIST<LIST<LONG>> ): result:LIST<LIST<GTS>>\\nCLIP( encoder:GTSENCODER bounds:LIST<LIST<LONG>> ): result:LIST<GTSENCODER>\\nCLIP( lencoder:LIST<GTSENCODER> bounds:LIST<LIST<LONG>> ): result:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.2.0\",\"OPB64name\":\"CLIP\"},\"CLONE\":{\"description\":\"The `CLONE` function does a shallow copy of a given Geo Time Series™, List, Map or Vector. Since 2.1.1 it can also clone Encoders.\\n\\nAs it makes a shallow copy, be careful when using CLONE on a List of Geo Time Series™ like those generated by the use of [`FETCH`](/doc/FETCH). Modifying a Geo Time Series™ in any of those list will alter the matching Geo Time Series™ in the other List.\\nIf you want to use `CLONE` after a [`FETCH`](/doc/FETCH), you will need to extract the Geo Time Series™ from the list, for example by using [`LIST->`](/doc/I3_IK1oy), [`GET`](/doc/GET) or [`LMAP`](/doc/LMAP).\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `list` The List to clone\\n\\n@param `map` The Map to clone\\n\\n@param `set` The Set to clone\\n\\n@param `vector` The Vector to clone\\n\\n@param `encoder` The Encoder to clone\\n\\n@param `clone` The cloned Geo Time Series™, List, Map, Vector or Encoder\\n\\n@param `original` The original Geo Time Series™, List, Map, Vector or Encoder\\n\\n\",\"signature\":\"CLONE( gts:GTS ): original:GTS clone:GTS\\nCLONE( list:LIST ): original:LIST clone:LIST\\nCLONE( map:MAP ): original:MAP clone:MAP\\nCLONE( set:SET ): original:SET clone:SET\\nCLONE( vector:VECTOR ): original:VECTOR clone:VECTOR\\nCLONE( encoder:GTSENCODER ): original:GTSENCODER clone:GTSENCODER\",\"tags\":[\"gts\",\"lists\",\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONE\"},\"CLONEEMPTY\":{\"description\":\"Clones a Geo Time Series™, an Encoder or all the instances in a list of Geo Time Series™ or an Encoder, keeping only the metadata and not the values.\\n\\nThe `CLONEEMPTY` function takes as parameter a Geo Time Series™, an Encoder or a list thereof. It creates an empty clone of the input with only his metadata. The cloned metadata are:\\n * Classname\\n * Labels\\n * Attributes\\n * Lastbucket, for Geo Time Series™ only\\n * Bucketspan, for Geo Time Series™ only\\n * Bucketcount, for Geo Time Series™ only\\n * Base timestamp, for Encoders only\\n * Wrapping key, for Encoders only\\n\\nThe input parameter is consumed and the clone or list of clones is left on the stack.\\n\\n@param `gts` The Geo Time Series™ to clone\\n\\n@param `gtsList` The list of Geo Time Series™ to clone\\n\\n@param `result` The cloned Geo Time Series™\\n\\n@param `resultList` The cloned list of Geo Time Series™\\n\\n@param `encoder` The encoder to clone\\n\\n@param `encoderList` The list of encoder to clone\\n\\n@param `encoderResult` The cloned encoder\\n\\n@param `encoderResultList` The cloned list of encoders\\n\\n\",\"signature\":\"CLONEEMPTY( gts:GTS ): result:GTS\\nCLONEEMPTY( gtsList:LIST<GTS> ): resultList:LIST<GTS>\\nCLONEEMPTY( encoder:GTSENCODER ): encoderResult:GTSENCODER\\nCLONEEMPTY( encoderList:LIST<GTSENCODER> ): encoderResultList:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEEMPTY\"},\"CLONEREVERSE\":{\"description\":\"The function CLONEREVERSE clone the input and reverses the order of the elements. \\nOutput is a reference to a new object.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n@param `input` reference of the list or string to reverse.\\n\\n@param `output` reference to a new reversed list or string or byte array.\\n\\n\",\"signature\":\"CLONEREVERSE( input:LIST ): output:LIST\\nCLONEREVERSE( input:STRING ): output:STRING\\nCLONEREVERSE( input:BYTES ): output:BYTES\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"CLONEREVERSE\"},\"COMMONTICKS\":{\"description\":\"Take a list of Geo Time Series™ and output A GTS list with only the set of ticks they have in common compared by timestamp.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with common ticks\\n\\n\",\"signature\":\"COMMONTICKS( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMMONTICKS\"},\"COMPACT\":{\"description\":\"The `COMPACT` function expects a Geo Time Series™ or a **LIST** of GTS on top of the stack. For each GTS instance it reads, it will \\nproduce a GTS whith fewer values, by removing measurements which have the same value, location and elevation as the previous one. The first tick will be the kept, then ticks with value or position change will be kept. The last tick from the original gts will be copied, in order to keep the same LASTTICK.\\n\\n@param `gts` A GTS to compact\\n\\n@param `gtsList` A GTS list to compact\\n\\n@param `result` A compacted GTS\\n\\n@param `resultList` A compacted GTS list\\n\\n\",\"signature\":\"COMPACT( gts:GTS ): result:GTS\\nCOMPACT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"COMPACT\"},\"CONTAINS\":{\"description\":\"The `CONTAINS` function checks if the element on top of the stack is contained by the list on second position. A boolean is pushed on the stack.\\n\\nIf the parameters are two STRINGs, `CONTAINS` checks if the second STRING is contained in the first one, leaving a boolean on the stack. This latter usage is available since revision 2.1.0.\\n\\n@param `item` Depending on list construction, could be a number, a string, a boolean, NULL, a GTS...\\n\\n@param `presence` true if inputlist contains the item. false otherwise or if inputlist is empty.\\n\\n@param `list` reference to the LIST to search.\\n\\n@param `set` reference to the SET to search.\\n\\n@param `str` STRING in which to find `substr`.\\n\\n@param `substr` STRING to find in `str`.\\n\\n\",\"signature\":\"CONTAINS( list:LIST item:ANY ): list:LIST presence:BOOLEAN\\nCONTAINS( set:SET item:ANY ): set:LIST presence:BOOLEAN\\nCONTAINS( str:STRING substr:STRING ): presence:BOOLEAN\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINS\"},\"CONTAINSKEY\":{\"description\":\"The `CONTAINSKEY` function checks if the key element on top of the stack is a key \\nof the map on second position. \\n\\nThe key is consumed, and a boolean is pushed on the stack.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this key. Do not trust presence if key is NULL.\\n\\n\",\"signature\":\"CONTAINSKEY( inputmap:MAP key:ANY ): outputmap:MAP presence:BOOLEAN\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSKEY\"},\"CONTAINSVALUE\":{\"description\":\"The `CONTAINSVALUE` function checks if the value element on top of the stack is a value \\nof the map on second position. \\n\\nThe value is consumed, and a boolean is pushed on the stack.\\n\\n@param `value` Depending on map construction, could be a number, a string, a boolean, NULL.\\n\\n@param `inputmap` reference to the map to search.\\n\\n@param `outputmap` copy of input map reference.\\n\\n@param `presence` true if inputmap has this value in at least one pair of its key-value.\\n\\n\",\"signature\":\"CONTAINSVALUE( inputmap:MAP value:ANY ): outputmap:MAP presence:BOOLEAN\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTAINSVALUE\"},\"CONTINUE\":{\"description\":\"Immediately stop executing the current iteration of an ongoing loop and start the next one.\\n\\n\",\"signature\":\"\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CONTINUE\"},\"COPYGEO\":{\"description\":\"The `COPYGEO` function forces the location elements of a GTS onto others. `COPYGEO` expects two parameters on the stack.\\nFirst input is GTS or a gts list: those series(s) will have their location overwritten by the one of the second GTS parameter. Geo information will be copied only if they are present in the second paramaters on the same tick otherwise it keep the existing location. See [`COMMONTICKS`](/doc/COMMONTICKS) to keep only commonticks before calling `COPYGEO`.\\n\\n@param `gts` A GTS\\n\\n@param `gtsList` A list of GTS\\n\\n@param `geogts` A GTS with the geo information you want to copy to other (list of) gts.\\n\\n@param `result` A GTS with the geo information of the geogts input\\n\\n@param `resultList` A list of GTS with the geo information of the geogts input\\n\\n\",\"signature\":\"COPYGEO( gts:GTS geogts:GTS ): result:GTS\\nCOPYGEO( gtsList:LIST<GTS> geogts:GTS ): resultList:LIST<GTS>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYGEO\"},\"COPYSIGN\":{\"description\":\"The `COPYSIGN` function copies the sign of a number on another one and pushes back the value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` Numeric parameter on which sign is applied\\n\\n@param `p2` Numeric parameter on which sign is extracted\\n\\n@param `list1` List of numeric parameter on wich sign is applied\\n\\n@param `list2` List of numeric parameter on wich sign is extracted\\n\\n@param `result` Value of p1 with the sign of p2 s a DOUBLE\\n\\n@param `lresult` List of results\\n\\n\",\"signature\":\"COPYSIGN( p1:NUMBER p2:NUMBER ): result:DOUBLE\\nCOPYSIGN( p1:NUMBER list2:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nCOPYSIGN( list1:LIST<NUMBER> p2:NUMBER ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"COPYSIGN\"},\"CORRELATE\":{\"description\":\"The `CORRELATE` function allows you to compute correlation between one base Geo Time Series™ and a set of others. \\nBy putting the base GTS in the set of others, cross correlation can be computed.\\n\\n@param `baseGTS` The base Geo Time Series\\n\\n@param `gtsList` A list of Geo Time Series against which to compute the correlation\\n\\n@param `timeOffsets` A list of time offsets for which the correlation will be computed (expressed in time units of the Warp instance)\\n\\n@param `result` A list of synthetic Geo Time Series™ whose timestamps are the offsets from the initial offset list and the values are the computed correlations. There is one GTS per GTS in the list at TOP-1.\\n\\n\",\"signature\":\"CORRELATE( baseGTS:GTS gtsList:LIST timeOffsets:LIST ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"CORRELATE\"},\"COS\":{\"description\":\"The `COS` function consumes a floating point number from the top of the stack and pushes back its cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Cosine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of cosine of the given values.\\n\\n\",\"signature\":\"COS( value:NUMBER ): result:DOUBLE\\nCOS( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COS\"},\"COSH\":{\"description\":\"The `COSH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic cosine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic cosine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic cosine of the given values.\\n\\n\",\"signature\":\"COSH( value:NUMBER ): result:DOUBLE\\nCOSH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"COSH\"},\"COUNTER\":{\"description\":\"The `COUNTER` function pushes a counter (AtomicLong) initialized with the value 0 onto the stack.\\n\\nThis atomic counter can be safely shared in multiple concurrent macros (see [`CEVAL`](/doc/CEVAL)).\\n\\n@param `counter` Counter instance.\\n\\n\",\"signature\":\"COUNTER(): counter:COUNTER\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTER\"},\"COUNTERDELTA\":{\"description\":\"The `COUNTERDELTA` function increments a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `increment` Counter increment.\\n\\n\",\"signature\":\"COUNTERDELTA( counter:COUNTER increment:LONG ): counter:COUNTER\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERDELTA\"},\"COUNTERSET\":{\"description\":\"The `COUNTERSET` function set the value of a counter and pushes it back onto the stack.\\n\\n@param `counter` Counter instance.\\n\\n@param `value` Counter value.\\n\\n\",\"signature\":\"COUNTERSET( counter:COUNTER value:LONG ): counter:COUNTER\",\"tags\":[\"counters\"],\"since\":\"1.2.22\",\"OPB64name\":\"COUNTERSET\"},\"COUNTERVALUE\":{\"description\":\"The `COUNTERVALUE` function pushes the counter value onto the stack.\\n\\n@param `counter` The counter instance.\\n\\n@param `value` The value of the counter.\\n\\n\",\"signature\":\"COUNTERVALUE( counter:COUNTER ): value:LONG\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTERVALUE\"},\"COUNTTOMARK\":{\"description\":\"Counts the number of elements on the stack up to but excluding the first mark encountered. Neither the mark nor the\\nelements on top of it are removed from the stack.\\n\\n@param `result` Stack depth until `MARK`\\n\\n\",\"signature\":\"COUNTTOMARK(): result:LONG\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"COUNTTOMARK\"},\"CPOPR\":{\"description\":\"Pops a value from the top of the stack and stores it into the designated register if the register is empty (*i.e.* has `NULL` as its current value).\\n\\nThe `CPOPR` function is really a family of functions named `CPOPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"signature\":\"CPOPR( value:ANY ): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"CPOPR\"},\"CPROB\":{\"description\":\"The function `CPROB` generates a new Geo Time Series™ from an input Geo Time Series™ by computing a conditional probability.\\n\\nThe function expects a **STRING** separator on top of the stack and expects the input Geo Time Series™ to have \\nvalues of the form given1< SEP >given2< SEP >....< SEP >event. It will then emit P(event|given1,given2,...).\\n\\nIf the separator is **NULL**, `CPROB` behaves like [`PROB`](/doc/PROB).\\n\\n@param `separator` Value separator\\n\\n@param `gts` Geo Time Series™\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `lresult` List of Geo Time Series™\\n\\n\",\"signature\":\"CPROB( gts:GTS separator:STRING ): result:GTS\\nCPROB( lgts:LIST<GTS> separator:STRING ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.6\",\"OPB64name\":\"CPROB\"},\"CROP\":{\"description\":\"The `CROP` function works on bucketized Geo Time Series™ instances, if transforms a GTS into another one whose bucketcount, last bucket parameters span the smallest interval with actual values. Bucket span remains the same.\\n\\nWhen called on a non bucketized GTS instance, `CROP` simply clones it.\\n\\nThis function expects a list of GTS instances on the top of the stack.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` ropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `resultList` A list of cropped version of GTS or a clone thereof if GTS was not bucketized.\\n\\n\",\"signature\":\"CROP( gts:GTS ): result:GTS\\nCROP( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"CROP\"},\"CSTORE\":{\"description\":\"The `CSTORE` function stores a value in a symbol or a register only if that symbol or register is not yet defined. The name of this function stands for Conditional STORE.\\n\\n@param `symbol` Name of symbol under which to store `value`.\\n\\n@param `register` Number of the register under which to store `value`.\\n\\n@param `value` Value to store unde `symbol`.\\n\\n\",\"signature\":\"CSTORE( value:ANY symbol:STRING ): \\nCSTORE( value:ANY register:LONG ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"CSTORE\"},\"CUDF\":{\"description\":\"The `CUDF` function invokes a User Defined Function from a Jar as [`UDF`](/doc/UDF) but reuses a cached instance of the function.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"signature\":\"CUDF( class:STRING ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"CUDF\"},\"DEBUGOFF\":{\"description\":\"Turns off stack debugging which was turned on by [`DEBUGON`](/doc/DEBUGON) or [`NDEBUGON`](/doc/NDEBUGON).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGOFF\"},\"DEBUGON\":{\"description\":\"Turns on stack debugging which returns the stack content in case of error. Stack debugging is off by default.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEBUGON\"},\"DECREMENTEXACT\":{\"description\":\"The `DECREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value decremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be decremented by one\\n\\n@param `result` The decremented value\\n\\n@param `lvalue` List of values to be decremented by one\\n\\n@param `lresult` List of decremented values\\n\\n\",\"signature\":\"DECREMENTEXACT( value:NUMBER ): result:DOUBLE\\nDECREMENTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"DECREMENTEXACT\"},\"DEDUP\":{\"description\":\"Removes duplicate ticks.\\n\\nThe `DEDUP` function consumes a Geo Time Series™ or a **LIST** thereof from the top of the stack and pushes back the Geo Time Series™ with deduplicated ticks.\\n\\nSince the 2.7.0 version, this function can be given an optional mapper or macro to combine the duplicate data points.\\n\\n@param `gts` The Geo Time Series™ to deduplicate\\n\\n@param `result` The Geo Time Series™ with deduplicated ticks\\n\\n@param `lgts` The list of Geo Time Series™ to deduplicate\\n\\n@param `lresult` The list of Geo Time Series™ with deduplicated ticks\\n\\n@param `mapper` Mapper used to aggregate duplicate values\\n\\n@param `macro` Macro used to aggregate duplicate values given as a GTS\\n\\n\",\"signature\":\"DEDUP( gts:GTS ): result:GTS\\nDEDUP( gts:GTS mapper:AGGREGATOR ): lresult:GTS\\nDEDUP( gts:GTS macro:MACRO ): lresult:GTS\\nDEDUP( lgts:LIST<GTS> ): lresult:LIST<GTS>\\nDEDUP( lgts:LIST<GTS> mapper:AGGREGATOR ): lresult:LIST<GTS>\\nDEDUP( lgts:LIST<GTS> macro:MACRO ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEDUP\"},\"DEF\":{\"description\":\"The `DEF` function allows you to define new WarpScript functions or redefine existing ones for the duration of your script execution.\\n\\nThe function expects on the stack a macro which will be used as the content of the newly defined function, and a name under which to define the new function.\\n\\nWhen redefining a function, if the function being redefined is used within the macro, the code which will be executed is the current one, \\nas the binding of function to code is done at the time when the macro is defined and not when it is executed.\\n\\nYou may therefore add limits to the use of an existing function by rewrapping it in a macro which will be associated with the original function name.\\n\\nTo remove redefined functions see [`CLEARDEFS`](/doc/CLEARDEFS).\\n\\n@param `name` New function name\\n\\n@param `newDef` Macro which will be used as the content of the newly defined function\\n\\n\",\"signature\":\"DEF( newDef:MACRO name:STRING ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEF\"},\"DEFINED\":{\"description\":\"The `DEFINED` function checks whether or not a symbol is defined.\\n\\n@param `name` Symbol name\\n\\n@param `result` Whether or not the symbol is defined\\n\\n\",\"signature\":\"DEFINED( name:STRING ): result:BOOLEAN\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEFINED\"},\"DEFINEDMACRO\":{\"description\":\"The `DEFINEDMACRO` function checks if a macro is defined and pushes true or false on the stack accordingly.\\n\\n@param `name` The macro name\\n\\n@param `result` True if the macro is defined, false otherwise\\n\\n\",\"signature\":\"DEFINEDMACRO( name:STRING ): result:BOOLEAN\",\"tags\":[\"logic\",\"control\"],\"since\":\"1.0.16\",\"OPB64name\":\"DEFINEDMACRO\"},\"DEFLATE\":{\"description\":\"The `DEFLATE` function compresses a STRING or a byte array using the [Zlib](https://en.wikipedia.org/wiki/Zlib) library. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"signature\":\"DEFLATE( string:STRING ): compressed:BYTES\\nDEFLATE( bytes:BYTES ): compressed:BYTES\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"DEFLATE\"},\"DELETE\":{\"description\":\"The `DELETE` function is used to delete a set of GTS from a Warp 10 platform. A delete endpoint must be set on the Warp 10 configuration.\\n\\nDelete expects 5 parameters on top of the stack: the write token of the Warp 10 application, a string corresponding to a gts selector, a start \\nand a end timestamp and finally the number of GTS expected to be deleted.\\n\\nFor safety reasons `DELETE` will first perform a dryrun call to the /delete endpoint to retrieve the number of GTS which would be deleted by the call. \\nIf this number is above the expected number provided by the user the actual delete will not be performed and instead an error will be raised.\\n\\nDelete will push as a result the number of GTS really deleted.\\n\\nIf both end_timestamp and start_timestamp are NULL, Warp 10 will perform a delete all. FETCH won't find anything after a delete all.\\n\\n```flow\\n// Write token\\n'TOKEN'\\n\\n// Gts selector\\n'gts.to.delete{}'\\n\\n// Start Timestamp\\n1479372838011043\\n\\n// End timestamp\\nNOW\\n\\n// DELETE expects a count number (if nb GTS > count, DELETE is stopped)\\n1\\n\\nDELETE \\n```\\n\\n@param `count` Number of GTS expected to be deleted\\n\\n@param `end_timestamp` End timestamp or NULL\\n\\n@param `start_timestamp` Start timestamp or NULL\\n\\n@param `gts_selector` GTS selector\\n\\n@param `writeToken` Write token\\n\\n@param `result` Actual deleted GTS count\\n\\n\",\"signature\":\"DELETE( writeToken:STRING gts_selector:STRING start_timestamp:LONG end_timestamp:LONG count:LONG ): result:LONG\",\"tags\":[\"gts\"],\"since\":\"1.0.5\",\"OPB64name\":\"DELETE\"},\"DELETEOFF\":{\"description\":\"Disables delete operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a delete operation is attempted.\\n\\n\",\"signature\":\"DELETEOFF( message:STRING secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEOFF\"},\"DELETEON\":{\"description\":\"Enables delete operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"DELETEON( secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"DELETEON\"},\"DEPTH\":{\"description\":\"The `DEPTH` function pushes on top of the stack the depth (i.e. number of levels) of the stack prior to the call.\\n\\n@param `result` Stack depth\\n\\n\",\"signature\":\"DEPTH(): result:LONG\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DEPTH\"},\"DEREF\":{\"description\":\"Replaces in a Macro the occurrences of symbol dereferencing (`$x`) or calls to `LOAD` with a `STRING` argument or calls to `PUSHRx` by the values associated with either the symbol name or register number in a parameter map.\\n\\nValues are used verbatim except for Macros which are inserted as functions, *i.e.* they are inserted followed by a call to `EVAL` so they are executed in the target macro instead of ending up on the stack. If you wish to replace a symbol dereference by a Macro, you need to write the macro inside of another Macro.\\n\\n\\n@param `macro` Macro to transform.\\n\\n@param `values` Map of symbol name or register number to replacement value.\\n\\n\",\"signature\":\"DEREF( macro:MACRO values:MAP ): macro:MACRO\",\"tags\":[\"stack\"],\"since\":\"2.3.0\",\"OPB64name\":\"DEREF\"},\"DET\":{\"description\":\"Computes the [determinant](https://en.wikipedia.org/wiki/Determinant) of a matrix.\\n\\n@param `matrix` The matrix for which to compute the determinant.\\n\\n@param `det` The computed determinant.\\n\\n\",\"signature\":\"DET( matrix:MATRIX ): det:DOUBLE\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"DET\"},\"DIFFERENCE\":{\"description\":\"Computes the difference between two sets.\\n\\nThe `DIFFERENCE` function consumes two sets from the top of the stack and pushes back its mathematical difference (ie: the elements in *A* but not in *B*).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* - *B*, the set of elements in *A* but not in *B*\\n\\n\",\"signature\":\"DIFFERENCE( setA:SET setB:SET ): output:SET\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"DIFFERENCE\"},\"DISCORDS\":{\"description\":\"The `DISCORDS` function detects discords in a Geo Time Series™. The discord detection algorithm is based on identifying outlier patterns in\\nthe Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `DISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0\\n\\n@param `overlapping` Flag indicating whether or not the `DISCORDS` function should report overlapping discords\\n\\n@param `maximum` The maximum number of discords to identify\\n\\n@param `lresult` The list of Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `result` The Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n\",\"signature\":\"DISCORDS( lgts:LIST<GTS> wsize:LONG length:LONG scale:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): lresult:LIST<GTS>\\nDISCORDS( gts:GTS wsize:LONG length:LONG scale:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): result:GTS\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"DISCORDS\"},\"DOC\":{\"description\":\"Consumes the String on the stack or leave it there and stop the script if the stack is currently in documentation mode ([`DOCMODE`](/doc/DOCMODE)) \\n\\nYou can use it to document macros.\\n\\n@param `string` Text to display in [`DOCMODE`](/doc/DOCMODE)\\n\\n\",\"signature\":\"DOC( string:STRING ): string:STRING\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOC\"},\"DOCMODE\":{\"description\":\"Toggle the 'documentation mode' of the stack\\n\\n\",\"signature\":\"\",\"tags\":[\"help\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOCMODE\"},\"DOUBLEBITS->\":{\"description\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the **LONG** value as the raw bits of the **DOUBLE**\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"DOUBLEBITS->( input:LONG ): result:DOUBLE\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"G3xKFZl4FZ_JJmoy\"},\"DOUBLEEXPONENTIALSMOOTHING\":{\"description\":\"The `DOUBLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Double Exponential Smoothing aka Holt's linear trend method](https://www.otexts.org/fpp/7/2) formula.\\n\\nIt consumes three parameters from the top of the stack:\\n * A trend smoothing factor beta (a numeric parameter between 0 < beta < 1)\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** and levels are pushed onto the stack (in this order in the **LIST**).\\n\\n@param `beta` The trend smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The list within the smoothed Geo Time Series™ and its levels\\n\\n\",\"signature\":\"DOUBLEEXPONENTIALSMOOTHING( gts:GTS alpha:DOUBLE beta:DOUBLE ): result:LIST<GTS>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"DOUBLEEXPONENTIALSMOOTHING\"},\"DROP\":{\"description\":\"The `DROP` function removes the element at the top of the stack.\\n\\n@param `input` object reference to drop from the top of the stack.\\n\\n\",\"signature\":\"DROP( input:ANY ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROP\"},\"DROPN\":{\"description\":\"The `DROPN` function removes the top N elements of the stack after having consumed N which was on the top of the stack prior to calling `DROPN`.\\n\\n@param `number` The number of elements to drop\\n\\n\",\"signature\":\"DROPN( number:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DROPN\"},\"DTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) or -1 if the threshold was reached.\\n\\n\",\"signature\":\"DTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"DTW\"},\"DUP\":{\"description\":\"The `DUP` function duplicates the element on the top of the stack, it doesn’t copy the content. If you apply DUP to a GTS you will\\nhave two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `input` any parameter on top of the stack\\n\\n@param `out` a reference copy of input on top of the stack\\n\\n\",\"signature\":\"DUP( input:ANY ): input:ANY out:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUP\"},\"DUPN\":{\"description\":\"The `DUPN` function duplicates the top N elements of the stack after having consumed N which is on the top of the stack when calling `DUPN`.\\n\\nAs the [`DUP`](/doc/DUP) function, `DUPN` duplicates the references of the N elements on the top of the stack, it doesn’t copy the elements.\\nIf you apply `DUPN` to a GTS you will have two references to the same GTS object on the stack.\\n\\nIf you want to make a deep copy of a GTS, i.e. if you want copy the content and not only the reference, you can use the [`CLONE`](/doc/CLONE) function.\\n\\n@param `number` The number of elements to duplicate\\n\\n\",\"signature\":\"DUPN( number:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"DUPN\"},\"DURATION\":{\"description\":\"The `DURATION` function consumes a **STRING** representing an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations) and pushes back a **LONG** duration in platform time unit.\\n\\nThe ISO 8601 duration can be expessed as `PwWdDThHmMsS` with:\\n- `w` weeks\\n- `d` days\\n- `h` hours\\n- `m` minutes\\n- `s` or `s.ssssss...` seconds\\nEach of these values can be either positive or negative. Each value/unit couple can be omitted if the value is zero but at least one value/couple should be defined.\\n\\nIf the consumed ISO 8601 duration has precision under platform time unit, superfluous digits will be ignored. Prior to revision 2.4, precision below milliseconds were always ignored, independently of platform time unit.\\n\\n@param `isoDuration` A representation of a ISO 8601 duration with some limitations, see the description.\\n\\n@param `duration` Number of platform time unit corresponding to the duration.\\n\\n\",\"signature\":\"DURATION( isoDuration:STRING ): duration:LONG\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"DURATION\"},\"DWTSPLIT\":{\"description\":\"The `DWTSPLIT` function splits a Geo Time Series™ produced by [`FDWT`](/doc/FDWT) into multiple series, one per resolution level of the Wavelet transform.\\n\\n\\n@param `label-name` Label name used in the generated series to indicate the level of each Geo Time Series™\\n\\n@param `gts` GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `lgts` List of GTS produced by [`FDWT`](/doc/FDWT)\\n\\n@param `result` Splited GTS\\n\\n@param `lresult` List of splited GTS\\n\\n\",\"signature\":\"DWTSPLIT( gts:GTS label-name:STRING ): result:GTS\\nDWTSPLIT( lgts:LIST<GTS> label-name:STRING ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"DWTSPLIT\"},\"E\":{\"description\":\"Alias of [e](/doc/OF).\\n\\nThe `E` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"signature\":\"E(): eValue:DOUBLE\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"GF\"},\"ECGEN\":{\"description\":\"The `ECGEN` function generates a public/private key pair parameters suitable for performing [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography).\\n\\nThe resulting parameters can serve as input to [`ECPRIVATE`](/doc/ECPRIVATE) and [`ECPUBLIC`](/doc/ECPUBLIC) to generate the actual private and public keys.\\n\\nThe following curves are supported:\\n\\n`c2pnb272w1`, `c2tnb191v3`, `c2pnb208w1`, `c2tnb191v2`, `c2tnb191v1`, `prime192v3`, `c2tnb359v1`, `prime192v2`, `prime192v1`, `c2tnb239v3`, `c2pnb163v3`, `c2tnb239v2`, `c2pnb163v2`, `c2tnb239v1`, `c2pnb163v1`, `c2pnb176w1`, `prime256v1`, `c2pnb304w1`, `c2pnb368w1`, `c2tnb431r1`, `prime239v3`, `prime239v2`, `prime239v1`, `sect233r1`, `secp112r2`, `secp112r1`, `secp256k1`, `sect113r2`, `secp521r1`, `sect113r1`, `sect409r1`, `secp192r1`, `sect193r2`, `sect131r2`, `sect193r1`, `sect131r1`, `secp160k1`, `sect571r1`, `sect283k1`, `secp384r1`, `sect163k1`, `secp256r1`, `secp128r2`, `secp128r1`, `secp224k1`, `sect233k1`, `secp160r2`, `secp160r1`, `sect409k1`, `sect283r1`, `sect163r2`, `sect163r1`, `secp192k1`, `secp224r1`, `sect239k1`, `sect571k1`, `B-163`, `P-521`, `P-256`, `B-233`, `P-224`, `B-409`, `P-384`, `B-283`, `B-571`, `P-192`, `brainpoolp512r1`, `brainpoolp384t1`, `brainpoolp256r1`, `brainpoolp192r1`, `brainpoolp512t1`, `brainpoolp256t1`, `brainpoolp224r1`, `brainpoolp320r1`, `brainpoolp192t1`, `brainpoolp160r1`, `brainpoolp224t1`, `brainpoolp384r1`, `brainpoolp320t1`, `brainpoolp160t1`\\n\\n@param `curve` Name of the elliptic curve to use.\\n\\n@param `public` Map containing the public key parameters.\\n\\n@param `private` Map containing the private key parameters.\\n\\n\",\"signature\":\"ECGEN( curve:STRING ): private:MAP public:MAP\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECGEN\"},\"ECHOOFF\":{\"description\":\"Turns off the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"ECHOOFF(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOOFF\"},\"ECHOON\":{\"description\":\"Turns on the automatic display of topmost stack levels after each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of topmost stack levels to display after each WarpScript™ line, truncated if floating-point.\\n\\n\",\"signature\":\"ECHOON( levels:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"ECHOON\"},\"ECPRIVATE\":{\"description\":\"The `ECPRIVATE` function generates a private key from private key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `private` Map containing ECC private key parameters.\\n\\n@param `key` ECC private key.\\n\\n\",\"signature\":\"ECPRIVATE( private:MAP ): key:KEY\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPRIVATE\"},\"ECPUBLIC\":{\"description\":\"The `ECPUBLIC` function generates a public key from public key parameters generated by [`ECGEN`](/doc/ECGEN).\\n\\n@param `public` Map containing ECC public key parameters.\\n\\n@param `key` ECC public key.\\n\\n\",\"signature\":\"ECPUBLIC( public:MAP ): key:KEY\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECPUBLIC\"},\"ECSIGN\":{\"description\":\"The `ECSIGN` function generates a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) private key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Content to sign.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `private` Private key to use for signining.\\n\\n@param `signature` Resulting signature.\\n\\n\",\"signature\":\"ECSIGN( data:BYTES alg:STRING private:KEY ): signature:BYTES\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECSIGN\"},\"ECVERIFY\":{\"description\":\"The `ECVERIFY` function verifies a cryptographic signature using an [Elliptic Curve Cryptography](https://en.wikipedia.org/wiki/Elliptic-curve_cryptography) public key.\\n\\nThe supported signature algorithms are those related to ECC by [Bouncy Castle](https://www.bouncycastle.org/):\\n\\n```\\nECDSAWITHSHA1\\nSHA1WITHECDSA\\nSHA224WITHECDSA\\nSHA256WITHECDSA\\nSHA384WITHECDSA\\nSHA512WITHECDSA\\n```\\n\\n@param `data` Signed data.\\n\\n@param `alg` Signing algorithm to use.\\n\\n@param `public` Public key to use for verification.\\n\\n@param `signature` Signature to verify.\\n\\n@param `result` Validity of the signature.\\n\\n\",\"signature\":\"ECVERIFY( data:BYTES signature:BYTES alg:STRING public:KEY ): result:BOOLEAN\",\"tags\":[\"crypto\"],\"since\":\"2.6.0\",\"OPB64name\":\"ECVERIFY\"},\"ELAPSED\":{\"description\":\"The `ELAPSED` function pushes onto the stack a list containing timing informations. The first element of the list is the timestamp at which \\nthe script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution \\nof the associated script line.\\n\\nTiming informations are only collected after a call to [`TIMINGS`](/doc/TIMINGS) (its line included) and before a call to [`NOTIMINGS`](/doc/NOTIMINGS)\\n (its line excluded).\\n\\n@param `result` The first element of the list is the timestamp at which the script was started (in ns). The other elements are the elapsed nanoseconds from the beginning of the script to the end of the execution of the associated script line.\\n\\n\",\"signature\":\"ELAPSED(): result:LIST<LONG>\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELAPSED\"},\"ELEVATIONS\":{\"description\":\"The `ELEVATIONS` function consumes a Geo Time Series™ or a list thereof from the stack, extracts its elevations, puts them in a list and pushes the list onto the stack.      \\n\\n@param `gts` The Geo Time Series™ from which to extract the elevations\\n\\n@param `lgts` The list of Geo Time Series™ from which to extract the elevations\\n\\n@param `elevations` The elevations of the given Geo Time Series™\\n\\n@param `lelevations` The list of elevations of the given Geo Time Series™\\n\\n\",\"signature\":\"ELEVATIONS( gts:GTS ): elevations:LIST<LONG>\\nELEVATIONS( lgts:LIST<GTS> ): lelevations:LIST<LIST<LONG>>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"ELEVATIONS\"},\"EMPTY\":{\"description\":\"Reject GTS instances with values.\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of GTS with empty values\\n\\n\",\"signature\":\"EMPTY( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"EMPTY\"},\"ENCODER->\":{\"description\":\"The `ENCODER->` functions convert an encoder into a list of ( timestamp, latitude, longitude, elevation, value ) list. It also pushes attributes, labels and name on the stack.\\nFunction also accepts wrapped or raw-wrapped encoders or gts.\\n\\nAn encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored. An encoder can also have a name, labels and attributes.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` Encoder input.\\n\\n@param `wrappedinput` Encoder or GTS after WRAP. \\n\\n@param `rawwrappedinput` Encoder or GTS after WRAPRAW.\\n\\n@param `output` List of list of ( timestamp, latitude, longitude, elevation, value ). Missing values in the encoder or GTS are replaced by NaN.\\n\\n@param `name` Name of encoder or GTS. If no name was defined, will be NULL.\\n\\n@param `attributes` Attributes of encoder or GTS input. If none defined, will be an empty map.\\n\\n@param `labels` Labels of encoder or GTS input. If none defined, will be an empty map.\\n\\n\",\"signature\":\"ENCODER->( encoder:GTSENCODER ): name:STRING attributes:MAP labels:MAP output:LIST\\nENCODER->( wrappedinput:STRING ): name:STRING attributes:MAP labels:MAP output:LIST\\nENCODER->( rawwrappedinput:BYTES ): name:STRING attributes:MAP labels:MAP output:LIST\",\"tags\":[\"encoder\",\"conversion\",\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"GJt2IoG4JXoy\"},\"ERROR\":{\"description\":\"Pushes onto the stack a list containing the current error (as caught by a [`TRY`](/doc/TRY)) and its causes. Each error is a map with the following fields:\\n\\n| Field | Description |\\n| --- | --- |\\n| type | Type of the error, the Java class of the underlying exception |\\n| message | The message associated with the error |\\n| stacktrace | A list of lists, each containing `filename`, `line number`, `class name`, `method name` |      \\n\\nThe current error is the first element of the list.\\n\\nIf there is no current error, the returned list will be empty.\\n\\n@param `error` List of maps describing the current error and its causes.\\n\\n\",\"signature\":\"ERROR(): error:LIST<MAP>\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ERROR\"},\"ESDTEST\":{\"description\":\"The `ESDTEST` function detects outliers in a GTS (or a **LIST** of GTS), by applying a [generalized extreme studentized deviate test](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm).\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nA [Grubbs’](/doc/GRUBBSTEST)test is done for one candidate at a time. Then, the candidate is removed from the set and another [Grubbs’](/doc/GRUBBSTEST)test\\nis performed. This process is iterated a given number of times. The detected outliers are the removed values and the current candidate of the last successful\\ntest.\\n\\nA **LIST** of ticks (or a **LIST** of **LIST** of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"signature\":\"ESDTEST( gts:GTS k:LONG mad:BOOLEAN alpha:DOUBLE ): result:LIST<LONG>\\nESDTEST( gts:GTS k:LONG mad:BOOLEAN ): result:LIST<LONG>\\nESDTEST( gtsList:LIST<GTS> k:LONG mad:BOOLEAN alpha:DOUBLE ): resultList:LIST<LIST<LONG>>\\nESDTEST( gtsList:LIST<GTS> k:LONG mad:BOOLEAN ): resultList:LIST<LIST<LONG>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ESDTEST\"},\"EVAL\":{\"description\":\"The `EVAL` function evaluates the statements contained in the string at the top of the stack as if they had been entered individually or runs the macro at the top os the stack.\\n\\n@param `string` String to evaluate\\n\\n@param `macro` Macro to run\\n\\n\",\"signature\":\"EVAL( macro:MACRO ): \\nEVAL( string:STRING ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVAL\"},\"EVALSECURE\":{\"description\":\"The `EVALSECURE` function executes a secure script. The script must have been created on a platform with the same secure script cryptographic key as the current platform (note that this is not the *secret* set using [`SECUREKEY`](doc/SECUREKEY)).\\n\\n@param `secure` String containing the secure script to execute.\\n\\n@param `return` The return values depend on the actual code of the secure script.\\n\\n\",\"signature\":\"EVALSECURE( secure:STRING ): return:ANY\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVALSECURE\"},\"EVERY\":{\"description\":\"When called via the `/mobius` endpoint, the `EVERY` function sets the repeat interval for the preceding macro.\\n\\nWhen called outside of `/mobius`, the `EVERY` function simply executes the macro.\\n\\n@param `repeat` The repeat interval to enforce, in milliseconds.\\n\\n@param `macro` The macro to execute.\\n\\n\",\"signature\":\"EVERY( macro:MACRO repeat:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"EVERY\"},\"EXP\":{\"description\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a floating point value x consumed from the top of the stack,\\n i.e. e<sup>x</sup>.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List where each value is e<sup>x</sup>\\n\\n\",\"signature\":\"EXP( value:NUMBER ): result:DOUBLE\\nEXP( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXP\"},\"EXPM1\":{\"description\":\"The `EXP` function pushed on the stack the Euler’s number [`e`](/doc/OF) raised to the power of a DOUBLE value x consumed from the top of the stack then subtracts one, i.e. e<sup>x</sup>-1.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Power to raise e to\\n\\n@param `result` e<sup>x</sup>-1\\n\\n@param `lvalue` List of power to raise e to\\n\\n@param `lresult` List of e<sup>x</sup>-1\\n\\n\",\"signature\":\"EXPM1( value:NUMBER ): result:DOUBLE\\nEXPM1( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"EXPM1\"},\"EXPORT\":{\"description\":\"The `EXPORT` function allows you to set or update a list of symbols which will be dumped upon script termination. This proves handy when \\ndebugging a script as you can visualize, even in the case of errors, the value of specific symbols.\\n\\nThe function expects either a symbol name (a **STRING**) which will be added to the current list of exported symbols, a list of symbol \\nname which will replace the current list of exported symbols, an empty list to disable symbol export altogether, or a list with a single\\n**NULL** element to instruct the WarpScript engine to export all existing symbols.\\n\\nWhen symbols should be exported, the debug mode is implied (see [`DEBUGON`](/doc/DEBUGON)).\\n\\n@param `symbol` Symbol name\\n\\n@param `symbols` List of symbols\\n\\n\",\"signature\":\"EXPORT( symbol:STRING ): \\nEXPORT( symbols:LIST ): \",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.2\",\"OPB64name\":\"EXPORT\"},\"EXTLOADED\":{\"description\":\"Checks if a WarpScript extension is loaded or not and therefore available.      \\n\\n@param `ext` Name of extension to check.\\n\\n@param `loaded` Boolean indicating whether or not the specified extension is loaded in the WarpScript environment.\\n\\n\",\"signature\":\"EXTLOADED( ext:STRING ): loaded:BOOLEAN\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"EXTLOADED\"},\"F\":{\"description\":\"`F` stand for `false`. It is a boolean constant.\\n\\n\\n@param `b` false\\n\\n\",\"signature\":\"F(): b:BOOLEAN\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"F\"},\"FAIL\":{\"description\":\"The `FAIL` function stops the execution of the WarpScript scripts by throwing an exception.\\n\\n\",\"signature\":\"\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FAIL\"},\"FDWT\":{\"description\":\"The `FDWT` function performs a [Forward Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Fast_wavelet_transform#Forward_DWT) on a Geo Time Series™.\\n\\nA number of different [Wavelets](https://en.wikipedia.org/wiki/Wavelet) are available, the list is inspired by that available on \\nthe [Wavelet Browser](http://wavelets.pybytes.com/).\\n\\nThe list of Wavelets which can be used is the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\nThe FDWT can only be applied to Geo Time Series™ with a number of values which is a power of 2.\\n\\nAssuming the input GTS has 2<sup>n</sup> values, the result of the FDWT transformation is a GTS with 2<sup>n</sup> values (the wavelet coefficients) with timestamps from 0 to 2<sup>n</sup>-1.\\n\\nThe ticks of the `n` levels are contiguous, with the first tick being for level `n`, the next 2 for level `n-1`, the next 4 for level `n-2`, up to the last 2<sup>n-1</sup> for level 1.\\n\\nLevel 1 has the finest time resolution but the coarsest frequency resolution. Each level has half (coarser) the time resolution and double (finer) the frequency resolution as the previous level.\\n\\n@param `wavelet` Name of wavelet to use for the transformation.\\n\\n@param `gts` Geo Time Series™ instance on which to perform the FDWT.\\n\\n@param `lgts` List of Geo Time Series™ on which to apply the FDWT.\\n\\n@param `fdwt` Transformed Geo Time Series™.\\n\\n@param `lfdwt` List of transformed Geo Time Series™.\\n\\n\",\"signature\":\"FDWT( gts:GTS wavelet:STRING ): fdwt:GTS\\nFDWT( lgts:LIST<GTS> wavelet:STRING ): lfdwt:LIST<GTS>\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FDWT\"},\"FETCH\":{\"description\":\"The `FETCH` function interacts with the Warp 10 Storage Engine to retrieve data according to given criteria.\\n\\n`FETCH` either accepts a list of 5 parameters or a map with the parameters. Those are defining the **read access rights**, the **concerned Geo Time Series** and the **time window**. Other parameters in the map input are optional. \\n\\nThe list input is here to keep backward compatibility with old WarpScripts. The map input allows a great flexibility, as described below.\\n\\n### Access rights\\nA valid read token is needed to read data with fetch. If you use a [metaset](/doc/METASET) and also specify a token, the token included in the metaset will be ignored.\\n\\n### Concerned Geo Time Series\\n`FETCH` selects Geo Time Series according to:\\n+ The `selectors` parameter, which is a list of selector.\\n+ If `selectors` is not found, `FETCH` uses the `selector` parameter which is a single selector.\\n+ If `selector` is not found, `FETCH`  uses both `class` and `labels` parameters.  \\n\\n### Time window\\n`FETCH`  begins from the newest value and stop when the oldest value is collected. Thus, `end` must be defined in your request and defines the newest included value in your time window. If `end` is anterior to your oldest value, the result will be empty (no Geo Time Series). The span of the time window ending at `end` is then defined according to:\\n+ The `timespan` parameter.\\n+ If `timespan` is not defined, `FETCH` collects a maximum of `count` point.\\n+ If `count` is not defined, `FETCH` determines `timespan` with `start`. If `start` is more recent than `end`, `end` and `start` are permuted internally. Be careful, this means `end` is included but  **`start` is excluded from the time window**.\\n\\n### Boundaries\\nSince version 2.3.0, you can define *boundaries* around the requested data. When fetching data based on a time range, both a *pre* and *post* boundaries can be specified. When fetching by count, only a *pre* boundary can be requested.\\nBoundaries are a number of datapoints which are either before (*pre* boundary) or after (*post* boundary) the fetched data. Fetching boundaries is very useful when storing only the changes of values as they enable you to always fetch datapoints even if the requested time range does not contain any. They can also be used to fetch the first `N` datapoints after a given timestamp.\\nNote that fetching *post* boundaries is less efficient than fetching the requested range or a *pre* boundary as the data has to be scanned in reverse order which has an impact on I/Os and ultimately on performance.\\n\\n### Sampling options\\n+ Since version 2.3.0, you can randomly sample points with the `sample` parameter. If `sample` equals 0.1, `FETCH` will randomly return one point out of ten. This implementation is the fastest way to resample data.\\n+ Since version 2.3.0, you can `skip` the N newest datapoints in the time window specified.\\n\\n### Query without looking into directory\\nThe fetch time to read one gts among millions of gts recorded with the same classname, the same application and the same owner can take time. Use the `gts` parameter to select if you exactly know the classname and all the labels.\\n\\nIf you want to read only Geo Time Series attributes or labels, using [FIND](/doc/FIND) is more efficient than fetching the last value.\\n\\n@param `token` Read token to use to fetch the data.\\n\\n@param `class` Selector for the GTS classes. Can either be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `labels` Map of labels selectors. The key is the label name, the value a selector which can be an exact match or a regular expression (the value should then start with a *~*).\\n\\n@param `start` Oldest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `end` Newest timestamp to consider when fetching datapoints. In platform time unit or [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601).\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n@param `metaset` A set of Geo Time Series™ produced by the [`METASET`](/doc/METASET) function.\\n\\n@param `type` Name of type to force for the GTS, either LONG, DOUBLE, BOOLEAN or STRING.\\n\\n@param `typeattr` Name of label to use for storing the GTS type. This option is incompatible with 'type', when set values of different types are ventilated in separate GTS with the same set of class and labels and an additional *type* label of the given name.\\n\\n@param `timespan` Depth to consider when fetching the datapoints. If the value is positive then it is interpreted as a duration in time units, if it is negative then as the maximum number of datapoints to fetch. If negative, incompatible with 'count'.\\n\\n@param `count` Maximum number of datapoints to fetch for each GTS. Incompatible with negative 'timespan'.\\n\\n@param `extra` List of extraneous classes to fetch. For each GTS matching the selection criteria, GTS with those extra class names will be fetched too (with the *exact* same set of labels).\\n\\n@param `active.after` Timestamp after which a GTS must have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `quiet.after` Timestamp after which a GTS must not have been updated to be considered for the fetch. This parameter is only considered when activity tracking is enabled.\\n\\n@param `gts` Explicit list of Geo Time Series™ to fetch. The class and labels will be used as is and not serve as selectors.\\n\\n@param `boundary` Number of datapoints to include in both *pre* and *post* boundaries.\\n\\n@param `boundary.pre` Number of datapoints in the *pre* boundary.\\n\\n@param `boundary.post` Number of datapoints in the *post* boundary.\\n\\n@param `sampling.ratio` A probability between 0 (excluded, no datapoints returned) and 1.0 (all datapoints returned). The random sampling is done by the storage layer, which is the most efficient.\\n\\n@param `skip.count` Set fetch to ignore the N newest points in the time window you specified.\\n\\n\",\"signature\":\"FETCH( [ token:STRING class:STRING labels:MAP end:LONG timespan:LONG ] ): data:LIST<GTS>\\nFETCH( [ token:STRING class:STRING labels:MAP start:STRING end:STRING ] ): data:LIST<GTS>\\nFETCH( { token:STRING class:STRING labels:MAP end:LONG start:STRING timespan:LONG count:LONG selector:STRING selectors:LIST<STRING> metaset:STRING type:STRING typeattr:STRING extra:LIST<STRING> active.after:LONG quiet.after:LONG gts:LIST<GTS> boundary.post:LONG boundary.pre:LONG boundary:LONG skip.count:LONG sampling.ratio:DOUBLE  } ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCH\"},\"FETCHBOOLEAN\":{\"description\":\"The `FETCHBOOLEAN` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type BOOLEAN.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"FETCHBOOLEAN( linput:LIST ): data:LIST<GTS>\\nFETCHBOOLEAN( minput:MAP ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHBOOLEAN\"},\"FETCHDOUBLE\":{\"description\":\"The `FETCHDOUBLE` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type DOUBLE.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"FETCHDOUBLE( linput:LIST ): data:LIST<GTS>\\nFETCHDOUBLE( minput:MAP ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHDOUBLE\"},\"FETCHLONG\":{\"description\":\"The `FETCHLONG` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type LONG.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"FETCHLONG( linput:LIST ): data:LIST<GTS>\\nFETCHLONG( minput:MAP ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHLONG\"},\"FETCHSTRING\":{\"description\":\"The `FETCHSTRING` function behaves just like [`FETCH`](doc/FETCH) but forces the resulting Geo Time Series™ to be of type STRING.\\n\\nPlease read the [`FETCH`](doc/FETCH) documentation for the detailed usage.\\n\\n@param `linput` List of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `minput` Map of parameters, see [`FETCH`](doc/FETCH) documentation\\n\\n@param `data` List of fetched Geo Time Series™.\\n\\n\",\"signature\":\"FETCHSTRING( linput:LIST ): data:LIST<GTS>\\nFETCHSTRING( minput:MAP ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FETCHSTRING\"},\"FFT\":{\"description\":\"The `FFT` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFT` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe real parts of the `FFT` coefficients, the second the imaginary parts. The scale factor is equal to X/(n * bucketspan) where n is the number\\nof elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the number\\nof values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFT` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the real parts of the `FFT` coefficients, the second the imaginary parts.\\n\\n\",\"signature\":\"FFT( gts:GTS ): result:LIST<GTS>\\nFFT( gtsList:LIST<GTS> ): result:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFT\"},\"FFTAP\":{\"description\":\"The `FFTAP` function computes a [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) on a Geo Time Series™ or a list\\nthereof it expects on top of the stack.\\n\\nThe result of the `FFTAP` execution is a list of two Geo Time Series™ and a frequency scale factor per input GTS. The first resulting GTS contains\\nthe amplitude of the coefficient at that frequency and the second the associated phase. The scale factor is equal to X/(n * bucketspan) where n is\\nthe number of elements in the origin GTS and X is the number of time units per second. The ticks of those Geo Time Series™ are indices from 0 to the\\nnumber of values in the original series minus one. The frequency associated with each tick is tick * factor, with the exception of tick 0 which is n * factor.\\n\\n`FFTAP` can only be applied to [bucketized](/doc/BUCKETIZE) numerical Geo Time Series™ which contains a number of values which is a power of 2.\\n\\n@param `gts` Bucketized numerical GTS\\n\\n@param `gtsList` List of bucketized numerical GTS\\n\\n@param `result` List of GTS: The first resulting GTS contains the amplitude of the coefficient at that frequency and the second the associated phase.\\n\\n\",\"signature\":\"FFTAP( gts:GTS ): result:LIST<GTS>\\nFFTAP( gtsList:LIST<GTS> ): result:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FFTAP\"},\"FFTWINDOW\":{\"description\":\"The `FFTWINDOW` transforms Geo Time Series™ by applying a [window function](https://en.wikipedia.org/wiki/Window_function) to its values. The function supports the following windows:\\n\\n| Name | Window |\\n| --- | --- |\\n| `triangular` | [Triangular](https://en.wikipedia.org/wiki/Window_function#Triangular_window) |\\n| `parzen` | [Parzen](https://en.wikipedia.org/wiki/Window_function#Parzen_window) |\\n| `welch` | [Welch](https://en.wikipedia.org/wiki/Window_function#Welch_window) |\\n| `sine` | [Sine](https://en.wikipedia.org/wiki/Window_function#Sine_window) |\\n| `hann` | [Hann](https://en.wikipedia.org/wiki/Window_function#Hann_window) |\\n| `hamming` | [Hamming](https://en.wikipedia.org/wiki/Window_function#Hamming_window) |\\n| `blackman` | [Blackman](https://en.wikipedia.org/wiki/Window_function#Blackman_window) |\\n| `nuttall` | [Nuttall](https://en.wikipedia.org/wiki/Window_function#Nuttall_window,_continuous_first_derivative) | \\n| `blackman-nuttall` | [Blackman-Nuttall](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Nuttall_window) |\\n| `blackman-harris` | [Blackman-Harris](https://en.wikipedia.org/wiki/Window_function#Blackman%E2%80%93Harris_window) |\\n| `flattop` | [Flat top](https://en.wikipedia.org/wiki/Window_function#Flat_top_window) |\\n| `rectangular` | [Rectangular](https://en.wikipedia.org/wiki/Window_function#Rectangular_window) |\\n\\n@param `window` Name of the window function to apply.\\n\\n@param `gts` Single Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `windowed` Tranformed Geo Time Series™.\\n\\n@param `lwindowed` List of transformed Geo Time Series™.\\n\\n\",\"signature\":\"FFTWINDOW( gts:GTS window:STRING ): windowed:GTS\\nFFTWINDOW( lgts:LIST<GTS> window:STRING ): lwindowed:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"FFTWINDOW\"},\"FILL\":{\"description\":\"The `FILL` function fills missing values in two Geo Time Series™ so they end up with identical ticks.\\n\\nThe filling is done using a *filler* function which applies a given strategy. Filler functions can be created using macros via the [`MACROFILLER`](/doc/MACROFILLER) function.\\n\\n@param `gtsa` First Geo Time Series™ to fill.\\n\\n@param `gtsb` Second Geo Time Series™ to fill.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"FILL( gtsa:GTS gtsb:GTS filler:FILLER ): gtsa:GTS gtsb:GTS\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"FILL\"},\"FILLNEXT\":{\"description\":\"The `FILLNEXT` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation of the \\nnext non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"signature\":\"FILLNEXT( gts:GTS ): result:GTS\\nFILLNEXT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLNEXT\"},\"FILLPREVIOUS\":{\"description\":\"The `FILLPREVIOUS` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance by re-using the value/location/elevation \\nof the previous non empty bucket to fill each empty bucket. It expects a GTS or a list thereof on the top of the stack.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n\",\"signature\":\"FILLPREVIOUS( gts:GTS ): result:GTS\\nFILLPREVIOUS( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLPREVIOUS\"},\"FILLTICKS\":{\"description\":\"The `FILLTICKS` function add values to a Geo Time Series™ instance or a list thereof for ticks in the given **LIST**.\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` Filled GTS\\n\\n@param `resultList` List of filled GTS\\n\\n@param `data` List of (latitude, longitude, elevation, ticks) where ticks is a list of ticks.\\n\\n\",\"signature\":\"FILLTICKS( gts:GTS data:LIST ): result:GTS\\nFILLTICKS( gtsList:LIST<GTS> data:LIST ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLTICKS\"},\"FILLVALUE\":{\"description\":\"The `FILLVALUE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with a fixed value/location/elevation.\\n\\nIt expects a GTS or a list thereof on the top of the stack after having consumed a list of parameters (latitude, longitude, elevation, value)\\nsitting on top of the stack prior to the call.\\n\\nLocation must be floating point numbers (e.g. 0.0 not 0). Elevation must be an integer. If no location or elevation should be set, **NaN** can\\nbe used instead of specific value.\\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n\\n\\nThe value is cast to the type of the GTS value\\n\\n@param `gts` The Geo Time Series™ to fill\\n\\n@param `gtsList` The list of Geo Time Series™ to fill\\n\\n@param `result` The filled Geo Time Series™\\n\\n@param `resultList` The list of filled Geo Time Series™\\n\\n@param `data` The list of parameters (latitude, longitude, elevation, value)\\n\\n\",\"signature\":\"FILLVALUE( gts:GTS data:LIST ): result:GTS\\nFILLVALUE( gtsList:LIST<GTS> data:LIST ): resultList:LIST<GTS>\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILLVALUE\"},\"FILTER\":{\"description\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `FILTER` framework allows for advanced filtering using N-ary functions\\n(functions which accept N parameters).\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A single list containing only the selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `FILTER`.\\n\\n\",\"signature\":\"FILTER( [ gtsList:LIST<GTS> labels:LIST<STRING> filter:FILTER ] ): result:LIST<GTS>\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"FILTER\"},\"FILTERBY\":{\"description\":\"The `FILTERBY` function selects elements of a list based on the boolean return value of a macro evaluated for each element.\\n\\n@param `macro` Macro used for filtering. This macro should consume the element of the list pushed on top of the stack and leave a boolean on the stack. If this boolean is `true`, the element will be retained.\\n\\n@param `list` List of elements to filter.\\n\\n@param `sublist` List with the selected elements from `list`.\\n\\n\",\"signature\":\"FILTERBY( list:LIST macro:MACRO ): sublist:LIST\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"FILTERBY\"},\"FIND\":{\"description\":\"The `FIND` function finds Geo Time Series™ labels and attributes of GTS, not their values. It is the fastest way to read attributes of GTS. `FIND` ask only `directory` component of Warp&nbsp;10™, while [FETCH](/doc/FETCH) first ask `directory`, then ask `store` to read GTS values. \\n\\nSyntax is close to [FETCH](/doc/FETCH), without time boundaries or data point count.\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `data` List of fetched Geo Time Series™. These GTS does not contain any value.\\n\\n@param `uuidattribute` Setting this to true add `.uuid` attribute in the output data. This UUID is a hash of class and label.\\n\\n@param `selector` A Geo Time Series™ selector with the syntax `class{labels}` where `class` is an exact match or a regular expression starting with *~* and `labels` a comma separated list of labels selector of the form `name=exact` or `name~regexp`. Names and values must be percent URL encoded if needed.\\n\\n@param `selectors` A list of GTS selectors, each with a syntax identical to that of 'selector'.\\n\\n\",\"signature\":\"FIND( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): data:LIST<GTS>\\nFIND( [ uuidattribute:BOOLEAN token:STRING classSelector:STRING labelsSelector:MAP ] ): data:LIST<GTS>\\nFIND( { token:STRING classSelector:STRING labelsSelector:MAP  } ): data:LIST<GTS>\\nFIND( { token:STRING selector:STRING  } ): data:LIST<GTS>\\nFIND( { token:STRING selectors:LIST<STRING>  } ): data:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIND\"},\"FINDSETS\":{\"description\":\"The `FINDSETS` function returns sets of values for the classes, labels and attributes of the Geo Time Series™ which matched the selection criteria.\\n\\nThose results can be used for example to update a UI with lists of possible values for labels when exploring a corpus of GTS.\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label names to exact match or regular expression (if the value starts with a *~*) for matching labels and attributes.\\n\\n@param `attributes` Map of attribute names to value list.\\n\\n@param `labels` Map of label names to value list.\\n\\n@param `classes` List of class names.\\n\\n\",\"signature\":\"FINDSETS( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): classes:LIST<STRING> labels:MAP attributes:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSETS\"},\"FINDSTATS\":{\"description\":\"The `FINDSTATS` function computes statistics on matching Geo Time Series™. The estimations are based on the use of [HyperLogLogPlus](https://en.wikipedia.org/wiki/HyperLogLog) estimators.\\n\\nThe function returns a map containing information about the matching Geo Time Series. The fields of the map are the following:\\n\\n| Key | Value |\\n|-----|-------|\\n| `gts.estimate` | Estimation of the number of matching Geo Time Series™ |\\n| `classes.estimate` | Estimation of the number of distinct class names |\\n| `labelnames.estimate` | Estimation of the number of distinct label names |\\n| `labelvalues.estimate` | Estimation of the number of distinct label values |\\n| `per.class.estimate` | If the number of matching classes is below the `directory.stats.class.maxcardinality`, this key will be associated with a map containing per class estimate of number of GTS |\\n| `per.label.value.estimate` | If the number of label names in the matching GTS is below `directory.stats.labels.maxcardinality`, this key will be associated with a map containing an estimation of distinct label values per label name |\\n| `error.rate` | This is the error rate of the estimators used for computing the estimations |\\n| `partial.results` | When accessing a sharded Directory, this will be set to `true` if only partial results were collected |\\n\\n\\n@param `token` Read token to use for finding Geo Time Series™.\\n\\n@param `classSelector` Exact match or regular expression (if the value starts with a *~*) for matching classes.\\n\\n@param `labelsSelector` Map of label name to exact match or regular expression (if the value strts with a *~*) for matching labels and attributes.\\n\\n@param `result` Map containing stats such as error rate or whether estimates on classes, gts, or labels.\\n\\n\",\"signature\":\"FINDSTATS( [ token:STRING classSelector:STRING labelsSelector:MAP ] ): result:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FINDSTATS\"},\"FIRSTTICK\":{\"description\":\"The `FIRSTTICK` function pushes on the stack the timestamp of the first tick of the Geo Time Series™ on top of the stack.\\n\\nWhen applied to a list of GTS, `FIRSTTICK` will return the lowest first tick found across all Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` Timestamp. If the GTS does not have values, **Long.MAX_VALUE** is pushed.\\n\\n\",\"signature\":\"FIRSTTICK( gts:GTS ): result:LONG\\nFIRSTTICK( lgts:LIST<GTS> ): result:LONG\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FIRSTTICK\"},\"FLATTEN\":{\"description\":\"The function `FLATTEN` inspects the top of the stack.\\n\\nIf it is a LIST of values,\\nit inspects each value and replaces each value which was a LIST with its content.\\n`FLATTEN` proceed recursively until all LISTs have been flattened.\\n\\nIf it is not a LIST, the function exits and let the stack in the same state.\\n\\n@param `input` Input is a list who may contains lists\\n\\n@param `notAList` An object which is not a list\\n\\n@param `output` Output list do not contains anymore nested lists\\n\\n\",\"signature\":\"FLATTEN( input:LIST ): output:LIST\\nFLATTEN( notAList:ANY ): notAList:ANY\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLATTEN\"},\"FLOATBITS->\":{\"description\":\"Converts the **LONG** on top of the stack to a **DOUBLE** by considering the 32 lower bits of the **LONG** value as the raw bits of a **FLOAT**.\\n\\n@param `input` Value to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"FLOATBITS->( input:LONG ): result:DOUBLE\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.2.3\",\"OPB64name\":\"GZlEFKG1HKGIAIs\"},\"FLOOR\":{\"description\":\"The `FLOOR` function consumes a numeric parameter from the top of the stack and pushes back the nearest long number smaller than the parameter.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Rounded-down value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of rounded-down values, for each given value.\\n\\n\",\"signature\":\"FLOOR( value:NUMBER ): result:DOUBLE\\nFLOOR( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"FLOOR\"},\"FLOORDIV\":{\"description\":\"The `FLOORDIV` function consumes two NUMBER values, convert them to LONGs and pushes back largest LONG value that is less than or equal to the algebraic quotient.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fDiv` The largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfDiv` List of largest (closest to positive infinity) int value that is less than or equal to the algebraic quotient\\n\\n\",\"signature\":\"FLOORDIV( dividend:NUMBER divisor:NUMBER ): fDiv:LONG\\nFLOORDIV( dividend:NUMBER ldivisor:LIST<NUMBER> ): lfDiv:LIST<LONG>\\nFLOORDIV( ldividend:LIST<NUMBER> divisor:NUMBER ): lfDiv:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORDIV\"},\"FLOORMOD\":{\"description\":\"The `FLOORMOD` function consumes two NUMBER values, convert them to LONGs and pushes back the floor modulus which is x - (floorDiv(x, y) * y).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` The dividend\\n\\n@param `divisor` The divisor\\n\\n@param `fMod` The floor modulus x - (floorDiv(x, y) * y)\\n\\n@param `ldividend` List of dividends\\n\\n@param `ldivisor` List of divisors\\n\\n@param `lfMod` List of floor modulus x - (floorDiv(x, y) * y)\\n\\n\",\"signature\":\"FLOORMOD( dividend:NUMBER divisor:NUMBER ): fMod:LONG\\nFLOORMOD( dividend:NUMBER ldivisor:LIST<NUMBER> ): lfMod:LIST<LONG>\\nFLOORMOD( ldividend:LIST<NUMBER> divisor:NUMBER ): lfMod:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"FLOORMOD\"},\"FOR\":{\"description\":\"The `FOR` function implements a for loop. It takes three arguments from the stack: the initial and the final values of the loop index and a macro to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"FOR( initial:NUMBER final:NUMBER macro:MACRO ): \\nFOR( initial:NUMBER final:NUMBER macro:MACRO index:BOOLEAN ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOR\"},\"FOREACH\":{\"description\":\"The `FOREACH` function implements a for loop on a list or map.\\n\\nFor each iteration i on a list, the i-th element on the list is put on top of the stack, and the exec macro is then called.\\n\\nFor each iteration i on a map, the exec macro is called with the i-th value on top of the stack, and the i-th key just below on the stack.\\nYou can start your macro with `'value' STORE 'key' STORE`.\\n\\nSince release 2.1, `FOREACH` has the ability to iterate over Geo Time Series™ and GTS Encoders. When iterating over a GTS or Encoder, the macro is fed with a list of the form `[ tick lat lon elev value ]` where `lat`, `lon` and `elev` may be `NaN` if unset. In the case of an Encoder, `value` can be a byte array or a `BigDecimal` on top of `LONG`, `DOUBLE`, `STRING` or `BOOLEAN`.\\n\\nSince release 2.4.0, you can force FOREACH to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `exec` Macro to apply\\n\\n@param `list` List to iterate on\\n\\n@param `map` Map to iterate on\\n\\n@param `set` Set to iterate on\\n\\n@param `vector` Vector to iterate on\\n\\n@param `gts` GTS to iterate on\\n\\n@param `string` String to iterate on\\n\\n@param `encoder` GTSEncoder to iterate on\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"FOREACH( list:LIST exec:MACRO ): \\nFOREACH( map:MAP exec:MACRO ): \\nFOREACH( set:SET exec:MACRO ): \\nFOREACH( vector:VLIST exec:MACRO ): \\nFOREACH( string:STRING exec:MACRO ): \\nFOREACH( gts:GTS exec:MACRO ): \\nFOREACH( encoder:GTSENCODER exec:MACRO ): \\nFOREACH( list:LIST exec:MACRO index:BOOLEAN ): \\nFOREACH( map:MAP exec:MACRO index:BOOLEAN ): \\nFOREACH( set:SET exec:MACRO index:BOOLEAN ): \\nFOREACH( vector:VLIST exec:MACRO index:BOOLEAN ): \\nFOREACH( string:STRING exec:MACRO index:BOOLEAN ): \\nFOREACH( gts:GTS exec:MACRO index:BOOLEAN ): \\nFOREACH( encoder:GTSENCODER exec:MACRO index:BOOLEAN ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FOREACH\"},\"FORGET\":{\"description\":\"Removes a symbol from the symbol table.      \\n\\n@param `symbol` Name of the symbol to remove.\\n\\n\",\"signature\":\"FORGET( symbol:STRING ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORGET\"},\"FORSTEP\":{\"description\":\"The `FORSTEP` function implements for loop with an index step. It takes four arguments from the stack: the initial and the final values of the loop index,\\na macro step to evaluate after each iteration and an other one to be executed at each iteration.\\n\\nFor each iteration the loop index is put on top of the stack, and the exec macro is then called. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` Macro to repeat, the index of the loop is placed on the TOP of the stack\\n\\n@param `step` Macro step to evaluate after each iteration, typically to compute index\\n\\n@param `final` Final value\\n\\n@param `initial` Initial value\\n\\n@param `index` When set to true, the current index will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"FORSTEP( initial:NUMBER final:NUMBER step:MACRO macro:MACRO ): \\nFORSTEP( initial:NUMBER final:NUMBER step:MACRO macro:MACRO index:BOOLEAN ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"FORSTEP\"},\"FROMBIN\":{\"description\":\"Converts the binary representation on top of the stack into the corresponding long.\\n\\n@param `input` Binary representation of a signed long, 64 characters max.\\n\\n@param `output` Signed long of input.\\n\\n\",\"signature\":\"FROMBIN( input:STRING ): output:LONG\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBIN\"},\"FROMBITS\":{\"description\":\"**This function is deprecated. Replace it in your code by the [`DOUBLEBITS->`](/doc/G3xKFZl4FZ_JJmoy) function.**\\n\\nConverts the **LONG** on top of the stack into a **DOUBLE** by considering it a raw bit representation.\\n\\n@param `input` Raw bit representation to convert\\n\\n@param `result` Converted value\\n\\n\",\"signature\":\"FROMBITS( input:LONG ): result:DOUBLE\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMBITS\"},\"FROMHEX\":{\"description\":\"Converts an hexadecimal representation into a signed long. 64bits max.\\n\\n@param `input` Valid hexadecimal string representation.\\n\\n@param `output` Signed long\\n\\n\",\"signature\":\"FROMHEX( input:STRING ): output:LONG\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"FROMHEX\"},\"FUNCTIONS\":{\"description\":\"FUNCTIONS returns a list of every functions available in your Warp 10 environnment, including native and extension functions.\\n\\nIt could be useful when coding your own extension to check your new functions are correctly registered.\\n\\n\\nFUNCTIONS allow anyone to discover new extensions you created on the platform, so it is deactivated by default.\\n\\nYou must add `warpscript.extension.inventory=io.warp10.script.ext.inventory.InventoryWarpScriptExtension` in your configuration file for this function to be available.\\n\\n@param `functions` List of Warp 10 functions available on this instance\\n\\n\",\"signature\":\"FUNCTIONS(): functions:LIST<STRING>\",\"tags\":[\"platform\",\"extensions\"],\"since\":\"1.2.16\",\"OPB64name\":\"FUNCTIONS\"},\"FUSE\":{\"description\":\"Fuses Geo Time Series™ chunks. The fusion process attempts to keep the bucketization parameters if all chunks are bucketized with compatible `bucketspan` and `lastbucket` values.\\n\\nAll chunks must be of the same type.\\n\\nThe fused GTS will have the common class name of the chunks or no class name if some chunks have a different class name. The labels will be those common to all chunks, so when fusing chunks created with [`CHUNK`](/doc/CHUNK), the chunk id will be dropped.\\n\\n@param `chunks` List of Geo Time Series™ to fuse.\\n\\n@param `gts` Geo Time Series™ resulting from the fusion of `chunk`.\\n\\n\",\"signature\":\"FUSE( chunks:LIST<GTS> ): gts:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"FUSE\"},\"GEO.BUFFER\":{\"description\":\"The `GEO.BUFFER` function allows to create [*buffer*](https://en.wikipedia.org/wiki/Buffer_(GIS)) **GEOSHAPE** objects. The function takes a `MAP` instance as input. This map can contain the following entries:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `dist` | Distance of the buffer, as a central angle expressed in degrees. |\\n| `mdist` | Distance of the buffer expressed in meters. This key is only taken into account if `dist` is not specified. |\\n| `cap` | The end cap style to consider, use `SQUARE`, `FLAT` or `ROUND` (default). |\\n| `join` | The join style to use, use `BEVEL`, `MITRE` or `ROUND` (default). |\\n| `limit` | The mitre limit to use. Defaults to 5.0. |\\n| `segments` | Number of segments to use per quadrant, defaults to 8. |\\n| `singlesided` | Set to `true` to compute a single sided buffer. If `true`, positive distance will indicate left-hand side and negative distance right-hand side. End cap is ignored for single sided buffers. |\\n| `wkb` | Byte array containing a [WKB](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary) definition of a geographic area. |\\n| `wkt` | String containing a [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) definition of a geographic area. |\\n| `geojson` | String containing a [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) definition of a geographic area. |\\n\\nIf a geographic area is defined, only one of `wkb`, `wkt` or `geojson` may be specified. The output of the function is a new definition of a geographic area with the buffer added to the original definition.\\n\\nIf no geographic area is defined, `GEO.BUFFER` will define a buffer which will be used by the next call to either [`GEO.WKT`](/doc/GEO.WKT), [`GEO.WKB`](/doc/GEO.WKB) or [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `params` Parameter map containing keys as defined above.\\n\\n@param `wkb` Area definition with the buffer added, if `params` had a value for key `wkb`.\\n\\n@param `area` Area definition with the buffer added, in WKT or GeoJSON depending on the presence of key `wkt` or `geojson` in `params`.\\n\\n\",\"signature\":\"GEO.BUFFER( params:MAP ): wkb:BYTES\\nGEO.BUFFER( params:MAP ): area:STRING\\nGEO.BUFFER( params:MAP ): \",\"tags\":[\"geo\"],\"since\":\"2.7.0\",\"OPB64name\":\"GEO.BUFFER\"},\"GEO.COVER\":{\"description\":\"The `GEO.COVER` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* in which the input Geo Time Series™ or GTS Encoder had datapoints.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"signature\":\"GEO.COVER( gts:GTS resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER( encoder:GTSENCODER resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER( list:LIST resolution:LONG ): geoshapes:LIST<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER\"},\"GEO.COVER.RL\":{\"description\":\"The `GEO.COVER.RL` function creates a WarpScript™ **GEOSHAPE** representing a geographical area at a specified resolution.\\n\\nThe area is composed of *geo cells* which cover the path of an input Geo Time Series™ or GTS Encoder. The path is considered to follow [rhumb lines](https://en.wikipedia.org/wiki/Rhumb_line), hence the function suffix `.RL`.\\n\\nThe resolution of the cells is an even number from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `gts` Input Geo Time Series™.\\n\\n@param `encoder` Input GTS Encoder.\\n\\n@param `list` Input list of Geo Time Series™ and/or GTS Encoders.\\n\\n@param `geoshape` Resulting GEOSHAPE coverage.\\n\\n@param `geoshapes` List of computed GEOSHAPEs.\\n\\n\",\"signature\":\"GEO.COVER.RL( gts:GTS resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER.RL( encoder:GTSENCODER resolution:LONG ): geoshape:GEOSHAPE\\nGEO.COVER.RL( list:LIST resolution:LONG ): geoshapes:LIST<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GEO.COVER.RL\"},\"GEO.DIFFERENCE\":{\"description\":\"The `GEO.DIFFERENCE` function computes the difference between two GEOSHAPE. The resulting GEOSHAPE instance contains cells which cover the part of the first GEOSHAPE which is not in the second. If you need to have cells up to a certain resolution, you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the result.\\n\\n@param `shapeA` GEOSHAPE instance from which to subtract the second shape.\\n\\n@param `shapeB` GEOSHAPE to subtract from 'shapeA'.\\n\\n@param `shape` GEOSHAPE containing 'shapeA' minus 'shapeB'.\\n\\n\",\"signature\":\"GEO.DIFFERENCE( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.DIFFERENCE\"},\"GEO.INTERSECTION\":{\"description\":\"The `GEO.INTERSECTION` function computes the intersection of two GEOSHAPE instances. The intersection process will produce a GEOSHAPE whose cells are common to the two initial shapes. The common cells will be of various resolutions, depending on the resolutions of the cells from the initial shapes. If you need the resulting shape to contain cells up to a specific resolution, you can call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) either on the result or on the initial shapes.\\n\\n@param `shapeA` First GEOSHAPE instance.\\n\\n@param `shapeB` Second GEOSHAPE instance.\\n\\n@param `shapes` GEOSHAPE instances.\\n\\n@param `shape` Geographical area (GEOSHAPE) resulting from the intersection of the given shapes.\\n\\n\",\"signature\":\"GEO.INTERSECTION( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\\nGEO.INTERSECTION( shapes:LIST<GEOSHAPE> ): shape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTION\"},\"GEO.INTERSECTS\":{\"description\":\"The `GEO.INTERSECTS` function checks if a Geo Time Series or each GTS from a list has at least one data point with a position inside a given geographical area. Since `2.7.1`, the function can also check if two `GEOSHAPE` instances intersect.\\n\\n@param `shapeA` First `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shapeB` Second `GEOSHAPE` to consider when checking if `GEOSHAPE` instances intersect.\\n\\n@param `shape` Instance of GEOSHAPE containing the area which the Geo Time Series must intersect.\\n\\n@param `gts` Single instance of Geo Time Series.\\n\\n@param `lgts` List of Geo Time Series.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series had at least one datapoint in 'shape' or if the two shapes intersect.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had at least one datapoint in 'shape'.\\n\\n\",\"signature\":\"GEO.INTERSECTS( gts:GTS shape:GEOSHAPE ): result:BOOLEAN\\nGEO.INTERSECTS( lgts:LIST<GTS> shape:GEOSHAPE ): results:LIST<BOOLEAN>\\nGEO.INTERSECTS( shapeA:GEOSHAPE shapeB:GEOSHAPE ): result:BOOLEAN\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.INTERSECTS\"},\"GEO.JSON\":{\"description\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GEO.JSON( GeoJSON:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.JSON( GeoJSON:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.2.9\",\"OPB64name\":\"GEO.JSON\"},\"GEO.JSON.UNIFORM\":{\"description\":\"The `GEO.JSON` function creates a WarpScript object (GEOSHAPE) representing a geographical area. The description of the geographical area uses the [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even numbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.JSON`](doc/GEO.JSON), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the GeoJSON (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `GeoJSON` Description of the geographical area in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GEO.JSON.UNIFORM( GeoJSON:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.JSON.UNIFORM( GeoJSON:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.JSON.UNIFORM\"},\"GEO.NORMALIZE\":{\"description\":\"The `GEO.NORMALIZE` function ensures that the intersection of two **GEOSHAPE**s is present in both as an identical set of cells.\\n\\n@param `shapeA` The first GEOSHAPE to normalize.\\n\\n@param `shapeB` The second GEOSHAPE to normalize.\\n\\n@param `normalizedA` A normalized copy of the first GEOSHAPE.\\n\\n@param `normalizedB` A normalized copy of the second GEOSHAPE.\\n\\n\",\"signature\":\"GEO.NORMALIZE( shapeA:GEOSHAPE shapeB:GEOSHAPE ): normalizedA:GEOSHAPE normalizedB:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEO.NORMALIZE\"},\"GEO.OPTIMIZE\":{\"description\":\"The `GEO.OPTIMIZE` function optimizes a GEOSHAPE instance by modifying its cells to either limit the finest resolution present in the shape or reduce the number of cells by merging cells which cover a whole cell at the coarser resolution.\\n\\n@param `shape` GEOSHAPE instance to optimize.\\n\\n@param `resolution` Finest resolution acceptable (even number from 2 to 32) or 0 to reduce the number of cells.\\n\\n@param `optimized` Optimized GEOSHAPE instance\\n\\n\",\"signature\":\"GEO.OPTIMIZE( shape:GEOSHAPE resolution:LONG ): optimized:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.2.13\",\"OPB64name\":\"GEO.OPTIMIZE\"},\"GEO.REGEXP\":{\"description\":\"The `GEO.REGEXP` function converts a GEOSHAPE into a regular expression to select hexadecimal [HHCode](https://en.wikipedia.org/wiki/HHCode) STRINGs which are included in the GEOSHAPE.\\n\\n@param `shape` An instance of GEOSHAPE.\\n\\n@param `regexp` A regular expression for matching HHCodes covered by 'shape'.\\n\\n\",\"signature\":\"GEO.REGEXP( shape:GEOSHAPE ): regexp:STRING\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GEO.REGEXP\"},\"GEO.UNION\":{\"description\":\"The `GEO.UNION` function computes a GEOSHAPE which is the union of two other shapes. The resulting shape will have cells covering the two original shapes. If you need to have cells up to a certain resolution you should call [`GEO.OPTIMIZE`](doc/GEO.OPTIMIZE) on the resulting shape.\\n\\n@param `shapeA` First GEOSHAPE instance to merge.\\n\\n@param `shapeB` Second GEOSHAPE instance to merge.\\n\\n@param `shapes` GEOSHAPE instances to merge.\\n\\n@param `shape` Resulting GEOSHAPE which is the union of the given shapes.\\n\\n\",\"signature\":\"GEO.UNION( shapeA:GEOSHAPE shapeB:GEOSHAPE ): shape:GEOSHAPE\\nGEO.UNION( shapes:LIST<GEOSHAPE> ): shape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.UNION\"},\"GEO.WITHIN\":{\"description\":\"The `GEO.WITHIN` function checks whether a Geo Time Series™ or each GTS from a list have all its datapoints with a location inside a given geographical area.\\n\\n@param `shape` Instance of GEOSHAPE containing the area inside which the Geo Time Series™ must be contained.\\n\\n@param `gts` Single instance of Geo Time Series™.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `result` Boolean indicating whether or not the Geo Time Series™ had all its datapoints with a location inside 'shape'.\\n\\n@param `results` List of boolean results indicating whether or not each GTS had all its datapoints with a location inside 'shape'.\\n\\n\",\"signature\":\"GEO.WITHIN( gts:GTS shape:GEOSHAPE ): result:BOOLEAN\\nGEO.WITHIN( lgts:LIST<GTS> shape:GEOSHAPE ): results:LIST<BOOLEAN>\",\"tags\":[\"geo\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WITHIN\"},\"GEO.WKB\":{\"description\":\"The `GEO.WKB` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GEO.WKB( WKB:BYTES percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKB( WKB:BYTES resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB\"},\"GEO.WKB.UNIFORM\":{\"description\":\"The `GEO.WKB.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKB`](doc/GEO.WKB), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKB (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKB` Description of the geographical area in [Well Known Binary](https://en.wikipedia.org/wiki/Well-known_binary).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"signature\":\"GEO.WKB.UNIFORM( WKB:BYTES percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKB.UNIFORM( WKB:BYTES resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"2.2.1\",\"OPB64name\":\"GEO.WKB.UNIFORM\"},\"GEO.WKT\":{\"description\":\"The `GEO.WKT` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical area uses the\\n[Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using\\n[`MAXGEOCELLS`](/doc/MAXGEOCELLS).\\n\\nSince 2.4.0, you can easily visualize geoshapes in WarpScript editors. See example.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geoshape object.\\n\\n\",\"signature\":\"GEO.WKT( WKT:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKT( WKT:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"GEO.WKT\"},\"GEO.WKT.UNIFORM\":{\"description\":\"The `GEO.WKT.UNIFORM` function creates a WarpScript object (**GEOSHAPE**) representing a geographical area. The description of the geographical\\narea uses the [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text) format.\\n\\nThe coordinates are assumed to be in [WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System).\\n\\nA GEOSHAPE is a set of cells at various resolutions which cover (or are contained within) the specified area. The resolutions of the cells are even\\nnumbers from 2 (coarsest) to 30 (finest) with the following associated precisions at the equator:\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\nThe number of cells that a GEOSHAPE may contain is limited by the platform configuration, this limit can be modified up to the hard limit using [`MAXGEOCELLS`](doc/MAXGEOCELLS).\\n\\nThis function is nearly identical to [`GEO.WKT`](doc/GEO.WKT), differing only by the fact that the produced GEOSHAPE only contains cells of a single resolution.\\n\\n@param `inside` Boolean indicating whether the coverage should include only cells which are inside the area described by the WKT (`true`) or also those which simply intersect the area (`false`).\\n\\n@param `percentage` Precision of the resulting area coverage in percentage of the area bounding box diagonal. This value will determine the resolution of the smallest cells used to cover the area.\\n\\n@param `resolution` Finest resolution to use for the cells covering the area. Resolution is an even number between 2 and 30.\\n\\n@param `WKT` Description of the geographical area in [Well Known Text](https://en.wikipedia.org/wiki/Well-known_text).\\n\\n@param `geoshape` Geographical area output.\\n\\n\",\"signature\":\"GEO.WKT.UNIFORM( WKT:STRING percentage:DOUBLE inside:BOOLEAN ): geoshape:GEOSHAPE\\nGEO.WKT.UNIFORM( WKT:STRING resolution:LONG inside:BOOLEAN ): geoshape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.2.11\",\"OPB64name\":\"GEO.WKT.UNIFORM\"},\"GEOCELL->\":{\"description\":\"The `GEOCELL->` function converts a **LONG** geocell to a **STRING** HHCode prefix. The resulting string length is half the resolution of the geocell.\\n\\nThis function cannot convert to **BYTES** because this representation is limited to resolutions multiple of 4.\\n\\nA geocell is a **LONG** where the 4 MSBs store the resolution and the 60 LSBs store a trimmed HHCode. The value stored in the 4 MSBs must be multiplied by 2 to give the resolution of the trimmed HHCode, thus only even resolutions can be represented in a geocell. A resolution of 0 is considered invalid and the highest resolution is 30. The value stored in the 60 LSBs are the 60 MSBs of a HHCode but only the 2*resolution MSBs must be considered.\\n\\nHere is an example of the bits representation of a geocell and their meaning:\\n\\n```\\n1001101101010111001001011000100010101111000000000000000000000000\\n\\\\__/\\\\__________________________________/\\\\______________________/\\n ||                  ||                            ||\\nRes: 9*2=18          ||                            ||\\n        18*2 relevant bits of HHCode     60-18*2 unrelevant bits\\n```\\n\\nA **GEOSHAPE** is simply a list of geocells, see [->GEOSHAPE](/doc/GoKEFoKBI1oy) to build a **GEOSHAPE** from geocells. \\n\\n@param `geocell` A geocell.\\n\\n@param `hhPrefix` A HHCode prefix representing the given cell.\\n\\n\",\"signature\":\"GEOCELL->( geocell:LONG ): hhPrefix:STRING\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEFoKBI1oy\"},\"GEOHASH->\":{\"description\":\"The `GEOHASH->` converts a [Geohash](https://en.wikipedia.org/wiki/Geohash), exposing the latitude and longitude it contains, or transforms a list of Geohashes into a `GEOSHAPE`.\\n\\n@param `geohash` Geohash to unpack.\\n\\n@param `geohashes` List of Geohashes defining a geographical area.\\n\\n@param `lat` Unpacked latitude.\\n\\n@param `lon` Unpacked longitude.\\n\\n@param `toHHCodeString` Set to `true` to convert the GeoHash to a HHCode STRING or to `false` to convert it to a LONG HHCode instead of extracting its latitude and longitude.\\n\\n@param `hhcode` The HHCode for `geohash`, as a LONG or STRING.\\n\\n@param `shape` Warp 10 `GEOSHAPE` covering the same geographic area as the Geohashes in `geohashes`.\\n\\n\",\"signature\":\"GEOHASH->( geohash:STRING ): lat:DOUBLE lon:DOUBLE\\nGEOHASH->( geohash:STRING toHHCodeString:BOOLEAN ): hhcode:ANY\\nGEOHASH->( geohashes:LIST<STRING> ): shape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"GoKEH34IH1oy\"},\"GEOPACK\":{\"description\":\"The `GEOPACK` function takes a **GEOSHAPE** and packs it into a String.\\n\\n@param `shape` The GEOSHAPE instance to pack.\\n\\n@param `packed` The packed string representation of the GEOSHAPE.\\n\\n\",\"signature\":\"GEOPACK( shape:GEOSHAPE ): packed:STRING\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOPACK\"},\"GEOSHAPE->\":{\"description\":\"The `GEOSHAPE->` function converts **GEOSHAPE** to a list of **LONG** geocells or **STRING** HHCode prefixes. Conversion to list of **BYTES** is not supported, because this representation only supports resolution multiple of 4.\\n\\n@param `geoshape` The geoshape to get the cells from.\\n\\n@param `toString` Whether to convert the cells to **STRING** HHCode prefix (true) or geocells (false).\\n\\n@param `geocells` List of geocells.\\n\\n@param `geocellsOrHHPrefixes` List of **LONG** geocells or **STRING** HHCode prefixes.\\n\\n\",\"signature\":\"GEOSHAPE->( geoshape:GEOSHAPE ): geocells:LIST<LONG>\\nGEOSHAPE->( geoshape:GEOSHAPE toString:BOOLEAN ): geocellsOrHHPrefixes:LIST<ANY>\",\"tags\":[\"geo\"],\"since\":\"2.6.0\",\"OPB64name\":\"GoKEJoW0J3JhEV\"},\"GEOSHIFT\":{\"description\":\"`GEOSHIFT` functions shifts a geoshape on the earth. It is able to safely overlap the poles or the 180th meridian.\\n- Longitude shift keeps distances.\\n- Latitude shift keeps angles, not distances.\\n- When doing latitude shift, you can specify a meridian to shift along this meridian. It means a positive shift became a negative shift behind this meridian +/- 90°.\\n\\nSet precision parameter to zero for safe shifting operation. See [`GEO.WKT`](/doc/GEO.WKT) for precision encoding.\\n\\nUse [`->GEOJSON`](/doc/AIt6GJx9JoxD) to visualize shapes and the results. GeoJson could be visualized on the map, if you let a special object on the map. See example.\\n\\n@param `lon` degrees of longitude to shift (-360 to 360).\\n\\n@param `lat` degrees of latitude to shift (-180 to 180).\\n\\n@param `precision` even number from 0 to 30. Set to 0 for automatic resolution. Force to another value if you know the input resolution to be finer and you want a coarser resolution.\\n\\n@param `shape` The input geoshape.\\n\\n@param `output` The shifted geoshape.\\n\\n@param `meridian` When doing latitude shift, you can specify a meridian to shift along this meridian. (-180 to 180)\\n\\n\",\"signature\":\"GEOSHIFT( shape:GEOSHAPE lat:DOUBLE lon:DOUBLE precision:LONG ): output:GEOSHAPE\\nGEOSHIFT( shape:GEOSHAPE meridian:DOUBLE lat:DOUBLE lon:DOUBLE precision:LONG ): output:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSHIFT\"},\"GEOSPLIT\":{\"description\":\"The `GEOSPLIT` function splits a **GEOSHAPE** into a set of **GEOSHAPE**s which have no adjacent cells (each shape is a connected space).\\n\\nAdjacent cells share part of their side. Adjacency is not provided by corners and cells on each side of the international date line are not considered adjacent either.\\n\\n@param `shape` The GEOSHAPE instance to split.\\n\\n@param `subshapes` The shapes whose union form `shape` and which each form a connected space.\\n\\n\",\"signature\":\"GEOSPLIT( shape:GEOSHAPE ): subshapes:LIST<GEOSHAPE>\",\"tags\":[\"geo\"],\"since\":\"2.5.0\",\"OPB64name\":\"GEOSPLIT\"},\"GEOUNPACK\":{\"description\":\"The `GEOUNPACK` function unpacks a GEOSHAPE previously packed using [`GEOPACK`](/doc/GEOPACK).\\n\\n@param `packed` A packed string representation of a GEOSHAPE.\\n\\n@param `packedbytes` A byte array representation of a GEOSHAPE.\\n\\n@param `shape` The decoded instance of GEOSHAPE.\\n\\n\",\"signature\":\"GEOUNPACK( packed:STRING ): shape:GEOSHAPE\\nGEOUNPACK( packedbytes:BYTES ): shape:GEOSHAPE\",\"tags\":[\"geo\"],\"since\":\"1.0.7\",\"OPB64name\":\"GEOUNPACK\"},\"GET\":{\"description\":\"Retreive a value in a **MAP** or a **list**.\\n\\nThe `GET` function consumes on the top of the stack a list, a byte array, or a map, and the index (or the key), \\nthen put the result on the stack. \\n\\nIf key is not found, it returns NULL on the stack.\\n\\nIf index is out of bound, `GET` raises an error.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, GET can operate recursively on nested lists. In this case, the index is a list.\\n\\n@param `map` The input MAP.\\n\\n@param `key` Depending on map construction, could be a number, a string, a list, another map, a GTS, a boolean.\\n\\n@param `mapvalue` The value for the requested key. If key do not exists in map, returns NULL\\n\\n@param `index` The index number in the list. Valid values in [-size; size-1]\\n\\n@param `list` The input LIST.\\n\\n@param `value` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `array` Byte array from which to read a byte.\\n\\n@param `bytevalue` The value of the byte, always unsigned (from 0 to 255).\\n\\n\",\"signature\":\"GET( map:MAP key:ANY ): mapvalue:ANY\\nGET( list:LIST index:LONG ): value:ANY\\nGET( list:LIST index:LIST ): value:ANY\\nGET( array:BYTES index:LONG ): bytevalue:LONG\",\"tags\":[\"lists\",\"maps\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"GET\"},\"GETEXPONENT\":{\"description\":\"The `GETEXPONENT` function consumes a DOUBLE, a LONG casted as a DOUBLE or a COUNTER caster as DOUBLE and pushes back the unbiased exponent used in the representation of this DOUBLE.\\n\\n@param `n` The decimal value to get the exponent from, will be converted to DOUBLE if not already the case.\\n\\n@param `exponent` the unbiased exponent of the argument\\n\\n\",\"signature\":\"GETEXPONENT( n:NUMBER ): exponent:LONG\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"GETEXPONENT\"},\"GETHOOK\":{\"description\":\"Extracts the macro associated with a token hook and pushes it onto the stack wrapped as a secure script.\\n\\nIf the token does not contain the given hook, an empty macro will be wrapped.\\n\\n@param `hook` Name of the hook to extract from the token.\\n\\n@param `token` Read token from which to extract the hook.\\n\\n@param `secure` Hook macro wrapped in a secure script.\\n\\n\",\"signature\":\"GETHOOK( token:STRING hook:STRING ): secure:STRING\",\"tags\":[\"platform\"],\"since\":\"1.0.8\",\"OPB64name\":\"GETHOOK\"},\"GETSECTION\":{\"description\":\"The `GETSECTION` function pushes onto the stack the name of the current section.\\n\\n@param `section` Name of the current section.\\n\\n\",\"signature\":\"GETSECTION(): section:STRING\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"GETSECTION\"},\"GOLDWRAP\":{\"description\":\"The `GOLDWRAP` function wraps a Geo Time Series™ or a GTS Encoder in a deterministic way, by sorting on timestamps but also on values, locations and elevations.\\n\\nThis version of a `WRAP` like function is meant to create a *gold standard* blob from its input. In order to ensure reproducibility of the processs, attributes should be dropped prior to calling `GOLDWRAP`.\\n\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `wrap` Wrapped Geo Time Series™ instance to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders to wrap.\\n\\n\",\"signature\":\"GOLDWRAP( encoder:GTSENCODER ): wrapped:BYTES\\nGOLDWRAP( gts:GTS ): wrapped:BYTES\\nGOLDWRAP( wrap:BYTES ): wrapped:BYTES\\nGOLDWRAP( list:LIST<GTS> ): lwrapped:LIST<BYTES>\\nGOLDWRAP( list:LIST<GTSENCODER> ): lwrapped:LIST<BYTES>\\nGOLDWRAP( list:LIST<BYTES> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"GOLDWRAP\"},\"GROUPBY\":{\"description\":\"The `GROUPBY` function groups the elements of a list according to the value returned by a macro.\\n\\n@param `macro` Macro used for grouping, consumes an element off the stack and produces a value on the stack.\\n\\n@param `list` List of elements to group.\\n\\n@param `grouped` List of groups, each group is a list whose first element is the group key and whose second element is the sublist of `list` for which `macro` produced the same value.\\n\\n\",\"signature\":\"GROUPBY( list:LIST macro:MACRO ): grouped:LIST\",\"tags\":[\"lists\"],\"since\":\"1.2.22\",\"OPB64name\":\"GROUPBY\"},\"GRUBBSTEST\":{\"description\":\"The `GRUBBSTEST` function detects an outlier in a GTS (or a LIST of GTS), by applying a \\n[Grubbs’](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h1.htm) test.\\n\\nThis test is done under the assumption that the GTS follows an approximately normal distribution.\\n\\nIt tests whether there is exactly a single outlier in a GTS or not. For an iterative version which can detect multiple outliers, use instead\\n[`ESDTEST`](/doc/ESDTEST).\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n> ### Reference \\n> Grubbs, Frank (February 1969). “Procedures for Detecting Outlying Observations in Samples”. Technometrics (Technometrics, Vol. 11, No. 1).\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `mad` A flag indicating whether to use the mean (False), or the median (True) to calculate the Z-score\\n\\n@param `gts` GTS\\n\\n@param `gtsList` List of GTS\\n\\n@param `result` List of ticks corresponding to the outliers\\n\\n@param `resultList` List of list of ticks corresponding to the outliers\\n\\n\",\"signature\":\"GRUBBSTEST( gts:GTS mad:BOOLEAN alpha:DOUBLE ): result:LIST<LONG>\\nGRUBBSTEST( gts:GTS mad:BOOLEAN ): result:LIST<LONG>\\nGRUBBSTEST( gtsList:LIST<GTS> mad:BOOLEAN alpha:DOUBLE ): resultList:LIST\\nGRUBBSTEST( gtsList:LIST<GTS> mad:BOOLEAN ): resultList:LIST<LIST<LONG>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"GRUBBSTEST\"},\"GTSHHCODE->\":{\"description\":\"The `GTSHHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude. This function is very similar to [`HHCODE->`](/doc/H3W2IoG4AIs) except that when given the internal value used by Geo Time Series™ for a missing location it pushes back `NaN NaN`.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"signature\":\"GTSHHCODE->( hhcode:LONG ): lat:DOUBLE lon:DOUBLE\\nGTSHHCODE->( hhcode:STRING ): lat:DOUBLE lon:DOUBLE\\nGTSHHCODE->( hhcode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"tags\":[\"geo\"],\"since\":\"2.2.0\",\"OPB64name\":\"GpGIH3W2IoG4AIs\"},\"GZIP\":{\"description\":\"The `GZIP` function compresses a STRING or a byte array using the [gzip](https://en.wikipedia.org/wiki/Gzip) algorithm. When compressing a STRING, the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) byte representation is first extracted.\\n\\n@param `string` STRING instance to compress.\\n\\n@param `bytes` Byte array to compress.\\n\\n@param `compressed` Compressed byte array.\\n\\n\",\"signature\":\"GZIP( string:STRING ): compressed:BYTES\\nGZIP( bytes:BYTES ): compressed:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"GZIP\"},\"HASH\":{\"description\":\"Computes a 64 bits hash of the string or byte array on top of the stack.\\n\\n@param `str` String to hash\\n\\n@param `bytes` Bytes to hash\\n\\n@param `result` 64bit hash\\n\\n\",\"signature\":\"HASH( str:STRING ): result:LONG\\nHASH( bytes:BYTES ): result:LONG\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"HASH\"},\"HAVERSINE\":{\"description\":\"The `HAVERSINE` function consumes two coordinates and pushes back a **DOUBLE** [great-circle distance](https://en.wikipedia.org/wiki/Great-circle_distance) in meters.\\n\\n@param `p2_longitude` Point 2 longitude.\\n\\n@param `p2_latitude` Point 2 latitude.\\n\\n@param `p1_longitude` Point 1 longitude.\\n\\n@param `p1_latitude` Point 1 latitude.\\n\\n@param `haversineDistance` Great circle distance using the haversine fonction.\\n\\n\",\"signature\":\"HAVERSINE( p1_latitude:NUMBER p1_longitude:NUMBER p2_latitude:NUMBER p2_longitude:NUMBER ): haversineDistance:DOUBLE\",\"tags\":[\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"HAVERSINE\"},\"HEADER\":{\"description\":\"The `HEADER` function allows you to set custom headers which should be returned in the HTTP response. This obviously works only for the `/exec` Warp 10 endpoint.\\n\\n@param `name` Name of HTTP header to return, MUST start with `X-`, *i.e.* be a custom header.\\n\\n@param `value` Value to return for the `name` header. If `NULL`, the specified header is removed from the list of headers to return.\\n\\n\",\"signature\":\"HEADER( name:STRING value:STRING ): \",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"HEADER\"},\"HEX->\":{\"description\":\"Converts a hexadecimal string representation into a bytes array.\\nBytes array cannot be represented on the stack.\\n\\n@param `input` A valid hexadecimal string.\\n\\n@param `output` Bytes Array from input. Seen as null on the stack.\\n\\n\",\"signature\":\"HEX->( input:STRING ): output:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H3KNAIs\"},\"HEXTOB64\":{\"description\":\"Decodes the hex encoded content on top of the stack and \\nimmediately re-encode it in base64. This enables you to \\nconvert encoded content which would not be valid UTF-8 encoding \\nfrom hexadecimal to base64.      \\n\\n@param `input` A valid hexadecimal string\\n\\n@param `output` Base64 representation of input\\n\\n\",\"signature\":\"HEXTOB64( input:STRING ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOB64\"},\"HEXTOBIN\":{\"description\":\"Converts a string representing a hexadecimal number into a string representing a binary number.\\n\\nThe `HEXTOBIN` function consumes on the top of the stack a string and pushes back its convertion. This enables you to convert encoded content which would not be valid UTF-8 encoding from hexadecimal to binary.\\n\\n@param `input` The string representing a hexadecimal number\\n\\n@param `output` The string representing a binary number\\n\\n\",\"signature\":\"HEXTOBIN( input:STRING ): output:STRING\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"HEXTOBIN\"},\"HHCODE->\":{\"description\":\"The `HHCODE->` function splits a [HHCode](https://en.wikipedia.org/wiki/HHCode) into a latitude and a longitude.\\n\\nThe extracted latitude and longitude are DOUBLE converted from FLOATs.\\n\\n@param `hhcode` Helical Hyperspatial Code to split, either a **LONG** or a **STRING**. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `lat` Extracted latitude\\n\\n@param `lon` Extracted longitude\\n\\n\",\"signature\":\"HHCODE->( hhcode:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE->( hhcode:STRING ): lat:DOUBLE lon:DOUBLE\\nHHCODE->( hhcode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"tags\":[\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"H3W2IoG4AIs\"},\"HHCODE.BBOX\":{\"description\":\"The `HHCODE.BBOX` function returns the bounding box of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the bounding box representing the lat/lon of North-Easth and South-West corners of the bbox.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `latSW` Latitude of the south west corner of the bounding box\\n\\n@param `lonSW` Longitude of the south west corner of the bounding box\\n\\n@param `latNE` Latitude of the north east corner of the bounding box\\n\\n@param `lonNE` Longitude of the north east corner of the bounding box\\n\\n\",\"signature\":\"HHCODE.BBOX( hhCode:STRING resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:LONG resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:BYTES resolution:LONG ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:STRING ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\\nHHCODE.BBOX( hhCode:BYTES ): latSW:DOUBLE lonSW:DOUBLE latNE:DOUBLE lonNE:DOUBLE\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.BBOX\"},\"HHCODE.CENTER\":{\"description\":\"The `HHCODE.CENTER` function returns the center of the given hhcode at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the center and returns its lat/lon.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `hhCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n@param `lat` Latitude of the center of the given HHCode\\n\\n@param `lon` Longitude of the center of the given HHCode\\n\\n\",\"signature\":\"HHCODE.CENTER( hhCode:STRING resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:LONG resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:BYTES resolution:LONG ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:STRING ): lat:DOUBLE lon:DOUBLE\\nHHCODE.CENTER( hhCode:BYTES ): lat:DOUBLE lon:DOUBLE\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.CENTER\"},\"HHCODE.EAST\":{\"description\":\"The `HHCODE.EAST` function returns the cell east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.EAST\"},\"HHCODE.NORTH\":{\"description\":\"The `HHCODE.NORTH` function returns the cell north of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.NORTH( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH\"},\"HHCODE.NORTH.EAST\":{\"description\":\"The `HHCODE.NORTH.EAST` function returns the cell north east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.NORTH.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.EAST\"},\"HHCODE.NORTH.WEST\":{\"description\":\"The `HHCODE.NORTH.WEST` function returns the cell north west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.NORTH.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.NORTH.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.NORTH.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.NORTH.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.NORTH.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.NORTH.WEST\"},\"HHCODE.SOUTH\":{\"description\":\"The `HHCODE.SOUTH` function returns the cell south of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.SOUTH( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH\"},\"HHCODE.SOUTH.EAST\":{\"description\":\"The `HHCODE.SOUTH.EAST.EAST` function returns the cell south east of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.SOUTH.EAST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH.EAST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH.EAST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH.EAST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH.EAST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.EAST\"},\"HHCODE.SOUTH.WEST\":{\"description\":\"The `HHCODE.SOUTH.WEST` function returns the cell south west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.SOUTH.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.SOUTH.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.SOUTH.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.SOUTH.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.SOUTH.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.SOUTH.WEST\"},\"HHCODE.WEST\":{\"description\":\"The `HHCODE.WEST` function returns the cell west of the given one at the given resolution.\\n\\nIt will first convert the HHCode to the resolution and then compute the new cell.\\n\\nThe function accepts 3 different types of HHCode and will return the same type for the resulting HHCode.\\n\\nSince 2.6.0, the resolution is optional. In that case the length of the input is used to determine the resolution.\\n\\n@param `inputHHCode` HHCode to use as reference, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `outputHHCode` The new HHCode, either a **LONG**, a **STRING** or a bytes array. **STRING** values can contain from 1 to 16 hexadecimal digits.\\n\\n@param `resolution` Resolution to use for the cells. Resolution is an even number between 2 and 32.\\n\\n\",\"signature\":\"HHCODE.WEST( inputHHCode:STRING resolution:LONG ): outputHHCode:STRING\\nHHCODE.WEST( inputHHCode:LONG resolution:LONG ): outputHHCode:LONG\\nHHCODE.WEST( inputHHCode:BYTES resolution:LONG ): outputHHCode:BYTES\\nHHCODE.WEST( inputHHCode:STRING ): outputHHCode:STRING\\nHHCODE.WEST( inputHHCode:BYTES ): outputHHCode:BYTES\",\"tags\":[\"geo\"],\"since\":\"2.4.0\",\"OPB64name\":\"HHCODE.WEST\"},\"HIDE\":{\"description\":\"The `HIDE` function hides some levels of the stack to the rest of the executing code. This allows a kind of protection for levels which should not be accessed by a macro call for example. Note that this is not a real protection since a call to [`SHOW`](/doc/SHOW) could reveal the hidden levels.\\n\\nThe hidden levels are always the deepest. Depending on the `levels` parameter to the call to `HIDE`, the hidden levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there remains at most a certain number ((*abs(`levels`)*) with `levels` < 0).\\n\\nWhen called with `NULL` as parameter, `HIDE` will hide all the visible levels.\\n\\nThe number of newly hidden levels is returned.\\n\\n@param `levels` Number of levels to hide or to remain visible, or `NULL` to hide them all.\\n\\n@param `hidden` Number of levels actually hidden.\\n\\n\",\"signature\":\"HIDE( levels:LONG ): hidden:LONG\",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"HIDE\"},\"HLOCATE\":{\"description\":\"The `HLOCATE` function locates the HBase regions containing a list of Geo Time Series™.\\n\\nThis function only works with the distributed version of Warp 10™.\\n\\nIt outputs a list of lists containing a GTS selector, the host and port of the RegionServer currently serving the region and the region id of a region containing data for this GTS.\\n\\n@param `gts` List of Geo Time Series™ to locate.\\n\\n@param `result` List of GTS, RegionServer, region tuples.\\n\\n\",\"signature\":\"HLOCATE( gts:LIST<GTS> ): result:LIST\",\"tags\":[\"extensions\"],\"since\":\"1.2.13\",\"OPB64name\":\"HLOCATE\"},\"HULLSHAPE\":{\"description\":\"Return the shape of a tensor (or multidimensional array) that would be able to contain all the values of an input nested list. The size of the returned shape is equal to the deepest level of nesting plus one. Its i-th value is equal to the size of the largest list that is nested i levels deep.\\n\\n@param `list` The input list.\\n\\n@param `shape` The hull shape of the input list.\\n\\n\",\"signature\":\"HULLSHAPE( list:LIST ): shape:LIST\\nHULLSHAPE( { list:LIST  } ): shape:LIST\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"HULLSHAPE\"},\"HUMANDURATION\":{\"description\":\"The `HUMANDURATION` function consumes a **LONG** duration and push back an easily readable **STRING** representation of this duration.\\n\\nThe format of the pushed back **STRING** is **[Dd][Hh][Mm]S.XXXXXXs** with D as days, H as hours, M as minutes, S as seconds and XXXXXX the number of ms (3 digits), us (6 digits) or ns (9 digits) depending on the platform configuration. If the duration is less than a day, Dd is omitted, sames goes with Hh and Mm.\\n\\n@param `duration` Duration expressed in the platform time unit.\\n\\n@param `humanReadableDuration`  A representation of the duration, easily readable for a human.\\n\\n\",\"signature\":\"HUMANDURATION( duration:LONG ): humanReadableDuration:STRING\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"HUMANDURATION\"},\"HYBRIDTEST\":{\"description\":\"The `HYBRIDTEST` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\nLike [`STLESDTEST`](/doc/STLESDTEST), `HYBRIDTEST` performs an [`ESDTEST`](/doc/ESDTEST) onto a GTS that have been relieved of its seasonal and trend part. \\nBut unlike the mentioned test, [`STL`](/doc/STL) and [`ESDTEST`](/doc/ESDTEST) are performed piecewise. Plus, the trend is approximated with the piecewise \\nmedian instead of the trend part of the [`STL`](/doc/STL) decomposition.\\n\\nA LIST of ticks (or a LIST of LIST of ticks), corresponding to the outliers, is pushed back onto the stack.\\n\\nThis technique was first developped at [Twitter](https://blog.twitter.com/2015/introducing-practical-and-robust-anomaly-detection-in-a-time-series).\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ## References\\n> - Owen Vallis, Jordan Hochenbaum, Arun Kejariwal. “A Novel Technique for Long-Term Anomaly Detection in the Cloud”, Twitter Inc (2014).\\n> - Cleveland, Robert B., et al. “STL: A seasonal-trend decomposition procedure based on loess.” Journal of Official Statistics 6.1 (1990): 3-73.\\n> - Rosner, Bernard (May 1983), “Percentage Points for a Generalized ESD Many-Outlier Procedure”,Technometrics, 25(2), pp. 165-172.\\n\\n\\n@param `parameters` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `lgts` List of [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n\",\"signature\":\"HYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE parameters:MAP ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG ): result:LIST<LONG>\\nHYBRIDTEST( gts:GTS period:LONG piece:LONG k:LONG parameters:MAP ): result:LIST<LONG>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE parameters:MAP ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG ): result:LIST<LIST<LONG>>\\nHYBRIDTEST( lgts:LIST<GTS> period:LONG piece:LONG k:LONG parameters:MAP ): result:LIST<LIST<LONG>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST\"},\"HYBRIDTEST2\":{\"description\":\"The `HYBRIDTEST2` function detects outliers in a GTS (or a LIST of GTS) which has a seasonal part.\\n\\n`HYBRIDTEST2` is almost the same procedure than [`HYBRIDTEST`](/doc/HYBRIDTEST) except that it does not use [`STL`](/doc/STL) decomposition for the \\nseasonal extract.\\n\\nThe seasonal part is approximated by pondering each value with the [entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29) of the \\n[modified Z-score](http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h.htm) of its seasonal subseries (series with only the values of the \\nsame season).\\n\\nThis test is usually preferred when it is meaningful to think in term of entropy, for example when the GTS represents counters of events. Also as it \\ndoes not use [`STL`](/doc/STL) decomposition, it is not prone to border effects, but at the cost of not detecting slight outliers.\\n\\nThis function only applies to [`bucketized`](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upper-bound of the number of outliers to detect per piece\\n\\n@param `piece` Number of periods that compose a piece\\n\\n@param `period` Number of buckets that compose a period\\n\\n@param `gts` [`Bucketized`](/doc/BUCKETIZE) GTS\\n\\n@param `result` A LIST of ticks corresponding to the outliers\\n\\n@param `gtsList` List of GTS\\n\\n\",\"signature\":\"HYBRIDTEST2( gts:GTS period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nHYBRIDTEST2( gts:GTS period:LONG piece:LONG k:LONG ): result:LIST<LONG>\\nHYBRIDTEST2( gtsList:LIST<GTS> period:LONG piece:LONG k:LONG alpha:DOUBLE ): result:LIST<LIST<LONG>>\\nHYBRIDTEST2( gtsList:LIST<GTS> period:LONG piece:LONG k:LONG ): result:LIST<LIST<LONG>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYBRIDTEST2\"},\"HYPOT\":{\"description\":\"HYPOT function returns the radius r from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta), r = sqrt(x²+y²).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` x coordinate.\\n\\n@param `y` y coordinate.\\n\\n@param `lx` List of x coordinates.\\n\\n@param `ly` List of y coordinates.\\n\\n@param `result` radius r in polar coordinates\\n\\n@param `lresult` List of radiuses r in polar coordinates\\n\\n\",\"signature\":\"HYPOT( x:NUMBER y:NUMBER ): result:DOUBLE\\nHYPOT( x:NUMBER ly:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nHYPOT( lx:LIST<NUMBER> y:NUMBER ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"HYPOT\"},\"IDENT\":{\"description\":\"The `IDENT` function pushes onto the stack the value of the system property `warp.ident`.\\n\\n@param `ident` The value of the `warp.ident` property.\\n\\n\",\"signature\":\"IDENT(): ident:STRING\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDENT\"},\"IDWT\":{\"description\":\"The `IDWT` function computes an Inverse [Discrete Wavelet Transform](https://en.wikipedia.org/wiki/Discrete_wavelet_transform) on a Geo Time Series™.\\n\\nThe names of the available Wavelet are the following:\\n\\n| Name | Wavelet |\\n| --- | --- |\\n| haar | [Haar](http://wavelets.pybytes.com/wavelet/haar/) |\\n| db1 | [Daubechies 1](http://wavelets.pybytes.com/wavelet/db1/) |\\n| db2 | [Daubechies 2](http://wavelets.pybytes.com/wavelet/db2/) |\\n| db3 | [Daubechies 3](http://wavelets.pybytes.com/wavelet/db3/) |\\n| db4 | [Daubechies 4](http://wavelets.pybytes.com/wavelet/db4/) |\\n| db5 | [Daubechies 5](http://wavelets.pybytes.com/wavelet/db5/) |\\n| db6 | [Daubechies 6](http://wavelets.pybytes.com/wavelet/db6/) |\\n| db7 | [Daubechies 7](http://wavelets.pybytes.com/wavelet/db7/) |\\n| db8 | [Daubechies 8](http://wavelets.pybytes.com/wavelet/db8/) |\\n| db9 | [Daubechies 9](http://wavelets.pybytes.com/wavelet/db9/) |\\n| db10 | [Daubechies 10](http://wavelets.pybytes.com/wavelet/db10/) |\\n| db11 | [Daubechies 11](http://wavelets.pybytes.com/wavelet/db11/) |\\n| db12 | [Daubechies 12](http://wavelets.pybytes.com/wavelet/db12/) |\\n| db13 | [Daubechies 13](http://wavelets.pybytes.com/wavelet/db13/) |\\n| db14 | [Daubechies 14](http://wavelets.pybytes.com/wavelet/db14/) |\\n| db15 | [Daubechies 15](http://wavelets.pybytes.com/wavelet/db15/) |\\n| db16 | [Daubechies 16](http://wavelets.pybytes.com/wavelet/db16/) |\\n| db17 | [Daubechies 17](http://wavelets.pybytes.com/wavelet/db17/) |\\n| db18 | [Daubechies 18](http://wavelets.pybytes.com/wavelet/db18/) |\\n| db19 | [Daubechies 19](http://wavelets.pybytes.com/wavelet/db19/) |\\n| db20 | [Daubechies 20](http://wavelets.pybytes.com/wavelet/db20/) |\\n| sym2 | [Symlets 2](http://wavelets.pybytes.com/wavelet/sym2/) |\\n| sym3 | [Symlets 3](http://wavelets.pybytes.com/wavelet/sym3/) |\\n| sym4 | [Symlets 4](http://wavelets.pybytes.com/wavelet/sym4/) |\\n| sym5 | [Symlets 5](http://wavelets.pybytes.com/wavelet/sym5/) |\\n| sym6 | [Symlets 6](http://wavelets.pybytes.com/wavelet/sym6/) |\\n| sym7 | [Symlets 7](http://wavelets.pybytes.com/wavelet/sym7/) |\\n| sym8 | [Symlets 8](http://wavelets.pybytes.com/wavelet/sym8/) |\\n| sym9 | [Symlets 9](http://wavelets.pybytes.com/wavelet/sym9/) |\\n| sym10 | [Symlets 10](http://wavelets.pybytes.com/wavelet/sym10/) |\\n| sym11 | [Symlets 11](http://wavelets.pybytes.com/wavelet/sym11/) |\\n| sym12 | [Symlets 12](http://wavelets.pybytes.com/wavelet/sym12/) |\\n| sym13 | [Symlets 13](http://wavelets.pybytes.com/wavelet/sym13/) |\\n| sym14 | [Symlets 14](http://wavelets.pybytes.com/wavelet/sym14/) |\\n| sym15 | [Symlets 15](http://wavelets.pybytes.com/wavelet/sym15/) |\\n| sym16 | [Symlets 16](http://wavelets.pybytes.com/wavelet/sym16/) |\\n| sym17 | [Symlets 17](http://wavelets.pybytes.com/wavelet/sym17/) |\\n| sym18 | [Symlets 18](http://wavelets.pybytes.com/wavelet/sym18/) |\\n| sym19 | [Symlets 19](http://wavelets.pybytes.com/wavelet/sym19/) |\\n| sym20 | [Symlets 20](http://wavelets.pybytes.com/wavelet/sym20/) |\\n| coif1 | [Coiflets 1](http://wavelets.pybytes.com/wavelet/coif1/) |\\n| coif2 | [Coiflets 2](http://wavelets.pybytes.com/wavelet/coif2/) |\\n| coif3 | [Coiflets 3](http://wavelets.pybytes.com/wavelet/coif3/) |\\n| coif4 | [Coiflets 4](http://wavelets.pybytes.com/wavelet/coif4/) |\\n| coif5 | [Coiflets 5](http://wavelets.pybytes.com/wavelet/coif5/) |\\n| bior1.1 | [Biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/bior1.1/) |\\n| bior1.3 | [Biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/bior1.3/) |\\n| bior1.5 | [Biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/bior1.5/) |\\n| bior2.2 | [Biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/bior2.2/) |\\n| bior2.4 | [Biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/bior2.4/) |\\n| bior2.6 | [Biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/bior2.6/) |\\n| bior2.8 | [Biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/bior2.8/) |\\n| bior3.1 | [Biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/bior3.1/) |\\n| bior3.3 | [Biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/bior3.3/) |\\n| bior3.5 | [Biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/bior3.5/) |\\n| bior3.7 | [Biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/bior3.7/) |\\n| bior3.9 | [Biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/bior3.9/) |\\n| bior4.4 | [Biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/bior4.4/) |\\n| bior5.5 | [Biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/bior5.5/) |\\n| bior6.8 | [Biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/bior6.8/) |\\n| rbio1.1 | [Reverse biorthogonal 1.1](http://wavelets.pybytes.com/wavelet/rbio1.1/) |\\n| rbio1.3 | [Reverse biorthogonal 1.3](http://wavelets.pybytes.com/wavelet/rbio1.3/) |\\n| rbio1.5 | [Reverse biorthogonal 1.5](http://wavelets.pybytes.com/wavelet/rbio1.5/) |\\n| rbio2.2 | [Reverse biorthogonal 2.2](http://wavelets.pybytes.com/wavelet/rbio2.2/) |\\n| rbio2.4 | [Reverse biorthogonal 2.4](http://wavelets.pybytes.com/wavelet/rbio2.4/) |\\n| rbio2.6 | [Reverse biorthogonal 2.6](http://wavelets.pybytes.com/wavelet/rbio2.6/) |\\n| rbio2.8 | [Reverse biorthogonal 2.8](http://wavelets.pybytes.com/wavelet/rbio2.8/) |\\n| rbio3.1 | [Reverse biorthogonal 3.1](http://wavelets.pybytes.com/wavelet/rbio3.1/) |\\n| rbio3.3 | [Reverse biorthogonal 3.3](http://wavelets.pybytes.com/wavelet/rbio3.3/) |\\n| rbio3.5 | [Reverse biorthogonal 3.5](http://wavelets.pybytes.com/wavelet/rbio3.5/) |\\n| rbio3.7 | [Reverse biorthogonal 3.7](http://wavelets.pybytes.com/wavelet/rbio3.7/) |\\n| rbio3.9 | [Reverse biorthogonal 3.9](http://wavelets.pybytes.com/wavelet/rbio3.9/) |\\n| rbio4.4 | [Reverse biorthogonal 4.4](http://wavelets.pybytes.com/wavelet/rbio4.4/) |\\n| rbio5.5 | [Reverse biorthogonal 5.5](http://wavelets.pybytes.com/wavelet/rbio5.5/) |\\n| rbio6.8 | [Reverse biorthogonal 6.8](http://wavelets.pybytes.com/wavelet/rbio6.8/) |\\n| dmey | [Discrete Meyer, FIR approximation](http://wavelets.pybytes.com/wavelet/dmey/) |\\n\\n\\n@param `wavelet` Wavelet to consider\\n\\n@param `gts` Geo Time Series™ which contains the wavelet coefficients as is returned by [`FDWT`](/doc/FDWT).\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"signature\":\"IDWT( gts:GTS wavelet:STRING ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IDWT\"},\"IEEEREMAINDER\":{\"description\":\"The `IEEEREMAINDER` function consumes two parameters, a dividend f1 and a divisor f2. This function push the remainder onto the stack as\\nprescribed by the [IEEE 754 standard](https://en.wikipedia.org/wiki/IEEE_754-1985).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `dividend` Dividend, converted as DOUBLE if not already the case.\\n\\n@param `divisor` Divisor, converted as DOUBLE if not already the case.\\n\\n@param `result` Remainder\\n\\n@param `ldividend` List of dividends, converted as DOUBLE if not already the case.\\n\\n@param `ldivisor` List of divisors, converted as DOUBLE if not already the case.\\n\\n@param `lresult` List of remainders\\n\\n\",\"signature\":\"IEEEREMAINDER( dividend:NUMBER divisor:NUMBER ): result:LONG\\nIEEEREMAINDER( dividend:NUMBER ldivisor:LIST<NUMBER> ): lresult:LIST<LONG>\\nIEEEREMAINDER( ldividend:LIST<NUMBER> divisor:NUMBER ): lresult:LIST<LONG>\",\"tags\":[\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"IEEEREMAINDER\"},\"IFFT\":{\"description\":\"The `IFFT` function computes an Inverse [Fast Fourier Transform](https://en.wikipedia.org/wiki/Fast_Fourier_transform) of two Geo Time Series™ \\nrepresenting real and imaginary parts of FFT coefficients.\\n\\nThe result is the reconstructed Geo Time Series™. The ticks of this reconstructed GTS are the coefficient indices. They must be multipled by the original \\nbucketspan to space the ticks according to the decomposed Geo Time Series™. The bucketspan is equal to `X / (n * factor)` where `X` is the number of time \\nunits in a second, `n` is the number of coefficients and `factor` is the scale factor returned by `FFT`.\\n\\n@param `im` GTS containing the imaginary part\\n\\n@param `real` GTS containing the real parts of the `FFT` coefficients\\n\\n@param `result` Reconstructed Geo Time Series™\\n\\n\",\"signature\":\"IFFT( real:GTS im:GTS ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFFT\"},\"IFT\":{\"description\":\"The `IFT` function is a conditional construct which will run a macro only if a boolean condition is true. The condition can either be a boolean on the stack or the result of a macro run.\\n\\n@param `check` Boolean which will be checked as the conditional test.\\n\\n@param `if` Macro which will be executed to determine the conditional test. This macro must leave a boolean on the stack.\\n\\n@param `then` Macro which is executed if the conditional test is `true`.\\n\\n@param `result` State of the stack after the `then` macro is executed.\\n\\n\",\"signature\":\"IFT( if:MACRO then:MACRO ): result:ANY*\\nIFT( check:BOOLEAN then:MACRO ): result:ANY*\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFT\"},\"IFTE\":{\"description\":\"The `IFTE` function is a conditional construct which evaluates a condition and executes one of two macros depending on the condition (`true` or `false`). The condition can either be a BOOLEAN value on the stack or a macro which will be executed and must leave a BOOLEAN on the stack.\\n\\n@param `else` Macro executed if the condition is `false`.\\n\\n@param `then` Macro executed if the condition is `true`.\\n\\n@param `if` Macro executed to evaluate the condition. Must leave a BOOLEAN on top of the stack.\\n\\n@param `condition` Boolean value used as the condition.\\n\\n@param `result` Result of the execution of either the `then` or `else` macro.\\n\\n\",\"signature\":\"IFTE( if:MACRO then:MACRO else:MACRO ): result:ANY*\\nIFTE( condition:BOOLEAN then:MACRO else:MACRO ): result:ANY*\",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"IFTE\"},\"IMMUTABLE\":{\"description\":\"Transforms a collection (**LIST**, **MAP**, **VLIST**, **SET**) into an immutable one. Any attempt to modify the immutable collection will fail. The original collection is not modified.\\n\\n@param `list` List to wrap into an immutable wrapper.\\n\\n@param `map` Map to wrap into an immutable wrapper.\\n\\n@param `set` Set to wrap into an immutable wrapper.\\n\\n@param `vector` Vector to wrap into an immutable wrapper.\\n\\n@param `immutableList` Immutable version of 'list'.\\n\\n@param `immutableMap` Immutable version of 'map'.\\n\\n@param `immutableSet` Immutable version of 'set'.\\n\\n@param `immutableVector` Immutable version of 'vector'.\\n\\n\",\"signature\":\"IMMUTABLE( list:LIST ): immutableList:LIST\\nIMMUTABLE( map:MAP ): immutableMap:MAP\\nIMMUTABLE( set:SET ): immutableSet:SET\\nIMMUTABLE( vector:VLIST ): immutableVector:VLIST\",\"tags\":[\"lists\",\"maps\",\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"IMMUTABLE\"},\"IMPORT\":{\"description\":\"The `IMPORT` function allows to create aliases for macro name prefixes. This is handy when accessing macros from WarpFleet™ repositories which might have multiple versions and/or long group and artifact ids. When fetching a macro, the *imported* prefixes will be scanned and the longest matching one will be replaced by the associated alias.\\n\\n@param `prefix` Original prefix to *import*.\\n\\n@param `as` Name under which `prefix` will be imported.\\n\\n\",\"signature\":\"IMPORT( prefix:STRING as:STRING ): \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"IMPORT\"},\"INCREMENTEXACT\":{\"description\":\"The `INCREMENTEXACT` function consumes one LONG from the top of the stack and puts back the value incremented by one. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be incremented by one\\n\\n@param `result` The incremented value\\n\\n@param `lvalue` List of values to be incremented by one\\n\\n@param `lresult` List of incremented values\\n\\n\",\"signature\":\"INCREMENTEXACT( value:NUMBER ): result:DOUBLE\\nINCREMENTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"INCREMENTEXACT\"},\"INFLATE\":{\"description\":\"Decompresses a byte array containing data compressed by [`DEFLATE`](doc/DEFLATE).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"signature\":\"INFLATE( compressed:BYTES ): uncompressed:BYTES\",\"tags\":[\"conversion\"],\"since\":\"2.1.0\",\"OPB64name\":\"INFLATE\"},\"INFO\":{\"description\":\"Generate documentation of a function or a macro.\\n\\n@param `conf` String list of related configuration keys existing in the Warp 10 configuration.\\n\\n@param `examples` String list of WarpScript examples.\\n\\n@param `related` String list of related functions.\\n\\n@param `params` Map describing the parameters defined in `sig`.\\n\\n@param `sig` List of signatures. Each signature is a **LIST** with 2 lists (input and output) which contain parameter definitions: *eg* `param1:STRING` in stack order (top first)\\n\\n@param `desc` Description of the function or macro.\\n\\n@param `tags` String list tags (*eg* categories).\\n\\n@param `version` Version of the Warp 10 distribution on which this funcion is available (`standalone` | `distributed` | `all` | `pkg` | `ext` | `plugin`)\\n\\n@param `deleted` Version's number of Warp 10 where this function (or macro) was deleted.\\n\\n@param `deprecated` Version's number of Warp 10 where this function (or macro) was deprecated.\\n\\n@param `since` Version's number of Warp 10 where this function (or macro) was included.\\n\\n@param `name` Name of the function or macro.\\n\\n@param `ext` Fully qualified class name of the WarpScript Extension defining the function.\\n\\n@param `plugin` Fully qualified class name of the WarpScript Plugin defining the function.\\n\\n\",\"signature\":\"INFO( { plugin:STRING ext:STRING name:STRING since:STRING deprecated:STRING deleted:STRING version:STRING tags:LIST desc:STRING sig:LIST params:MAP related:LIST examples:LIST conf:LIST  } ): \",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFO\"},\"INFOMODE\":{\"description\":\"Toggles the info mode ON or OFF depending on its current state. Default is OFF when the stack is created.\\n\\nWhen info mode is ON, the [`INFO`](/doc/INFO) function pushes its map parameter on the stack and stops the current execution as [`STOP`](/doc/STOP) would do.\\n\\n\",\"signature\":\"INFOMODE(): \",\"tags\":[\"platform\",\"help\"],\"since\":\"1.2.14\",\"OPB64name\":\"INFOMODE\"},\"INTEGRATE\":{\"description\":\"The `INTEGRATE` function takes a GTS or a list thereof and integrates it/them, considering the value at each tick is a rate of change per second.\\n\\n@param `initial` Initial value\\n\\n@param `gts` GTS to integrate\\n\\n@param `lgts` List of GTS to integrate\\n\\n@param `result` Integrated GTS\\n\\n@param `lresult` List of integrated GTS\\n\\n\",\"signature\":\"INTEGRATE( gts:GTS initial:NUMBER ): result:GTS\\nINTEGRATE( lgts:LIST<GTS> initial:NUMBER ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTEGRATE\"},\"INTERPOLATE\":{\"description\":\"The `INTERPOLATE` function fills gaps in a [bucketized](/doc/BUCKETIZE) Geo Time Series™ instance with by interpolating linearly. \\n\\nThis function has no effect on non bucketized GTS instances.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `gtsList` List of bucketized GTS\\n\\n@param `result` Filled bucketized GTS\\n\\n@param `resultList` list of filled bucketized GTS\\n\\n\",\"signature\":\"INTERPOLATE( gts:GTS ): result:GTS\\nINTERPOLATE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERPOLATE\"},\"INTERSECTION\":{\"description\":\"Computes the intersection &#x2229; of two sets.\\n\\nThe `INTERSECTION` function consumes two sets from the top of the stack and pushes back its mathematical intersection (ie: the elements in common).\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x2229; *B*\\n\\n\",\"signature\":\"INTERSECTION( setA:SET setB:SET ): output:SET\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"INTERSECTION\"},\"INV\":{\"description\":\"Inverts a matrix. The inversion is attempted using the [LU Decomposition](https://en.wikipedia.org/wiki/LU_decomposition) algorithm.\\n\\nIf the matrix is singular or not square an error will be raised.\\n\\n@param `matrix` Matrix to invert.\\n\\n@param `inverse` Inverse of the original matrix.\\n\\n\",\"signature\":\"INV( matrix:MATRIX ): inverse:MATRIX\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"INV\"},\"ISAUTHENTICATED\":{\"description\":\"Returns true or false whether or not the stack is authenticated\\n\\n@param `result` True if the stack is authenticated, false otherwise\\n\\n\",\"signature\":\"ISAUTHENTICATED(): result:BOOLEAN\",\"tags\":[\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"ISAUTHENTICATED\"},\"ISNULL\":{\"description\":\"The `ISNULL` function consumes a parameter p from the top of the stack and pushes onto the stack true if p is null, else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p is null\\n\\n\",\"signature\":\"ISNULL( p:ANY ): result:BOOLEAN\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNULL\"},\"ISNaN\":{\"description\":\"The `ISNaN` function consumes a numeric parameter p from the top of the stack and pushes onto the stack true if p is Not a Number (NaN), else it pushes false.\\n\\n@param `p` Parameter\\n\\n@param `result` True if p a Double and is NaN, false  otherwise\\n\\n\",\"signature\":\"ISNaN( p:ANY ): result:BOOLEAN\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISNaN\"},\"ISO8601\":{\"description\":\"The `ISO8601` function consumes an optional **STRING** timezone and a **LONG** UTC timestamp and pushes back a **STRING** representing the date and time according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard.\\n\\nDepending on the platform time unit, the part representing seconds can have 3, 6 or 9 significant figures respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time representation.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `iso8601dateAndTime` Representation of the date and time of the given timestamp for the givent timezone according to the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) standard\\n\\n\",\"signature\":\"ISO8601( timestamp:LONG ): iso8601dateAndTime:STRING\\nISO8601( timestamp:LONG timezone:STRING ): iso8601dateAndTime:STRING\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISO8601\"},\"ISODURATION\":{\"description\":\"The `ISODURATION` function consumes a **LONG** duration in platform unit and pushes back a **STRING** reresenting an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Whatever the platform time unit is, the representation maximum resolution is milliseconds.\\n\\nThe format of the ISO 8601 representation is `PThHmMs.xS` with `h` as hours, `m` as minutes, `s` as seconds and `x` as milliseconds. If any of these value is zero, the value and unit are omitted. The only exception is for a duration of 0 which is represented as `PT0S`. If the duration is negative, `h`, `m` and `s`, if displayed, are negative numbers. \\n\\n@param `duration` A duration expressed in platform time unit.\\n\\n@param `iso8601duration` A representation of the consumed duration according to ISO 8601.\\n\\n\",\"signature\":\"ISODURATION( duration:LONG ): iso8601duration:STRING\",\"tags\":[\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISODURATION\"},\"ISONORMALIZE\":{\"description\":\"The `ISONORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between -1 and 1 (i.e. it replaces X by \\n(X - mean)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"signature\":\"ISONORMALIZE( gts:GTS ): result:GTS\\nISONORMALIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ISONORMALIZE\"},\"JOIN\":{\"description\":\"Join N strings with the given separator.\\n\\n@param `n` Number of elements to join that it needs to take from the top of the stack.\\n\\n@param `sep` Separator used to join the strings.\\n\\n@param `string` One or more string on the stack.\\n\\n@param `objects` List of objects whose string representations are to be joined.\\n\\n@param `result` Joined string.\\n\\n\",\"signature\":\"JOIN( string:STRING* sep:STRING n:LONG ): result:STRING\\nJOIN( objects:LIST sep:STRING ): result:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"JOIN\"},\"JSON->\":{\"description\":\"The `JSON->` function parses a string as [JSON](http://json.org/) from the top of the stack and pushes the result onto the stack.\\n\\n@param `json` String JSON representation\\n\\n@param `resultMap` Map JSON representation if it is a JSON object\\n\\n@param `resultList` List JSON representation if it is a JSON array\\n\\n\",\"signature\":\"JSON->( json:STRING ): resultMap:MAP\\nJSON->( json:STRING ): resultList:LIST\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"H_CEIXoy\"},\"JSONLOOSE\":{\"description\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONLOOSE` function configures the stack to send results in a loose [JSON](http://json.org/) format where `NaN` and `Infinite` are valid values.\\n\\nIf the [JSON](http://json.org/) parser you’re using is strict, you should either configurate the [`JSONSTRICT`](/doc/JSONSTRICT) mode or dealing with \\n`NaN` and `Infinite` values outside the parser.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONLOOSE\"},\"JSONSTACK\":{\"description\":\"Select the JSON format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"JSONSTACK(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"JSONSTACK\"},\"JSONSTRICT\":{\"description\":\"In strict [JSON](http://json.org/) format the `NaN` and `Infinite` values aren’t allowed and they are replaced by `null`.\\n\\nThe `JSONSTRICT` function configures the stack to send results in strict [JSON](http://json.org/) format.\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"JSONSTRICT\"},\"KEYLIST\":{\"description\":\"Gets keys from a **MAP**.\\n\\nThe function `KEYLIST` extracts the keys of a map on the top of the stack and pushes on the stack a list with those keys. The map is consumed.      \\n\\n@param `map` Map from which you want to extract keys\\n\\n@param `result` List of keys\\n\\n\",\"signature\":\"KEYLIST( map:MAP ): result:LIST\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"KEYLIST\"},\"KURTOSIS\":{\"description\":\"The `KURTOSIS` function computes the [kurtosis](https://en.wikipedia.org/wiki/Kurtosis) of a Geo Time Series™ or a list thereof.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the kurtosis.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `kurtosis` Computed kurtosis of the Geo Time Series™ instance.\\n\\n@param `lkurtosis` List of computed kurtosis of the Geo Time Series™ instances.\\n\\n\",\"signature\":\"KURTOSIS( gts:GTS bessel:BOOLEAN ): kurtosis:DOUBLE\\nKURTOSIS( lgts:LIST<GTS> bessel:BOOLEAN ): lkurtosis:LIST<DOUBLE>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.2.13\",\"OPB64name\":\"KURTOSIS\"},\"LABELS\":{\"description\":\"The `LABELS` function consumes a GTS from the stack, extracts its labels, puts them in a map and pushes the map onto the stack.\\n\\n@param `gts` The Geo Time Series™ to get the labels from.\\n\\n@param `encoder` The Geo Time Series™ Encoder to get the labels from.\\n\\n@param `return` Labels MAP\\n\\n\",\"signature\":\"LABELS( gts:GTS ): return:MAP\\nLABELS( encoder:GTSENCODER ): return:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LABELS\"},\"LASTACTIVITY\":{\"description\":\"Extracts the timestamp of last activity recorded in the Geo Time Series™ metadata.\\n\\nThe timestamp is expressed as platform time units elapsed since the Unix Epoch.\\n\\n@param `gts` Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `encoder` Geo Time Series™ encoder from which to extract the last activity timestamp.\\n\\n@param `lgts` List of Geo Time Series™ from which to extract the last activity timestamp.\\n\\n@param `lencoder` List of Geo Time Series™ encoders from which to extract the last activity timestamp.\\n\\n@param `lastactivity` Timestamp of last activity.\\n\\n@param `llastactivity` List of timestamps of last activity.\\n\\n\",\"signature\":\"LASTACTIVITY( gts:GTS ): lastactivity:LONG\\nLASTACTIVITY( encoder:GTSENCODER ): lastactivity:LONG\\nLASTACTIVITY( lgts:LIST<GTS> ): llastactivity:LONG\\nLASTACTIVITY( lencoder:LIST<GTSENCODER> ): llastactivity:LONG\",\"tags\":[\"gts\"],\"since\":\"2.0.0\",\"OPB64name\":\"LASTACTIVITY\"},\"LASTBUCKET\":{\"description\":\"The function `LASTBUCKET` consumes a GTS off the stack and pushes its lastbucket onto the stack.\\n\\nNote: when called on a non bucketized GTS instance, it returns 0.\\n\\n@param `gts` Bucketized GTS\\n\\n@param `result` Last bucket timestamp\\n\\n\",\"signature\":\"LASTBUCKET( gts:GTS ): result:LONG\",\"tags\":[\"bucketize\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTBUCKET\"},\"LASTSORT\":{\"description\":\"Sorts a list of Geo Time Series™ according to their most recent value. If most recent values are identical, ticks will be compared, the most recent \\nappearing first. If the ticks are also identical, then metadata (class and labels) will be compared.\\n\\nUse this function to compute Top N queries.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Sorted list of Geo Time Series™\\n\\n\",\"signature\":\"LASTSORT( gtsList:LIST<GTS> ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTSORT\"},\"LASTTICK\":{\"description\":\"The `LASTTICK` function pushes on the stack the newest tick of the Geo Time Series™ on top of the stack or, if the GTS is bucketized, its last bucket.\\n\\nWhen applied to a list of GTS, `LASTTICK` will return the greatest last tick found across all Geo Time Series™.\\n\\nIf the GTS does not have values, `Long.MIN_VALUE` is pushed.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `result` Last tick value.\\n\\n\",\"signature\":\"LASTTICK( gts:GTS ): result:LONG\\nLASTTICK( lgts:LIST<GTS> ): result:LONG\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LASTTICK\"},\"LBOUNDS\":{\"description\":\"The `LBOUNDS` function computes bounds which divide a specified interval into `n` intervals of equal length.\\n\\nThe result of `LBOUNDS` is a list of `n+1` bounds, defining `n` intervals inside the specified range plus the two bounds of this range which define the intervals before and after the range.\\n\\n@param `n` Number of intervals to generate.\\n\\n@param `upper` Upper bound of the range to subdivide.\\n\\n@param `lower` Lower bound of the range to subdivide.\\n\\n@param `bounds` List of computed bounds.\\n\\n\",\"signature\":\"LBOUNDS( lower:DOUBLE upper:DOUBLE n:LONG ): bounds:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LBOUNDS\"},\"LFLATMAP\":{\"description\":\"The `LFLATMAP` function applies a macro on each element of a list, producing a list \\nwith the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the list index on top and the element \\nat that particular index below it. Since Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\nDifference with `LMAP`: if the macro returns a list, then LFLATMAP will produce a \\nlist with the elements of the macro output list (_i.e._ it will _flatten_ the list). \\n\\nDifference with `LMAP FLATTEN`: flatten will do the list flattening recursively. \\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count -1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"LFLATMAP( inputlist:LIST macro:MACRO ): results:LIST\\nLFLATMAP( inputlist:LIST macro:MACRO index:BOOLEAN ): results:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LFLATMAP\"},\"LIMIT\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and \\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `LIMIT` function modifies the maximum number of datapoints which can be fetched during a script execution by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call `AUTHENTICATE` with a valid token.\\n\\n@param `maxDataPoints` Maximal data points retrieved from database in a single FETCH\\n\\n\",\"signature\":\"LIMIT( maxDataPoints:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"LIMIT\"},\"LINEOFF\":{\"description\":\"The `LINEOFF` function disables the automatic labelling of WarpScript code as enabled by `LINEON`.      \\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEOFF\"},\"LINEON\":{\"description\":\"The `LINEON` function enables the automatic section labelling at the beginning of each line of the input WarpScript code. This handy feature greatly simplifies the debug process as the exact line number where an error happens will appear in the error message embedded as a section name of the form `[Line #xx]`.\\n\\nThis automatic labelling only works with the `/exec` endpoint of Warp 10.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.15\",\"OPB64name\":\"LINEON\"},\"LIST->\":{\"description\":\"The `LIST->` function extracts the elements of the **LIST** at the top of the stack\\nand pushes them onto the stack one by one. The function then pushes\\nonto the stack the number of elements that were in the **LIST**.\\n\\n@param `input` The input list, will be consumbed\\n\\n@param `listlength` The length N of input\\n\\n@param `elements` N elements pushed on the stack\\n\\n\",\"signature\":\"LIST->( input:LIST ): elements:ANY* listlength:LONG\",\"tags\":[\"lists\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"I3_IK1oy\"},\"LMAP\":{\"description\":\"The `LMAP` function applies a macro on each element of a **LIST**, producing a **LIST** with the element on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **LIST** index on top and the element at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each element in inputlist.\\n\\n@param `inputlist` List of items\\n\\n@param `results` List of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"LMAP( inputlist:LIST macro:MACRO ): results:LIST\\nLMAP( inputlist:LIST macro:MACRO index:BOOLEAN ): results:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LMAP\"},\"LOAD\":{\"description\":\"The `LOAD` function pushes onto the stack the value currently associated with a symbol name.      \\n\\nIf the symbol is not defined, an error will be raised.\\n\\n@param `name` Name of symbol whose value should be retrieved.\\n\\n@param `register` Register number whose value should be retrieved.\\n\\n@param `value` Retrieved value.\\n\\n\",\"signature\":\"LOAD( name:STRING ): value:ANY\\nLOAD( register:LONG ): value:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOAD\"},\"LOCATIONOFFSET\":{\"description\":\"The `LOCATIONOFFSET` function downsamples a Geo Time Series™ by retaining the first and last datapoints and only those datapoints which are \\nmore than a given distance away.\\n\\n@param `distance` Distance in meters\\n\\n@param `gts` Geo Time Series™ to downsample\\n\\n@param `gtsList` List of Geo Time Series™ to downsample\\n\\n@param `result` Downsampled Geo Time Series™\\n\\n@param `resultList` List of downsampled Geo Time Series™\\n\\n\",\"signature\":\"LOCATIONOFFSET( gts:GTS distance:NUMBER ): result:GTS\\nLOCATIONOFFSET( gtsList:LIST<GTS> distance:NUMBER ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONOFFSET\"},\"LOCATIONS\":{\"description\":\"The `LOCATIONS` function consumes a Geo Time Series™ from the stack, extracts the locations of a Geo Time Series™, puts them in two lists \\n(a list of latitudes and a list of longitudes) and pushes the two lists onto the stack.\\n\\n@param `gts` GTS\\n\\n@param `longitudes` List of longitudes\\n\\n@param `latitudes` List of latitudes\\n\\n\",\"signature\":\"LOCATIONS( gts:GTS ): latitudes:LIST<DOUBLE> longitudes:LIST<DOUBLE>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCATIONS\"},\"LOCSTRINGS\":{\"description\":\"The `LOCSTRINGS` function extract the locations from a Geo Time Series™ and builds a list of the 64 bits hexadecimal representation of their \\n[HHCode](https://en.wikipedia.org/wiki/HHCode).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `result` List of [HHCode](https://en.wikipedia.org/wiki/HHCode)\\n\\n\",\"signature\":\"LOCSTRINGS( gts:GTS ): result:LIST<STRING>\",\"tags\":[\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOCSTRINGS\"},\"LOG\":{\"description\":\"The `LOG` function consumes a floating point number x from the top of the stack and pushes back its natural logarithm, log<sub>e</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Natural logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of natural logarithms of the given values\\n\\n\",\"signature\":\"LOG( value:NUMBER ): result:DOUBLE\\nLOG( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG\"},\"LOG10\":{\"description\":\"The `LOG10` function consumes a floating point number x from the top of the stack and pushes back its common logarithm, log<sub>10</sub>x.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Common logarithm of the given value\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of common logarithms of the given values\\n\\n\",\"signature\":\"LOG10( value:NUMBER ): result:DOUBLE\\nLOG10( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG10\"},\"LOG1P\":{\"description\":\"Returns the natural logarithm of the sum of the argument and 1.\\n\\nThe `LOG1P` function consumes a number from the top of the stack and pushes back the natural logarithm for (arg + 1).\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Logarithm of (value + 1)\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of logarithm of (value + 1)\\n\\n\",\"signature\":\"LOG1P( value:NUMBER ): result:DOUBLE\\nLOG1P( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOG1P\"},\"LOGEVENT->\":{\"description\":\"Warp&nbsp;10™ runner execution logs are encrypted. See [this documentation](/content/03_Documentation/06_Operations/05_Logs/).\\n\\nThe easiest way to read logs is to copy the log output and use this function.\\n\\n\\n@param `logline` The opb64 representation of the aes encrypted log line\\n\\n@param `decodedlog` The decoded logs.\\n\\n\",\"signature\":\"LOGEVENT->( logline:STRING ): decodedlog:STRING\",\"tags\":[\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"I3x6GKO4I_FhEV\"},\"LOGMSG\":{\"description\":\"`LOGMSG` function prints millisecond timestamp and input text on the standard output.\\n\\nThe `LOGMSG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"signature\":\"LOGMSG( msg:STRING ): \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOGMSG\"},\"LOWESS\":{\"description\":\"The `LOWESS` function consumes a bandwidth (a **LONG**) from the top of the stack, then smooths a GTS or a **LIST** of GTS that are below by using \\nlocal regression.\\n\\nTo obtain a good smoothing, it is advised to choose an odd number of at least 5 as the bandwidth parameter.\\n\\n@param `bandwidth` The bandwitdth parameter is the number of nearest neighbours to consider when applying the local regression.\\n\\n@param `gts` Geo Time Series™.\\n\\n@param `gtsList` List of Geo Time Series™.\\n\\n@param `lresult` List of Geo Time Series™ result.\\n\\n@param `result` Geo Time Series™ result.\\n\\n\",\"signature\":\"LOWESS( gts:GTS bandwidth:LONG ): result:GTS\\nLOWESS( gtsList:LIST<GTS> bandwidth:LONG ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"LOWESS\"},\"LR\":{\"description\":\"Compute the [simple linear regression](https://en.wikipedia.org/wiki/Linear_regression) parameters `alpha` (y-intercept) and `beta` (line slope) for the given numerical Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ on which to compute linear regression.\\n\\n@param `beta` The slope of the line fitted on the GTS values.\\n\\n@param `alpha` The y-intercept of the lined fitted on the GTS values.\\n\\n\",\"signature\":\"LR( gts:GTS ): alpha:DOUBLE beta:DOUBLE\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.13\",\"OPB64name\":\"LR\"},\"LSORT\":{\"description\":\"The `LSORT` function sorts the list on the top of the stack.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `inputlist` The reference of the list to sort\\n\\n@param `sortedlist` The original list sorted, this is not a new list object\\n\\n\",\"signature\":\"LSORT( inputlist:LIST ): sortedlist:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"LSORT\"},\"LTTB\":{\"description\":\"The `LTTB` function downsamples a Geo Time Series™ or list thereof using the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"signature\":\"LTTB( gts:GTS samples:LONG ): downsampled:GTS\\nLTTB( lgts:LIST<GTS> samples:LONG ): ldownsampled:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"LTTB\"},\"MACROBUCKETIZER\":{\"description\":\"`MACROBUCKETIZER` converts a macro into a bucketizer which can be used with the [`BUCKETIZE`](/doc/BUCKETIZE) framework.\\n\\nFor each tick in the mapped GTS, the macro will be called with a list containing the following elements on the stack:\\n\\n```js\\n[tick_of_computation,[gts_classes],[label_bucketize],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n@param `macro` Macro used as a bucketizer\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"signature\":\"MACROBUCKETIZER( macro:MACRO ): result:AGGREGATOR\",\"tags\":[\"bucketize\",\"bucketizer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROBUCKETIZER\"},\"MACROCONFIG\":{\"description\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration keys looked up are those built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIG`.\\n\\n`MACROCONFIG` will check if the keys exists, if not it will remove the part of the macro name after the last `/` and will try that new key. It will successively try all names up to the last part of the macro name.\\n\\nIf none of those keys existed, the call will end in error.\\n\\nSo for example, if `MACROCONFIG` is called from a macro `my/test/macro` to retrieve the value associated with `mykey`, it will look up the following keys in the configuration:\\n\\n```\\nmykey@my/test/macro\\nmykey@my/test\\nmykey@my\\n```\\n\\n@param `key` Configuration key to look up.\\n\\n\",\"signature\":\"MACROCONFIG( key:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIG\"},\"MACROCONFIGDEFAULT\":{\"description\":\"When called from a macro loaded from a local macro repository, a jar in the class path or via the WarpFleet™ resolver, this function accesses the value of a configuration key present in the Warp 10™ configuration.\\n\\nThis allows to define macro properties outside of the macro itself, which proves very handy when exposing macros via WarpFleet™ for example.\\n\\nThe typical use case would be a macro which needs a token to interact with Warp 10™, the token can be set in the configuration file.\\n\\nThe configuration key looked is built by adding `@` and the macro name to the key specified as parameter to `MACROCONFIGDEFAULT`.\\n\\n`MACROCONFIGDEFAULT` will check if the keys exists, if not it will push the provided default value onto the stack, or fail with an error if the default was `NULL`. If the key is found, the associated value is pushed on the stack.\\n\\n@param `key` Configuration key to look up.\\n\\n@param `default` Default value to use if the key was not found, or `NULL` to fail if the key is absent.\\n\\n\",\"signature\":\"MACROCONFIGDEFAULT( key:STRING default:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGDEFAULT\"},\"MACROCONFIGSECRET\":{\"description\":\"The `MACROCONFIGSECRET` macro consumes 2 elements on the stack, the current and new secret to be set. If no secret has been set, the function will throw an error.\\n\\nThe secret set by this function is the secret used by [`SETMACROCONFIG`](/doc/SETMACROCONFIG).\\n\\n@param `newSecret` New secret to override the current one.\\n\\n@param `oldSecret` Currently set secret.\\n\\n\",\"signature\":\"MACROCONFIGSECRET( oldSecret:STRING newSecret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"MACROCONFIGSECRET\"},\"MACROFILLER\":{\"description\":\"`MACROFILLER` converts a macro into a *filler* which can be used with the [`FILL`](/doc/FILL) function.\\n\\nThe macro will find the following elements on the stack when it is called:\\n\\n```\\n6: Geo Time Series™ to fill. Both this GTS and the one above are only meant to expose the metadata\\n5: Geo Time Series™ of the *other* GTS with a value at the current tick\\n4: list of [ tick latitude longitude elevation value ] for the pre window\\n3: [ tick latitude longitude elevation value ] of the *other* Geo Time Series™\\n2: list of [ tick latitude longitude elevation value ] for the post window\\nTOP: tick which is being filled\\n```\\n\\nIt must leave on the stack a list containing the following elements, in this order:\\n\\n*tick*, *latitude* or `NaN`, *longitude* or `NaN`, *elevation* or `NaN`, *value*\\n\\n\\n@param `macro` Macro to wrap.\\n\\n@param `prewindow` Number of datapoints needed ahead of the missing datapoint.\\n\\n@param `postwindow` Number of datapoints needed after the missing datapoint.\\n\\n@param `filler` Filler instance.\\n\\n\",\"signature\":\"MACROFILLER( macro:MACRO prewindow:LONG postwindow:LONG ): filler:FILLER\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"MACROFILLER\"},\"MACROFILTER\":{\"description\":\"`MACROFILTER` converts a macro into a filter which can be used with the [`FILTER`](/doc/FILTER) framework\\n\\nFor each equivalence classes in the filter set of Geo Time Series™, the macro will be called with the following elements on the stack:\\n\\n```\\n[gts], {labels_equivalence_class}\\n```\\n\\nAfter each call the macro is expected to leave a list on the stack.\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"MACROFILTER( macro:MACRO ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROFILTER\"},\"MACROMAPPER\":{\"description\":\"`MACROMAPPER` converts a macro into a mapper which can be used with the [`MAP`](/doc/MAP) framework.\\n\\nFor each tick in the mapped Geo Time Series™, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROMAPPER` can also create a multivariate mapper, that is, a mapper that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate mapper with MAP, each input GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n\\n@param `macro` Macro to convert\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"MACROMAPPER( macro:MACRO ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROMAPPER\"},\"MACROREDUCER\":{\"description\":\"`MACROREDUCER` converts a macro into a reducer which can be used with the [`REDUCE`](/doc/REDUCE) framework\\n\\nFor each tick in the Geo Time Series™ to reduce, the macro will be called with a list containing the following elements on the stack:\\n\\n```json\\n[tick_of_computation,[gts_classes],[label_maps],[ticks],[latitudes],[longitudes],[elevations],[values]]\\n```\\n\\nEach list have a length of the number of GTSs in the partition. Each missing value are replaced by `null`, each missing tick by the minimum value of long and each missing latitude, longitude or elevation by NaN. The `label_maps` list as one more element at the end compared to the other lists: the common labels for the GTSs of the partition.\\n\\nAfter each call the macro is expected to leave on the stack a list with the following elements:\\n\\n```json\\n[tick, latitude, longitude, elevation, value]\\n```\\n\\n`MACROREDUCER` can also create a multivariate reducer, that is, a reducer that outputs multiple results. To do this, macro calls shall leave on the stack a map:\\n\\n```json\\n{\\n'result_1': [tick, latitude, longitude, elevation, value],\\n'result_2': [tick, latitude, longitude, elevation, value],\\n...\\n}\\n```\\nWhen using a multivariate reducer with REDUCE, each input List of GTS produces as much output GTS in a list, whose classnames are the keys found in the map left by the macro call on the stack.\\n\\n\\n@param `macro` Macro to apply\\n\\n@param `result` Reducer to apply\\n\\n\",\"signature\":\"MACROREDUCER( macro:MACRO ): result:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.0\",\"OPB64name\":\"MACROREDUCER\"},\"MACROTTL\":{\"description\":\"In a file defining a server side macro, the `MACROTTL` function defines the time to live of the macro code. If the macro is accessed after this delay has expired and ondemand loading of macros is enabled, it will unconditionnaly be reloaded from disk.\\n\\nThis feature is very useful when you have macros generated dynamically on the server side which change frequently. Using `MACROTTL` you can ensure the newest code is loaded regardless of the rescan interval of the macro directory.\\n\\nIn a the file defining a server side macro, the call to `MACROTTL` should appear before or after the actual macro definition but not within.\\n\\nThe time after which the macro will no longer be valid is the time of the call to `MACROTTL` plus its parameter.\\n\\n@param `ttl` The time to live to apply to the macro, in ms.\\n\\n\",\"signature\":\"MACROTTL( ttl:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MACROTTL\"},\"MAKEGTS\":{\"description\":\"The `MAKEGTS` function builds a Geo Time Series™ from **LIST**s.\\n\\nThe timestamp and values lists must be of the exact same size.\\nHowever, as latitudes, longitudes and elevations are optional in a Geo Time Series™, these lists can be shorter than the timestamps lists or even empty. If there are missing latitudes, longitudes and elevations, use [`NaN`](/doc/NaN).\\n\\n@param `values` Values of the GTS\\n\\n@param `elevations` Elevations of the GTS\\n\\n@param `longitudes` Longitudes of the GTS\\n\\n@param `latitudes` Latitudes of the GTS\\n\\n@param `timestamps` Timestamps of the GTS\\n\\n@param `result` Geo Time Series™\\n\\n\",\"signature\":\"MAKEGTS( timestamps:LIST latitudes:LIST longitudes:LIST elevations:LIST values:LIST ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAKEGTS\"},\"MAN\":{\"description\":\"The `MAN` function returns the help link for a function name.\\n\\nIf the function does not exists, it returns http://www.warp10.io/\\n\\n\\n@param `function` The function name\\n\\n@param `any` Anything except a function name\\n\\n@param `url` URL of the online help\\n\\n\",\"signature\":\"MAN( function:STRING ): url:STRING\\nMAN( any:ANY ): url:STRING\\nMAN(): url:STRING\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.2.18\",\"OPB64name\":\"MAN\"},\"MAP\":{\"description\":\"The `MAP` framework applies a function on values of a Geo Time Series™ that fall into a sliding window.\\n\\nThe `MAP` framework is designed to use an existing MAPPER or a custom MACROMAPPER. It could also accept a macro: the current window is passed as a GTS to the macro. See examples below.\\n\\n@param `result` List of Geo Time Series™, one for each input, whose values are the results of the function application on each sliding window. If the input series is bucketized, the result series will be too unless outputTicks is non null.\\n\\n@param `gts` One or more Geo Time Series™\\n\\n@param `gtsList` One or more lists of Geo Time Series™\\n\\n@param `mapper` Mapper function to apply\\n\\n@param `pre` Width of the sliding window before the current tick. This parameter is interpreted as a number of ticks if its value is positive, and as a number of time units if its value is negative. A value of 0 means the sliding window does not cover the past. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the past. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `post` Width of the sliding window after the current tick. Values have the same semantics as for the `pre` parameter. A value of 0 means the sliding window does not cover the future. Use the special values `max.tick.sliding.window` or `max.time.sliding.window` to expand the window the farthest into the future. Defaults to 0.\\n\\n@param `occurrences` Limit the number of computations to that number. If the value is 0, compute a value for each tick of the input Geo Time Series™. If it is non-negative, compute that many values starting from the oldest to the most recent tick. In the other case, do that many computations in the reverse order. This is useful when you are interested in a single result, like the max or sum of all values. Defaults to 0. When selecting a number of ticks, the value of this parameter is limited to 2**32-1 even if a greater value was provided.\\n\\n@param `step` The step size in number of ticks. The mapper beggins at the oldest tick and goes to the tick `step` after the current one and so on. Defaults to 1.\\n\\n@param `overrideTick` If set to true, the tick value returned by the mapper is used to update the current tick, else it is ignored and the original tick is kept. Defaults to false.\\n\\n@param `outputTicks` If non null, it sets the list of ticks that is traversed to anchor the sliding windows (instead of the ticks of the input Geo Time Series™). In that case, a tick of the input Geo Time Series™ that would be equal to one of these anchor points is counted by a positive `post` if `occurences` is non-negative, or by a positive `pre` if `occurences` is negative.\\n\\n\",\"signature\":\"MAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG ] ): result:LIST<GTS>\\nMAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG ] ): result:LIST<GTS>\\nMAP( [ gts:GTS+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN ] ): result:LIST<GTS>\\nMAP( [ gtsList:LIST<GTS>+ mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN ] ): result:LIST<GTS>\\nMAP( gts:GTS+ { mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN outputTicks:LIST<LONG>  } ): result:LIST<GTS>\\nMAP( gtsList:LIST<GTS>+ { mapper:AGGREGATOR pre:LONG post:LONG occurrences:LONG step:LONG overrideTick:BOOLEAN outputTicks:LIST<LONG>  } ): result:LIST<GTS>\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAP\"},\"MAP->\":{\"description\":\"The `MAP->` function expands the **MAP** on top of the stack into pairs of elements followed by the number of elements extracted. If the **MAP** was \\ncreated by a call to `->MAP`, the order of the elements will be the same as prior to calling `->MAP`.\\n\\n@param `map` Map to expand\\n\\n@param `key` Key of the pair\\n\\n@param `value` Value of the pair\\n\\n@param `mapsize` The number of key value pushed on the stack.\\n\\n\",\"signature\":\"MAP->( map:MAP ): key:ANY* value:ANY* mapsize:LONG\",\"tags\":[\"maps\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"IJ4FAIs\"},\"MAPID\":{\"description\":\"Generates a fingerprint of a map.\\n\\n@param `input` Input map\\n\\n@param `result` Fingerprint of the map\\n\\n\",\"signature\":\"MAPID( input:MAP ): result:STRING\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAPID\"},\"MARK\":{\"description\":\"Pushes a mark onto the stack.\\n\\n@param `mark` A MARK instance.\\n\\n\",\"signature\":\"MARK(): mark:MARK\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MARK\"},\"MAT->\":{\"description\":\"The `MAT->` function converts a Matrix into nested lists.\\n\\n\\n@param `input` Matrix to convert\\n\\n@param `result` Nested list of values\\n\\n\",\"signature\":\"MAT->( input:MATRIX ): [  result:LIST<LIST<DOUBLE>>  ]\",\"tags\":[\"lists\",\"math\",\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"IJ4JAIs\"},\"MATCH\":{\"description\":\"The `MATCH` function applies a regular expression (regexp) to a string.\\n\\nIt consumes two parameters from the top of the stack: the regexp pattern and the string to test matching with.\\n\\nIf the string doesn’t match the regexp, the function return an empty list. If it matches, the function will return a list of every matching group.\\n\\nInstead of using a regular expression **STRING**, you can also use the result of [`MATCHER`](/doc/MATCHER) for improved performance.\\n\\n@param `regexp` Regular expression to apply\\n\\n@param `string` String to evaluate\\n\\n@param `result` List of every matching group.\\n\\n\",\"signature\":\"MATCH( string:STRING regexp:STRING ): result:LIST<STRING>\\nMATCH( string:STRING regexp:MATCHER ): result:LIST<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCH\"},\"MATCHER\":{\"description\":\"The `MATCHER` function will compile a regular expression into an efficient object which can be used by [`MATCH`](/doc/MATCH).\\n\\n@param `regexp` Regular expression to compile\\n\\n@param `result` Compiled regula expression\\n\\n\",\"signature\":\"MATCHER( regexp:STRING ): result:MATCHER\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"MATCHER\"},\"MAX\":{\"description\":\"Returns the greater of two numeric values.\\n\\nThe `MAX` function consumes two numeric parameters from the top of the stack and pushes back the greatest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The larger of p1 and p2.\\n\\n@param `sresult` The larger of the elements in the given list.\\n\\n@param `lresult` A list where each value is the max between the element in the list and the given value.\\n\\n\",\"signature\":\"MAX( p1:LONG p2:LONG ): result:LONG\\nMAX( p1:LONG p2:DOUBLE ): result:DOUBLE\\nMAX( p1:DOUBLE p2:LONG ): result:DOUBLE\\nMAX( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\nMAX( p1:COUNTER p2:COUNTER ): result:LONG\\nMAX( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\nMAX( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\nMAX( p1:COUNTER p2:LONG ): result:DOUBLE\\nMAX( p1:LONG p2:COUNTER ): result:DOUBLE\\nMAX( llist:LIST<LONG> ): sresult:LONG\\nMAX( dlist:LIST<DOUBLE> ): sresult:DOUBLE\\nMAX( clist:LIST<COUNTER> ): sresult:LONG\\nMAX( llist:LIST<LONG> value:LONG ): lresult:LIST<LONG>\\nMAX( clist:LIST<COUNTER> value:COUNTER ): lresult:LIST<LONG>\\nMAX( dlist:LIST<DOUBLE> value:DOUBLE ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAX\"},\"MAXBUCKETS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXBUCKETS` function modifies the maximum number of buckets which can be created by a call to [`BUCKETIZE`](/doc/BUCKETIZE) by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXBUCKETS( limit:LONG ): \",\"tags\":[\"platform\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXBUCKETS\"},\"MAXDEPTH\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard \\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXDEPTH` function modifies the maximum depth (number of levels) of the execution stack by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXDEPTH( limit:LONG ): \",\"tags\":[\"platform\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXDEPTH\"},\"MAXGEOCELLS\":{\"description\":\"Modifies the maximum number of cells a **GEOSHAPE** created by [`GEO.WKT`](/doc/GEO.WKT) or [`GEO.JSON`](/doc/GEO.JSON) can have. The limit can be modified up to the configured value for `warpscript.maxgeocells.hard`.\\n\\n@param `maxcells` New limit to set.\\n\\n\",\"signature\":\"MAXGEOCELLS( maxcells:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.2.11\",\"OPB64name\":\"MAXGEOCELLS\"},\"MAXGTS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard limit \\nwhich can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe `MAXGTS` function modifies the maximum number of Geo Time Series™ which can be fetched by setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXGTS( limit:LONG ): \",\"tags\":[\"platform\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXGTS\"},\"MAXJSON\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to\\nthe hard limit value.\\n\\nThe `MAXJSON` function modifies the maximum number of characters in a json produced by [`->JSON`](/doc/AIt9JoxD).\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXJSON( limit:LONG ): \",\"tags\":[\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"MAXJSON\"},\"MAXLONG\":{\"description\":\"Pushes [Long.MAX_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MAX_VALUE) onto the stack.\\n\\n@param `result` Long.MAX_LONG\\n\\n\",\"signature\":\"MAXLONG(): result:LONG\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLONG\"},\"MAXLOOP\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a hard\\nlimit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to the hard limit value.\\n\\nThe MAXLOOP function modifies the maximum number of milliseconds which can be spent in a loop setting it to the value on top of the stack.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXLOOP( limit:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXLOOP\"},\"MAXOPS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and\\na hard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXOPS` function modifies the maximum number of operations which can be performed during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXOPS( limit:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXOPS\"},\"MAXPIXELS\":{\"description\":\"Modifies the maximum size (in pixels) of images which can be created by [`PGraphics`](/doc/PGraphics). The limit can be modified up to the value configured in `warpscript.maxpixels.hard`.\\n\\n@param `pixels` Maximum size (in pixels).\\n\\n\",\"signature\":\"MAXPIXELS( pixels:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXPIXELS\"},\"MAXRECURSION\":{\"description\":\"Modifies the maximum nesting depth of macro calls. The limit can be modified up to the value configured in `warpscript.maxrecursion.hard`.\\n\\n@param `depth` Maximum nesting depth.\\n\\n\",\"signature\":\"MAXRECURSION( depth:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.2.13\",\"OPB64name\":\"MAXRECURSION\"},\"MAXSYMBOLS\":{\"description\":\"Execution of WarpScript code is performed on a stack which has a set of limits in order to prevent bad things to happen. Those limits have both a soft and a \\nhard limit which can be configured on the backend. By default a limit is set to its soft limit value, but it can be modified from within the script up to \\nthe hard limit value.\\n\\nThe `MAXSYMBOLS` function modifies the maximum number of simultaneous symbols which can be defined on the stack during a single WarpScript execution.\\n\\nPrior to calling this function, you must call [`AUTHENTICATE`](/doc/AUTHENTICATE) with a valid token.\\n\\n@param `limit` Soft limit to override\\n\\n\",\"signature\":\"MAXSYMBOLS( limit:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MAXSYMBOLS\"},\"MAXURLFETCHCOUNT\":{\"description\":\"The `MAXURLFETCHCOUNT` function modifies the maximum number of URLs which can be fetched with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.MAXURLFETCHCOUNT.limit.hard`.\\n\\n@param `limit` The maximum number of URLs which can be fetched.\\n\\n\",\"signature\":\"MAXURLFETCHCOUNT( limit:LONG ): \",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHCOUNT\"},\"MAXURLFETCHSIZE\":{\"description\":\"The `MAXURLFETCHSIZE` function modifies the maximum cumulative size of fetched payloads with [`URLFETCH`](/doc/URLFETCH) during a single WarpScript execution. This cannot exceed `warpscript.urlfetch.maxsize.hard` and is expressed as a number of bytes.\\n\\n@param `limit` The maximum cumulative size of fetched payloads.\\n\\n\",\"signature\":\"MAXURLFETCHSIZE( limit:LONG ): \",\"tags\":[\"extensions\",\"web\"],\"since\":\"2.0.2\",\"OPB64name\":\"MAXURLFETCHSIZE\"},\"MD5\":{\"description\":\"The `MD5` function digests a byte array on the stack with the cryptographic hash function [`MD5`](https://en.wikipedia.org/wiki/MD5).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"MD5( input:BYTES ): result:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"MD5\"},\"MERGE\":{\"description\":\"Merge several Geo Time Series™ together.\\n\\nThe `MERGE` function expects a **LIST** of Geo Time Series™ on the top of the stack. It will consume these GTS and push onto the stack a single GTS instance\\nwith all measurements found in the GTS instances present in the **LIST**. The name and labels of the resulting GTS instance are those of the first one of the\\n**LIST**.\\n\\n`MERGE` do not override values on the same timestamp, they are appenned.\\n\\n@param `gtsList` The list of Geo Time Series™\\n\\n@param `result` The merged Geo Time Series™\\n\\n\",\"signature\":\"MERGE( gtsList:LIST<GTS> ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MERGE\"},\"META\":{\"description\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `META` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"signature\":\"META( gtsList:LIST<GTS> writeToken:STRING ): \",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"META\"},\"METADIFF\":{\"description\":\"Stores the attributes of a list of Geo Time Series™ in the Warp 10 backend in an incremental manner. New attributes are added and already existing attributes are updated or removed if their value is an empty string.\\n\\nThis function expects on top of the stack a write token which will be used to authenticate with the Warp 10 backend and a Geo Time Series™ or a list thereof.\\n\\nEvery Geo Time Series™ to which `METADIFF` is applied must have a non empty name and attributes (possibly empty).\\n\\n@param `writeToken` valid write token for the set of GTS to modify\\n\\n@param `gtsList` GTS list with new or modified attributes\\n\\n\",\"signature\":\"METADIFF( gtsList:LIST<GTS> writeToken:STRING ): \",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"METADIFF\"},\"METAOFF\":{\"description\":\"Disables meta operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when a meta operation is attempted.\\n\\n\",\"signature\":\"METAOFF( message:STRING secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAOFF\"},\"METAON\":{\"description\":\"Enables meta operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"METAON( secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"METAON\"},\"METASET\":{\"description\":\"Performs a [`FIND`](/doc/FIND), retrieving a list of Geo Time Series™ and builds a *metaset* which can be distributed to allow access to those GTS without having to give away credentials.\\n\\nMetaset support is only available if a key has been set for `warp.aes.metasets`.\\n\\n@param `ttl` Time to live of the produces metaset. It will not be usable after that much time has elapsed since the current time. The ttl is specified in time units.\\n\\n@param `maxduration` The maximum span of data which can be retrieved using this metaset, in time units.\\n\\n@param `notafter` Most recent timestamp of the data this metaset can retrieve.\\n\\n@param `notbefore` Most ancient timestamp of the data this meataset can retrieve.\\n\\n@param `labels` Map of label selectors.\\n\\n@param `class` Geo Time Series™ class selector.\\n\\n@param `token` Read token to use for retrieving the GTS.\\n\\n@param `metaset` Encrypted metaset which can be used with a [`FETCH`](/doc/FETCH).\\n\\n\",\"signature\":\"METASET( [ token:STRING class:STRING labels:MAP notbefore:LONG notafter:LONG maxduration:LONG ttl:LONG ] ): metaset:STRING\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"METASET\"},\"METASORT\":{\"description\":\"Sorts a list of Geo Time Series™ according to elements of their metadata. The list of elements to consider for sorting can contain label names or NULL to consider the classname. Elements will be considered in the order in which they appear in the list.\\n\\n@param `gts` List of Geo Time Series™ to sort.\\n\\n@param `elements` Metadata elements to consider for sorting.\\n\\n@param `sorted` Sorted list of GTS.\\n\\n\",\"signature\":\"METASORT( gts:LIST<GTS> elements:LIST ): sorted:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"METASORT\"},\"MIN\":{\"description\":\"Returns the smaller of two numeric values.\\n\\nThe `MIN` function consumes two numeric parameters from the top of the stack and pushes back the smallest value.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `p1` First numeric parameter\\n\\n@param `p2` Second numeric parameter\\n\\n@param `value` Numeric value\\n\\n@param `llist` List of Longs.\\n\\n@param `dlist` List of Doubles.\\n\\n@param `clist` List of Counters.\\n\\n@param `result` The smaller of p1 and p2.\\n\\n@param `sresult` The smaller of the elements in the given list.\\n\\n@param `lresult` A list where each value is the min between the element in the list and the given value.\\n\\n\",\"signature\":\"MIN( p1:LONG p2:LONG ): result:LONG\\nMIN( p1:LONG p2:DOUBLE ): result:DOUBLE\\nMIN( p1:DOUBLE p2:LONG ): result:DOUBLE\\nMIN( p1:DOUBLE p2:DOUBLE ): result:DOUBLE\\nMIN( p1:COUNTER p2:COUNTER ): result:LONG\\nMIN( p1:COUNTER p2:DOUBLE ): result:DOUBLE\\nMIN( p1:DOUBLE p2:COUNTER ): result:DOUBLE\\nMIN( p1:COUNTER p2:LONG ): result:DOUBLE\\nMIN( p1:LONG p2:COUNTER ): result:DOUBLE\\nMIN( llist:LIST<LONG> ): sresult:LONG\\nMIN( dlist:LIST<DOUBLE> ): sresult:DOUBLE\\nMIN( clist:LIST<COUNTER> ): sresult:LONG\\nMIN( llist:LIST<LONG> value:LONG ): lresult:LIST<LONG>\\nMIN( clist:LIST<COUNTER> value:COUNTER ): lresult:LIST<LONG>\\nMIN( dlist:LIST<DOUBLE> value:DOUBLE ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"MIN\"},\"MINLONG\":{\"description\":\"Pushes [Long.MIN_VALUE](https://docs.oracle.com/javase/7/docs/api/java/lang/Long.html#MIN_VALUE) onto the stack.\\n\\n@param `result` Long.MIN_VALUE\\n\\n\",\"signature\":\"MINLONG(): result:LONG\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"MINLONG\"},\"MINREV\":{\"description\":\"The `MINREV` function consumes a string representing a revision on the stack and puts back a boolean indicating if the revision of the current Warp 10™ platform is newer or equal.\\n\\n@param `revision` A string representing a revision (semantic versioning). Given a version number MAJOR.MINOR.PATCH, .MINOR or .MINOR.PATCH can be omitted.\\n\\n@param `newer` A boolean indicating wether the revision of the current Warp 10™ platform is newer or equal to the given revision.\\n\\n\",\"signature\":\"MINREV( revision:STRING ): newer:BOOLEAN\",\"tags\":[\"platform\"],\"since\":\"1.2.23\",\"OPB64name\":\"MINREV\"},\"MMAP\":{\"description\":\"The `MMAP` function applies a macro on each key/value pair of a **MAP**, producing a **MAP** with the two elements on top of the stack after each macro invocation.\\n\\nThe macro is called with a stack containing the **MAP** index on top and the key/value pair at that particular index below it. \\nSince Warp 10 2.4.0, you can override this behaviour with a boolean.\\n\\n@param `macro` This macro will be called for each entry in inputmap.\\n\\n@param `inputmap` Map to iterate on.\\n\\n@param `results` Map of results left on the top of the stack by each macro\\n\\n@param `index` When set to true, the current index (=iteration count-1) will be on the top of the stack. By default, true.\\n\\n\",\"signature\":\"MMAP( inputmap:MAP macro:MACRO ): results:MAP\\nMMAP( inputmap:MAP macro:MACRO index:BOOLEAN ): results:MAP\",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"MMAP\"},\"MODE\":{\"description\":\"The `MODE` function computes the mode(s) for a given Geo Time Series™ or a GTS **LIST**. Foreach Geo Time Series™ pushes back on the stack a list containing \\ntheir mode(s).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Mode of the list (the items that occurs most often)\\n\\n\",\"signature\":\"MODE( gts:GTS ): result:LIST\\nMODE( gtsList:LIST<GTS> ): [  result:LIST<LIST>  ]\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"MODE\"},\"MONOTONIC\":{\"description\":\"Produces a new Geo Time Series™ from an input by modifying the value so the result is monotonous. This is technically applying a ratchet effect on values.\\n\\nThe `MONOTONIC` function expects a boolean on top of the stack and a Geo Time Series™ or list thereof below the boolean. The boolean indicates whether the\\nresult should be monotonically increasing (false) or decreasing (true).\\n\\n@param `trend` Whether the result should be monotonically increasing (false) or decreasing (true)\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` New Geo Time Series™\\n\\n@param `resultList` List of new Geo Time Series™\\n\\n\",\"signature\":\"MONOTONIC( gts:GTS trend:BOOLEAN ): result:GTS\\nMONOTONIC( gtsList:LIST<GTS> trend:BOOLEAN ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MONOTONIC\"},\"MOTIONSPLIT\":{\"description\":\"The `MOTIONSPLIT` function splits Geo Time Series™ instances based on several possible motion criteria. Split parameters can be combined to split on multiple criteria.\\n\\n`MOTIONSPLIT` can split on:\\n- stopped state detection\\n- moving to stopped transition\\n- time difference between two ticks (just as [`TIMESPLIT`](/doc/TIMESPLIT) does).\\n- maximal distance between two consecutive positions.\\n\\n`MOTIONSPLIT` parameters:\\n- **timesplit**: LONG value, time in platform time unit. Splits if the time difference between two consecutive ticks is strictly greater than this parameter. If defined, the split type label will be \\\"timesplit\\\".\\n- **distance.split**: DOUBLE value, distance in meter. Splits if the orthodromic distance between two consecutive locations is strictly greater than this parameter. If defined, the split type label will be \\\"distancesplit\\\".\\n- **stopped.min.time**: LONG value, time in platform time unit. This is the minimum time the consecutive locations should stay in the stopped zone radius to consider a stop state. If defined, the split type label will be \\\"stopped\\\".\\n- **stopped.max.radius**: DOUBLE value, distance in meter. As long as consecutive positions remains in the radius during stopped.min.time, `MOTIONSPLIT` detect a stopped state.\\n- **stopped.max.speed**: DOUBLE value, speed in m/s. If the speed is greater than this value while in stopped state, `MOTIONSPLIT` exits the stopped state.\\n- **stopped.max.mean.speed**: DOUBLE value, speed in m/s. Maximum mean speed in the proximity zone that prevent the split. `MOTIONSPLIT` will split only if there is a full stop during the given time and radius, and if the mean speed in the proximity zone is less than this parameter.\\n- **stopped.split**: BOOLEAN value. If true, `MOTIONSPLIT` also splits between stopped and moving sequences. If defined, the split type label will be \\\"stopped\\\" or \\\"moving\\\".\\n- **label.stopped.time**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the time in stopped state. If the split source is not a stop detection, this label won't be set.\\n- **label.split.number**: STRING value. If defined, `MOTIONSPLIT` will add an extra label on each split that contains the split number, starting from 1.\\n- **label.split.type**: STRING value. If defined, `MOTIONSPLIT` will add an extra label that contains the split reason. It could be \\\"timesplit\\\", \\\"distancesplit\\\", \\\"end\\\", \\\"stopped\\\" or \\\"moving\\\".\\n\\n`MOTIONSPLIT` split type priorities:\\n- If stopped.min.time and stopped.max.radius are set, the stop detection has the first priority.\\n- If `MOTIONSPLIT` does not detect a stopped state, it looks for a distance split.\\n- If `MOTIONSPLIT` does not detect a stopped state or a distance split, it looks for a time split.\\n\\n\\n@param `parameters` List of splitting parameters. See the function description.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"MOTIONSPLIT( gts:GTS parameters:MAP ): splits:LIST<GTS>\\nMOTIONSPLIT( lgts:LIST<GTS> parameters:MAP ): lsplits:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"2.3.0\",\"OPB64name\":\"MOTIONSPLIT\"},\"MSGFAIL\":{\"description\":\"The `MSGFAIL` function stops the execution of WarpScript code by throwing an exception. \\n\\n@param `message` The exception message\\n\\n\",\"signature\":\"MSGFAIL( message:STRING ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSGFAIL\"},\"MSORT\":{\"description\":\"The function `MSORT` inspects the top of the stack. If it is a **MAP**, it sorts the **MAP** according to its keys. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\n@param `map` Map to sort\\n\\n@param `result` Sorted map\\n\\n\",\"signature\":\"MSORT( map:MAP ): result:MAP\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSORT\"},\"MSTU\":{\"description\":\"The `MSTU` function pushes onto the stack the number of platform time units in one millisecond. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one millisecond.\\n\\n\",\"signature\":\"MSTU(): numberTimeUnits:LONG\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"MSTU\"},\"MULTIPLYEXACT\":{\"description\":\"The `MULTIPLYEXACT` function consumes two LONGs from the top of the stack and puts back the product. If the product overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `prod` The product of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sprod` The product of all the elements of list\\n\\n@param `lx` List of numeric values\\n\\n@param `lprod` List of **LONG** where each value is the product of y and an element in lx\\n\\n\",\"signature\":\"MULTIPLYEXACT( x:NUMBER y:NUMBER ): prod:LONG\\nMULTIPLYEXACT( list:LIST<NUMBER> ): sprod:LONG\\nMULTIPLYEXACT( lx:LIST<NUMBER> y:NUMBER ): lprod:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"MULTIPLYEXACT\"},\"MUSIGMA\":{\"description\":\"The `MUSIGMA` function calculates the mean and the standard deviation of a Geo Time Series. It consumes two parameters from the top of the stack: a boolean \\n(to choose if [Bessel's correction](https://en.wikipedia.org/wiki/Bessel%27s_correction) should be applied on the standard deviation) and a numeric GTS, and \\nit pushes onto the stack its mean (mu) and its standard deviation (sigma).\\n\\n@param `bessel` True if apply a [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `sigma` Standard deviation\\n\\n@param `mu` Mean\\n\\n@param `gts` A single Geo Time Series\\n\\n\",\"signature\":\"MUSIGMA( gts:GTS bessel:BOOLEAN ): mu:DOUBLE sigma:DOUBLE\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"MUSIGMA\"},\"MUTEX\":{\"description\":\"Attempts to hold a named lock, creating it if needed, and execute a macro while holding the lock. When the macro execution terminates, either normally or with an error, the lock is released.\\n\\n@param `mutex` Name of lock to hold.\\n\\n@param `macro` Macro to execute while holding the lock.\\n\\n\",\"signature\":\"MUTEX( macro:MACRO mutex:STRING ): \",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"MUTEX\"},\"MVELEVATIONS\":{\"description\":\"The `MVELEVATIONS` function extracts elevations from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVELEVATIONS` function will emit a list with two elements (a pair), the first element will be the elevation associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the elevations of the Multivariate value itself.\\n\\nIf a tick has no associated elevation, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted elevations.\\n\\n\",\"signature\":\"MVELEVATIONS( input:GTSENCODER ): output:LIST\\nMVELEVATIONS( input:GTS ): output:LIST\\nMVELEVATIONS( linput:LIST ): output:LIST\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVELEVATIONS\"},\"MVHHCODES\":{\"description\":\"The `MVHHCODES` function extracts [`HHCodes`](https://en.wikipedia.org/wiki/HHCode) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVHHCODES` function will emit a list with two elements (a pair), the first element will be the HHCode associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the HHCodes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `NaN` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted HHCodes.\\n\\n\",\"signature\":\"MVHHCODES( input:GTSENCODER ): output:LIST\\nMVHHCODES( input:GTS ): output:LIST\\nMVHHCODES( linput:LIST ): output:LIST\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVHHCODES\"},\"MVINDEXSPLIT\":{\"description\":\"The `MVINDEXSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVINDEXSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element index (first element being at index 0).\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:INDEX` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of indices or indices ranges can be specified to only produce encoders for the indices which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `indices` List of indices or indices ranges (list of two indices), used to restrict which indices to consider.\\n\\n@param `renaming` Map of index (LONG) to parameter to `RENAME`. If no entry is present for an index, `+:INDEX` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"signature\":\"MVINDEXSPLIT( input:GTSENCODER ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER indices:LIST ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTSENCODER indices:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS indices:LIST ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( input:GTS indices:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> indices:LIST ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTSENCODER> indices:LIST renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> indices:LIST ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\\nMVINDEXSPLIT( linput:LIST<GTS> indices:LIST renaming:MAP ): loutput:LIST<LIST<GTSENCODER>>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVINDEXSPLIT\"},\"MVLOCATIONS\":{\"description\":\"The `MVLOCATIONS` function extracts location (latitude, longitude) from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVLOCATIONS` function will emit a list with two elements (a pair), the first element will be the latitude and longitude (a list) associated with the tick at which the Multivariate value was encountered, the second element will be a list containing the latitudes and longitudes of the Multivariate value itself.\\n\\nIf a tick has no associated location, `[ NaN NaN ]` will be emitted.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted locations.\\n\\n\",\"signature\":\"MVLOCATIONS( input:GTSENCODER ): output:LIST\\nMVLOCATIONS( input:GTS ): output:LIST\\nMVLOCATIONS( linput:LIST ): output:LIST\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVLOCATIONS\"},\"MVTICKS\":{\"description\":\"The `MVTICKS` function extracts ticks from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\nWhen a tick has an associated Multivariate value, the `MVTICKS` function will emit a list with two elements (a pair), the first element will be the tick at which the Multivariate value was encountered, the second element will be a list containing the ticks of the Multivariate value itself.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted ticks.\\n\\n\",\"signature\":\"MVTICKS( input:GTSENCODER ): output:LIST\\nMVTICKS( input:GTS ): output:LIST\\nMVTICKS( linput:LIST ): output:LIST\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKS\"},\"MVTICKSPLIT\":{\"description\":\"The `MVTICKSPLIT` function transforms an input Geo Time Series™ or Encoder by interpreting its Multi Value values and producing multiple output encoders.\\n\\nThe transformation works as follows, whenever `MVTICKSPLIT` encounters a value in Multi Value format at `tick` with `lat`, `lon`, `elev` as optional geo components, it decodes that value and adds each of its elements to a separate Encoder identified by the element timestamp.\\n\\nEach element is added with `tick` as its timestamp and `lat`, `lon`, `elev` as its geo components, unless it has its own geo information.\\n\\nIf the transformation encounters a value which is not in Multi Value format, its assumes it is an element found at index 0 and adds it to the associated encoder.\\n\\nOnce the input has been scanned completely, the resulting encoders are renamed, either by looking up the renaming parameter in a map or by appending `:TIMESTAMP` to the original name.\\n\\nThe labels and attributes from the input are preserved.\\n\\nOptionaly a list of timestamps or timestamp ranges can be specified to only produce encoders for the timestamps which are specified or fall within a specified range.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `timestamps` List of timestamps or timestamps ranges (list of two timestamps), used to restrict which timestamps to consider.\\n\\n@param `renaming` Map of timestamp (LONG) to parameter to `RENAME`. If no entry is present for a timestamp, `+:TIMESTAMP` will be assumed.\\n\\n@param `output` List of resulting encoders.\\n\\n@param `loutput` List of list of resulting encoders.\\n\\n\",\"signature\":\"MVTICKSPLIT( input:GTSENCODER ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER timestamps:LIST ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTSENCODER timestamps:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS timestamps:LIST ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( input:GTS timestamps:LIST renaming:MAP ): output:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> timestamps:LIST ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTSENCODER> timestamps:LIST renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> timestamps:LIST ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> renaming:MAP ): loutput:LIST<GTSENCODER>\\nMVTICKSPLIT( linput:LIST<GTS> timestamps:LIST renaming:MAP ): loutput:LIST<GTSENCODER>\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVTICKSPLIT\"},\"MVVALUES\":{\"description\":\"The `MVVALUES` function extracts values from an input Geo Time Series™ or GTS Encoder, correctly interpreting Multivariate (MV) values. The result is a potentially multidimensional list.\\n\\n@param `input` Input encoder or Geo Time Series™ to transform.\\n\\n@param `linput` List of input encoder or Geo Time Series™ to transform.\\n\\n@param `output` List (potentially multidimensional) of extracted values.\\n\\n\",\"signature\":\"MVVALUES( input:GTSENCODER ): output:LIST\\nMVVALUES( input:GTS ): output:LIST\\nMVVALUES( linput:LIST ): output:LIST\",\"tags\":[\"gts\",\"encoder\",\"conversion\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"MVVALUES\"},\"NAME\":{\"description\":\"The `NAME` function consumes a Geo Time Series™ from the stack, extracts its class name, and pushes it onto the stack.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `encoder` Geo Time Series™ Encoder\\n\\n@param `result` Class name\\n\\n\",\"signature\":\"NAME( gts:GTS ): result:STRING\\nNAME( encoder:GTSENCODER ): result:STRING\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NAME\"},\"NBOUNDS\":{\"description\":\"The `NBOUNDS` function computes bounds defining a specified number of intervals which have the same area under the curve of a normal distribution with a given mean and standard deviation.\\n\\n@param `n` Number of desired intervals.\\n\\n@param `sigma` Positive standard deviation to use for the normal distribution.\\n\\n@param `mu` Mean to use for the normal distribution.\\n\\n@param `bounds` List of `n`-1 bounds defining the `n` intervals.\\n\\n\",\"signature\":\"NBOUNDS( mu:NUMBER sigma:NUMBER n:LONG ): bounds:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NBOUNDS\"},\"NDEBUGON\":{\"description\":\"Turns on stack debugging so up to the given number of stack levels will be returned in case of error. Stack debugging is off by default.\\n\\n@param `n` Maximum number of stack levels to return in case of error.\\n\\n\",\"signature\":\"NDEBUGON( n:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NDEBUGON\"},\"NEGATEEXACT\":{\"description\":\"The `NEGATEEXACT` function consumes one LONG from the top of the stack and puts back the negated value. If the result overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be negated\\n\\n@param `result` The negated value\\n\\n@param `lvalue` List of values to be negated\\n\\n@param `lresult` List of negated values\\n\\n\",\"signature\":\"NEGATEEXACT( value:NUMBER ): result:DOUBLE\\nNEGATEEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEGATEEXACT\"},\"NEWENCODER\":{\"description\":\"The `NEWENCODER` function creates an empty encoder and pushes it onto the stack. An encoder is very similar to a Geo Time Series™, it differs by its ability to store values of all four types (LONG, DOUBLE, BOOLEAN, STRING) where a GTS is limited to the type of the first value stored.\\n\\nThe set of operations which can be performed on encoders is more limited than those that can be performed on GTS.\\n\\n@param `encoder` A newly created empty encoder instance.\\n\\n\",\"signature\":\"NEWENCODER(): encoder:GTSENCODER\",\"tags\":[\"encoder\",\"multivariate\"],\"since\":\"1.2.9\",\"OPB64name\":\"NEWENCODER\"},\"NEWGTS\":{\"description\":\"The `NEWGTS` function pushes onto the stack an empty Geo Time Series™ instance.\\n\\n@param `gts` A newly created empty GTS instance.\\n\\n\",\"signature\":\"NEWGTS(): gts:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEWGTS\"},\"NEXTAFTER\":{\"description\":\"The `NEXTAFTER` function consumes two numeric parameter from the top of the stack and pushes back the **DOUBLE** adjacent to the first argument in the direction of the second argument. In other words, the result is between *from* and *to* and adjacent to *from*.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `from` Starting value\\n\\n@param `to` Direction used to calculate the adjacent value\\n\\n@param `result` Next **DOUBLE** from *from* to *to*\\n\\n@param `lfrom` List of starting values\\n\\n@param `lto` List of directions used to calculate the adjacent value\\n\\n@param `lresult` List of next **DOUBLE** from *from* to *to*\\n\\n\",\"signature\":\"NEXTAFTER( from:NUMBER to:NUMBER ): result:DOUBLE\\nNEXTAFTER( from:NUMBER lto:LIST<NUMBER> ): lresult:LIST<DOUBLE>\\nNEXTAFTER( lfrom:LIST<NUMBER> to:NUMBER ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTAFTER\"},\"NEXTDOWN\":{\"description\":\"The `NEXTDOWN` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of negative infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of negative infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of negative infinity\\n\\n\",\"signature\":\"NEXTDOWN( value:NUMBER ): result:DOUBLE\\nNEXTDOWN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"NEXTDOWN\"},\"NEXTUP\":{\"description\":\"The `NEXTUP` function consumes a numeric parameter from the top of the stack and pushes back the next **DOUBLE** in the direction of positive infinity.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Next **DOUBLE** in the direction of positive infinity\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of next **DOUBLE** in the direction of positive infinity\\n\\n\",\"signature\":\"NEXTUP( value:NUMBER ): result:DOUBLE\\nNEXTUP( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NEXTUP\"},\"NOLOG\":{\"description\":\"The `NOLOG` function resets java.util.logging.LogManager.\\n\\nIt can be useful to do this during developments and tests of an extension.\\n\\nThe `NOLOG` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n\",\"signature\":\"NOLOG(): \",\"tags\":[\"extensions\"],\"since\":\"1.2.19\",\"OPB64name\":\"NOLOG\"},\"NONEMPTY\":{\"description\":\"Filter a list of Geo Time Series™ in order to retain only those that have at least one value.\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `results` Filtered list of Geo Time Series™\\n\\n\",\"signature\":\"NONEMPTY( gtsList:LIST<GTS> ): results:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NONEMPTY\"},\"NONNULL\":{\"description\":\"The `NONNULL` function consumes a list and produces a list containing only the non NULL elements of the argument list.\\n\\n@param `list` The argument list to filter\\n\\n@param `nonnulls` A new list with only those elements from `list` which are not NULL\\n\\n\",\"signature\":\"NONNULL( list:LIST ): nonnulls:LIST\",\"tags\":[\"math\",\"logic\"],\"since\":\"1.2.7\",\"OPB64name\":\"NONNULL\"},\"NOOP\":{\"description\":\"It does nothing.\\n\\nWhile it does not have a usefulness of its own, it can be used when generating code from within WarpScript code prior to executing it with [`EVAL`](/doc/EVAL).\\n\\n\",\"signature\":\"\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOOP\"},\"NORMALIZE\":{\"description\":\"The `NORMALIZE` function takes as parameter a numeric GTS or a list of numeric GTS and normalize them between 0 and 1 (i.e. it replaces X by \\n(X - min)/(max - min) or by 1 if max == min).\\n\\n@param `gts` GTS to normalize\\n\\n@param `gtsList` List of GTS to normalize\\n\\n@param `result` Normalized GTS\\n\\n@param `resultList` List of normalized GTS\\n\\n\",\"signature\":\"NORMALIZE( gts:GTS ): result:GTS\\nNORMALIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NORMALIZE\"},\"NOT\":{\"description\":\"Negates a boolean.\\n\\nThe `NOT` function is synonymous for [`!`](/doc/7F). It consumes a boolean value x from the top of the stack and pushes back the result of appying the\\n`NOT` logical function.\\n\\nFor a true input value it returns false, for a false one it returns true.\\n\\n@param `input` Boolean value to negate\\n\\n@param `result` Negated boolean value\\n\\n@param `gts` A boolean Geo Time Series™\\n\\n@param `negatedgts` A boolean Geo Time Series™\\n\\n\",\"signature\":\"NOT( input:BOOLEAN ): result:BOOLEAN\\nNOT( gts:GTS ): negatedgts:GTS\",\"tags\":[\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOT\"},\"NOTAFTER\":{\"description\":\"Checks that the current time is not after the provided timestamp.\\n\\nThe `NOTAFTER` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not after the provided timestamp.\\nIf it is not after the WarpScript execution continues, otherwise it throws an exception.\\n\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"signature\":\"NOTAFTER( timestamp:LONG ): \\nNOTAFTER( date:STRING ): \",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTAFTER\"},\"NOTBEFORE\":{\"description\":\"Checks that the current time is not before the provided timestamp.\\n\\nThe `NOTBEFORE` function consumes a timestamp (**LONG** or [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) string representation) on the top of the stack. It checks that the current time (NOW) is not before the provided timestamp.\\nIf it is not before the WarpScript execution continues, otherwise it throws an exception.\\n\\n@param `timestamp` The timestamp in Warp 10 unit (micro-second by default)\\n\\n@param `date` [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date\\n\\n\",\"signature\":\"NOTBEFORE( timestamp:LONG ): \\nNOTBEFORE( date:STRING ): \",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTBEFORE\"},\"NOTIMINGS\":{\"description\":\"Use of the `NOTIMINGS` function disables the collection of timing information for each line of the input script. Use [`TIMINGS`](/doc/TIMINGS) to enable it again.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOTIMINGS\"},\"NOW\":{\"description\":\"The `NOW` function pushes onto the stack the current **LONG** timestamp expressed in the platform time unit. This timestamp is the number of platform time unit elapsed since 00:00:00 on 1 January 1970 UTC minus the number of leap seconds, see [Unix time](https://en.wikipedia.org/wiki/Unix_time).\\n\\nThis function is mostly linear with time but this property is violated when the OS resynchronises its clock (ie consecutive calls to `NOW` may 'jump' or 'go backward').\\n\\n@param `timestamp` The current timestamp in platform time unit.\\n\\n\",\"signature\":\"NOW(): timestamp:LONG\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"NOW\"},\"NPDF\":{\"description\":\"The `NPDF` function builds a function which outputs the probability of occurrence of a given value under a specified normal distribution.\\n\\nThe normal distribution is defined by its mean and standard deviation. The result of the `NPDF` function is itself a function which can be invoked via [`EVAL`](doc/EVAL).\\n\\n*NPDF* stands for Normal (Gaussian) distribution Probability Density Function.\\n\\n@param `sigma` Standard deviation of the normal distribution to consider.\\n\\n@param `mu` Mean of the normal distribution to consider.\\n\\n@param `npdf` Function which given an input number outputs the probability of its occurence under the given normal distribution.\\n\\n\",\"signature\":\"NPDF( mu:NUMBER sigma:NUMBER ): npdf:FUNCTION\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"NPDF\"},\"NPEEK\":{\"description\":\"Displays a given number of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `levels` Number of stack levels to display.\\n\\n\",\"signature\":\"NPEEK( levels:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"NPEEK\"},\"NRETURN\":{\"description\":\"Immediately exit a certain number of macros being executed. The `NRETURN` function expects a number of levels on top of the stack.\\n\\n@param `levelnumber` Number of levels of macro to exit.\\n\\n\",\"signature\":\"NRETURN( levelnumber:LONG ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"NRETURN\"},\"NSUMSUMSQ\":{\"description\":\"Computes the cardinality, sum of values and sum of squared values of a Geo Time Series™. Pushes those results on the stack in the order they were mentioned.\\n\\nOnly numeric series are allowed.\\n\\n@param `square` Sum of squared values\\n\\n@param `sum` Sum of values\\n\\n@param `cardinality` Values count\\n\\n@param `gts` Geo Time Series™\\n\\n\",\"signature\":\"NSUMSUMSQ( gts:GTS ): cardinality:LONG sum:DOUBLE square:DOUBLE\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"NSUMSUMSQ\"},\"NULL\":{\"description\":\"The `NULL` function pushes the symbolic value *null* onto the stack.\\n\\n@param `result` Symbolic value *null*\\n\\n\",\"signature\":\"NULL(): result:NULL\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NULL\"},\"NaN\":{\"description\":\"Pushes the double value *NaN* (Not a Number) onto the stack.\\n\\n@param `result` Value *NaN*\\n\\n\",\"signature\":\"NaN(): result:DOUBLE\",\"tags\":[\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"NaN\"},\"ONLYBUCKETS\":{\"description\":\"Only retains ticks from Geo Time Series™ with timestamps which are bucket ends. If an input GTS is not bucketized, a clone of the GTS will be returned.\\n\\nThe `ONLYBUCKETS` function does not remove duplicate ticks, please consider using [`DEDUP`](/doc/DEDUP) for that purpose.\\n\\n@param `gts` Single instance of Geo Time Series™ to transform.\\n\\n@param `lgts` List of Geo Time Series™ to transform.\\n\\n@param `result` Transformed GTS.\\n\\n@param `lresult` List of transformed GTS.\\n\\n\",\"signature\":\"ONLYBUCKETS( gts:GTS ): result:GTS\\nONLYBUCKETS( lgts:LIST<GTS> ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ONLYBUCKETS\"},\"OPB64->\":{\"description\":\"Decode a String in order preserving base64 into a byte array.\\n\\nBytes array cannot be represented on the stack.\\n\\n@param `input` Any valid opbbase64 string.\\n\\n@param `output` Byte array of the input decoded input.\\n\\n\",\"signature\":\"OPB64->( input:STRING ): output:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.7\",\"OPB64name\":\"Ip01CYFhEV\"},\"OPB64TOHEX\":{\"description\":\"The OPB64TOHEX function decodes the order preserving base64 string on top of the stack and immediately re-encode it in hex string.\\n\\n\\n@param `input` OPBase64 encoded string\\n\\n@param `output` hexadecimal representation\\n\\n\",\"signature\":\"OPB64TOHEX( input:STRING ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.2\",\"OPB64name\":\"OPB64TOHEX\"},\"OPS\":{\"description\":\"Pushes onto the stack the current number of operations which were performed by the WarpScript code execution.\\n\\n@param `ops` number of operations\\n\\n\",\"signature\":\"OPS(): ops:LONG\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPS\"},\"OPTDTW\":{\"description\":\"The `OPTDTW` function finds the top subsequence matches in a sequence for a given query sequence. The function uses [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping)\\nto assess the subsequence similarity with the query.\\n\\n@param `match` Number of top matches. Use 0 as the number of matches to return to return them all.\\n\\n@param `query` Query numerical sequence, thr shortest\\n\\n@param `data` Data sequence in which to find matches\\n\\n@param `result` List of matches, each match being a pair of (index, distance).\\n\\n\",\"signature\":\"OPTDTW( data:LIST query:LIST match:LONG ): result:LIST\",\"tags\":[\"math\",\"distance\"],\"since\":\"1.0.0\",\"OPB64name\":\"OPTDTW\"},\"OPTIMIZE\":{\"description\":\"Optimizes the memory footprint of Geo Time Series™ and GTS Encoder instances.\\n\\n@param `ratio` Ratio of memory footprint to number of values, if this ratio is not exceeded, no optimization will take place. As a result, optimization is always done when ratio <= 1 or ratio is NaN.\\n\\n@param `gts` Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `encoder` Instance of GTS Encoder to optimize.\\n\\n@param `optencoder` Optimized version of the encoder, or the original instance if no optimization occurred.\\n\\n@param `lgts` List of Geo Time Series™ instance to optimize, the optimized version is the same instance.\\n\\n@param `lencoder` List of instances of GTS Encoder to optimize.\\n\\n@param `loptencoder` List of optimized version of the encoders or the original instances if no optimization occurred.\\n\\n\",\"signature\":\"OPTIMIZE( gts:GTS ratio:NUMBER ): gts:GTS\\nOPTIMIZE( encoder:GTSENCODER ratio:NUMBER ): optencoder:GTSENCODER\\nOPTIMIZE( lgts:LIST<GTS> ratio:NUMBER ): lgts:LIST<GTS>\\nOPTIMIZE( lencoder:LIST<GTSENCODER> ratio:NUMBER ): loptencoder:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"OPTIMIZE\"},\"OR\":{\"description\":\"The `OR` operator is a synonymous for [`||`](/doc/U6k).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `OR` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"signature\":\"OR( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\nOR( l:LIST ): result:BOOLEAN\\nOR( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"OR\"},\"PACK\":{\"description\":\"The `PACK` function packs a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n@param `input` List to pack\\n\\n@param `format` Format used to pack\\n\\n@param `result` Bytes array\\n\\n\",\"signature\":\"PACK( input:LIST format:STRING ): result:BYTES\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"PACK\"},\"PAPPLY\":{\"description\":\"The `PAPPLY` function performs operations in a way identical to the [`APPLY`](/doc/APPLY) framework but produces a map of results keyed by the label map of each equivalence class.\\n\\nAs [`APPLY`](/doc/APPLY), `PAPPLY` provides a way to apply an operation on Geo Time Series™ grouped by equivalence classes. It is somehow similar to the [`REDUCE`](/doc/REDUCE) framework in the sense that everything you can do with `REDUCE` can be done with `APPLY`, but `APPLY` is more flexible and goes way beyond what `REDUCE` can due. The flexibility of `APPLY` comes with a greater complexity and thus both frameworks exist.\\n\\n`APPLY` operates on multiple lists of Geo Time Series™, `L1` ... `Ln`. The first phase of `APPLY` will partition each of those lists in equivalence classes by inspecting the values of the specified labels. If one of the lists is a singleton (*i.e.* contains a single Geo Time Series™), then it will be included in all equivalence classes, regardless of the values of its labels. If you wish to override this behaviour, simply duplicate the GTS in the list so it is no longer a singleton.\\n\\nThe second phase of `APPLY` will execute the operation for each equivalence class. The execution will apply the operation to `n` parameters, tick by tick, where the `i`th parameter is a list of lists of `timestamp`, `latitude`, `longitude`, `elevation` and `value`, one for each GTS from the list `Li` which is in the current equivalence class, in the order in which they appear in `Li`. The ticks scanned belong to the set of ticks of all Geo Time Series™ in the equivalence class.\\n\\nThe number of supported parameters depends on the selected operation, please refer to the documentation of each operation for the details.\\n\\n@param `gts` One or more list of Geo Time Series™.\\n\\n@param `labels` A list of label names to use when creating equivalence classes. An empty list means use all labels.\\n\\n@param `result` Map of resulting GTS, one per equivalence class, keyed with the equivalence class labels.\\n\\n@param `op` Operation to perform.\\n\\n\",\"signature\":\"PAPPLY( [ op:OPERATOR labels:LIST gts:LIST<GTS>+ ] ): result:MAP\",\"tags\":[\"gts\",\"framework\",\"op\"],\"since\":\"1.0.0\",\"OPB64name\":\"PAPPLY\"},\"PARSE\":{\"description\":\"The `PARSE` function parses an input **STRING** containing datapoints in the [Geo Time Series™ input format](/content/03_Documentation/03_Interacting_with_Warp_10/03_Ingesting_data/02_GTS_input_format) and pushes onto the stack the parsed Geo Time Series™.\\n\\n@param `data` Datapoints in the Geo Time Series™ input format\\n\\n@param `result` List of parsed Geo Time Series™\\n\\n\",\"signature\":\"PARSE( data:STRING ): result:LIST<GTS>\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.0.11\",\"OPB64name\":\"PARSE\"},\"PARSESELECTOR\":{\"description\":\"The `PARSESELECTOR` function parses a GTS Selector (STRING) returnss the class selector and labels selectors.\\n\\nIn order for `PARSESELECTOR` to parse correctly a selector, the following characters MUST appear percent-encoded in the `STRING` to parse, the equal sign (`=`, `%3D`), the comma (`,` `%2C`) and closing curly brace (`}` `%7D`). Due to the way WarpScript parses `STRING` constants, the `%` sign MUST be percent-encoded (`%25`) in the `STRING` if it appears in WarpScript code:\\n\\nThe `STRING` `class{label=comm%2Cequal%3Dsign}` must appear in WarpScript as:\\n\\n```\\n'class{label=comm%252Cequal%253Dsign'\\n```\\n\\nCombined with `TOSELECTOR`, it can be used to build a selector from a subset of GTS.\\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature'\\n  { 'sensorId' '=01' }\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\nFETCH\\n\\n```\\nThis can be used to simplify the syntax of a FETCH or FIND request. \\n\\n```flow\\n[\\n  'READ_TOKEN'\\n  'io.senx.tutorial.sensors.temperature{sensorId=01}' PARSESELECTOR\\n  '2014-01-05T00:00:00.000Z'\\n  '2014-01-05T23:59:59.999Z'\\n]\\n\\nFETCH\\n```\\n\\n\\n\\n@param `selector` String selector.\\n\\n@param `labelselector` MAP of label selectors.\\n\\n@param `classselector` Class name selector.\\n\\n\",\"signature\":\"PARSESELECTOR( selector:STRING ): classselector:STRING labelselector:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARSESELECTOR\"},\"PARSEVALUE\":{\"description\":\"The `PARSEVALUE` function parses a STRING representing a valid value in the Geo Time Series™ input format.\\n\\nThe underlying implementation being the internal WarpScript function, some of the returned types might not be easily handled in the rest of the calling script. Most notably, some floating point representations might lead to BigDecimal instances being produced.\\n\\n@param `input` String representation of the value to parse.\\n\\n@param `value` Parsed value, could be a STRING, LONG, DOUBLE, BIGDECIMAL, BOOLEAN or BYTES elements.\\n\\n\",\"signature\":\"PARSEVALUE( input:STRING ): value:ANY\",\"tags\":[\"gts\"],\"since\":\"2.1.0\",\"OPB64name\":\"PARSEVALUE\"},\"PARTITION\":{\"description\":\"The `PARTITION` function splits a Geo Time Series™ list in equivalence classes based on label values.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels` plus all labels with common values among the GTS in the equivalence class.\\n\\n\",\"signature\":\"PARTITION( lgts:LIST<GTS> labels:LIST<STRING> ): result:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PARTITION\"},\"PATTERNDETECTION\":{\"description\":\"The `PATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"PATTERNDETECTION( gts:GTS patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nPATTERNDETECTION( lgts:LIST<GTS> patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNDETECTION\"},\"PATTERNS\":{\"description\":\"The `PATTERNS` function extracts symbolic patterns (or motifs) from a Geo Time Series™. Those patterns are similar to [iSAX](http://www.cs.ucr.edu/~eamonn/iSAX/iSAX.html) symbols.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `PATTERNS` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"PATTERNS( gts:GTS wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nPATTERNS( lgts:LIST<GTS> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"PATTERNS\"},\"PEEK\":{\"description\":\"Displays the top of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"PEEK(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEK\"},\"PEEKN\":{\"description\":\"Displays the content of the level of the stack at the given distance from the top.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n@param `distance` Distance (in stack levels) between the top of the stack and the level to display.\\n\\n\",\"signature\":\"PEEKN( distance:NUMBER ): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PEEKN\"},\"PERMUTE\":{\"description\":\"Permute the dimensions of a nested LIST as if it were a tensor or a multidimensional array.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent before operating. Default to false.\\n\\n@param `pattern` The permutation pattern (a LIST of LONG).\\n\\n@param `tensor` The resulting nested LIST.\\n\\n\",\"signature\":\"PERMUTE( tensor:LIST pattern:LIST ): tensor:LIST\\nPERMUTE( { tensor:LIST pattern:LIST fast:BOOLEAN  } ): tensor:LIST\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"PERMUTE\"},\"PFILTER\":{\"description\":\"Used to select Geo Time Series™ from a larger set. It allows you to extract only those Geo Time Series™ which match some criteria.\\n\\nWhile some filter are trivial, like selecting by name or labels, the `PFILTER framework allows for advanced filtering using N-ary functions \\n(functions which accept N parameters). Returned GTS are grouped by equivalence classes.\\n\\n@param `filter` Filter function to apply.\\n\\n@param `labels` Assuming there are N input lists, the filter function will then be called for each partition, each time with N parameters. Each parameter is the list of Geo Time Series™ in the partition which were originally in the i-th list. For input lists which contained a single Geo Time Series™, the singleton will always be passed as parameter, the single Geo Time Series™ was not taken into account for partitioning.\\n\\n@param `gtsList` One or several lists of Geo Time Series™.\\n\\n@param `result` A map keyed by the label set of each equivalence class whose values are lists of selected Geo Time Series™ from those lists. The returned Geo Time Series™ are not copies of the original ones, which means that changing the name or labels of the original ones will be reflected in the ones returned by the call to `PFILTER`.\\n\\n\",\"signature\":\"PFILTER( [ gtsList:LIST<GTS> labels:LIST<STRING> filter:FILTER ] ): result:MAP\",\"tags\":[\"framework\",\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"PFILTER\"},\"PGraphics\":{\"description\":\"Warp 10 includes a large subset of the [Processing](http://www.processing.org) drawing library. You can create and manipulate images, then push a base64 encoded png onto the stack.\\n\\n+ Step 1: create a processing graphic object with `PGraphics` function.\\n+ Step 2: manipulate this object with Processing functions.\\n+ Step 3: render the processing graphic with `Pencode` function.\\n\\nDocumentation of every function has a link to original Processing website. Original website includes more examples for each function.\\n\\nProcessing functions offers a lot of different signatures for colors. The most efficient is to keep the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n\\nUp to Warp 10 1.2.18, antialiasing was not available. It is now available, by appending a digit to the **imgtype** string argument. The maximum anti-aliasing level is determined by the hardware of the machine that is running the software, so 2D4 and 2D8 mode will not work with every computer.\\n\\n+ \\\"2D\\\": no antialiasing\\n+ \\\"2D2\\\": bilinear smoothing\\n+ \\\"2D3\\\": bicubic smoothing\\n+ \\\"2D4\\\": 4x antialiasing\\n+ \\\"2D8\\\": 8x antialiasing\\n\\n\\nYou can adjust the maximal number of pixel allowed in Warp 10 configuration file.\\n\\n@param `imgtype` '2D', '3D', or '2Dx', where x is the level of anti aliasing (2, 3, 4, or 8).\\n\\n@param `width` Pixel width of the image.\\n\\n@param `height` Pixel height of the image.\\n\\n@param `pg` Processing graphic object.\\n\\n\",\"signature\":\"PGraphics( width:LONG height:LONG imgtype:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PGraphics\"},\"PI\":{\"description\":\"Alias of [pi](/doc/R5Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"signature\":\"PI(): pi:DOUBLE\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"J3Z\"},\"PICK\":{\"description\":\"The `PICK` function copies on top of the stack the element at level N. Parameter N is consumed off the top of the stack when `PICK` is called.\\n\\n@param `level` Level of the stack\\n\\n@param `result` What is on stack at *level*\\n\\n\",\"signature\":\"PICK( level:NUMBER ): result:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"PICK\"},\"PICKLE->\":{\"description\":\"The `PICKLE->` function decodes some Pickle encoded content contained in a byte array.\\nThe conversion is done using [Pyrolite v4](https://github.com/irmen/pickle).\\n\\nIt can read all pickle protocol versions (0 to 4, so this includes\\nthe latest additions made in Python 3.4).\\n\\n```python\\n>>> myobject={ 'apple':3.5,'banana':18 }\\n>>> pickle.dumps(myobject).encode(\\\"hex\\\")\\n'286470300a53276170706c65270a70310a46332e350a73532762616e616e61270a70320a4931380a732e'\\n```\\n\\n@param `input` Byte array of a pickle encoded content\\n\\n@param `output` Warp 10 object\\n\\n\",\"signature\":\"PICKLE->( input:BYTES ): output:ANY\",\"tags\":[\"platform\"],\"since\":\"1.0.7\",\"OPB64name\":\"J3_2Hol4AIs\"},\"PIGSCHEMA\":{\"description\":\"The `PIGSCHEMA` function produces on top of the stack a STRING representing the [Pig](https://en.wikipedia.org/wiki/Pig_(programming_tool)) schema definition for the current stack content.\\n\\n@param `elt` Stack content.\\n\\n@param `schema` Schema for the current stack, usable when working with WarpScript in Pig.\\n\\n\",\"signature\":\"PIGSCHEMA( elt:ANY* ): elt:ANY* schema:STRING\",\"tags\":[\"pig\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"PIGSCHEMA\"},\"PIVOT\":{\"description\":\"The `PIVOT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick of GTS from the first list, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n1// C3{C1=C} 2\\n2// C4{C2=F} 30\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n4// C3{} 5\\n4// C4{} 50\\n```\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"signature\":\"PIVOT( input:LIST<GTS> pivot:LIST<GTS> ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOT\"},\"PIVOTSTRICT\":{\"description\":\"The `PIVOTSTRICT` function generates a set of Geo Time Series™ from two lists of input Geo Time Series™ in a way similar to what [`PIVOT`](/doc/PIVOT) does.\\n\\nGeo Time Series™ from the first list will provide datapoints (value, location and elevation), and those from the second list will generate labels.\\n\\nFor each tick common to Geo Time Series™ of both lists, the GTS from the second list are inspected. For each value encountered, a label with the GTS class as name and the encountered value is created.\\n\\nThen for each GTS from the first list with a value at the given tick, the datapoint is copied to a GTS with the same class name and a set of labels equal to those of that GTS merged with the labels created above.\\n\\nAs an example, consider the following input:\\n\\n\\n| Tick   |  C1    |   C2   |    C3  |   C4   |\\n|--------|--------|--------|--------|--------|\\n|   0    |  A     |   B    |    1   |   10   |\\n|   1    |  C     |        |    2   |        |\\n|   2    |        |   F    |        |   30   |\\n|   3    |  A     |   B    |    4   |   40   |\\n|   4    |        |        |    5   |   50    |\\n\\nWith the first list of GTS being those with classes `C3` and `C4` and the second list `C1` and `C2`, the result of the `PIVOTSTRICT` function being applied is:\\n\\n```\\n0// C3{C1=A,C2=B} 1\\n0// C4{C1=A,C2=B} 10\\n3// C3{C1=A,C2=B} 4\\n3// C4{C1=A,C2=B} 40\\n```\\n\\nOnly ticks 0 and 3 appear in the result as those are the only ticks present in both `C1` and `C2`.\\n\\n@param `pivot` List of Geo Time Series™ to use as the pivots.\\n\\n@param `input` Input list of Geo Time Series™.\\n\\n@param `result` List of pivoted Geo Time Series™.\\n\\n\",\"signature\":\"PIVOTSTRICT( input:LIST<GTS> pivot:LIST<GTS> ): result:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"PIVOTSTRICT\"},\"POPR\":{\"description\":\"Pops a value from the top of the stack and stores it into the designated register.\\n\\nThe `POPR` function is really a family of functions named `POPRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value to store in the specified register.\\n\\n\",\"signature\":\"POPR( value:ANY ): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"POPR\"},\"PREDUCE\":{\"description\":\"Behaves as [`REDUCE`](/doc/REDUCE) but produces a map of results keyed by the label map of each equivalence class.\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` Map keyed by the label map of each equivalence class and whose values are the Geo Time Series™ produced for each class.\\n\\n\",\"signature\":\"PREDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR ] ): result:MAP\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.5\",\"OPB64name\":\"PREDUCE\"},\"PRNG\":{\"description\":\"The `PRNG` function initializes the stack's seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator). This PRNG can later be used by the [`SRAND`](/doc/SRAND) function to produce random numbers in a deterministic way (!).\\n\\n@param `seed` The seed to use for initializing the PRNG.\\n\\n\",\"signature\":\"PRNG( seed:LONG ): \",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"PRNG\"},\"PROB\":{\"description\":\"Computes probability for each value of the input Geo Time Series™.\\n\\nThe function `PROB` consumes a GTS or a list of the GTS from the top of the stack. It pushes back the probability for each value.\\n\\nThe probabilities are computed using the value histogram.\\n\\n@param `gts` The input Geo Time Series™\\n\\n@param `gtslist` The input list of Geo Time Series™\\n\\n@param `result` The Geo Time Series™ wit probability for each value\\n\\n@param `resultList` The List of Geo Time Series™ with probability for each value\\n\\n\",\"signature\":\"PROB( gts:GTS ): result:GTS\\nPROB( gtslist:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.6\",\"OPB64name\":\"PROB\"},\"PROBABILITY\":{\"description\":\"Pushes on the stack a function which computes probabilities according to a provided value histogram.\\n\\nTo use the function pushed by `PROBABILITY` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function expects a value on top of the stack and will output the probability of occurrence of this value.\\n\\n\",\"signature\":\"PROBABILITY( valueHistogram:MAP ): result:STRING\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"PROBABILITY\"},\"PSTACK\":{\"description\":\"When in interactive (REPL) mode, prints the content of the stack.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PSTACK\"},\"PUSHR\":{\"description\":\"Pushes onto the stack the value currently contained in the designated register.\\n\\nThe `PUSHR` function is really a family of functions named `PUSHRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n@param `value` Value from the designated register.\\n\\n\",\"signature\":\"PUSHR(): value:ANY\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"PUSHR\"},\"PUT\":{\"description\":\"The `PUT` function inserts a new key-value pair in a map.\\nIf the key already exists in the input MAP, the value is replaced by the new one.\\n\\n`PUT` function puts the reference of the MAP on top of the stack.\\n\\n@param `newkey` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `newvalue` Depending on list construction, could be a number, a string, a list, a map, a GTS, a boolean.\\n\\n@param `inputmap` reference to the map to be modified\\n\\n@param `outputmap` copy of input map reference. Useful to chain other instructions on the same map.\\n\\n\",\"signature\":\"PUT( inputmap:MAP newvalue:ANY newkey:ANY ): outputmap:MAP\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"PUT\"},\"Palpha\":{\"description\":\"Extracts the alpha value from a color.\\n\\nThe `Palpha` function is easy to use and understand, but it is slower than bit shifting... \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/alpha_.html)\\n\\n@param `color` Any value of the color datatype\\n\\n@param `alpha` Alpha component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Palpha( pg:PGRAPHICS color:NUMBER ): pg:PGRAPHICS alpha:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Palpha\"},\"Parc\":{\"description\":\"Draws an arc to the screen. Arcs are drawn along the outer edge of an ellipse defined by the **a**, **b**, **c**, and **d** parameters. The origin of the arc's ellipse may be changed with the [`PellipseMode`](/doc/PellipseMode) function. Use the **start** and **stop** parameters to specify the angles (in radians) at which to draw the arc.\\n\\n\\n\\nThere are three ways to draw an arc; the rendering technique used is defined by the optional seventh parameter. The three options, depicted in the examples, are PIE, OPEN, and CHORD. The default mode is the OPEN stroke with a PIE fill.\\n\\n\\n\\nIn some cases, the `Parc` function isn't accurate enough for smooth drawing. For example, the shape may jitter on screen when rotating slowly. If you're having an issue with how arcs are rendered, you'll need to draw the arc yourself with [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) or a **PShape**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/arc_.html)\\n\\n@param `b` y-coordinate of the arc's ellipse\\n\\n@param `a` x-coordinate of the arc's ellipse\\n\\n@param `c` width of the arc's ellipse by default\\n\\n@param `d` height of the arc's ellipse by default\\n\\n@param `start` angle to start the arc, specified in radians\\n\\n@param `stop` angle to stop the arc, specified in radians\\n\\n@param `mode` closing mode. either PIE, OPEN, or CHORD\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Parc( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE start:DOUBLE stop:DOUBLE ): pg:PGRAPHICS\\nParc( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE start:DOUBLE stop:DOUBLE mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Parc\"},\"Pbackground\":{\"description\":\"The `Pbackground` function sets the color used for the background of the processing graphics object. \\n\\nAn image object can also be used as the background for a sketch, although the image's width and height must match that of the processing object. Images used with `Pbackground` will ignore the current [`Ptint`](/doc/Ptint) setting. \\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pbackground` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/background_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `rgb` any rgb color value.\\n\\n@param `alpha` opacity of the background. 0 = transparent, 255 = opaque.\\n\\n@param `gray` a value between white (255) and black (0)\\n\\n@param `image` PImage to set as background (must be same size as pg)\\n\\n@param `v1` red or hue value (depending on the current color mode)\\n\\n@param `v2` green or saturation value (depending on the current color mode)\\n\\n@param `v3` blue or brightness value (depending on the current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pbackground( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS gray:DOUBLE ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS image:PIMAGE ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS rgb:LONG alpha:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS gray:DOUBLE alpha:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPbackground( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbackground\"},\"PbeginContour\":{\"description\":\"Use the `PbeginContour` and [`PendContour`](/doc/PendContour) function to create negative shapes within shapes such as the center of the letter 'O'. `PbeginContour` begins recording vertices for the shape and [`PendContour`](/doc/PendContour) stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\n\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a `PbeginContour`/[`PendContour`](/doc/PendContour) pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbeginContour( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginContour\"},\"PbeginShape\":{\"description\":\"Using the `PbeginShape` and [`PendShape`](/doc/PendShape) functions allow creating more complex forms. `PbeginShape` begins recording vertices for a shape and [`PendShape`](/doc/PendShape) stops recording. \\n\\nThe value of the **kind** parameter tells it which types of shapes to create from the provided vertices. The parameters available for beginShape() are POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the `PbeginShape` function, a series of [`Pvertex`](/doc/Pvertex) commands must follow. To stop drawing the shape, call [`PendShape`](/doc/PendShape). The [`Pvertex`](/doc/Pvertex) function with two parameters specifies a position in 2D. Each shape will be outlined with the current stroke color and filled with the fill color. \\n\\n\\nTransformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within `PbeginShape`. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within `PbeginShape`. \\n\\n\\nThe P2D and P3D renderers allow [`Pstroke`](/doc/Pstroke) and [`Pfill`](/doc/Pfill) to be altered on a per-vertex group basis. Settings such as [`PstrokeWeight`](/doc/PstrokeWeight), [`PstrokeCap`](/doc/PstrokeCap), and [`PstrokeJoin`](/doc/PstrokeJoin) cannot be changed while inside a `PbeginShape`/[`PendShape`](/doc/PendShape) block with any renderer.\\n\\nUp to Warp 10 1.2.18, `PbeginShape` could be called without the **kind** parameter. It defaults to POLYGON.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/beginShape_.html)\\n\\n@param `kind` Either POLYGON, POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbeginShape( pg:PGRAPHICS kind:STRING ): pg:PGRAPHICS\\nPbeginShape( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbeginShape\"},\"Pbezier\":{\"description\":\"Draws a Bezier curve on the screen. These curves are defined by a series of anchor and control points. The first two parameters specify the first anchor point and the last two parameters specify the other anchor point. The middle parameters specify the control points which define the shape of the curve. Bezier curves were developed by French engineer Pierre Bezier. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezier_.html)\\n\\n@param `x1` coordinates for the first anchor point\\n\\n@param `y1` coordinates for the first anchor point\\n\\n@param `z1` coordinates for the first anchor point\\n\\n@param `x2` coordinates for the first control point\\n\\n@param `y2` coordinates for the first control point\\n\\n@param `z2` coordinates for the first control point\\n\\n@param `x3` coordinates for the second control point\\n\\n@param `y3` coordinates for the second control point\\n\\n@param `z3` coordinates for the second control point\\n\\n@param `x4` coordinates for the second anchor point\\n\\n@param `y4` coordinates for the second anchor point\\n\\n@param `z4` coordinates for the second anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pbezier( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\\nPbezier( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE x3:DOUBLE y3:DOUBLE z3:DOUBLE x4:DOUBLE y4:DOUBLE z4:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbezier\"},\"PbezierDetail\":{\"description\":\"Sets the resolution at which Beziers display. The default value is 20. This function is only useful when using the **P3D** renderer; the default **P2D** renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierDetail_.html)\\n\\n@param `detail` resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbezierDetail( pg:PGRAPHICS detail:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierDetail\"},\"PbezierPoint\":{\"description\":\"Evaluates the Bezier at point t for points a, b, c, d. The parameter t varies between 0 and 1, a and d are points on the curve, and b and c are the control points. This can be done once with the x coordinates and a second time with the y coordinates to get the location of a bezier curve at t.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierPoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbezierPoint( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierPoint\"},\"PbezierTangent\":{\"description\":\"Calculates the tangent of a point on a Bezier curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbezierTangent( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierTangent\"},\"PbezierVertex\":{\"description\":\"Specifies vertex coordinates for Bezier curves. Each call to `PbezierVertex` defines the position of two control points and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PbezierVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only with POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/bezierVertex_.html)\\n\\n@param `x2` The x-coordinate of the 1st control point\\n\\n@param `y2` The y-coordinate of the 1st control point\\n\\n@param `x3` The x-coordinate of the 2nd control point\\n\\n@param `y3` The y-coordinate of the 2nd control point\\n\\n@param `x4` The x-coordinate of the anchor point\\n\\n@param `y4` The y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PbezierVertex( pg:PGRAPHICS x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PbezierVertex\"},\"Pblend\":{\"description\":\"Blends a region of pixels from one image into another (or in itself again) with full alpha channel support.\\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels in the destination image (B):\\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - Multiply the colors, result will always be darker.\\n+ SCREEN - Opposite multiply, uses inverse values of the colors.\\n+ OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,and screens light values.\\n+ HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.\\n+ SOFT_LIGHT - Mix of DARKEST and LIGHTEST. Works like OVERLAY, but not as harsh.\\n+ DODGE - Lightens light tones and increases contrast, ignores darks.Called \\\"Color Dodge\\\" in Illustrator and Photoshop.\\n+ BURN - Darker areas are applied, increasing contrast, ignores lights.Called \\\"Color Burn\\\" in Illustrator and Photoshop.\\n\\nAll modes use the alpha information (highest byte) of source image pixels as the blending factor. If the source and destination regions are different sizes, the image will be automatically resized to match the destination size. If the **src** parameter is not used, the display window is used as the source image.\\n\\n[Link to original Processing doc](https://processing.org/reference/blend_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `mode` Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pblend( pg:PGRAPHICS src:PIMAGE sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG mode:STRING ): pg:PGRAPHICS\\nPblend( pg:PGRAPHICS sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblend\"},\"PblendMode\":{\"description\":\"Blends the pixels in the display window according to a defined mode. \\n\\nHere are the available modes to blend the source pixels (A) with the ones of pixels already in the display window (B). \\n\\n+ BLEND - linear interpolation of colours: C = A*factor + B. This is the default blending mode.\\n+ ADD - additive blending with white clip: C = min(A*factor + B, 255)\\n+ SUBTRACT - subtractive blending with black clip: C = max(B - A*factor, 0)\\n+ DARKEST - only the darkest colour succeeds: C = min(A*factor, B)\\n+ LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)\\n+ DIFFERENCE - subtract colors from underlying image.\\n+ EXCLUSION - similar to DIFFERENCE, but less extreme.\\n+ MULTIPLY - multiply the colors, result will always be darker.\\n+ SCREEN - opposite multiply, uses inverse values of the colors.\\n+ REPLACE - the pixels entirely replace the others and don't utilize alpha (transparency) values\\n\\nA pixel's final color is the result of applying one of the above blend modes with each channel of (A) and (B) independently. For example, red is compared with red, green with green, and blue with blue.\\n\\nWe recommend using `PblendMode` and not the previous [`Pblend`](/doc/Pblend) function. However, unlike [`Pblend`](/doc/Pblend), the `PblendMode` function does not support the following: HARD_LIGHT, SOFT_LIGHT, OVERLAY, DODGE, BURN. On older hardware, the LIGHTEST, DARKEST, and DIFFERENCE modes might not be available as well. \\n\\n[Link to original Processing doc](https://processing.org/reference/blendMode_.html)\\n\\n@param `mode` The blending mode to use\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PblendMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PblendMode\"},\"Pblue\":{\"description\":\"Extracts the blue value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pblue` function is easy to use and understand, but it is slower than bit masking. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/blue_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `blue` Blue component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pblue( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS blue:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pblue\"},\"Pbox\":{\"description\":\"A box is an extruded rectangle. A box with equal dimensions on all sides is a cube.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/box_.html)\\n\\n@param `size` dimension of the box in all dimensions (creates a cube)\\n\\n@param `w` dimension of the box in the x-dimension\\n\\n@param `h` dimension of the box in the y-dimension\\n\\n@param `d` dimension of the box in the z-dimension\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pbox( pg:PGRAPHICS size:NUMBER ): pg:PGRAPHICS\\nPbox( pg:PGRAPHICS w:NUMBER h:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbox\"},\"Pbrightness\":{\"description\":\"Extracts the brightness value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/brightness_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `brightness` Brightness component of input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pbrightness( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS brightness:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pbrightness\"},\"Pclear\":{\"description\":\"Clears the pixels. This function clears everything in a **PGraphics** object to make all of the pixels 100% transparent.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clear_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pclear( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclear\"},\"Pclip\":{\"description\":\"Limits the rendering to the boundaries of a rectangle defined by the parameters. The boundaries are drawn based on the state of the [`PimageMode`](/doc/PimageMode) function, either CORNER, CORNERS, or CENTER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/clip_.html)\\n\\n@param `a` x-coordinate of the rectangle, by default\\n\\n@param `b` y-coordinate of the rectangle, by default\\n\\n@param `c` width of the rectangle, by default\\n\\n@param `d` height of the rectangle, by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pclip( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pclip\"},\"Pcolor\":{\"description\":\"`Pcolor` creates colors for storing in ARGB LONG datatype.\\n\\n+ RGB: The most efficient is to skip Pcolor function, using the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque.\\n+ HSB: For Hue Saturation Brightness to RGB conversion, use [`PcolorMode`](/doc/PcolorMode) to specify HSB, then use Pcolor to convert to ARGB.\\n\\nThe parameters are interpreted as RGB or HSB values depending on the current [`PcolorMode`](/doc/PcolorMode). The default mode is RGB values from 0 to 255.\\n\\nNote that if only one value is provided to `Pcolor`, it will be interpreted as a grayscale value. Add a second value, and it will be used for alpha transparency. When three values are specified, they are interpreted as either RGB or HSB values. Adding a fourth value applies alpha transparency.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/color_.html)\\n\\n@param `gray` int: number specifying value between white and black\\n\\n@param `alpha` float, or int: relative to current color range\\n\\n@param `v1` float, or int: red or hue values relative to the current color range\\n\\n@param `v2` float, or int: green or saturation values relative to the current color range\\n\\n@param `v3` float, or int: blue or brightness values relative to the current color range\\n\\n@param `color` ARGB color.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pcolor( pg:PGRAPHICS gray:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS gray:NUMBER alpha:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS color:LONG\\nPcolor( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS color:LONG\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcolor\"},\"PcolorMode\":{\"description\":\"Changes the way Processing interprets color data. By default, the parameters for [`Pfill`](/doc/Pfill), [`Pstroke`](/doc/Pstroke), [`Pbackground`](/doc/Pbackground), and [`Pcolor`](/doc/Pcolor) are defined by values between 0 and 255 using the RGB color model. The `PcolorMode` function is used to change the numerical range used for specifying colors and to switch color systems. For example, calling **colorMode(RGB, 1.0)** will specify that values are specified between 0 and 1. The limits for defining colors are altered by setting the parameters **max**, **max1**, **max2**, **max3**, and **maxA**.\\n\\nWhen using max different from default values, do not work with grayscale.\\n\\nAfter changing the range of values for colors with code like **colorMode(HSB, 360, 100, 100)**, those ranges remain in use until they are explicitly changed again. For example, after running **colorMode(HSB, 360, 100, 100)** and then changing back to **colorMode(RGB)**, the range for R will be 0 to 360 and the range for G and B will be 0 to 100. To avoid this, be explicit about the ranges when changing the color mode. For instance, instead of **colorMode(RGB)**, write **colorMode(RGB, 255, 255, 255)**. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/colorMode_.html)\\n\\n@param `mode` Either 'RGB' or 'HSB', corresponding to Red/Green/Blue and Hue/Saturation/Brightness\\n\\n@param `max` range for all color elements\\n\\n@param `max1` range for the red or hue depending on the current color mode\\n\\n@param `max2` range for the green or saturation depending on the current color mode\\n\\n@param `max3` range for the blue or brightness depending on the current color mode\\n\\n@param `maxA` range for the alpha\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcolorMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max:DOUBLE ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max1:DOUBLE max2:DOUBLE max3:DOUBLE ): pg:PGRAPHICS\\nPcolorMode( pg:PGRAPHICS mode:STRING max1:DOUBLE max2:DOUBLE max3:DOUBLE maxA:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcolorMode\"},\"Pconstrain\":{\"description\":\"Constrains a value to not exceed a maximum and minimum value. Also known as clamping a value. \\n\\nIt could be done with warpscript MIN MAX functions, see example.\\n\\n[Link to original Processing doc](https://processing.org/reference/constrain_.html)\\n\\n@param `x` The value to clamp.\\n\\n@param `low` Minimum limit.\\n\\n@param `high` Maximum limit.\\n\\n@param `clamped` Clamped value of x in [low high] range.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pconstrain( pg:PGRAPHICS x:DOUBLE low:DOUBLE high:DOUBLE ): pg:PGRAPHICS clamped:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pconstrain\"},\"Pcopy\":{\"description\":\"Copies a region of pixels from the display window to another area of the display window and copies a region of pixels from an image used as the **src** parameter into the display window. If the source and destination regions are not the same size, it will automatically resize the source pixels to fit the specified target region. No alpha information is used in the process, however if the source image has an alpha channel set, it will be copied as well.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/copy_.html)\\n\\n@param `src` A PIMAGE object referring to the source image. If none, blend the existing image on itself.\\n\\n@param `sx` X coordinate of the source's upper left corner\\n\\n@param `sy` Y coordinate of the source's upper left corner\\n\\n@param `sw` source image width\\n\\n@param `sh` source image height\\n\\n@param `dx` X coordinate of the destinations's upper left corner\\n\\n@param `dy` Y coordinate of the destinations's upper left corner\\n\\n@param `dw` destination image width\\n\\n@param `dh` destination image height\\n\\n@param `img` PIMAGE object, copy of pg\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pcopy( pg:PGRAPHICS src:PIMAGE sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG ): pg:PGRAPHICS\\nPcopy( pg:PGRAPHICS sx:LONG sy:LONG sw:LONG sh:LONG dx:LONG dy:LONG dw:LONG dh:LONG ): pg:PGRAPHICS\\nPcopy( pg:PGRAPHICS ): pg:PGRAPHICS img:PIMAGE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcopy\"},\"PcreateFont\":{\"description\":\"Dynamically converts a font to the format used by Processing from a font that is installed on the computer.  Not all fonts can be used and some might work with one operating system and not others.\\n\\nThe **size** parameter states the font size you want to generate. The **smooth** parameter specifies if the font should be antialiased or not.\\n\\nSince the 2.5.0 version, the name of the font can be a URI to a OpenType or Type1 font which will be resolved by a macro defined by the `processing.font.resolver` configuration.\\n\\n[Link to original Processing doc](https://processing.org/reference/createFont_.html)\\n\\n@param `name` Name of the font to load or URI from where to load the font.\\n\\n@param `size` Point size of the font\\n\\n@param `smooth` True for an antialiased font, false for aliased\\n\\n@param `charset` subset of ascii characters to be generated.\\n\\n@param `font` Processing font object compatible with PtextFont.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcreateFont( pg:PGRAPHICS name:STRING ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER smooth:BOOLEAN ): pg:PGRAPHICS font:PFONT\\nPcreateFont( pg:PGRAPHICS name:STRING size:NUMBER smooth:BOOLEAN charset:STRING ): pg:PGRAPHICS font:PFONT\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcreateFont\"},\"Pcurve\":{\"description\":\"Draws a curved line on the screen. The first and second parameters specify the beginning control point and the last two parameters specify the ending control point. The middle parameters specify the start and stop of the curve. Longer curves can be created by putting a series of `Pcurve` functions together or using [`PcurveVertex`](/doc/PcurveVertex). An additional function called [`PcurveTightness`](/doc/PcurveTightness) provides control for the visual quality of the curve. The `Pcurve` function is an implementation of Catmull-Rom splines. Using the 3D version requires rendering with P3D (see the Environment reference for more information).\\n\\n[Link to original Processing doc](https://processing.org/reference/curve_.html)\\n\\n@param `x1` float: coordinates for the beginning control point\\n\\n@param `y1` float: coordinates for the beginning control point\\n\\n@param `x2` float: coordinates for the first point\\n\\n@param `y2` float: coordinates for the first point\\n\\n@param `x3` float: coordinates for the second point\\n\\n@param `y3` float: coordinates for the second point\\n\\n@param `x4` float: coordinates for the ending control point\\n\\n@param `y4` float: coordinates for the ending control point\\n\\n@param `z1` float: coordinates for the beginning control point\\n\\n@param `z2` float: coordinates for the first point\\n\\n@param `z3` float: coordinates for the second point\\n\\n@param `z4` float: coordinates for the ending control point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pcurve( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\\nPcurve( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE x3:DOUBLE y3:DOUBLE z3:DOUBLE x4:DOUBLE y4:DOUBLE z4:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pcurve\"},\"PcurveDetail\":{\"description\":\"Sets the resolution at which curves display. The default value is 20. This function is only useful when using the P3D renderer as the default P2D renderer does not use this information.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveDetail_.html)\\n\\n@param `detail` Resolution of the curves\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcurveDetail( pg:PGRAPHICS detail:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveDetail\"},\"PcurvePoint\":{\"description\":\"Evaluates the curve at point **t** for points **a**, **b**, **c**, **d**. The parameter **t** may range from 0 (the start of the curve) and 1 (the end of the curve). **a** and **d** are points on the curve, and **b** and **c** are the control points. This can be used once with the **x** coordinates and a second time with the **y** coordinates to get the location of a curve at **t**.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curvePoint_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of second point on the curve\\n\\n@param `c` coordinate of third point on the curve\\n\\n@param `d` coordinate of fourth point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcurvePoint( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurvePoint\"},\"PcurveTangent\":{\"description\":\"Calculates the tangent of a point on a curve. There's a good definition of [**tangent** on Wikipedia](http://en.wikipedia.org/wiki/Tangent).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTangent_.html)\\n\\n@param `a` coordinate of first point on the curve\\n\\n@param `b` coordinate of first control point\\n\\n@param `c` coordinate of second control point\\n\\n@param `d` coordinate of second point on the curve\\n\\n@param `t` value between 0 and 1\\n\\n@param `out` interpolation result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcurveTangent( pg:PGRAPHICS a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE t:DOUBLE ): pg:PGRAPHICS out:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTangent\"},\"PcurveTightness\":{\"description\":\"Modifies the quality of forms created with [`Pcurve`](/doc/Pcurve) and [`PcurveVertex`](/doc/PcurveVertex). The parameter **tightness** determines how the curve fits to the vertex points. The value 0.0 is the default value for **tightness** (this value defines the curves to be Catmull-Rom splines) and the value 1.0 connects all the points with straight lines. Values within the range -5.0 and 5.0 will deform the curves but will leave them recognizable and as values increase in magnitude, they will continue to deform.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/curveTightness_.html)\\n\\n@param `tightness` Amount of deformation from the original vertices\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcurveTightness( pg:PGRAPHICS tightness:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveTightness\"},\"PcurveVertex\":{\"description\":\"Specifies vertex coordinates for curves. This function may only be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when POLYGON parameter specified to [`PbeginShape`](/doc/PbeginShape). The first and last points in a series of `PcurveVertex` lines will be used to guide the beginning and end of a the curve. A minimum of four points is required to draw a tiny curve between the second and third points. Adding a fifth point with `PcurveVertex` will draw the curve between the second, third, and fourth points. The `PcurveVertex` function is an implementation of Catmull-Rom splines. \\n\\n[Link to original Processing doc](https://processing.org/reference/curveVertex_.html)\\n\\n@param `x` The x-coordinate of the vertex\\n\\n@param `y` The y-coordinate of the vertex\\n\\n@param `z` The z-coordinate of the vertex\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PcurveVertex( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPcurveVertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PcurveVertex\"},\"Pdecode\":{\"description\":\"`Pdecode` takes the image representation on the stack and pushes a Pimage object on the stack. This object can only be used as an input for [`Pset`](/doc/Pset), [`Pimage`](/doc/Pimage), [`Pbackground`](/doc/Pbackground).\\n\\nInput string must start with the header `data:image/png;base64,`.\\n\\nSupported input types: PNG, GIF, JPG.\\n\\n@param `img` Processing Pimage object.\\n\\n@param `rawimg` Image bytes.\\n\\n@param `b64img` Base64 encoded image string\\n\\n\",\"signature\":\"Pdecode( b64img:STRING ): img:PIMAGE\\nPdecode( rawimg:BYTES ): img:PIMAGE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdecode\"},\"Pdist\":{\"description\":\"Calculates the distance between two points, in 2D or 3D space.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/dist_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pdist( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE z1:DOUBLE x2:DOUBLE y2:DOUBLE z2:DOUBLE ): pg:PGRAPHICS\\nPdist( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pdist\"},\"Pellipse\":{\"description\":\"Draws an ellipse (oval) to the screen. An ellipse with equal width and height is a circle. By default, the first two parameters set the location, and the third and fourth parameters set the shape's width and height. The origin may be changed with the [`PellipseMode`](/doc/PellipseMode) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipse_.html)\\n\\n@param `a` float: x-coordinate of the ellipse\\n\\n@param `b` float: y-coordinate of the ellipse\\n\\n@param `c` float: width of the ellipse by default\\n\\n@param `d` float: height of the ellipse by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pellipse( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pellipse\"},\"PellipseMode\":{\"description\":\"Modifies the location from which ellipses are drawn by changing the way in which parameters given to [`Pellipse`](/doc/Pellipse) are intepreted.\\n\\nThe default mode is **ellipseMode(CENTER)**, which interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(RADIUS)** also uses the first two parameters of [`Pellipse`](/doc/Pellipse) as the shape's center point, but uses the third and fourth parameters to specify half of the shapes's width and height.\\n\\n**ellipseMode(CORNER)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**ellipseMode(CORNERS)** interprets the first two parameters of [`Pellipse`](/doc/Pellipse) as the location of one corner of the ellipse's bounding box, and the third and fourth parameters as the location of the opposite corner.\\n\\n[Link to original Processing doc](https://processing.org/reference/ellipseMode_.html)\\n\\n@param `mode` Either CENTER, RADIUS, CORNER, or CORNERS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PellipseMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PellipseMode\"},\"Pencode\":{\"description\":\"`Pencode` function takes a processing graphic object on the top of the stack, render it to a png file, encode it in base64, prefix the result with the standard png header \\\"data:image/png;base64,\\\".\\n\\nThe resulting string is ready to use in an html document.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `b64img` Base64 encoded image string, ready to use in an html page.\\n\\n@param `metadata` Map of metadata to add to the PNG. Accepted keys are 'tEXt', 'zTXt' and 'iTXt', while values are lists of maps with 'keyword' and 'text' keys.\\n\\n\",\"signature\":\"Pencode( pg:PGRAPHICS ): b64img:STRING\\nPencode( pg:PGRAPHICS metadata:MAP ): b64img:STRING\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pencode\"},\"PendContour\":{\"description\":\"Use the [`PbeginContour`](/doc/PbeginContour) and `PendContour` function to create negative shapes within shapes such as the center of the letter 'O'. [`PbeginContour`](/doc/PbeginContour) begins recording vertices for the shape and `PendContour` stops recording. The vertices that define a negative shape must \\\"wind\\\" in the opposite direction from the exterior shape. First draw vertices for the exterior shape in clockwise order, then for internal shapes, draw vertices counterclockwise.\\n\\nThese functions can only be used within a [`PbeginShape`](/doc/PbeginShape)/[`PendShape`](/doc/PendShape) pair and transformations such as [`Ptranslate`](/doc/Ptranslate), [`Protate`](/doc/Protate), and [`Pscale`](/doc/Pscale) do not work within a [`PbeginContour`](/doc/PbeginContour)/`PendContour` pair. It is also not possible to use other shapes, such as [`Pellipse`](/doc/Pellipse) or [`Prect`](/doc/Prect) within.\\n\\n[Link to original Processing doc](https://processing.org/reference/endContour_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PendContour( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendContour\"},\"PendShape\":{\"description\":\"The `PendShape` function is the companion to [`PbeginShape`](/doc/PbeginShape) and may only be called after [`PbeginShape`](/doc/PbeginShape). When `Pendshape` is called, all of image data defined since the previous call to [`PbeginShape`](/doc/PbeginShape) is written into the image buffer. The constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end). \\n\\nUp to Warp 10 1.2.18, `PendShape` could be called without the **mode** parameter. It defaults to OPEN.\\n\\n[Link to original Processing doc](https://processing.org/reference/endShape_.html)\\n\\n@param `mode` Use CLOSE to close the shape, OPEN otherwise.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PendShape( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\\nPendShape( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PendShape\"},\"Pfill\":{\"description\":\"Sets the color used to fill shapes. For example, if you run **fill(204, 102, 0)**, all subsequent shapes will be filled with orange. This color is either specified in terms of the RGB or HSB color depending on the current [`PcolorMode`](/doc/PcolorMode). The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\nThe value for the \\\"gray\\\" parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\nTo change the color of an image or a texture, use [`Ptint`](/doc/Ptint).\\n\\n[Link to original Processing doc](https://processing.org/reference/fill_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pfill( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS gray:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS argb:LONG alpha:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS v1:LONG v2:LONG v3:LONG ): pg:PGRAPHICS\\nPfill( pg:PGRAPHICS v1:LONG v2:LONG v3:LONG alpha:LONG ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pfill\"},\"Pfilter\":{\"description\":\"Filters the display window using a preset filter or with a custom shader. Using a shader with `Pfilter` is much faster than without. Shaders require the P2D or P3D renderer in size().\\n\\n\\nThe presets options are:\\n\\n+ **THRESHOLD** Converts the image to black and white pixels depending if they are above or below the threshold defined by the level parameter. The parameter must be between 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\\n+ **GRAY** Converts any colors in the image to grayscale equivalents. No parameter is used.\\n+ **OPAQUE** Sets the alpha channel to entirely opaque. No parameter is used.\\n+ **INVERT** Sets each pixel to its inverse value. No parameter is used.\\n+ **POSTERIZE** Limits each channel of the image to the number of colors specified as the parameter. The parameter can be set to values between 2 and 255, but results are most noticeable in the lower ranges.\\n+ **BLUR** Executes a Guassian blur with the level parameter specifying the extent of the blurring. If no parameter is used, the blur is equivalent to Guassian blur of radius 1. Larger values increase the blur.\\n+ **ERODE** Reduces the light areas. No parameter is used.\\n+ **DILATE** Increases the light areas. No parameter is used.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/filter_.html)\\n\\n@param `kind` Either THRESHOLD, GRAY, OPAQUE, INVERT, POSTERIZE, BLUR, ERODE, or DILATE\\n\\n@param `param` unique for each, see above\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pfilter( pg:PGRAPHICS kind:STRING ): pg:PGRAPHICS\\nPfilter( pg:PGRAPHICS kind:STRING param:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.2.17\",\"OPB64name\":\"J5OdQ6G_RV\"},\"Pget\":{\"description\":\"Reads the color of any pixel or grabs a section of an image. If no parameters are specified, the entire image is returned (same as `Pcopy`). Use the **x** and **y** parameters to get the value of one pixel. Get a section of the display window by specifying additional **w** and **h** parameters. When getting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\nIf the pixel requested is outside of the image window, black is returned. The numbers returned are scaled according to the current color ranges, but only RGB values are returned by this function. For example, even though you may have drawn a shape with **colorMode(HSB)**, the numbers returned will be in RGB format.\\n\\nGetting the color of a single pixel with **get(x, y)** is easy, but not as fast as grabbing the data directly from [`Ppixels`](/doc/Ppixels).\\n\\n[Link to original Processing doc](https://processing.org/reference/get_.html)\\n\\n@param `x` int: x-coordinate of the pixel\\n\\n@param `y` int: y-coordinate of the pixel\\n\\n@param `w` int: width of pixel rectangle to get\\n\\n@param `h` int: height of pixel rectangle to get\\n\\n@param `img` PIMAGE object\\n\\n@param `color` Color of the pixel, 32bits ARGB format.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pget( pg:PGRAPHICS ): pg:PGRAPHICS img:PIMAGE\\nPget( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS color:LONG\\nPget( pg:PGRAPHICS x:NUMBER y:NUMBER w:NUMBER h:NUMBER ): pg:PGRAPHICS img:PIMAGE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pget\"},\"Pgreen\":{\"description\":\"Extracts the green value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pgreen` function is easy to use and understand, but it is slower than bit shifting. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/green_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `green` Green component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pgreen( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS green:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pgreen\"},\"Phue\":{\"description\":\"Extracts the hue value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/hue_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `hue` Hue component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Phue( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS hue:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Phue\"},\"Pimage\":{\"description\":\"The `Pimage` function draws a Pimage (see [`Pdecode`](/doc/Pdecode)) on a PGraphic object.\\n\\nThe **img** parameter specifies the image to display and by default the **a** and **b** parameters define the location of its upper-left corner. The image is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PimageMode`](/doc/PimageMode) function can be used to change the way these parameters draw the image.\\n\\nThe color of an image may be modified with the [`Ptint`](/doc/Ptint) function. This function will maintain transparency for GIF and PNG images.\\n\\n[Link to original Processing doc](https://processing.org/reference/image_.html)\\n\\n@param `img` PImage: the image to display\\n\\n@param `a` float: x-coordinate of the image by default\\n\\n@param `b` float: y-coordinate of the image by default\\n\\n@param `c` float: width to display the image by default\\n\\n@param `d` float: height to display the image by default\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pimage( pg:PGRAPHICS img:PIMAGE a:NUMBER b:NUMBER ): pg:PGRAPHICS\\nPimage( pg:PGRAPHICS img:PIMAGE a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pimage\"},\"PimageMode\":{\"description\":\"Modifies the location from which images are drawn by changing the way in which parameters given to [`Pimage`](/doc/Pimage) are intepreted.\\n\\nThe default mode is **imageMode(CORNER)**, which interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the upper-left corner of the image. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n**imageMode(CENTER)** interprets the second and third parameters of [`Pimage`](/doc/Pimage) as the image's center point. If two additional parameters are specified, they are used to set the image's width and height.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/imageMode_.html)\\n\\n@param `mode` could be CORNER or CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PimageMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PimageMode\"},\"Plerp\":{\"description\":\"Calculates a number between two numbers at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines, or any linear interpolation.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerp_.html)\\n\\n@param `start` first value\\n\\n@param `stop` second value\\n\\n@param `amt` float between 0.0 and 1.0\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Plerp( pg:PGRAPHICS start:NUMBER stop:NUMBER amt:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Plerp\"},\"PlerpColor\":{\"description\":\"Calculates a color between two colors at a specific increment. The **amt** parameter is the amount to interpolate between the two values where 0.0 is equal to the first point, 0.1 is very near the first point, 0.5 is halfway in between, etc. \\n\\nAn amount below 0 will be treated as 0. Likewise, amounts above 1 will be capped at 1. This is different from the behavior of `Plerp`, but necessary because otherwise numbers outside the range will produce strange and unexpected colors.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/lerpColor_.html)\\n\\n@param `c1` interpolate from this color\\n\\n@param `c2` interpolate to this color\\n\\n@param `amt` between 0.0 and 1.0\\n\\n@param `outcolor` the interpolated result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PlerpColor( pg:PGRAPHICS c1:NUMBER c2:NUMBER amt:NUMBER ): pg:PGRAPHICS outcolor:LONG\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PlerpColor\"},\"Pline\":{\"description\":\"Draws a line (a direct path between two points) to the screen. The version of `Pline` with four parameters draws the line in 2D.  To color a line, use the [`Pstroke`](/doc/Pstroke) function. A line cannot be filled, therefore the [`Pfill`](/doc/Pfill) function will not affect the color of a line. 2D lines are drawn with a width of one pixel by default, but this can be changed with the [`PstrokeWeight`](/doc/PstrokeWeight) function. The version with six parameters allows the line to be placed anywhere within XYZ space. Drawing this shape in 3D with the **z** parameter requires the P3D parameter.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/line_.html)\\n\\n@param `x1` x-coordinate of the first point\\n\\n@param `y1` y-coordinate of the first point\\n\\n@param `x2` x-coordinate of the second point\\n\\n@param `y2` y-coordinate of the second point\\n\\n@param `z1` z-coordinate of the first point\\n\\n@param `z2` z-coordinate of the second point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pline( pg:PGRAPHICS x1:NUMBER y1:NUMBER x2:NUMBER y2:NUMBER ): pg:PGRAPHICS\\nPline( pg:PGRAPHICS x1:NUMBER y1:NUMBER z1:NUMBER x2:NUMBER y2:NUMBER z2:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pline\"},\"PloadShape\":{\"description\":\"`PloadShape` can load a [SVG image](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) and return a PSHAPE object. WarpScript does not support [OBJ files](https://en.wikipedia.org/wiki/Wavefront_.obj_file) yet. \\n\\nThis feature is experimental, some files may render empty. \\n\\n@param `svg` A one line or a multiline SVG string.\\n\\n@param `Pshape` A PSHAPE object which can be used with Pshape.\\n\\n\",\"signature\":\"PloadShape( svg:STRING ): Pshape:PSHAPE\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"PloadShape\"},\"Pmag\":{\"description\":\"Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \\\"start\\\" position, the magnitude of a vector can be thought of as the distance from the coordinate 0,0 to its x,y value. Therefore, `Pmag` is a shortcut for writing **0 0 x y Pdist**. It is exactly the same as warpscript function [`HYPOT`](/doc/HYPOT).\\n\\n3D is not yet supported.\\n\\n[Link to original Processing doc](https://processing.org/reference/mag_.html)\\n\\n@param `a` first value\\n\\n@param `b` second value\\n\\n@param `mag` result\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pmag( pg:PGRAPHICS a:NUMBER b:NUMBER ): pg:PGRAPHICS mag:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmag\"},\"Pmap\":{\"description\":\"Re-maps a number from one range to another.\\n\\nIn the first example, the number 25 is converted from a value in the range of 0 to 100 into a value that ranges from the left edge of the window (0) to the right edge (width).\\n\\n\\nAs shown in the second example, numbers outside of the range are not clamped to the minimum and maximum parameters values, because out-of-range values are often intentional and useful.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/map_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start1` lower bound of the value's current range\\n\\n@param `stop1` upper bound of the value's current range\\n\\n@param `start2` lower bound of the value's target range\\n\\n@param `stop2` upper bound of the value's target range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pmap( pg:PGRAPHICS value:DOUBLE start1:DOUBLE stop1:DOUBLE start2:DOUBLE stop2:DOUBLE ): pg:PGRAPHICS output:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pmap\"},\"Pmask\":{\"description\":\"The `Pmask` function copies the blue channel of an image to the alpha channel of an other.\\n\\nAs **PGRAPHICS** intances are alse **PIMAGE** instances, you can use this fonction with **PGRAPHICS**.\\n\\n@param `orginal_img` PImage to be masked\\n\\n@param `mask_image` Pimage to serve as mask\\n\\n@param `masked_image` Masked Pimage\\n\\n@param `orginal_grp` PGraphics to be masked\\n\\n@param `mask_grp` PGraphics to serve as mask\\n\\n@param `masked_grp` Masked PGraphics\\n\\n\",\"signature\":\"Pmask( mask_image:PIMAGE orginal_img:PIMAGE ): masked_image:PIMAGE\\nPmask( mask_image:PIMAGE orginal_grp:PGRAPHICS ): masked_grp:PGRAPHICS\\nPmask( mask_grp:PGRAPHICS orginal_img:PIMAGE ): masked_image:PIMAGE\\nPmask( mask_grp:PGRAPHICS orginal_grp:PGRAPHICS ): masked_grp:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"2.7.0\",\"OPB64name\":\"Pmask\"},\"PnoClip\":{\"description\":\"Disables the clipping previously started by the [`Pclip`](/doc/Pclip) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noClip_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PnoClip( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoClip\"},\"PnoFill\":{\"description\":\"Disables filling geometry. If both [`PnoStroke`](/doc/PnoStroke) and `PnoFill` are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noFill_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PnoFill( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoFill\"},\"PnoStroke\":{\"description\":\"Disables drawing the stroke (outline). If both `PnoStroke` and [`PnoFill`](/doc/PnoFill) are called, nothing will be drawn to the screen.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noStroke_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PnoStroke( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoStroke\"},\"PnoTint\":{\"description\":\"Removes the current fill value for displaying images and reverts to displaying images with their original hues.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/noTint_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PnoTint( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PnoTint\"},\"Pnorm\":{\"description\":\"Normalizes a number from another range into a value between 0 and 1. Identical to `value low high 0 1 Pmap`.\\n\\nNumbers outside of the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/norm_.html)\\n\\n@param `value` the incoming value to be converted\\n\\n@param `start` lower bound of the value's current range\\n\\n@param `stop` upper bound of the value's current range\\n\\n@param `output` linear interpolation of value between specified ranges\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pnorm( pg:PGRAPHICS value:NUMBER start:NUMBER stop:NUMBER ): pg:PGRAPHICS output:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pnorm\"},\"Ppixels\":{\"description\":\"Returns an array containing the values for all the pixels in the display window. These values are of the color datatype. This array is the size of the display window. For example, if the image is 100x100 pixels, there will be 10000 values and if the window is 200x300 pixels, there will be 60000 values. After **pixels** has been modified, the [`PupdatePixels`](/doc/PupdatePixels) function must be run to update the content of the display window.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pixels.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"signature\":\"Ppixels( pg:PGRAPHICS ): pg:PGRAPHICS pixels:LIST<LONG>\\nPpixels( img:PIMAGE ): img:PIMAGE pixels:LIST<LONG>\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppixels\"},\"Ppoint\":{\"description\":\"Draws a point, a coordinate in space at the dimension of one pixel. The first parameter is the horizontal value for the point, the second value is the vertical value for the point.\\n\\nUse [`Pstroke`](/doc/Pstroke) to set the color of a `Ppoint`.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/point_.html)\\n\\n@param `x` x-coordinate of the point\\n\\n@param `y` y-coordinate of the point\\n\\n@param `z` z-coordinate of the point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Ppoint( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPpoint( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ppoint\"},\"PpopMatrix\":{\"description\":\"Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The [`PpushMatrix`](/doc/PpushMatrix) function saves the current coordinate system to the stack and `PpopMatrix` restores the prior coordinate system. [`PpushMatrix`](/doc/PpushMatrix) and `PpopMatrix` are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PpopMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopMatrix\"},\"PpopStyle\":{\"description\":\"The [`PpushStyle`](/doc/PpushStyle) function saves the current style settings and `PpopStyle` restores the prior settings; these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with [`PpushStyle`](/doc/PpushStyle), it builds on the current style information. The [`PpushStyle`](/doc/PpushStyle) and `PpopStyle` functions can be nested to provide more control (see example for a demonstration.)\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/popStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PpopStyle( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpopStyle\"},\"PpushMatrix\":{\"description\":\"Pushes the current transformation matrix onto the matrix stack. Understanding `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) requires understanding the concept of a matrix stack. The `PpushMatrix` function saves the current coordinate system to the stack and [`PpopMatrix`](/doc/PpopMatrix) restores the prior coordinate system. `PpushMatrix` and [`PpopMatrix`](/doc/PpopMatrix) are used in conjuction with the other transformation functions and may be nested to control the scope of the transformations.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PpushMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushMatrix\"},\"PpushStyle\":{\"description\":\"The `PpushStyle` function saves the current style settings and [`PpopStyle`](/doc/PpopStyle) restores the prior settings. Note that these functions are always used together. They allow you to change the style settings and later return to what you had. When a new style is started with `PpushStyle`, it builds on the current style information. The `PpushStyle` and [`PpopStyle`](/doc/PpopStyle) functions can be nested to provide more control. (See example for a demonstration.)\\n\\n\\nThe style information controlled by the following functions are included in the style:fill, stroke, tint, strokeWeight, strokeCap, strokeJoin, imageMode, rectMode, ellipseMode, shapeMode, colorMode, textAlign, textFont, textMode, textSize, textLeading, emissive, specular, shininess, ambient.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/pushStyle_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PpushStyle( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PpushStyle\"},\"Pquad\":{\"description\":\"A quad is a quadrilateral, a four sided polygon. It is similar to a rectangle, but the angles between its edges are not constrained to ninety degrees. The first pair of parameters (x1,y1) sets the first vertex and the subsequent pairs should proceed clockwise or counter-clockwise around the defined shape.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quad_.html)\\n\\n@param `x1` float: x-coordinate of the first corner\\n\\n@param `y1` float: y-coordinate of the first corner\\n\\n@param `x2` float: x-coordinate of the second corner\\n\\n@param `y2` float: y-coordinate of the second corner\\n\\n@param `x3` float: x-coordinate of the third corner\\n\\n@param `y3` float: y-coordinate of the third corner\\n\\n@param `x4` float: x-coordinate of the fourth corner\\n\\n@param `y4` float: y-coordinate of the fourth corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pquad( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE x4:DOUBLE y4:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pquad\"},\"PquadraticVertex\":{\"description\":\"Specifies vertex coordinates for quadratic Bezier curves. Each call to `PquadraticVertex` defines the position of one control point and one anchor point of a Bezier curve, adding a new segment to a line or shape. The first time `PquadraticVertex` is used within a [`PbeginShape`](/doc/PbeginShape) call, it must be prefaced with a call to [`Pvertex`](/doc/Pvertex) to set the first anchor point. This function must be used between [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) and only when there is no MODE parameter specified to [`PbeginShape`](/doc/PbeginShape). \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/quadraticVertex_.html)\\n\\n@param `cx` the x-coordinate of the control point\\n\\n@param `cy` the y-coordinate of the control point\\n\\n@param `x3` the x-coordinate of the anchor point\\n\\n@param `y3` the y-coordinate of the anchor point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PquadraticVertex( pg:PGRAPHICS cx:DOUBLE cy:DOUBLE x3:DOUBLE y3:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PquadraticVertex\"},\"Prect\":{\"description\":\"Draws a rectangle to the screen. A rectangle is a four-sided shape with every angle at ninety degrees. By default, the first two parameters set the location of the upper-left corner, the third sets the width, and the fourth sets the height. The way these parameters are interpreted, however, may be changed with the [`PrectMode`](/doc/PrectMode) function.\\n\\n\\n\\nTo draw a rounded rectangle, add a fifth parameter, which is used as the radius value for all four corners.\\n\\n\\n\\nTo use a different radius value for each corner, include eight parameters. When using eight parameters, the latter four set the radius of the arc at each corner separately, starting with the top-left corner and moving clockwise around the rectangle.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rect_.html)\\n\\n@param `a` float: x-coordinate of the rectangle by default\\n\\n@param `b` float: y-coordinate of the rectangle by default\\n\\n@param `c` float: width of the rectangle by default\\n\\n@param `d` float: height of the rectangle by default\\n\\n@param `r` float: radii for all four corners\\n\\n@param `tl` float: radius for top-left corner\\n\\n@param `tr` float: radius for top-right corner\\n\\n@param `br` float: radius for bottom-right corner\\n\\n@param `bl` float: radius for bottom-left corner\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Prect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER ): pg:PGRAPHICS\\nPrect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER r:NUMBER ): pg:PGRAPHICS\\nPrect( pg:PGRAPHICS a:NUMBER b:NUMBER c:NUMBER d:NUMBER tl:NUMBER tr:NUMBER br:NUMBER bl:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Prect\"},\"PrectMode\":{\"description\":\"Modifies the location from which rectangles are drawn by changing the way in which parameters given to [`Prect`](/doc/Prect) are intepreted.\\n\\nThe default mode is **CORNER**, which interprets the first two parameters of [`Prect`](/doc/Prect) as the upper-left corner of the shape, while the third and fourth parameters are its width and height.\\n\\n**CORNERS** interprets the first two parameters of [`Prect`](/doc/Prect) as the location of one corner, and the third and fourth parameters as the location of the opposite corner.\\n\\n**CENTER** interprets the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, while the third and fourth parameters are its width and height.\\n\\n**RADIUS** also uses the first two parameters of [`Prect`](/doc/Prect) as the shape's center point, but uses the third and fourth parameters to specify half of the shape's width and height.\\n\\nThe parameter must be written in ALL CAPS because Processing is a case-sensitive language.\\n\\n[Link to original Processing doc](https://processing.org/reference/rectMode_.html)\\n\\n@param `mode` either CORNER, CORNERS, CENTER, or RADIUS\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PrectMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PrectMode\"},\"Pred\":{\"description\":\"Extracts the red value from a color, scaled to match current [`PcolorMode`](/doc/PcolorMode). The value is always returned as a double.\\n\\nThe `Pred` function is easy to use and understand, but it is slower than bit shifting. \\n\\n[Link to original Processing doc](https://processing.org/reference/red_.html)\\n\\n@param `rgb` Any value of the color datatype\\n\\n@param `red` Red component of the input color\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pred( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS red:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pred\"},\"PresetMatrix\":{\"description\":\"Replaces the current matrix with the identity matrix. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/resetMatrix_.html)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PresetMatrix( pg:PGRAPHICS ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PresetMatrix\"},\"Protate\":{\"description\":\"Rotates the amount specified by the **angle** parameter. Angles must be specified in radians (values from **0** to **2 PI**). \\n\\nThe coordinates are always rotated around their relative position to the origin. Positive numbers rotate objects in a clockwise direction and negative numbers rotate in the couterclockwise direction. Transformations apply to everything that happens afterward, and subsequent calls to the function compound the effect. For example, calling `pi 2.0 / Protate` once and then calling `pi 2.0 / Protate` a second time is the same as a single `pi Protate`. \\n \\n\\nTechnically, `Protate` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/rotate_.html)\\n\\n@param `angle` angle of rotation specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Protate( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Protate\"},\"Psaturation\":{\"description\":\"Extracts the saturation value from a color.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/saturation_.html)\\n\\n@param `rgb` int: any value of the color datatype\\n\\n@param `saturation` Saturation component of HSB color representation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Psaturation( pg:PGRAPHICS rgb:NUMBER ): pg:PGRAPHICS saturation:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psaturation\"},\"Pscale\":{\"description\":\"Increases or decreases the size of a shape by expanding and contracting vertices. Objects always scale from their relative origin to the coordinate system. Scale values are specified as decimal percentages. For example, the function call `2.0 Pscale` increases the dimension of a shape by 200%.\\n\\n\\n\\nTransformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling `2.0 Pscale` and then `1.5 Pscale` is the same as `3.0 Pscale`. This function can be further controlled with [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/scale_.html)\\n\\n@param `s` percentage to scale the object\\n\\n@param `x` percentage to scale the object in the x-axis\\n\\n@param `y` percentage to scale the object in the y-axis\\n\\n@param `z` percentage to scale the object in the z-axis\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pscale( pg:PGRAPHICS s:NUMBER ): pg:PGRAPHICS\\nPscale( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPscale( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pscale\"},\"Pset\":{\"description\":\"Changes the color of any pixel, or writes an image directly to the display window.\\n\\n\\n\\nThe **x** and **y** parameters specify the pixel to change and the **c** parameter specifies the color value. The **c** parameter is interpreted according to the current color mode.  (The default color mode is RGB values from 0 to 255.)  When setting an image, the **x** and **y** parameters define the coordinates for the upper-left corner of the image.\\n\\n\\n\\nSetting the color of a single pixel with **set(x, y)** is easy, but not as fast as putting the data directly into the list of pixels returned by  [`Ppixels`](/doc/Ppixels).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/set_.html)\\n\\n@param `x` X-coordinate of the pixel\\n\\n@param `y` Y-coordinate of the pixel\\n\\n@param `c` Any value of the color datatype\\n\\n@param `img` Image to copy into the original image\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pset( pg:PGRAPHICS x:NUMBER y:NUMBER c:NUMBER ): pg:PGRAPHICS\\nPset( pg:PGRAPHICS x:NUMBER y:NUMBER img:PIMAGE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pset\"},\"Pshape\":{\"description\":\"Draws shapes to the display window. Shapes must be loaded with [`PloadShape`](/doc/PloadShape). Processing currently works with SVG, OBJ, and custom-created shapes. WrapScript only support SVG. The **shape** parameter specifies the shape to display and the coordinate parameters define the location of the shape from its upper-left corner. The shape is displayed at its original size unless the **c** and **d** parameters specify a different size. The [`PshapeMode`](/doc/PshapeMode) function can be used to change the way these parameters are interpreted.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shape_.html)\\n\\n@param `shape` the shape to display\\n\\n@param `x` x-coordinate of the shape\\n\\n@param `y` y-coordinate of the shape\\n\\n@param `a` x-coordinate of the shape\\n\\n@param `b` y-coordinate of the shape\\n\\n@param `c` width to display the shape\\n\\n@param `d` height to display the shape\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pshape( pg:PGRAPHICS shape:PSHAPE ): pg:PGRAPHICS\\nPshape( pg:PGRAPHICS shape:PSHAPE x:DOUBLE y:DOUBLE ): pg:PGRAPHICS\\nPshape( pg:PGRAPHICS shape:PSHAPE a:DOUBLE b:DOUBLE c:DOUBLE d:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.2.18\",\"OPB64name\":\"Pshape\"},\"PshapeMode\":{\"description\":\"Modifies the location from which shapes draw. The default mode is **shapeMode(CORNER)**, which specifies the location to be the upper left corner of the shape and uses the third and fourth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. The syntax **shapeMode(CORNERS)** uses the first and second parameters of [`Pshape`](/doc/Pshape) to set the location of one corner and uses the third and fourth parameters to set the opposite corner. The syntax **shapeMode(CENTER)** draws the shape from its center point and uses the third and forth parameters of [`Pshape`](/doc/Pshape) to specify the width and height. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shapeMode_.html)\\n\\n@param `mode` int: either CORNER, CORNERS, CENTER\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PshapeMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshapeMode\"},\"PshearX\":{\"description\":\"Shears a shape around the x-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearX` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearX_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PshearX( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearX\"},\"PshearY\":{\"description\":\"Shears a shape around the y-axis the amount specified by the **angle** parameter. Angles should be specified in radians (values from 0 to 2 PI). Objects are always sheared around their relative position to the origin and positive numbers shear objects in a clockwise direction. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect.  \\n\\nTechnically, `PshearY` multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/shearY_.html)\\n\\n@param `angle` angle of shear specified in radians\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PshearY( pg:PGRAPHICS angle:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PshearY\"},\"Psize\":{\"description\":\"The `Psize` function returns the pixel `width` and `height` of a Pimage or PGraphics object.\\n\\n@param `img` PImage instance to measure.\\n\\n@param `pg` PGraphics instance to measure.\\n\\n@param `height` Object height in pixels.\\n\\n@param `width` Object height in pixels.\\n\\n\",\"signature\":\"Psize( img:PIMAGE ): width:LONG height:LONG\\nPsize( pg:PGRAPHICS ): width:LONG height:LONG\",\"tags\":[\"processing\"],\"since\":\"2.6.0\",\"OPB64name\":\"Psize\"},\"Psphere\":{\"description\":\"A sphere is a hollow ball made from tessellated triangles.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphere_.html)\\n\\n@param `r` the radius of the sphere\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Psphere( pg:PGRAPHICS r:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Psphere\"},\"PsphereDetail\":{\"description\":\"Controls the detail used to render a sphere by adjusting the number of vertices of the sphere mesh. The default resolution is 30, which creates a fairly detailed sphere definition with vertices every 360/30 = 12 degrees. If you are going to render a great number of spheres per frame, it is advised to reduce the level of detail using this function. The setting stays active until `PsphereDetail` is called again with a new parameter and so should **not** be called prior to every [`Psphere`](/doc/Psphere) statement, unless you wish to render spheres with different settings, e.g. using less detail for smaller spheres or ones further away from the camera. To control the detail of the horizontal and vertical resolution independently, use the version of the functions with two parameters.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/sphereDetail_.html)\\n\\n@param `res` int: number of segments (minimum 3) used per full circle revolution\\n\\n@param `ures` int: number of segments used longitudinally per full circle revolutoin\\n\\n@param `vres` int: number of segments used latitudinally from top to bottom\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PsphereDetail( pg:PGRAPHICS res:NUMBER ): pg:PGRAPHICS\\nPsphereDetail( pg:PGRAPHICS ures:NUMBER vres:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PsphereDetail\"},\"Pstroke\":{\"description\":\"Sets the color used to draw lines and borders around shapes. This color is either specified in terms of the RGB or HSB color depending on the current **colorMode** The default color space is RGB, with each value in the range from 0 to 255.\\n\\nThe most efficient is to use the raw ARGB format: 0x102030FF means Red 32, Green 48, Blue 255 with alpha=16/255. Alpha 0xFF means fully opaque. When using v1, v2, v3, gray, alpha, `Pstroke` calls internally [`Pcolor`](/doc/Pcolor).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/stroke_.html)\\n\\n@param `argb` color value in hexadecimal notation\\n\\n@param `alpha` opacity of the stroke\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pstroke( pg:PGRAPHICS argb:LONG ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS gray:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS argb:LONG alpha:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS gray:DOUBLE alpha:DOUBLE ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPstroke( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pstroke\"},\"PstrokeCap\":{\"description\":\"Sets the style for rendering line endings. These ends are either squared, extended, or rounded, each of which specified with the corresponding parameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeCap_.html)\\n\\n@param `cap` Either SQUARE, PROJECT, or ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PstrokeCap( pg:PGRAPHICS cap:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeCap\"},\"PstrokeJoin\":{\"description\":\"Sets the style of the joints which connect line segments. These joints are either mitered, beveled, or rounded and specified with the corresponding parameters MITER, BEVEL, and ROUND. The default joint is MITER. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeJoin_.html)\\n\\n@param `join` Either MITER, BEVEL, ROUND\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PstrokeJoin( pg:PGRAPHICS join:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeJoin\"},\"PstrokeWeight\":{\"description\":\"Sets the width of the stroke used for lines, points, and the border around shapes. All widths are set in units of pixels.\\n\\n**Warning**: There is a known rounding bug inside Processing. Size 1 pixels may not draw. Use a 1.01 stroke weight. See [`Ppoint`](/doc/Ppoint) example.\\n\\n[Link to original Processing doc](https://processing.org/reference/strokeWeight_.html)\\n\\n@param `weight` The weight (in pixels) of the stroke.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PstrokeWeight( pg:PGRAPHICS weight:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PstrokeWeight\"},\"Ptext\":{\"description\":\"Draws text to the screen. Displays the information specified in the first parameter on the screen in the position specified by the additional parameters. A default font will be used unless a font is set with the [`PtextFont`](/doc/PtextFont) function and a default size will be used unless a font is set with [`PtextSize`](/doc/PtextSize). Change the color of the text with the [`Pfill`](/doc/Pfill) function. The text displays in relation to the [`PtextAlign`](/doc/PtextAlign) function, which gives the option to draw to the left, right, and center of the coordinates.\\n\\n\\n\\nThe **x2** and **y2** parameters define a rectangular area to display within and may only be used with string data. When these parameters are specified, they are interpreted based on the current [`PrectMode`](/doc/PrectMode) setting. Text that does not fit completely within the rectangle specified will not be drawn to the screen.\\n\\n\\n\\nNote that Processing now lets you call `Ptext` without first specifying a PFont with [`PtextFont`](/doc/PtextFont). In that case, a generic sans-serif font will be used instead.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/text_.html)\\n\\n@param `s` the string to be displayed\\n\\n@param `x` by default, x-coordinate of text\\n\\n@param `y` by default, y-coordinate of text\\n\\n@param `x1` by default, the x-coordinate of text, see PrectMode for more info\\n\\n@param `y1` by default, the y-coordinate of text, see PrectMode for more info\\n\\n@param `x2` by default, the width of the text box, see PrectMode for more info\\n\\n@param `y2` by default, the height of the text box, see PrectMode for more info\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Ptext( pg:PGRAPHICS s:STRING x:DOUBLE y:DOUBLE ): pg:PGRAPHICS\\nPtext( pg:PGRAPHICS s:STRING x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptext\"},\"PtextAlign\":{\"description\":\"Sets the current alignment for drawing text. The parameters LEFT, CENTER, and RIGHT set the display characteristics of the letters in relation to the values for the **x** and **y** parameters of the [`Ptext`](/doc/Ptext) function.\\n\\n\\n\\nAn optional second parameter can be used to vertically align the text. BASELINE is the default, and the vertical alignment will be reset to BASELINE if the second parameter is not used. The TOP and CENTER parameters are straightforward. The BOTTOM parameter offsets the line based on the current [`PtextDescent`](/doc/PtextDescent). For multiple lines, the final line will be aligned to the bottom, with the previous lines appearing above it.\\n\\n\\n\\nWhen using [`Ptext`](/doc/Ptext) with width and height parameters, BASELINE is ignored, and treated as TOP. (Otherwise, text would by default draw outside the box, since BASELINE is the default setting. BASELINE is not a useful drawing mode for text drawn in a rectangle.)\\n\\n\\n\\nThe vertical alignment is based on the value of [`PtextAscent`](/doc/PtextAscent), which many fonts do not specify correctly. It may be necessary to use a hack and offset by a few pixels by hand so that the offset looks correct. To do this as less of a hack, use some percentage of [`PtextAscent`](/doc/PtextAscent) or [`PtextDescent`](/doc/PtextDescent) so that the hack works even if you change the size of the font.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAlign_.html)\\n\\n@param `alignX` Horizontal alignment, either LEFT, CENTER, or RIGHT\\n\\n@param `alignY` Vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextAlign( pg:PGRAPHICS alignX:STRING ): pg:PGRAPHICS\\nPtextAlign( pg:PGRAPHICS alignX:STRING alignY:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAlign\"},\"PtextAscent\":{\"description\":\"Returns ascent of the current font at its current size. This information is useful for determining the height of the font above the baseline. For example, adding the `PtextAscent` and [`PtextDescent`](/doc/PtextDescent) values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textAscent_.html)\\n\\n@param `ascent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextAscent( pg:PGRAPHICS ): pg:PGRAPHICS ascent:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextAscent\"},\"PtextDescent\":{\"description\":\"Returns descent of the current font at its current size. This information is useful for determining the height of the font below the baseline. For example, adding the [`PtextAscent`](/doc/PtextAscent) and `PtextDescent` values will give you the total height of the line.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textDescent_.html)\\n\\n@param `descent` ascent of the current font at its current size\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextDescent( pg:PGRAPHICS ): pg:PGRAPHICS descent:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextDescent\"},\"PtextFont\":{\"description\":\"Sets the current font that will be drawn with the [`Ptext`](/doc/Ptext) function. Fonts must be created for Processing with [`PcreateFont`](/doc/PcreateFont) before they can be used. The font set through `PtextFont` will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textFont_.html)\\n\\n@param `font` Any variable of the type PFont\\n\\n@param `size` the size of the letters in pixel.\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextFont( pg:PGRAPHICS font:PFONT ): pg:PGRAPHICS\\nPtextFont( pg:PGRAPHICS font:PFONT size:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextFont\"},\"PtextLeading\":{\"description\":\"Sets the spacing between lines of text in units of pixels. This setting will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function.  Note, however, that the leading is reset by [`PtextSize`](/doc/PtextSize). For example, if the leading is set to 20 with `20 PtextLeading`, then if `48 PtextSize` is run at a later point, the leading will be reset to the default for the text size of 48.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textLeading_.html)\\n\\n@param `leading` The size in pixels for spacing between lines\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextLeading( pg:PGRAPHICS leading:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextLeading\"},\"PtextMode\":{\"description\":\"Sets the way text draws to the screen, either as texture maps or as vector geometry. The default **textMode(MODEL)**, uses textures to render the fonts. The **textMode(SHAPE)** mode draws text using the glyph outlines of individual characters rather than as textures. This mode is only supported with the **PDF** and **P3D** renderer settings. With the **PDF** renderer, you must call **textMode(SHAPE)** before any other drawing occurs. If the outlines are not available, then **textMode(SHAPE)** will be ignored and **textMode(MODEL)** will be used instead.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textMode_.html)\\n\\n@param `mode` int: either MODEL or SHAPE\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextMode( pg:PGRAPHICS mode:STRING ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextMode\"},\"PtextSize\":{\"description\":\"Sets the current font size. This size will be used in all subsequent calls to the [`Ptext`](/doc/Ptext) function. Font size is measured in units of pixels.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textSize_.html)\\n\\n@param `size` float: the size of the letters in units of pixels\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextSize( pg:PGRAPHICS size:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextSize\"},\"PtextWidth\":{\"description\":\"Calculates and returns the width of any character or text string.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/textWidth_.html)\\n\\n@param `str` The String of characters to measure\\n\\n@param `w` The width of the input string\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"PtextWidth( pg:PGRAPHICS str:STRING ): pg:PGRAPHICS w:DOUBLE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PtextWidth\"},\"Ptint\":{\"description\":\"Sets the fill value for displaying images. Images can be tinted to specified colors or made transparent by including an alpha value.\\n\\n\\n\\nTo apply transparency to an image without affecting its color, use white as the tint color and specify an alpha value. For instance, **tint(255, 128)** will make an image 50pc transparent (assuming the default alpha range of 0-255, which can be changed with [`PcolorMode`](/doc/PcolorMode)).\\n\\n\\nThe value for the gray parameter must be less than or equal to the current maximum value as specified by [`PcolorMode`](/doc/PcolorMode). The default maximum value is 255.\\n\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/tint_.html)\\n\\n@param `argb` any argb color value.\\n\\n@param `alpha` opacity of the image\\n\\n@param `gray` specifies a value between white and black\\n\\n@param `v1` red or hue value (depending on current color mode)\\n\\n@param `v2` green or saturation value (depending on current color mode)\\n\\n@param `v3` blue or brightness value (depending on current color mode)\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Ptint( pg:PGRAPHICS argb:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS gray:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS argb:NUMBER alpha:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER ): pg:PGRAPHICS\\nPtint( pg:PGRAPHICS v1:NUMBER v2:NUMBER v3:NUMBER alpha:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptint\"},\"PtoImage\":{\"description\":\"The `PtoImage` function transforms a `PGRAPHICS` to a `PIMAGE`.\\n\\nThe `PGRAPHICS` can still be used after the transformation as this function copies the pixel values. This is equivalent to `Pencode Pdecode` but it is a lot faster.\\n\\n@param `pg` Processing graphic object.\\n\\n@param `img` Processing Pimage object.\\n\\n\",\"signature\":\"PtoImage( pg:PGRAPHICS ): img:PIMAGE\",\"tags\":[\"processing\"],\"since\":\"2.1.0\",\"OPB64name\":\"PtoImage\"},\"Ptranslate\":{\"description\":\"Specifies an amount to displace objects within the display window. The **x** parameter specifies left/right translation, the **y** parameter specifies up/down translation.\\n\\n\\n\\nTransformations are cumulative and apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling **50 0 Ptranslate** and then **20 0 Ptranslate** is the same as **70 0 Ptranslate**. This function can be further controlled by using [`PpushMatrix`](/doc/PpushMatrix) and [`PpopMatrix`](/doc/PpopMatrix).\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/translate_.html)\\n\\n@param `x` left/right translation\\n\\n@param `y` up/down translation\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Ptranslate( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptranslate\"},\"Ptriangle\":{\"description\":\"A triangle is a plane created by connecting three points. The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point. \\n\\n\\n[Link to original Processing doc](https://processing.org/reference/triangle_.html)\\n\\n@param `x1` float: x-coordinate of the first point\\n\\n@param `y1` float: y-coordinate of the first point\\n\\n@param `x2` float: x-coordinate of the second point\\n\\n@param `y2` float: y-coordinate of the second point\\n\\n@param `x3` float: x-coordinate of the third point\\n\\n@param `y3` float: y-coordinate of the third point\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Ptriangle( pg:PGRAPHICS x1:DOUBLE y1:DOUBLE x2:DOUBLE y2:DOUBLE x3:DOUBLE y3:DOUBLE ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Ptriangle\"},\"PupdatePixels\":{\"description\":\"Updates the display window with the data in the **pixels[]** array. Use in conjunction with [`Ppixels`](/doc/Ppixels). If you are only reading pixels from the array, there's no need to call `PupdatePixels` - updating is only necessary to apply changes.\\n\\n[Link to original Processing doc](https://processing.org/reference/updatePixels_.html)\\n\\n@param `pixels` List of image pixels, RGBA format.\\n\\n@param `pg` Processing graphic object\\n\\n@param `img` PImage object\\n\\n\",\"signature\":\"PupdatePixels( pg:PGRAPHICS pixels:LIST<LONG> ): pg:PGRAPHICS\\nPupdatePixels( img:PIMAGE pixels:LIST<LONG> ): img:PIMAGE\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"PupdatePixels\"},\"Pvertex\":{\"description\":\"All shapes are constructed by connecting a series of vertices. `Pvertex` is used to specify the vertex coordinates for points, lines, triangles, quads, and polygons. It is used exclusively within the [`PbeginShape`](/doc/PbeginShape) and [`PendShape`](/doc/PendShape) functions.\\n\\n\\n[Link to original Processing doc](https://processing.org/reference/vertex_.html)\\n\\n@param `x` x-coordinate of the vertex\\n\\n@param `y` y-coordinate of the vertex\\n\\n@param `z` float: z-coordinate of the vertex\\n\\n@param `u` float: horizontal coordinate for the texture mapping\\n\\n@param `v` float: vertical coordinate for the texture mapping\\n\\n@param `pg` Processing graphic object\\n\\n\",\"signature\":\"Pvertex( pg:PGRAPHICS x:NUMBER y:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER u:NUMBER v:NUMBER ): pg:PGRAPHICS\\nPvertex( pg:PGRAPHICS x:NUMBER y:NUMBER z:NUMBER u:NUMBER v:NUMBER ): pg:PGRAPHICS\",\"tags\":[\"processing\"],\"since\":\"1.0.0\",\"OPB64name\":\"Pvertex\"},\"Q->\":{\"description\":\"The `Q->` function consumes on the stack a [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long and push back the quaternion into\\n4 doubles (w, x, y, z, with z being on top).\\n\\nEach quaternion dimension is encoded with 16 bits.\\n\\n@param `w` W\\n\\n@param `x` X\\n\\n@param `y` Y\\n\\n@param `z` Z\\n\\n@param `input` Quaternion representation\\n\\n\",\"signature\":\"Q->( input:LONG ): w:DOUBLE x:DOUBLE y:DOUBLE z:DOUBLE\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"JHoy\"},\"QCONJUGATE\":{\"description\":\"The `QCONJUGATE` function performs a [conjugation](https://en.wikipedia.org/wiki/Quaternion#Conjugation,_the_norm,_and_reciprocal) of a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the quaternion conjugate into a long.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `result` The conjugated quaternion\\n\\n\",\"signature\":\"QCONJUGATE( quaternion:LONG ): result:LONG\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QCONJUGATE\"},\"QDIVIDE\":{\"description\":\"The `QDIVIDE` function divides a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of dividing them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from division *q* by *r*\\n\\n\",\"signature\":\"QDIVIDE( q:LONG r:LONG ): result:LONG\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QDIVIDE\"},\"QMULTIPLY\":{\"description\":\"The `QMULTIPLY` function multiplies a [quaternion](https://en.wikipedia.org/wiki/Quaternion) *q* by a quaternion *r* and push back the result of multiplying them.\\n\\n@param `q` The *q* quaternion\\n\\n@param `r` The *r* quaternion\\n\\n@param `result` The resulting quaternion from multiplication *q* by *r*\\n\\n\",\"signature\":\"QMULTIPLY( q:LONG r:LONG ): result:LONG\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QMULTIPLY\"},\"QROTATE\":{\"description\":\"Rotates a vector by a [quaternion](https://en.wikipedia.org/wiki/Quaternion).\\n\\nThe `QROTATE` function consumes on the top of the stack three doubles representing a vector(x, y, z) and a long representing a [quaternion](https://en.wikipedia.org/wiki/Quaternion) and pushes back the vector rotated into 3 doubles (x, y, z with z being on top).\\n\\n@param `quaternion` The quaternion used to rotate the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"signature\":\"QROTATE( x:DOUBLE y:DOUBLE z:DOUBLE quaternion:LONG ): x:DOUBLE y:DOUBLE z:DOUBLE\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATE\"},\"QROTATION\":{\"description\":\"The `QROTATION` extracts the axis and angle of the rotation represented by the [quaternion](https://en.wikipedia.org/wiki/Quaternion) on the stack.\\n\\n@param `quaternion` The input quaternion\\n\\n@param `angle` The angle of rotation\\n\\n@param `x` The X axis\\n\\n@param `y` The Y axis\\n\\n@param `z` The Z axis\\n\\n\",\"signature\":\"QROTATION( quaternion:LONG ): x:DOUBLE y:DOUBLE z:DOUBLE angle:DOUBLE\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"QROTATION\"},\"QUANTIZE\":{\"description\":\"The `QUANTIZE` function produces a quantized version of a Geo Time Series™ by replacing each value with a value from a finite list according to the interval the original value falls in. This function only works on numeric Geo Time Series™.\\nThis function can help to \\\"discretify\\\" data before calling [`VALUEHISTOGRAM`](/doc/VALUEHISTOGRAM).\\nThe list of intervals is defined as: [-∞,bounds<sub>0</sub>], (bounds<sub>0</sub>,bounds_<sub>1</sub>], (bounds<sub>1</sub>,bounds<sub>2</sub>], ..., (bounds<sub>n-1</sub>,+∞]\\n\\n@param `values` List of `n+1` values, one for each interval defined by `bounds`. If empty, the list `[ `0` `1` ... `n+1` ]` will be used.\\n\\n@param `bounds` Sorted list of `n` finite bounds defining `n+1` intervals.\\n\\n@param `gts` Geo Time Series™ to quantize.\\n\\n@param `qgts` Quantized GTS.\\n\\n@param `lgts` List of Geo Time Series™ to quantize.\\n\\n@param `lqgts` List of quantized GTS.\\n\\n\",\"signature\":\"QUANTIZE( gts:GTS bounds:LIST<DOUBLE> values:LIST ): qgts:GTS\\nQUANTIZE( lgts:LIST<GTS> bounds:LIST<DOUBLE> values:LIST ): lqgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"QUANTIZE\"},\"RAND\":{\"description\":\"The `RAND` function pushes onto the stack a random floating point number between 0.0 (inclusive) and 1.0 (exlusive) generated by the default random generator.\\n\\nThis generation is cryptographically secure.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\"RAND(): num:DOUBLE\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RAND\"},\"RANDOM\":{\"description\":\"The `RANDOM` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThis function is very similar to [SRAND](/doc/SRAND) except the seed is choosen pseudorandomly when the function is first called. Subsequent calls use the same generator.\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\"RANDOM(): num:DOUBLE\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"RANDOM\"},\"RANDPDF\":{\"description\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe result if a function pushed onto the stack. This function does not have any arguments.\\n\\nTo use the function pushed by `RANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"signature\":\"RANDPDF( valueHistogram:MAP ): result:STRING\",\"tags\":[\"math\",\"statistics\"],\"since\":\"1.0.7\",\"OPB64name\":\"RANDPDF\"},\"RANGE\":{\"description\":\"`RANGE` pushes onto the stack a list of integers in the given range [start included, end excluded[. If start is not in the parameter list, start=0.\\n\\n`RANGE` also accepts a step parameter in the parameter list.\\n\\n\\n@param `start` The start of range, default is 0\\n\\n@param `end` The end of range\\n\\n@param `step` The step between integers, default is 1\\n\\n@param `output` The list of every integers in the range [start end[\\n\\n\",\"signature\":\"RANGE( [ end:LONG ] ): output:LIST<LONG>\\nRANGE( [ start:LONG end:LONG ] ): output:LIST<LONG>\\nRANGE( [ start:LONG end:LONG step:LONG ] ): output:LIST<LONG>\",\"tags\":[\"counters\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGE\"},\"RANGECOMPACT\":{\"description\":\"The `RANGECOMPACT` simplifies a Geo Time Series™ by simplifying ranges of identical values (with identical latitude, longitude and elevation), retaining only the first and last ticks of each range.\\n\\n@param `gts` Geo Time Series™ to compact.\\n\\n@param `compacted` Compacted GTS.\\n\\n@param `lgts` List of Geo Time Series™ to compact.\\n\\n@param `lcompacted` List of compacted GTS.\\n\\n\",\"signature\":\"RANGECOMPACT( gts:GTS ): compacted:GTS\\nRANGECOMPACT( lgts:LIST<GTS> ): lcompacted:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RANGECOMPACT\"},\"RAWDTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe computation is performed on the raw Geo Time Series™, no transformation is applied to them.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"signature\":\"RAWDTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"RAWDTW\"},\"REDEFS\":{\"description\":\"The `REDEFS` function allows or disallows execution of redefined functions.\\n\\n@param `flag` Shall we allow or disallow the execution of redefined functions.\\n\\n\",\"signature\":\"REDEFS( flag:BOOLEAN ): \",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REDEFS\"},\"REDUCE\":{\"description\":\"The `REDUCE` framework groups Geo Time Series™ by equivalence classes based on label values and applies a function on each equivalence class of Geo Time Series™, considering the values of each tick and producing one GTS per equivalence class.\\n\\nAs the selected reducer function is applied tick by tick, it is usually wise to [`BUCKETIZE`](/doc/BUCKETIZE) the GTS first with a common value of `lastbucket`.\\n\\nThe labels whose values are common to all the GTS in an equivalence class will be retained.\\n\\nSince 2.1 you can make REDUCE override the GTSs ticks. This usage in mainly to be used in conjuction with [`MACROREDUCER`](/doc/MACROREDUCER).\\n\\n@param `reducer` Reducer function to apply.\\n\\n@param `labels` List of label names to consider for creating equivalence classes. If the list is empty all Geo Time Series™ will end up in the same equivalence class. If the `labels` parameter `NULL`, all labels will be considered.\\n\\n@param `gts` One or more lists of Geo Time Series™.\\n\\n@param `result` List of resulting Geo Time Series™.\\n\\n@param `overrideTick` Boolean, if true allows the reducer to modify the ticks of the GTSs. If not set, the reducer cannot modify the ticks.\\n\\n\",\"signature\":\"REDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR ] ): result:LIST<GTS>\\nREDUCE( [ gts:LIST<GTS>+ labels:LIST<STRING> reducer:AGGREGATOR overrideTick:BOOLEAN ] ): result:LIST<GTS>\",\"tags\":[\"reducer\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"REDUCE\"},\"RELABEL\":{\"description\":\"Modifies the labels of a Geo Time Series™. The `RELABEL` function expects a parameter MAP whose entries are labels to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `RELABEL` function will use the rest of the MAP as the actual labels to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing labels.\\n\\nAn entry with an empty STRING value or a NULL value will have the effect of removing the label from the GTS' labels.        \\n\\n@param `labels` Parameter map of label names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `encoder` Encoder to relabel\\n\\n@param `lencoder` List of encoders to relabel\\n\\n\",\"signature\":\"RELABEL( gts:GTS labels:MAP ): gts:GTS\\nRELABEL( lgts:LIST<GTS> labels:MAP ): lgts:LIST<GTS>\\nRELABEL( encoder:GTSENCODER labels:MAP ): encoder:GTSENCODER\\nRELABEL( lencoder:LIST<GTSENCODER> labels:MAP ): lencoder:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RELABEL\"},\"REMOVE\":{\"description\":\"Removes an entry from a MAP or from a LIST.\\n\\nThe `REMOVE` function consumes a list (or a map) and a index (or a key), then remove the entry.\\nIt lets the input on the stack and puts the removed item on top of the stack. \\nAs a result, the input map or list is modified and the map or list left on top of the stack is *not* a copy. \\n\\nIf the index is out of bound, the returned value is `NULL` and the list or array is unmodified.\\nIf the key does not exist in the map, it returns null as the removed entry.\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **GTS**.\\n\\nSince 2.7, `REMOVE` can be called on a **GTS**.\\n\\n@param `key` Depending on map construction, could be a number, a string, a boolean\\n\\n@param `inputmap` The reference to the map to be modified\\n\\n@param `index` The index of the list, 0 for the first item\\n\\n@param `inputlist` The reference to the list to be modified\\n\\n@param `removeditem` Depending on map or list content, could be any type\\n\\n@param `outputmap` The input map modified\\n\\n@param `outputlist` The input list modified\\n\\n@param `pointindex` Index of the point in the GTS, 0-indexed, handles negative indexing.\\n\\n@param `inputgts` The GTS to remove the point from.\\n\\n@param `removedpoint` The removed point. List of timestamp, latitude, longitude, elevation and value.\\n\\n@param `outputgts` The acopy of the original GTS with the requested point removed.\\n\\n\",\"signature\":\"REMOVE( inputlist:LIST index:LONG ): outputlist:LIST removeditem:ANY\\nREMOVE( inputmap:MAP key:ANY ): outputmap:MAP removeditem:ANY\\nREMOVE( inputgts:GTS pointindex:LONG ): outputgts:GTS removedpoint:LIST\",\"tags\":[\"maps\",\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"REMOVE\"},\"REMOVETICK\":{\"description\":\"The `REMOVETICK` function transforms a Geo Time Series™ by removing all occurrences of a tick or ticks.\\n\\n@param `tick` Tick (timestamp) to remove.\\n\\n@param `lticks` List or Set of ticks to remove.\\n\\n@param `gts` Geo Time Series™ to transform.\\n\\n@param `pruned` Tranformed Geo Time Series™.\\n\\n\",\"signature\":\"REMOVETICK( gts:GTS tick:LONG ): pruned:GTS\\nREMOVETICK( gts:GTS lticks:LIST<LONG> ): pruned:GTS\\nREMOVETICK( gts:GTS lticks:SET<LONG> ): pruned:GTS\",\"tags\":[\"gts\"],\"since\":\"1.2.19\",\"OPB64name\":\"REMOVETICK\"},\"RENAME\":{\"description\":\"The `RENAME` function changes the name of a Geo Time Series™, an Encoder or a list thereof. This operation may be required prior to using some functions. If the name starts with '+', the specified name will be appended to the current name of the GTS or Encoder.\\n\\nIf you want to rename a Geo Time Series™ or an Encoder so its name starts with a '+', you must first set its name to the empty string then use rename with the desired name prefixed with an additional '+'.\\n\\n@param `gts` Geo Time Series™ instance to rename.\\n\\n@param `lgts` List of Geo Time Series™ instances to rename.\\n\\n@param `encoder` Encoder to rename.\\n\\n@param `lencoder` Encoder to rename.\\n\\n@param `name` New name to give to the GTS.\\n\\n\",\"signature\":\"RENAME( gts:GTS name:STRING ): gts:GTS\\nRENAME( lgts:LIST<GTS> name:STRING ): lgts:LIST<GTS>\\nRENAME( encoder:GTSENCODER name:STRING ): encoder:GTSENCODER\\nRENAME( lencoder:LIST<GTSENCODER> name:STRING ): lencoder:LIST<GTSENCODER>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"RENAME\"},\"REOPTALT\":{\"description\":\"Produces a **R**egular **E**xpression **OPT**imized for **ALT**ernation from a list of STRINGs. Large alternations in regular expressions can lead to excessive backtracking and poor matching performance. In order to mitigate this, the `REOPTALT` function will produce a regular expression from a list of STRINGs which reduces the backtracking thus leading to better matching performance.\\n\\n@param `alternatives` List of STRINGs which should be used in the alternation.\\n\\n@param `regexp` Regular expression\\n\\n\",\"signature\":\"REOPTALT( alternatives:LIST<STRING> ): regexp:STRING\",\"tags\":[\"strings\"],\"since\":\"1.2.16\",\"OPB64name\":\"REOPTALT\"},\"REPLACE\":{\"description\":\"Replaces the first occurrence of a pattern by its substitution.\\n\\nThe `REPLACE` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with the replaced value if it was found\\n\\n\",\"signature\":\"REPLACE( original:ANY pattern:ANY replacement:ANY ): result:STRING\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACE\"},\"REPLACEALL\":{\"description\":\"Replaces all occurrence of a pattern by its substitution.\\n\\nThe `REPLACEALL` consumes 3 parameters from the stack:\\n* the replacement value\\n* the pattern to search, could be a regular expression\\n* the input value\\n\\nAll parameters are converted into strings via the toString() method before the replacement is done.\\n\\n@param `replacement` Value to be substituted to the pattern. Could be a number, a string, a list, ...\\n\\n@param `pattern` Pattern to search in the original value. Could be a regexp, a number, a string, a list, ...\\n\\n@param `original` Original value containing the pattern to replace\\n\\n@param `result` String with all occurrences of pattern replaced by its value\\n\\n\",\"signature\":\"REPLACEALL( original:ANY pattern:ANY replacement:ANY ): result:STRING\",\"tags\":[\"strings\"],\"since\":\"1.1.0\",\"OPB64name\":\"REPLACEALL\"},\"REPORT\":{\"description\":\"The `REPORT` function pushes onto the stack a STRING containing configuration and usage informations which can be useful when investigating issues.\\n\\n@param `secret` Secret configured for using the `REPORT` function.\\n\\n@param `report` Actual report.\\n\\n\",\"signature\":\"REPORT( secret:STRING ): report:STRING\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"REPORT\"},\"RESET\":{\"description\":\"The `RESET` function resets the stack to the given depth, discarding any items above those 'depth' items.\\n\\n@param `depth` Depth at which the stack should be reset.\\n\\n\",\"signature\":\"RESET( depth:LONG ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESET\"},\"RESETS\":{\"description\":\"The `RESETS` functions transforms a numerical Geo Time Series™, shifting values so no offset (*i.e.* a decrease or increase of values) appears after the operation.\\n\\nThe parameter to `RESETS` determines if the Geo Time Series should be considered as decreasing instead of increasing.\\n\\n@param `decreasingGTS` Flag set to `true` to indicate the GTS is decreasing.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `lgts` List of Geo Time Series™ or list thereof to transform.\\n\\n@param `result` GTS with resets compensated.\\n\\n@param `lresult` List of GTS with resets compensated.\\n\\n\",\"signature\":\"RESETS( gts:GTS decreasingGTS:BOOLEAN ): result:GTS\\nRESETS( lgts:LIST<GTS> decreasingGTS:BOOLEAN ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESETS\"},\"RESHAPE\":{\"description\":\"The `RESHAPE` function modifies the shape of a list.\\n\\nThe new shape is specified using a list of dimensions, the first being the outer dimension. Such a shape can be produced by `SHAPE`.\\n\\nNote that the number of elements in the array must be compatible with the requested shape, i.e. the product of the dimensions must match the number of elements in the input list.\\n\\n@param `input` List to reshape.\\n\\n@param `shape` Shape specification, list of dimensions, the first element being the outer list.\\n\\n@param `output` Reshaped list.\\n\\n\",\"signature\":\"RESHAPE( input:LIST shape:LIST<LONG> ): output:LIST\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"RESHAPE\"},\"RESTORE\":{\"description\":\"The `RESTORE` function resets the stack's symbol table to the state recorded in the context passed as parameter.\\n\\n@param `context` Stack context produced by [`SAVE`](doc/SAVE).\\n\\n\",\"signature\":\"RESTORE( context:CONTEXT ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"RESTORE\"},\"RETHROW\":{\"description\":\"Inside the *catch* or *finally* macro of a [`TRY`](/doc/TRY), rethrows the last thrown error. If no error was previously thrown, `RETHROW` does nothing.\\n\\n\",\"signature\":\"RETHROW(): \",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"RETHROW\"},\"RETURN\":{\"description\":\"Returns immediately from the currently executing macro. If called outside a macro, `RETURN` will stop the execution of the current script, behaving like [`STOP`](/doc/STOP).\\n\\n\",\"signature\":\"RETURN(): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"RETURN\"},\"REV\":{\"description\":\"The `REV` function pushes onto the stack the revision of the Warp 10 instance.`\\n\\n@param `revision` Revision of the Warp 10 platform.\\n\\n\",\"signature\":\"REV(): revision:STRING\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"REV\"},\"REVBITS\":{\"description\":\"Reverses the order of the bits of a LONG value.\\n\\n@param `long` LONG value from which to revert the bits.\\n\\n@param `gnol` LONG value whose bits are in reverse order compared to those of `long`.\\n\\n\",\"signature\":\"REVBITS( long:LONG ): gnol:LONG\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVBITS\"},\"REVERSE\":{\"description\":\"Reverses the order of the elements of the list or the string.\\n\\nThe `REVERSE` function inverts the order of the elements of the list or the string on the top of the stack.\\nBeware, `REVERSE` do not create a new object. Use [`CLONEREVERSE`](/doc/CLONEREVERSE) if you want to keep input.\\n\\nApplied on a byte array, `REVERSE` reverses the endianness.\\n\\n\\n@param `originalList` The list to reverse\\n\\n@param `originalString` The string to reverse\\n\\n@param `reversedObj` The original object with the elements in reverse order\\n\\n\",\"signature\":\"REVERSE( originalList:LIST ): reversedObj:LIST\\nREVERSE( originalString:STRING ): reversedObj:STRING\\nREVERSE( originalString:BYTES ): reversedObj:BYTES\",\"tags\":[\"lists\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"REVERSE\"},\"REXEC\":{\"description\":\"The `REXEC` function executes some WarpScript code on a remote Warp 10 instance. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"signature\":\"REXEC( warpscript:STRING endpoint:STRING ): stack:ANY*\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.0.8\",\"OPB64name\":\"REXEC\"},\"REXECZ\":{\"description\":\"The `REXECZ` function executes some WarpScript code on a remote Warp 10 instance just like [`REXEC`](/doc/REXEC) does, but compresses the WarpScript code prior to sending it. The stack left by the execution on the remote instance will be snapshotted using [`SNAPSHOT`](/doc/SNAPSHOT) and the result will be re-applied on the local stack.\\n\\nFor Warp 10™ 1.x, this function is not available if `warpscript.rexec.enable` was not set to `true` in the Warp 10 instance configuration.\\n\\nStarting with Warp 10™ 2.x, this function has been moved to the `io.warp10.script.ext.rexec.RexecWarpScriptExtension` extension.\\n\\n@param `endpoint` URL of the remote Warp 10 instance `/exec` endpoint.\\n\\n@param `warpscript` Code to execute on the remote instance.\\n\\n@param `stack` Resulting stack.\\n\\n\",\"signature\":\"REXECZ( warpscript:STRING endpoint:STRING ): stack:ANY*\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"REXECZ\"},\"RINT\":{\"description\":\"The `RINT` function consumes a numeric parameter from the top of the stack and pushes back the DOUBLE the closest to the parameter and equal to a mathematical integer.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `result` Closest floating-point value to a that is equal to a mathematical integer.\\n\\n@param `lvalue` List of Numeric values.\\n\\n@param `lresult` List of closest floating-point values to a that is equal to a mathematical integer.\\n\\n\",\"signature\":\"RINT( value:NUMBER ): result:DOUBLE\\nRINT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"RINT\"},\"RLOWESS\":{\"description\":\"The `RLOWESS` function applies an iterative smoothing program on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is done via locally weighted regression, and is robust to outliers.\\n\\n> ### REFERENCE\\n>\\n> **Cleveland, W. S.** (1979) Robust locally weighted regression and smoothing scatterplots. J. American Statistical Association 74, 829–836.\\n> **Cleveland, W. S.** (1981) LOWESS: A program for smoothing scatterplots by robust locally weighted regression. The American Statistician 35, 54.\\n\\n@param `p` The degree for the polynomial fit of the regression\\n\\n@param `d` The delta radius (in time units) whithin which the local regression is computed only once (other points are interpolated). For very large datasets, it can be wise to set `d` > 0 to speed up the computations.\\n\\n@param `r` The number of robustifying iterations. The higher the value of `r`, the better the program is robust to outliers.\\n\\n@param `q` The bandwidth of the local regression. To obtain a good smoothing, it is advised to choose an odd number of at least 5.\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"signature\":\"RLOWESS( gts:GTS q:LONG r:LONG d:LONG p:LONG ): result:GTS\\nRLOWESS( gtsList:LIST<GTS> q:LONG r:LONG d:LONG p:LONG ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RLOWESS\"},\"ROLL\":{\"description\":\"`ROLL` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element at level *N* to the top of the stack and moving the other elements up one level.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"signature\":\"ROLL( eltN:ANY elt2:ANY elt1:ANY N:LONG ): elt2:ANY elt1:ANY eltN:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLL\"},\"ROLLD\":{\"description\":\"`ROLLD` consumes a number *N* off the stack then cycles through that number of elements on the stack, moving the element on top of the stack to level *N* and moving the other *N-1* elements down the stack.\\n\\n@param `N` The number of elements to cycle through\\n\\n@param `elt1` The first element to move\\n\\n@param `elt2` The second element to move\\n\\n@param `eltN` The Nth element to move\\n\\n\",\"signature\":\"ROLLD( eltN:ANY elt2:ANY elt1:ANY N:LONG ): elt1:ANY eltN:ANY elt2:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROLLD\"},\"ROT\":{\"description\":\"`ROT` cycles through the 3 topmost elements of the stack by moving the element at level 3 to the top of the stack and pushing the other 2 elements up the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n@param `level3` The element at the third level of the stack prior to the function execution\\n\\n\",\"signature\":\"ROT( level3:ANY level2:ANY top:ANY ): level2:ANY top:ANY level3:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROT\"},\"ROTATIONQ\":{\"description\":\"The `ROTATIONQ` function consumes on the stack 4 doubles representing a rotation vector and pushes back [quaternion](https://en.wikipedia.org/wiki/Quaternion) representation into a long.\\n\\n@param `quaternion` The quaternion representation\\n\\n@param `angle` The angle of the vector\\n\\n@param `x` The X coordinate of the vector\\n\\n@param `y` The Y coordinate of the vector\\n\\n@param `z` The Z coordinate of the vector\\n\\n\",\"signature\":\"ROTATIONQ( x:DOUBLE y:DOUBLE z:DOUBLE angle:DOUBLE ): quaternion:QUATERNION\",\"tags\":[\"quaternions\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROTATIONQ\"},\"ROUND\":{\"description\":\"The `ROUND` function consumes a numeric parameter from the top of the stack and pushes back the long number the closest to the parameter.\\n\\n@param `input` Input to round.\\n\\n@param `output` Input rounded to the nearest Long.\\n\\n\",\"signature\":\"ROUND( input:NUMBER ): output:LONG\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ROUND\"},\"RSADECRYPT\":{\"description\":\"Decrypts content encrypted with an RSA key.\\n\\n@param `key` RSA key to use for decryption (a public key if content was encrypted with a private key, a private key otherwise).\\n\\n@param `cipher` Encrypted data.\\n\\n@param `data` Cleartext data.\\n\\n\",\"signature\":\"RSADECRYPT( cipher:BYTES key:KEY ): data:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSADECRYPT\"},\"RSAENCRYPT\":{\"description\":\"Encrypts a byte array using an RSA key (either public or private).\\n\\n@param `key` Instance of the RSA private or public key to use for encryption.\\n\\n@param `data` Data to encrypt.\\n\\n@param `encrypted` Ciphered version of `data`.\\n\\n\",\"signature\":\"RSAENCRYPT( data:BYTES key:KEY ): encrypted:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAENCRYPT\"},\"RSAGEN\":{\"description\":\"Generates an RSA public key pair.\\n\\n@param `keylen` Key length in bits.\\n\\n@param `publicExponent` RSA public exponent, typically 65537.\\n\\n@param `pubkeyparams` Parameters of the generated RSA public key. Can be converted to a public key using [`RSAPUBLIC`](/doc/RSAPUBLIC).\\n\\n@param `privkeyparams` Parameters of the generated RSA privsate key. Can be converted to a private key using [`RSAPRIVATE`](/doc/RSAPRIVATE)\\n\\n\",\"signature\":\"RSAGEN( publicExponent:LONG keylen:LONG ): privkeyparams:MAP pubkeyparams:MAP\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAGEN\"},\"RSAPRIVATE\":{\"description\":\"Creates an RSA private key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `privkeyparams` Map of private key parameters.\\n\\n@param `privkey` RSA private key instance.\\n\\n\",\"signature\":\"RSAPRIVATE( privkeyparams:MAP ): privkey:KEY\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPRIVATE\"},\"RSAPUBLIC\":{\"description\":\"Creates an RSA public key from a map of key parameters such as the one generated by [`RSAGEN`](/doc/RSAGEN).\\n\\n@param `pubkeyparams` Map of public key parameters.\\n\\n@param `pubkey` RSA public key instance.\\n\\n\",\"signature\":\"RSAPUBLIC( pubkeyparams:MAP ): pubkey:KEY\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAPUBLIC\"},\"RSASIGN\":{\"description\":\"Signs a byte array with an RSA private key.\\n\\n@param `privkey` RSA private key to use for signing.\\n\\n@param `alg` Name of algorithm to use for computing the data fingerprint. Supported algorithms are those provided by [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `data` Data to sign.\\n\\n@param `signature` Computed signature.\\n\\n\",\"signature\":\"RSASIGN( data:BYTES alg:STRING privkey:KEY ): signature:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSASIGN\"},\"RSAVERIFY\":{\"description\":\"The `RSAVERIFY` function verify a signature generated with [RSA](https://en.wikipedia.org/wiki/RSA_(cryptosystem)) cryptosystem and a hash algorithm.\\n\\nAlgorithms are those supported by [BouncyCastle](http://stackoverflow.com/questions/8778531/bouncycastle-does-not-find-algorithms-that-it-provides).\\n\\n@param `pubkey` RSA public key to use for verifying the signature.\\n\\n@param `alg` Algorithm used for generating the signature. See [BouncyCastle](https://people.eecs.berkeley.edu/~jonah/bc/org/bouncycastle/jce/provider/JDKDigestSignature.html).\\n\\n@param `signature` Signature to verify.\\n\\n@param `content` Signed content.\\n\\n@param `verified` Status of the signature verification.\\n\\n\",\"signature\":\"RSAVERIFY( content:BYTES signature:BYTES alg:STRING pubkey:KEY ): verified:BOOLEAN\",\"tags\":[\"crypto\"],\"since\":\"1.0.11\",\"OPB64name\":\"RSAVERIFY\"},\"RSORT\":{\"description\":\"Sort Geo Time Series™ values (and associated locations/elevations) by reverse order of their ticks (i.e. most recent ticks first).\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"signature\":\"RSORT( gts:GTS ): result:GTS\\nRSORT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RSORT\"},\"RTFM\":{\"description\":\"The `RTFM` function pushes onto the stack the URL of the Warp 10 documentation, so whenever you are lost you can rapidly retrieve the URL you need to get back on track!\\n\\n@param `url` URL of the Warp 10 documentation.\\n\\n\",\"signature\":\"RTFM(): url:STRING\",\"tags\":[\"misc\",\"help\"],\"since\":\"1.0.7\",\"OPB64name\":\"RTFM\"},\"RUN\":{\"description\":\"The `RUN` function attempts to execute the macro whose name is on top of the stack. It is equivalent to `@macro` if called with `macro` on top of the stack.\\n\\n@param `macroName` Name of macro to execute, without a leading '@'\\n\\n@param `macroRegister` Register number in which the macro is stored, without a leading '@'\\n\\n\",\"signature\":\"RUN( macroName:STRING ): \\nRUN( macroRegister:LONG ): \",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"RUN\"},\"RUNNERNONCE\":{\"description\":\"The `RUNNERNONCE` function decrypts the content of a runner *nonce* as generated when a script is executed by a Warp 10 runner instance.\\n\\nWhen a script is executed by a runner instance, the following symbols are defined when the script is invoked:\\n\\n| Symbol | Description |\\n| --- | --- |\\n| `runner.periodicity` | Periodicity at which the script is supposed to run, in ms. |\\n| `runner.path` | Path of the script. |\\n| `runner.scheduledat` | Time at which the current execution was scheduled, in ms since the [UNIX Epoch](). |\\n| `runner.nonce` | Encrypted time of execution, in time units since the [UNIX Epoch](). |\\n\\nNote that if the runner pre-shared key is not configured via `runner.psk`, the `RUNNERNONCE` function will push `NULL` onto the stack. Note that in this case, the `runner.nonce` symbol will not be defined.\\n\\n@param `nonce` Runner *nonce* as stored in `runner.nonce`.\\n\\n@param `time` Time retrieved from the *nonce*.\\n\\n\",\"signature\":\"RUNNERNONCE( nonce:STRING ): time:LONG\",\"tags\":[\"stack\"],\"since\":\"1.2.7\",\"OPB64name\":\"RUNNERNONCE\"},\"RUNR\":{\"description\":\"Run the macro currently contained in the designated register.\\n\\nThe `RUNR` function is really a family of functions named `RUNRx` where `x` is a register number. The default registers supported by Warp 10™ are numbered 0 to 255.\\n\\n\",\"signature\":\"RUNR(): \",\"tags\":[\"maps\"],\"since\":\"2.7.0\",\"OPB64name\":\"RUNR\"},\"RVALUESORT\":{\"description\":\"Sort Geo Time Series™ values (and associated locations/elevations) by by reverse order of their values.\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `result` A sorted Geo Time Series™\\n\\n@param `resultList` A list of sorted Geo Time Series™\\n\\n\",\"signature\":\"RVALUESORT( gts:GTS ): result:GTS\\nRVALUESORT( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"RVALUESORT\"},\"SAVE\":{\"description\":\"The `SAVE` function pushes onto the stack a *context* object which contains all the symbols currently defined in the current stack. This context can be passed as a parameter to the [`RESTORE`](doc/RESTORE) function to later reset the symbol table to the state store in the context. Any symbol created after the context was saved and before it is restored will be discarded when `RESTORE` is called.\\n\\n@param `context` Stack context, suitable as a parameter to [`RESTORE`](doc/RESTORE).\\n\\n\",\"signature\":\"SAVE(): context:CONTEXT\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SAVE\"},\"SCALB\":{\"description\":\"The `SCALB` function consumes a scale factor *scaleFactor* and a numeric parameter *d* and pushes back <math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><mi>d</mi><mo>&#xD7;</mo><msup><mn>2</mn><mi>scaleFactor</mi></msup></math>. The scale factor must fit into an INT.\\n\\n@param `scaleFactor` The scaling factor, must fit into an INT\\n\\n@param `d` The value to be scaled\\n\\n@param `result` The scaled value\\n\\n\",\"signature\":\"SCALB( d:NUMBER scaleFactor:LONG ): result:TYPE\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SCALB\"},\"SECTION\":{\"description\":\"The `SECTION` function modifies the value of the *section* attribute of the stack. This value appears in the error messages and can therefore help you debug your WarpScript code. Typically, the `SECTION` function is used to separate your code in different logical units.\\n\\n@param `section` Name to assign to the *section* attribute.\\n\\n\",\"signature\":\"SECTION( section:STRING ): \",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.2.7\",\"OPB64name\":\"SECTION\"},\"SECURE\":{\"description\":\"The `SECURE` function encrypts a STRING representing a WarpScript code fragment using the platform's secure script cryptographic key and the current secret set via [`SECUREKEY`](doc/SECUREKEY).\\n\\nSecure scripts can also be created using the `<S .... S>` syntax.\\n\\n@param `script` Cleartext version of the WarpScript fragment to encrypt.\\n\\n@param `encrypted` Encrypted secure script.\\n\\n\",\"signature\":\"SECURE( script:STRING ): encrypted:STRING\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.2.11\",\"OPB64name\":\"SECURE\"},\"SECUREKEY\":{\"description\":\"The `SECUREKEY` function sets the secret which will be used to decrypt further secure scripts.\\n\\nSecure scripts are WarpScript fragments which are encrypted with a cryptographic key specific to the platform they were created on. They can be executed on a platform configured with the same cryptographic key.\\n\\n@param `key` Secret to use for unlocking the cleartext versions of future secure scripts.\\n\\n\",\"signature\":\"SECUREKEY( key:STRING ): \",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SECUREKEY\"},\"SENSISION.DUMP\":{\"description\":\"The `SENSISION.DUMP` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) metrics in the JVM.\\n\\nThe STRING produced by `SENSISION.DUMP` can be parsed using `PARSE`.\\n\\n@param `valueTimestamp` Flag indicating whether to dump the Geo Time Series™ with the timestamp of last updates or the timestamp at which the value is read.\\n\\n@param `dump` Latest values of all Geo Time Series™ known to Sensision in Geo Time Series™ output input.\\n\\n\",\"signature\":\"SENSISION.DUMP( valueTimestamp:BOOLEAN ): dump:STRING\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMP\"},\"SENSISION.DUMPEVENTS\":{\"description\":\"The `SENSISION.DUMPEVENTS` function produces a STRING representing the current values of all [Sensision](https://github.com/senx/sensision) events in the events history.\\n\\nThe STRING produced by `SENSISION.DUMPEVENTS` can be parsed using `PARSE`.\\n\\nNote that if the system property `sensision.events.history` is not set to a value greater than 0, the function will always return an empty STRING.\\n\\nThe Sensision event history is a circular buffer.\\n\\n@param `dump` Latest values of all events in the Sensision event history.\\n\\n\",\"signature\":\"SENSISION.DUMPEVENTS(): dump:STRING\",\"tags\":[\"extensions\"],\"since\":\"2.1.0\",\"OPB64name\":\"SENSISION.DUMPEVENTS\"},\"SENSISION.EVENT\":{\"description\":\"The `SENSISION.EVENT` function creates a [Sensision](https://github.com/senx/sensision) event.\\n\\n@param `class` Name of the class of the Sensision event to emit.\\n\\n@param `labels` Map of label names to values, both STRINGs of the Sensision event.\\n\\n@param `value` Value associated with the event.\\n\\n@param `ts` Optional timestamp for the event (in Sensision time units), if omitted, the current timestamp will be used.\\n\\n\",\"signature\":\"SENSISION.EVENT( [ value:LONG labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:STRING labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:BOOLEAN labels:MAP class:STRING ] ): \\nSENSISION.EVENT( [ value:LONG labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:DOUBLE labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:STRING labels:MAP class:STRING ts:LONG ] ): \\nSENSISION.EVENT( [ value:BOOLEAN labels:MAP class:STRING ts:LONG ] ): \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.EVENT\"},\"SENSISION.GET\":{\"description\":\"The `SENSISION.GET` function reads the current value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to read.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to read.\\n\\n@param `selector` Geo Time Series™ selector (`class{labels}`) of the Sensision metric to read.\\n\\n@param `gts` A Geo Time Series™ containing the current value of the Sensision metric. If the metric does not exist, the resulting GTS will be empty.\\n\\n\",\"signature\":\"SENSISION.GET( selector:STRING ): gts:GTS\\nSENSISION.GET( class:STRING labels:MAP ): gts:GTS\",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.GET\"},\"SENSISION.SET\":{\"description\":\"The `SENSISION.SET` function sets a value for a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `value` Value to assign to the Sensision metric.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"signature\":\"SENSISION.SET( [ value:LONG labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:STRING labels:MAP class:STRING ] ): \\nSENSISION.SET( [ value:BOOLEAN labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:LONG labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:STRING labels:MAP class:STRING ] ): \\nSENSISION.SET( [ ttl:LONG value:BOOLEAN labels:MAP class:STRING ] ): \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.SET\"},\"SENSISION.UPDATE\":{\"description\":\"The `SENSISION.UPDATE` function updates the numerical value of a [Sensision](https://github.com/senx/sensision) metric.\\n\\n@param `class` Name of the class of the Sensision metric to set.\\n\\n@param `labels` Map of label names to values, both STRINGs for the Sensision metric to set.\\n\\n@param `delta` Delta to add to the current value of the Sensision metric. If the metric does not exist it will be created with this value.\\n\\n@param `ttl` Optional Time To Live of the metric, if the metric is not updated/set within that number of milliseconds, Sensision will discard it.\\n\\n\",\"signature\":\"SENSISION.UPDATE( [ delta:LONG labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ delta:DOUBLE labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ ttl:LONG delta:LONG labels:MAP class:STRING ] ): \\nSENSISION.UPDATE( [ ttl:LONG delta:DOUBLE labels:MAP class:STRING ] ): \",\"tags\":[\"extensions\"],\"since\":\"1.1.0\",\"OPB64name\":\"SENSISION.UPDATE\"},\"SET\":{\"description\":\"The `SET` function replaces item at specified index in a list.\\nIf the index is greater than the size of the list, it will raise an error.\\n\\nWhen used on a **BYTE ARRAY**, SET replaces the byte by the byte value. The byte value, signed or not, must be in the range of [-128,255].\\n\\nSince 2.1, the index can be negative. In this case the effective index is index + size of the **LIST** or **BYTE ARRAY**.\\n\\nSince 2.1, SET can set an element in a nested list. In this case, the index is a list.\\n\\n@param `index` The index in the list, 0 for the first item.\\n\\n@param `inputlist` The input list to modified.\\n\\n@param `outputlist` The input list modified,  this is not a new list object.\\n\\n@param `item` The item to update in the inputlist at index, could be any type.\\n\\n@param `array` Byte array to which write a byte.\\n\\n@param `bytevalue` The value of the byte, signed or unsigned (from -128 to 255).\\n\\n@param `outputarray` The input byte array modified, this is not a new byte array.\\n\\n\",\"signature\":\"SET( inputlist:LIST item:ANY index:LONG ): outputlist:LIST\\nSET( inputlist:LIST item:ANY index:LIST ): outputlist:LIST\\nSET( array:BYTES bytevalue:LONG index:LONG ): outputarray:LIST\",\"tags\":[\"lists\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SET\"},\"SET->\":{\"description\":\"The `SET->` function converts the set on top of the stack into a **LIST**.\\n\\n@param `input` Input set.\\n\\n@param `output` A list containing input elements.\\n\\n\",\"signature\":\"SET->( input:SET ): output:LIST\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"JoKJAIs\"},\"SETATTRIBUTES\":{\"description\":\"Modifies the attributes of a Geo Time Series™, an encoder or a list thereof. The `SETATTRIBUTES` function expects a parameter MAP whose entries are attributes to set or alter.\\n\\nIf the parameter MAP has an entry with a NULL key, the `SETATTRIBUTES` function will use the rest of the MAP as the actual attributes to set for the GTS. If no NULL key exist, then the other entries of the MAP will alter the existing attributes.\\n\\nAn entry with an empty STRING value will have the effect of removing the attribute from the attributes of the GTSs or encoders.   \\n\\n@param `attributes` Parameter map of attributes names to values.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lencoder` List of Encoders.\\n\\n@param `encoder` Encoder to relabel\\n\\n\",\"signature\":\"SETATTRIBUTES( gts:GTS attributes:MAP ): gts:GTS\\nSETATTRIBUTES( lgts:LIST<GTS> attributes:MAP ): lgts:LIST<GTS>\\nSETATTRIBUTES( encoder:GTSENCODER attributes:MAP ): encoder:GTSENCODER\\nSETATTRIBUTES( lencoder:LIST<GTS> attributes:MAP ): lencoder:LIST<GTS>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETATTRIBUTES\"},\"SETMACROCONFIG\":{\"description\":\"The `SETMACROCONFIG` function allows you to set or modify the value of a configuration key accessible via the [`MACROCONFIG`](/doc/MACROCONFIG) or [`MACROCONFIGDEFAULT`](/doc/MACROCONFIGDEFAULT) functions or via the runner script variable expansion.\\n\\nThis function can only be used if the `warpscript.macroconfig.secret` is set in the Warp 10™ configuration.\\n\\nThe configuration keys which can be set using `SETMACROCONFIG` must have the format `key@path/tomacro` or `key@/path/to/runner/script`.\\n\\nSetting the value of a configuration key to `NULL` has the effect of removing the configuration key altogether.\\n\\n@param `key` Configuration key to set.\\n\\n@param `secret` Macro config secret.\\n\\n@param `value` String value to set for the key or `NULL`.\\n\\n\",\"signature\":\"SETMACROCONFIG( value:STRING key:STRING secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.1.0\",\"OPB64name\":\"SETMACROCONFIG\"},\"SETVALUE\":{\"description\":\"The `SETVALUE` function adds a value to a GTS or override an existing value. If the tick already exists, this function will overwrite the first one it encounters in the GTS. If the tick does not exist, it is appended. \\nThe [`ADDVALUE`](/doc/ADDVALUE) function adds a value to a GTS but do not override an existing value.\\n\\nThe `SETVALUE` function only works on GTS, not on lists of GTS like those generated by the use of [`FETCH`](/doc/FETCH).\\nIf you want to use `SETVALUE` after a [`FETCH`](/doc/FETCH), you will need to extract the GTS from the list, using [`GET`](/doc/GET) for instance.\\n\\n@param `value` Value of the tick\\n\\n@param `gts` Geo Time Serie\\n\\n@param `tick` Timestamp\\n\\n@param `latitude` Latitude or NaN\\n\\n@param `longitude` Longitude or NaN\\n\\n@param `elevation` Elevation or NaN\\n\\n@param `result` modified Geo Time Series™\\n\\n\",\"signature\":\"SETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:STRING ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:BOOLEAN ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:DOUBLE ): result:GTS\\nSETVALUE( gts:GTS tick:LONG latitude:DOUBLE longitude:DOUBLE elevation:LONG value:LONG ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SETVALUE\"},\"SHA1\":{\"description\":\"The `SHA1` function digests a byte array on the stack with the cryptographic hash function [SHA-1](https://en.wikipedia.org/wiki/SHA-1).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"SHA1( input:BYTES ): result:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1\"},\"SHA1HMAC\":{\"description\":\"The `SHA1HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-1](https://en.wikipedia.org/wiki/SHA-1) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"signature\":\"SHA1HMAC( message:BYTES secret:BYTES ): result:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA1HMAC\"},\"SHA256\":{\"description\":\"The `SHA256` function digests a byte array on the stack with the cryptographic hash function [SHA-256](https://en.wikipedia.org/wiki/SHA-2).\\n\\n@param `input` Byte array\\n\\n@param `result` Byte array\\n\\n\",\"signature\":\"SHA256( input:BYTES ): result:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256\"},\"SHA256HMAC\":{\"description\":\"The `SHA256HMAC` function computes a Hash-based Message Authentication Code [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code) \\nthat uses a key in conjunction with a [SHA-256](https://en.wikipedia.org/wiki/SHA-2) cryptographic hash function.\\n\\n@param `secret` Secret key into byte array\\n\\n@param `message` Message string into byte array\\n\\n@param `result` MAC (message authentication code) byte array\\n\\n\",\"signature\":\"SHA256HMAC( message:BYTES secret:BYTES ): result:BYTES\",\"tags\":[\"crypto\"],\"since\":\"1.2.0\",\"OPB64name\":\"SHA256HMAC\"},\"SHAPE\":{\"description\":\"Return the shape of an input list if it could be a tensor (or multidimensional array), or raise an Exception.\\n\\n@param `fast` If true, it does not check if the sizes of the nested lists are coherent and it returns a shape based on the first nested lists at each level. Default to false.\\n\\n@param `list` The input list.\\n\\n@param `shape` The shape of the input list.\\n\\n\",\"signature\":\"SHAPE( list:LIST ): shape:LIST\\nSHAPE( { list:LIST fast:BOOLEAN  } ): shape:LIST\",\"tags\":[\"lists\",\"tensors\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHAPE\"},\"SHMLOAD\":{\"description\":\"The `SHMLOAD` function loads data previously stored by [`SHMSTORE`](/doc/SHMSTORE) in shared memory, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the requested shared symbol is not known or if the calling script does not currently hold the mutex associated with the symbol.\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to retrieve.\\n\\n@param `object` Object currently stored under `symbol`.\\n\\n\",\"signature\":\"SHMLOAD( symbol:STRING ): object:ANY\",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMLOAD\"},\"SHMSTORE\":{\"description\":\"The `SHMSTORE` function stores an object in a named shared memory location, *i.e.* in a memory location independent of a given execution context.\\n\\nThe call will fail if the calling script is not currently holding a mutex (in a call to [`MUTEX`](/doc/MUTEX)). The call will have no effect if the named memory location was already set by a previous call to `SHMSTORE`.\\n\\nIn order to overwrite a shared memory location, its content must first be cleared by storing [`NULL`](/doc/NULL).\\n\\n\\nIf the calling script currently holds a mutex, this mutex will be associated with the shared memory location, the same mutex will have to be held when retrieving the content of the memory location via [`SHMLOAD`](/doc/SHMLOAD).\\n\\nThe `shm.ttl` configuration, in millisecond, allow you to tune the retention time in memory. Default value is one hour. Tip: you can call [`SHMLOAD`](/doc/SHMLOAD) in a runner with a period shorter than `shm.ttl` if you want to keep value in memory indefinitely.\\n\\n\\n@param `symbol` Name of shared symbol to store.\\n\\n@param `object` Object to store under `symbol` or `NULL` to clear its content.\\n\\n\",\"signature\":\"SHMSTORE( object:ANY symbol:STRING ): \",\"tags\":[\"extensions\",\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"SHMSTORE\"},\"SHOW\":{\"description\":\"The `SHOW` function makes visible some levels of the stack which were previously hidden by a call to [`HIDE`](/doc/HIDE).\\n\\nThe levels made visible are the ones closest to the top of the stack. Depending on the `levels` parameter to the call to `SHOW`, the revealed levels could be the whole stack (`levels` == 0), a maximum number of levels (`levels` >= 0) or a number of levels such that there are at most a certain number ((*abs(`levels`)*) with `levels` < 0) of visible levels after the call.\\n\\nWhen called with `NULL` as parameter, `SHOW` wil reveal all levels currently hidden.\\n\\n@param `levels` Number of levels to reveal, or `NULL` to reveal them all.\\n\\n\",\"signature\":\"SHOW( levels:LONG ): \",\"tags\":[\"stack\"],\"since\":\"2.7.1\",\"OPB64name\":\"SHOW\"},\"SHRINK\":{\"description\":\"Shrink the number of values of a Geo Time Series™ to `size`. The oldest values are kept if `size` is non negative. The earliest ones are kept in the other case.\\n\\nThis function has the side effect of sorting the Geo Time Series™. If the Geo Time Series™ has fewer than `size` values the function raises an error.\\n\\n@param `size` Size used to shrink the Geo Time Series™\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `result` A shrinked Geo Time Series™\\n\\n\",\"signature\":\"SHRINK( gts:GTS size:LONG ): result:GTS\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SHRINK\"},\"SHUFFLE\":{\"description\":\"The `SHUFFLE` function shuffles a list.\\n\\nIf it is not a list, it raises an error. The original list is modified.\\n\\n@param `input` The reference of the list to shuffle\\n\\n@param `shuffled` The original list shuffled, this is not a new list object\\n\\n\",\"signature\":\"SHUFFLE( input:LIST ): shuffled:LIST\",\"tags\":[\"lists\"],\"since\":\"2.1.0\",\"OPB64name\":\"SHUFFLE\"},\"SIGNUM\":{\"description\":\"The `SIGNUM` function consumes a numeric parameter from the top of the stack and pushes back its signum.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Signum, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n@param `lvalue` List of numeric value\\n\\n@param `lresult` List of signum for each given value, i.e. it returns -1 if the parameter is negative, 1 if positive and 0 if it is 0.\\n\\n\",\"signature\":\"SIGNUM( value:NUMBER ): result:DOUBLE\\nSIGNUM( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"operators\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIGNUM\"},\"SIN\":{\"description\":\"The `SIN` function consumes a floating point number from the top of the stack and pushes back its sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Sine of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of sine of the given values.\\n\\n\",\"signature\":\"SIN( value:NUMBER ): result:DOUBLE\\nSIN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIN\"},\"SINGLEEXPONENTIALSMOOTHING\":{\"description\":\"The `SINGLEEXPONENTIALSMOOTHING` function takes a Geo Time Series™ and smooths it with the\\n[additive Simple Exponential Smoothing](https://www.otexts.org/fpp/7/1) formula.\\n\\nIt consumes two parameters from the top of the stack:\\n * A level smoothing factor alpha (a numeric parameter between 0 < alpha < 1)\\n * The GTS to smooth\\n\\n The resulting smoothed **GTS** is pushed onto the stack.\\n\\n@param `alpha` The level smoothing factor, it should be strictly between 0.0 and 1.0, the lower the smoother\\n\\n@param `gts` The Geo Time Series™ to smooth\\n\\n@param `result` The smoothed Geo Time Series™\\n\\n\",\"signature\":\"SINGLEEXPONENTIALSMOOTHING( gts:GTS alpha:DOUBLE ): result:GTS\",\"tags\":[\"gts\",\"statistics\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINGLEEXPONENTIALSMOOTHING\"},\"SINH\":{\"description\":\"The `SINH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic sine.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic sine of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic sine of the given values.\\n\\n\",\"signature\":\"SINH( value:NUMBER ): result:DOUBLE\\nSINH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"SINH\"},\"SIZE\":{\"description\":\"Returns the size of the input parameter.\\n\\nThe `SIZE` function computes the size of a LIST, MAP, GTS or ENCODER (number of values), STRING, byte array of GEOSHAPE (number of cells).\\n\\n@param `input` The input parameter\\n\\n@param `size` The size of the input parameter\\n\\n\",\"signature\":\"SIZE( input:LIST ): size:LONG\\nSIZE( input:MAP ): size:LONG\\nSIZE( input:GTS ): size:LONG\\nSIZE( input:STRING ): size:LONG\\nSIZE( input:BYTES ): size:LONG\\nSIZE( input:GEOSHAPE ): size:LONG\\nSIZE( input:GTSENCODER ): size:LONG\\nSIZE( input:SET ): size:LONG\",\"tags\":[\"strings\",\"lists\",\"maps\",\"gts\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"SIZE\"},\"SKEWNESS\":{\"description\":\"The `SKEWNESS` function computes the [skewness](https://en.wikipedia.org/wiki/Skewness) of a Geo Time Series™.\\n\\n@param `bessel` Boolean indicating whether or not to apply [Bessel's correction](https://en.wikipedia.org/wiki/Bessel's_correction) when computing the skewness.\\n\\n@param `gts` Non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `lgts` List of non empty numerical Geo Time Series™ for which to compute the skewness.\\n\\n@param `skewness` Computed skewness of the Geo Time Series™ instance.\\n\\n@param `lskewness` List of computed skewness of the Geo Time Series™ instances.\\n\\n\",\"signature\":\"SKEWNESS( gts:GTS bessel:BOOLEAN ): skewness:DOUBLE\\nSKEWNESS( lgts:LIST<GTS> bessel:BOOLEAN ): lskewness:LIST<DOUBLE>\",\"tags\":[\"statistics\",\"gts\"],\"since\":\"1.2.13\",\"OPB64name\":\"SKEWNESS\"},\"SMARTPARSE\":{\"description\":\"The `SMARTPARSE` function parses STRING values, either from a single STRING parameter or from STRING Geo Time Series™, and produces a number of GTS from the parsed data.\\n\\nThe parsing is done according to a [regular expression](https://en.wikipedia.org/wiki/Regular_expression) which contains [named capturing groups](https://www.regular-expressions.info/named.html) with the Java/.NET syntax, *i.e.* `(?<name>...)`.\\n\\nThe captured group is interpreted differently based on the syntax of the name.\\n\\n| Syntax | Interpretation |\\n| --- | --- |\\n| Lxxx | Captured content is used as the value of label `xxx` |\\n| TU | Captured group is interpreted as a timestamp in unit `U` from the [UNIX Epoch](https://en.wikipedia.org/wiki/Unix_time) origin. Valid values for U are `s`, `ms`, `us`, `ns` |\\n| lat | Captured group is interpreted as the latitude if another group named `lon` is also present |\\n| lon | Captured group is interpreted as the longitude if another group named `lat` is also present |\\n| elevU | Captured group is interpreted as the elevation in unit `U`, where `U` can be `m`, `cm`, `mm`, `ft`, `km`, `mi`, `nm` (Nautical Mile). The value is parsed as a DOUBLE and converted to a LONG in `mm` |\\n| VTxxx | Captured group is interpreted as a value for a GTS with class `xxx`. The type of the value is determined by the value of `T` which can be `B`(oolean) `S`(tring) `L`(ong) or `D`(ouble) |\\n\\nThis function is ideally suited for parsing log messages and producing Geo Time Series™ from their content.\\n\\n@param `regexp` Regular expression to use for parsing. See the function description for the syntax to use.\\n\\n@param `string` String to parse\\n\\n@param `results` List of Geo Time Series™ created from the parsed data.\\n\\n@param `lresults` List of list of GTS created from the parsed data.\\n\\n@param `gts` STRING valued Geo Time Series™ whose values are to be parsed.\\n\\n@param `lgts` List of STRING valued GTS whose values are to be parsed.\\n\\n\",\"signature\":\"SMARTPARSE( string:STRING regexp:STRING ): results:LIST<GTS>\\nSMARTPARSE( gts:GTS regexp:STRING ): results:LIST<GTS>\\nSMARTPARSE( lgts:LIST<GTS> regexp:STRING ): lresults:LIST<LIST<GTS>>\",\"tags\":[\"gts\",\"strings\"],\"since\":\"1.2.13\",\"OPB64name\":\"SMARTPARSE\"},\"SNAPSHOT\":{\"description\":\"The `SNAPSHOT` functions produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOT` was called.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOT( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.0.6\",\"OPB64name\":\"SNAPSHOT\"},\"SNAPSHOTALL\":{\"description\":\"The `SNAPSHOTALL` functions acts similarly as [`SNAPSHOT`](/doc/SNAPSHOT) and produces a STRING which contains WarpScript code to regenerate the stack in the exact same state as when `SNAPSHOTALL` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTALL( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALL\"},\"SNAPSHOTALLTOMARK\":{\"description\":\"The `SNAPSHOTALLTOMARK` functions acts similarly as [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) and produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTALLTOMARK` was called. It differs by the fact that it also adds code to repopulate the symbol table.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTALLTOMARK( mark:MARK stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTALLTOMARK\"},\"SNAPSHOTCOPY\":{\"description\":\"The `SNAPSHOTCOPY` function behaves like [`SNAPSHOT`](/doc/SNAPSHOT) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPY` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTCOPY( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPY\"},\"SNAPSHOTCOPYALL\":{\"description\":\"The `SNAPSHOTCOPYALL` function behaves like [`SNAPSHOTALL`](/doc/SNAPSHOTALL) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALL` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTCOPYALL( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALL\"},\"SNAPSHOTCOPYALLTOMARK\":{\"description\":\"The `SNAPSHOTCOPYALLTOMARK` function behaves like [`SNAPSHOTALLTOMARK`](/doc/SNAPSHOTALLTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack and its symbols as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYALLTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTCOPYALLTOMARK( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYALLTOMARK\"},\"SNAPSHOTCOPYN\":{\"description\":\"Performs a [`SNAPSHOTCOPY`](/doc/SNAPSHOTCOPY) on the top *N* elements of the stack.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTCOPYN( stack:ANY* n:LONG ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTCOPYN\"},\"SNAPSHOTCOPYTOMARK\":{\"description\":\"The `SNAPSHOTCOPYTOMARK` function behaves like [`SNAPSHOTTOMARK`](/doc/SNAPSHOTTOMARK) but does not consume the elements of the stack, instead it produces WarpScript code which will regenerate the stack as it was before the call and pushes this code on top of the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTCOPYTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTCOPYTOMARK( stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.5\",\"OPB64name\":\"SNAPSHOTCOPYTOMARK\"},\"SNAPSHOTN\":{\"description\":\"Produces a WarpScript code fragment which will regenerate the *N* top levels of the stack. The content of those levels is consumed off the stack.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOT` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\n@param `n` The number of stack levels to snapshot\\n\\n@param `stack` The content of the stack before the call\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTN( stack:ANY* n:LONG ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.2.13\",\"OPB64name\":\"SNAPSHOTN\"},\"SNAPSHOTTOMARK\":{\"description\":\"The `SNAPSHOTTOMARK` functions produces a STRING which contains WarpScript code to regenerate the stack up to the first [`MARK`](/doc/MARK) in the exact same state as when `SNAPSHOTTOMARK` was called.\\n\\nThe [`MARK`](/doc/MARK) is consumed off the stack but will not be pushed back by the produced WarpScript code.\\n\\nNote that some types of objects created by third party functions may not be serializable, `SNAPSHOTTOMARK` will emit a STRING of the form `UNSUPPORTED: class xxx` when such a type is encountered.\\n\\nThe elements of the stack are consumed up to the mark.\\n\\n@param `stack` The stack elements below [`MARK`](/doc/MARK) which will be regenerated by the produced WarpScript code\\n\\n@param `mark` [`MARK`](/doc/MARK) which indicates the end of the stack levels to consider\\n\\n@param `snapshot` The WarpScript code to regenerate the stack\\n\\n\",\"signature\":\"SNAPSHOTTOMARK( mark:MARK stack:ANY* ): snapshot:STRING\",\"tags\":[\"stack\"],\"since\":\"1.0.7\",\"OPB64name\":\"SNAPSHOTTOMARK\"},\"SORT\":{\"description\":\"Sorts a Geo Time Series™ or each GTS of a list of GTS in ascending tick order.\\n\\n@param `gts` Single Geo Time Series™ instance to sort.\\n\\n@param `sgts` Sorted Geo Time Series™, this is the same instance as `gts`.\\n\\n@param `lgts` List of Geo Time Series™ instances to sort.\\n\\n@param `slist` List of sorted Geo Time Series™. Each instance is the same as the input one.\\n\\n\",\"signature\":\"SORT( gts:GTS ): sgts:GTS\\nSORT( lgts:LIST<GTS> ): slist:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"SORT\"},\"SORTBY\":{\"description\":\"The `SORTBY` function sorts a **LIST** or a **MAP** according to a value returned by a macro. The macro must return a value of the same type (LONG, DOUBLE or STRING) for each element.\\n\\nOnly **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nBefore release `1.2.22`, the `SORTBY` function could only sort lists of Geo Time Series™.\\n\\nBefore release `2.7.0`, the `SORTBY` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for sorting, consumes a list element off the stack and produces a LONG, DOUBLE or STRING value.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"signature\":\"SORTBY( list:LIST macro:MACRO ): lsorted:LIST\\nSORTBY( map:MAP macro:MACRO ): msorted:MAP\",\"tags\":[\"lists\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"SORTBY\"},\"SORTWITH\":{\"description\":\"The `SORTWITH` function sorts a **LIST** or a **MAP** according to a value returned by a comparison macro. Only **MAP**s of type [LinkedHashMap](https://docs.oracle.com/javase/8/docs/api/java/util/LinkedHashMap.html), which are the most commons in WarpScript, can be sorted.\\n\\nIn used a on **LIST**, the comparison macro is given 2 elements of the **LIST** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest element in the stack is respectively strictly less than, equal to or strictly more than than the element on the stack.\\n\\nIn used a on **MAP**, the comparison macro is given 2 entries (key deepest, value shallowest) of the **MAP** and return a **LONG** which can be represented on 32 bits. The returned value must be negative, zero or positive if the deepest entry in the stack is respectively strictly less than, equal to or strictly more than than the shallowest entry on the stack.\\n\\nBefore release `2.7.0`, the `SORTWITH` function could only sort lists but not maps.\\n\\n@param `macro` Macro used for comparison, must consume two elements of the stack and produces a LONG.\\n\\n@param `list` List to sort.\\n\\n@param `map` Map to sort.\\n\\n@param `lsorted` Sorted list, same instance as `list`.\\n\\n@param `msorted` Sorted map, same instance as `map`.\\n\\n\",\"signature\":\"SORTWITH( list:LIST macro:MACRO ): lsorted:LIST\\nSORTWITH( map:MAP macro:MACRO ): msorted:MAP\",\"tags\":[\"lists\",\"gts\"],\"since\":\"2.2.0\",\"OPB64name\":\"SORTWITH\"},\"SPLIT\":{\"description\":\"The SPLIT function split a string in segments given a delimiter.\\n\\n\\nIt consumes two parameters from the top of the stack: the delimiter and the string to test matching with. The delimiter must be a string of length 1, i.e. only one character.\\n\\n\\nThe function will return a list with all the segments. If delimiter is not found, the output list contains the input string.\\n\\n@param `delimiter` One character delimiter.\\n\\n@param `s` The string to split\\n\\n@param `result` List of strings.\\n\\n\",\"signature\":\"SPLIT( s:STRING delimiter:STRING ): result:LIST<STRING>\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"SPLIT\"},\"SQRT\":{\"description\":\"The `SQRT` function consumes a numeric parameter from the top of the stack and pushes back its square root.\\n\\nFor negative numbers, SQRT returns NaN.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value\\n\\n@param `result` Square root of the given value, NaN if it is negative.\\n\\n@param `lvalue` List of numeric values\\n\\n@param `lresult` List of square root of each given value, NaN if it is negative.\\n\\n\",\"signature\":\"SQRT( value:NUMBER ): result:DOUBLE\\nSQRT( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"SQRT\"},\"SRAND\":{\"description\":\"The `SRAND` function pushes onto the stack a random DOUBLE between 0.0 (inclusive) and 1.0 (exlusive) generated by the seeded [Pseudorandom Number Generator (PRNG)](https://en.wikipedia.org/wiki/Pseudorandom_number_generator).\\n\\nThe seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThis generation is **NOT** cryptographically secure, use [RAND](/doc/RAND) if you need a secure random number.\\n\\n@param `num` Generated random number between 0 and 1.\\n\\n\",\"signature\":\"SRAND(): num:DOUBLE\",\"tags\":[\"math\"],\"since\":\"1.2.9\",\"OPB64name\":\"SRAND\"},\"SRANDPDF\":{\"description\":\"Pushes on the stack a function which emits values according to a provided value histogram.\\n\\nThe randomization is seeded. The seeded PRNG must have been initialized beforehand using [`PRNG`](/doc/PRNG).\\n\\nThe result is a function. This function does not have any arguments.\\n\\nTo use the function pushed by `SRANDPDF` onto the stack, use [`EVAL`](/doc/EVAL).\\n\\n@param `valueHistogram` the [value histogram](/doc/VALUEHISTOGRAM). The value histogram is a map whose keys are the values and the elements the cardinality at which they occur or their occurrence probability.\\n\\n@param `result` A function pushed onto the stack. This function will emits values.\\n\\n\",\"signature\":\"SRANDPDF( valueHistogram:MAP ): result:STRING\",\"tags\":[\"math\",\"statistics\"],\"since\":\"2.2.1\",\"OPB64name\":\"SRANDPDF\"},\"STACKATTRIBUTE\":{\"description\":\"Retrieves the value of a stack attribute.\\n\\n@param `name` Name of the stack attribute to retrieve.\\n\\n@param `value` Associated value or null if attribute is not set.\\n\\n\",\"signature\":\"STACKATTRIBUTE( name:STRING ): value:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STACKATTRIBUTE\"},\"STACKPSSECRET\":{\"description\":\"Modifies the secret needed for using functions such as `WSPS`, `WSSTOP` and `WSKILL`.\\n\\nThis function is only useable if a secret was configured using `stackps.secret`.\\n\\n@param `secret` Current secret for process status operations, initially the value configured via `stackps.secret`.\\n\\n@param `newsecret` New secret to set for process status operations.\\n\\n\",\"signature\":\"STACKPSSECRET( newsecret:STRING secret:STRING ): \",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"STACKPSSECRET\"},\"STACKTOLIST\":{\"description\":\"Converts the whole stack into a list and pushes this list on top of the stack. The elements are consumed off the stack in the way [`->LIST`](/doc/AItBHKCJ) does it.\\n\\n@param `stack` Content of the stack.\\n\\n@param `list` List containing the elements of the stack.\\n\\n\",\"signature\":\"STACKTOLIST( stack:ANY* ): list:LIST\",\"tags\":[\"stack\"],\"since\":\"1.0.14\",\"OPB64name\":\"STACKTOLIST\"},\"STANDARDIZE\":{\"description\":\"Standardizes a single (or a list of) numeric Geo Time Series™ (i.e. it replaces X by (X-mu)/sd).\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"signature\":\"STANDARDIZE( gts:GTS ): result:GTS\\nSTANDARDIZE( gtsList:LIST<GTS> ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STANDARDIZE\"},\"STDERR\":{\"description\":\"The `STDERR` function prints text to the standard error stream.\\n\\nThe `STDERR` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `msg` The debug text to print\\n\\n\",\"signature\":\"STDERR( msg:STRING ): \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDERR\"},\"STDOUT\":{\"description\":\"The `STDOUT` function prints text to the standard output stream.\\n\\nThe `STDOUT` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `obj` The object to print. Its `.toString()` method is used to generate the outputed String.\\n\\n\",\"signature\":\"STDOUT( obj:ANY ): \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"STDOUT\"},\"STL\":{\"description\":\"The `STL` function applies a Seasonal Trend decomposition on a Geo Time Series™ or a **LIST** of Geo Time Series™, which is based on multiple calls of [`RLOWESS`](/doc/RLOWESS).\\n\\nThese Geo Time Series™ are the seasonal part and the trend part of the input Geo Time Series™. Their classnames are suffixed with \\\"_seasonal\\\" and \\\"_trend\\\".\\n\\nThis function can only be applied to [bucketized](/doc/BUCKETIZE) Geo Time Series™ of numeric type.\\n\\nThe **MAP** parameter must have at least the field `PERIOD`. You can provide additional optional parameters:\\n\\n## Optional parameters\\n### Global\\n- `ROBUST` if TRUE, set defaults of number of inner and outer loops to 1 and 15 instead of 2 and 0. Default is FALSE\\n- `PRECISION` number of inner loops (a LONG). Default is 2 or 1\\n- `ROBUSTNESS` number of outer loops (a LONG). Default is 0 or 15\\n\\n### Seasonal extract\\n- `BANDWIDTH_S` the bandwidth (a LONG) of the local regression. Default is 7\\n- `DEGREE_S` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_S` the number of values interpolated instead of estimated. Default is BANDWIDTH_S/10\\n\\n### Low frequency filtering\\n- `BANDWIDTH_L` the bandwidth (a LONG) of the local regression. Default is nextOdd(PERIOD)\\n- `DEGREE_L` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_L` the number of values interpolated instead of estimated. Default is BANDWIDTH_L/10\\n\\n### Trend extract\\n- `BANDWIDTH_T` the bandwidth (a LONG) of the local regression. Default is nextOdd(ceiling(1.5*PERIOD/(1-(1.5/BANDWIDTH_S))))\\n- `DEGREE_T` the degree (a LONG) of the polynomial fit. Default is 1\\n- `SPEED_T` the number of values interpolated instead of estimated. Default is BANDWIDTH_T/10\\n\\n### Post seasonal smoothing\\n- `BANDWIDTH_P` the bandwidth (a LONG) of the local regression. Default is 0 (i.e. no post smoothing)\\n- `DEGREE_P` the degree (a LONG) of the polynomial fit. Default is 2\\n- `SPEED_P` the number of values interpolated instead of estimated. Default is BANDWIDTH_P/10\\n\\n### Additional fields\\n- `BANDWIDT` value of all BANDWIDTH_X fields that are not set\\n- `DEGREE` value of all DEGREE_X fields that are not set\\n- `SPEED` value of all SPEED_X fields that are not set\\n\\n> ### REFERENCE\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n\\n\\n@param `gts`  A numeric Geo Time Series™\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gtsList`  A list of numeric Geo Time Series™\\n\\n@param `result` A standardized Geo Time Series™\\n\\n@param `resultList` A list of standardized Geo Time Series™\\n\\n\",\"signature\":\"STL( gts:GTS { p:LONG  } ): result:GTS\\nSTL( gtsList:LIST<GTS> { p:LONG  } ): resultList:LIST<GTS>\",\"tags\":[\"gts\",\"bucketize\"],\"since\":\"1.0.0\",\"OPB64name\":\"STL\"},\"STLESDTEST\":{\"description\":\"The 'STLESDTEST' function detects outliers in a Geo Time Series™ (or a **LIST** of Geo Time Series™) which has a seasonal part.\\n\\nThe seasonal part and the trend part of the Geo Time Series™ are extracted using [`STL`](/doc/STL) decomposition, then an [`ESDTEST`](/doc/ESDTEST) is performed on the remainder.\\n\\nThis function only applies to [bucketized](/doc/BUCKETIZE) GTS of type **DOUBLE**.\\n\\n> ### References\\n> **Cleveland, Robert B., et al.** \\\"STL: A seasonal-trend decomposition procedure based on loess.\\\" Journal of Official Statistics 6.1 (1990): 3-73.\\n> **Rosner, Bernard (May 1983)**, \\\"Percentage Points for a Generalized ESD Many-Outlier Procedure\\\",Technometrics, 25(2), pp. 165-172.\\n\\n@param `STLOption` Optional parameters of the [`STL`](/doc/STL) call\\n\\n@param `alpha` Optional significance level for the statistical test. Default value is 0.05\\n\\n@param `k` Upperbound of the number of outliers to detect\\n\\n@param `p` The number of buckets that compose a period\\n\\n@param `gts` A Geo Time Series™\\n\\n@param `gtsList` A list of Geo Time Series™\\n\\n@param `resultList` A **LIST** of ticks corresponding to the outliers\\n\\n@param `result` A **LIST** of LIST of ticks corresponding to the outliers\\n\\n\",\"signature\":\"STLESDTEST( gts:GTS p:LONG k:LONG alpha:DOUBLE STLOption:MAP ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG alpha:DOUBLE ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG STLOption:MAP ): result:LIST<LONG>\\nSTLESDTEST( gts:GTS p:LONG k:LONG ): result:LIST<LONG>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG alpha:DOUBLE STLOption:MAP ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG alpha:DOUBLE ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG STLOption:MAP ): resultList:LIST<LIST<LONG>>\\nSTLESDTEST( gtsList:LIST<GTS> p:LONG k:LONG ): resultList:LIST<LIST<LONG>>\",\"tags\":[\"outlier\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STLESDTEST\"},\"STOP\":{\"description\":\"The `STOP` function stops the current execution by throwing a `WarpScriptStopException`. This means that the current script execution will be aborted unless the call to `STOP` was in a macro invoked via [`TRY`](/doc/TRY).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"STOP\"},\"STORE\":{\"description\":\"The `STORE` function stores a value in a symbol.\\n\\nSince 2.7, when the list of symbols contains duplicates only the last occurence in the list is assigned to its corresponding value.\\n\\n@param `symbol` Name of the symbol to modify.\\n\\n@param `register` Index of the register to modify.\\n\\n@param `symbols` List of symbols or registers to modify. The last element of the list will contain the top of the stack.\\n\\n@param `value` Value to store under `symbol`.\\n\\n@param `values` Multiple values to store in `symbols`.\\n\\n\",\"signature\":\"STORE( value:ANY symbol:STRING ): \\nSTORE( value:ANY register:LONG ): \\nSTORE( values:ANY* symbols:LIST<STRING> ): \",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"STORE\"},\"STRICTMAPPER\":{\"description\":\"Wraps a *mapper* in such a way that the mapper will only be called if the number of ticks in the window is in the specified range.\\n\\nSince 2.1 STRICTMAPPER can also take a timespan definition by inputing negative numbers. Number of ticks and timespan can also be mixed to specify, for instance, more than 2 points but less than 5 seconds.\\n\\n@param `max` If positive, maximum number of ticks in the window. If negative, maximum timespan of the window.\\n\\n@param `min` If positive, minimum number of ticks in the window. If negative, minimum timespan of the window.\\n\\n@param `mapper` Mapper to wrap.\\n\\n@param `wrapped` Wrapped mapper.\\n\\n\",\"signature\":\"STRICTMAPPER( mapper:AGGREGATOR min:NUMBER max:NUMBER ): wrapped:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTMAPPER\"},\"STRICTPARTITION\":{\"description\":\"The `STRICTPARTITION` splits a Geo Time Series™ list in equivalence classes based on label values just like [`PARTITION`](/doc/PARTITION) but only retains in each equivalence class key the labels on which the partitioning was done.\\n\\n@param `labels` List of labels to consider for creating equivalence classes.\\n\\n@param `lgts` List of Geo Time Series™ to partition.\\n\\n@param `result` Map of equivalence classes, keyed by the map of label names to values for the labels in `labels`.\\n\\n\",\"signature\":\"STRICTPARTITION( lgts:LIST<GTS> labels:LIST<STRING> ): result:MAP\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"STRICTPARTITION\"},\"STRICTREDUCER\":{\"description\":\"Wraps a *reducer* so it is only applied if there are values for all the Geo Time Series™ being reduced.\\n\\n@param `reducer` Reducer to wrap.\\n\\n@param `wrapped` Wrapped version of the reducer.\\n\\n\",\"signature\":\"STRICTREDUCER( reducer:AGGREGATOR ): wrapped:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.6\",\"OPB64name\":\"STRICTREDUCER\"},\"STRINGFORMAT\":{\"description\":\"The STRINGFORMAT function format a String in the same ways as Java [String.format](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#format-java.util.Locale-java.lang.String-java.lang.Object...-) does.\\n\\nThis fonction consumes an optional locale in [ISO 639](http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry), a list of Objects to be used in the format string and a [format string](https://docs.oracle.com/javase/8/docs/api/java/util/Formatter.html#syntax).\\n\\nIf no locale is specified, it defaults to the default JVM locale.\\n\\n@param `format` A format string.\\n\\n@param `args` Arguments referenced by the format specifiers in the format string.\\n\\n@param `locale` The locale to apply during formatting.\\n\\n@param `formattedString` A formatted string.\\n\\n\",\"signature\":\"STRINGFORMAT( format:STRING args:LIST ): formattedString:STRING\\nSTRINGFORMAT( format:STRING args:LIST locale:STRING ): formattedString:STRING\",\"tags\":[\"strings\"],\"since\":\"2.2.0\",\"OPB64name\":\"STRINGFORMAT\"},\"STU\":{\"description\":\"The `STU` function pushes onto the stack the number of platform time units in one second. This allows WarpScript scripts to be compatible with any platform, regardless of their configured time units (millisecond, microsecond or nanosecond).\\n\\n@param `numberTimeUnits` Number of platform time units in one second.\\n\\n\",\"signature\":\"STU(): numberTimeUnits:LONG\",\"tags\":[\"date\",\"time\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"STU\"},\"SUBLIST\":{\"description\":\"It creates a new list with the elements of the base list whose indices are in the argument list.\\n\\nIf the argument list contains two indices [a,b] then `SUBLIST` returns the list of elements from index a to index b (included). If the argument list contains more than two indices, the result of `SUBLIST` contains all the elements at the specified indices, with possible duplicates.\\n\\nNegative indexing is allowed, with negative index effectively refering to index + size.\\n\\nSince 2.1 a new signature allowing the step to be defined has been introduced. Instead of specifying a list has range, you can put the start, end (optional) and step (optional) as **LONG** values.\\n\\n@param `arguments` List of indices. Negative indices are considered to be calculated from the end of the list.\\n\\n@param `base` Base list\\n\\n@param `result` Filtred list\\n\\n@param `start` The first index to consider, will be included.\\n\\n@param `end` The last index to consider, will be included. If not specified, defaults to -1.\\n\\n@param `step` The delta between two consecutive indexes to consider. If end is after start in the list, step must be strictly positive. If start is after end in the list, step must be strictly negative. If not specified, defaults to 1 or -1 depending on start and end.\\n\\n\",\"signature\":\"SUBLIST( base:LIST<ANY> arguments:LIST<LONG> ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER end:NUMBER ): result:LIST<ANY>\\nSUBLIST( base:LIST<ANY> start:NUMBER end:NUMBER step:NUMBER ): result:LIST<ANY>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBLIST\"},\"SUBMAP\":{\"description\":\"It creates a new map with the key-value pairs from the base map whose keys are in the argument list.\\n\\n@param `arguments` List of indices.\\n\\n@param `base` Base map\\n\\n@param `result` Filtred map\\n\\n\",\"signature\":\"SUBMAP( base:MAP arguments:LIST<STRING> ): result:MAP\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBMAP\"},\"SUBSTRING\":{\"description\":\"Extract a substring from a **STRING** input, or a subarray from a **BYTE ARRAY** input.  \\nIf the length is ommitted, it extracts until the end of the string or byte array. If length is greater than max length, extract stops at the input end.\\n\\nIf the start is greater than the input size, `SUBSTRING` raises an error.\\n\\nSince 2.1, the start index can be negative. In this case the effective index is index + size of the **STRING**.\\n\\n@param `len` Length of substring to extract.\\n\\n@param `start` First character to include in the substring (0 based).\\n\\n@param `str` String from which to extract a substring.\\n\\n@param `substr` Extracted substring.\\n\\n@param `array` Byte array from which to extract a sub array.\\n\\n@param `subarray` Extracted sub array.\\n\\n\",\"signature\":\"SUBSTRING( str:STRING start:LONG len:LONG ): substr:STRING\\nSUBSTRING( str:STRING start:LONG ): substr:STRING\\nSUBSTRING( array:BYTES start:LONG len:LONG ): subarray:BYTES\\nSUBSTRING( array:BYTES start:LONG ): subarray:BYTES\",\"tags\":[\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"SUBSTRING\"},\"SUBTRACTEXACT\":{\"description\":\"The `SUBTRACTEXACT` function consumes two LONGs from the top of the stack and puts back the difference between them. If the difference overflows a LONG, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `x` Numeric value\\n\\n@param `y` Numeric value\\n\\n@param `diff` The difference of x and y\\n\\n@param `list` List of numeric values\\n\\n@param `sdiff` The first element of the list minus all the others\\n\\n@param `lx` List of numeric values\\n\\n@param `ldiff` List of **LONG** where each value is the difference of y and an element in lx\\n\\n\",\"signature\":\"SUBTRACTEXACT( x:NUMBER y:NUMBER ): diff:LONG\\nSUBTRACTEXACT( list:LIST<NUMBER> ): sdiff:LONG\\nSUBTRACTEXACT( lx:LIST<NUMBER> y:NUMBER ): ldiff:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"SUBTRACTEXACT\"},\"SWAP\":{\"description\":\"Exchanges the positions of the top two elements of the stack.\\n\\n@param `top` The element on top of the stack prior to the function execution\\n\\n@param `level2` The element at the second level of the stack prior to the function execution\\n\\n\",\"signature\":\"SWAP( level2:ANY top:ANY ): top:ANY level2:ANY\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWAP\"},\"SWITCH\":{\"description\":\"Performs a [switch statement](https://en.wikipedia.org/wiki/Switch_statement) allowing to select a macro execution based on a series of condition macros or to fallback on to the execution of a default macro.\\n\\n@param `n` Number of cases to consider. The `SWITCH` function will expect `n` pairs of condition/execution macros plus a default macro on the stack.\\n\\n@param `default` Macro which will be executed if all condition macros returned false.\\n\\n@param `cond1` First condition macro. All condition macros are expected to push a boolean on the stack.\\n\\n@param `condn` `n`th condition macro.\\n\\n@param `exec1` First execution macro, this macro will be executed if `cond1` left `true` on the stack.\\n\\n@param `execn` `n`th execution macro.\\n\\n\",\"signature\":\"SWITCH( cond1:MACRO exec1:MACRO condn:MACRO execn:MACRO default:MACRO n:LONG ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"SWITCH\"},\"SYMBOLS\":{\"description\":\"The `SYMBOLS` function outputs the list of all defined symbols.\\n\\n@param `symbols` The list of the names of all defined symbols.\\n\\n\",\"signature\":\"SYMBOLS(): symbols:LIST\",\"tags\":[\"stack\"],\"since\":\"2.2.1\",\"OPB64name\":\"SYMBOLS\"},\"SYNC\":{\"description\":\"Executes a macro in a synchronized way while in a parallel execution triggered by a call to [`CEVAL`](/doc/CEVAL). If `SYNC` is called outside of a parallel execution, it simply executes the macro.\\n\\nWhen called within a `CEVAL` execution, the use of `SYNC` guarantees that only one of the concurrently executing threads will execute the specified macro at any given time.\\n\\n@param `macro` Macro to execute in a synchronized way.\\n\\n\",\"signature\":\"SYNC( macro:MACRO ): \",\"tags\":[\"extensions\"],\"since\":\"1.0.0\",\"OPB64name\":\"SYNC\"},\"T\":{\"description\":\"`T` stand for `true`. It is a boolean constant.\\n\\n\\n@param `b` true\\n\\n\",\"signature\":\"T(): b:BOOLEAN\",\"tags\":[\"logic\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"T\"},\"TAN\":{\"description\":\"The `TAN` function consumes a floating point number from the top of the stack and pushes back its tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value in radians\\n\\n@param `result` Tangent of the given value\\n\\n@param `lvalue` List of numeric values in radians\\n\\n@param `lresult` List of tangent of the given values.\\n\\n\",\"signature\":\"TAN( value:NUMBER ): result:DOUBLE\\nTAN( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TAN\"},\"TANH\":{\"description\":\"The `TANH` function consumes a floating point number from the top of the stack and pushes back its hyperbolic tangent.\\n\\nThe parameter is considered to be in radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Value, in radians.\\n\\n@param `result` Hyperbolic tangent of the gien value.\\n\\n@param `lvalue` List of numeric values, in radians.\\n\\n@param `lresult` List of hyperbolic tangent of the given values.\\n\\n\",\"signature\":\"TANH( value:NUMBER ): result:DOUBLE\\nTANH( lvalue:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"math\",\"trigonometry\"],\"since\":\"1.0.0\",\"OPB64name\":\"TANH\"},\"TDESCRIBE\":{\"description\":\"The `TDESCRIBE` function is a recursive [`TYPEOF`](/doc/TYPEOF).\\n\\nWhen `TDESCRIBE` finds a LIST, it takes the first element of the list to look for his type. When `TDESCRIBE` finds a MAP, it takes a random key in the map to look for the type of the key and the type of the value.\\n\\n**By design, TDESCRIBE cannot describe heterogeneous lists or maps.**\\n\\nTDESCRIBE output is subject to change in the future. Do not try to parse it. This function is here to help you during Warpscript development.\\n\\n\\nThe `TDESCRIBE` function is part of the `io.warp10.script.ext.debug.DebugWarpScriptExtension`, this extenstion must be specified in the\\n`warpscript.extensions` configuration parameter for it to be available.\\n\\nAdd the following line to your Warp 10 configuration:\\n```\\nwarpscript.extension.debug=io.warp10.script.ext.debug.DebugWarpScriptExtension\\n```\\n\\n@param `object` Any kind of reference\\n\\n@param `description` The description of the object\\n\\n\",\"signature\":\"TDESCRIBE( object:ANY ): description:STRING\",\"tags\":[\"extensions\",\"debug\"],\"since\":\"1.2.19\",\"OPB64name\":\"TDESCRIBE\"},\"TEMPLATE\":{\"description\":\"`TEMPLATE` fills a template with values contained in a map. See example for syntax help.\\n\\nThe `TEMPLATE` function expects the map of values on top of the stack and will operate on the string template below it.\\n\\nValues speficied with `{{key}}` will be url-escaped. If you do not want that behavior, use `{{{key}}}`.\\n\\n@param `dictionnary` Each key will be replaced in a {{key}} template. Value could be string long, double, boolean, or a list of maps. If Value is a list of maps, each subkey/value will be replaced in a {{#key}}{{subkey}}{{/key}} template. \\n\\n@param `listofmaps` Contains a list of subkey/value map. Will be replaced in a {{#key}}{{subkey}}{{/key}} template.\\n\\n@param `template` Input template.\\n\\n@param `output` Result of substitution.\\n\\n\",\"signature\":\"TEMPLATE( template:STRING dictionnary:MAP ): output:STRING\\nTEMPLATE( template:STRING listofmaps:LIST<MAP> ): output:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TEMPLATE\"},\"THRESHOLDTEST\":{\"description\":\"Analyzes Geo Time Series™, identifying ticks where values are outliers above the given threshold.\\n\\n@param `threshold` Threshold above which values are considered outliers.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `ticks` List of ticks where outliers were found.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lticks` List of lists of ticks where outliers were found.\\n\\n\",\"signature\":\"THRESHOLDTEST( gts:GTS threshold:DOUBLE ): ticks:LIST<LONG>\\nTHRESHOLDTEST( lgts:LIST<GTS> threshold:DOUBLE ): lticks:LIST<LIST<LONG>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"THRESHOLDTEST\"},\"TICKINDEX\":{\"description\":\"Creates a clone of a Geo Time Series™, replacing each tick with the index (0 based) at which it appears at the moment of the call.\\n\\n@param `gts` Geo Time Series™ instance to transform.\\n\\n@param `encoder` Geo Time Series™ Encoder instance to transform.\\n\\n@param `indexed` Transformed GTS.\\n\\n@param `indexedenc` Transformed GTS Encoder.\\n\\n@param `lgts` List of Geo Time Series™ instances to transform.\\n\\n@param `lencoder` List of Geo Time Series™ Encoder instances to transform.\\n\\n@param `lindexed` List of indexed Geo Time Series™.\\n\\n@param `lindexedenc` List of indexed Geo Time Series™ Encoder.\\n\\n\",\"signature\":\"TICKINDEX( gts:GTS ): indexed:GTS\\nTICKINDEX( lgts:LIST<GTS> ): lindexed:LIST<GTS>\\nTICKINDEX( encoder:GTSENCODER ): indexedenc:GTSENCODER\\nTICKINDEX( lencoder:LIST<GTSENCODER> ): lindexedenc:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKINDEX\"},\"TICKLIST\":{\"description\":\"Pushes onto the stack the list of ticks of a Geo Time Series™ or encoder. The ticks appear in the order in which they are found.\\n\\nIf a list of Geo Time Series™ is given, the result is a list of list of ticks as if the TICKLIST function was applied to each Geo Time Series™ separately.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n@param `encoder` Instance of encoder from which to extract the ticks.\\n\\n@param `lencoder` List of encoders.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `lticks` List of lists of ticks.\\n\\n\",\"signature\":\"TICKLIST( gts:GTS ): ticks:LIST<LONG>\\nTICKLIST( lgts:LIST<GTS> ): lticks:LIST<LIST<LONG>>\\nTICKLIST( encoder:GTSENCODER ): ticks:LIST<LONG>\\nTICKLIST( lencoder:LIST<GTSENCODER> ): lticks:LIST<LIST<LONG>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKLIST\"},\"TICKS\":{\"description\":\"Pushes onto the stack the sorted list of **distinct** ticks of a Geo Time Series™. If a list of Geo Time Series™ is given, all the **distinct** ticks are returned in a single sorted list as if all Geo Time Series™ were merged.\\n\\nThis function is not to be confused with [`TICKLIST`](/doc/TICKLIST) as this function returns **distinct** ticks and acts as it merges Geo Time Series™.\\n\\n@param `ticks` List of extracted ticks.\\n\\n@param `gts` Instance of Geo Time Series™.\\n\\n@param `lgts` List of GTS.\\n\\n\",\"signature\":\"TICKS( gts:GTS ): ticks:LIST<LONG>\\nTICKS( lgts:LIST<GTS> ): ticks:LIST<LONG>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TICKS\"},\"TIMEBOX\":{\"description\":\"The `TIMEBOX` executes a macro with a maximum execution time. If the maximum time is reached, an exception will be thrown which can be caught using [`TRY`](/doc/TRY).\\n\\n@param `maxtime` Maximum execution time, in platform time units.\\n\\n@param `macro` Macro to execute.\\n\\n\",\"signature\":\"TIMEBOX( macro:MACRO maxtime:LONG ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TIMEBOX\"},\"TIMECLIP\":{\"description\":\"Clips Geo Time Series™ instances by restricting their ticks to those within a time interval.      \\n\\n@param `duration` Width of the time interval to retain, in time units.\\n\\n@param `end` Most recent timestamp to retain.\\n\\n@param `start` Start timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `stop` End timestamp to consider, expressed as an [`ISO8601`](/doc/ISO8601) string.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of GTS.\\n\\n@param `clipped` Clipped Geo Time Series™.\\n\\n@param `lclipped` List of clipped GTS.\\n\\n@param `encoder` Single GTS Encoder instance.\\n\\n@param `lencoder` List of GTS Encoder instances.\\n\\n@param `clippedEncoder` Clipped GST encoder.\\n\\n@param `lclippedEncoders` List of clipped GTS encoders.\\n\\n\",\"signature\":\"TIMECLIP( gts:GTS end:LONG duration:LONG ): clipped:GTS\\nTIMECLIP( lgts:LIST<GTS> end:LONG duration:LONG ): lclipped:LIST<GTS>\\nTIMECLIP( gts:GTS stop:STRING start:STRING ): clipped:GTS\\nTIMECLIP( lgts:LIST<GTS> stop:STRING start:STRING ): lclipped:LIST<GTS>\\nTIMECLIP( encoder:GTSENCODER end:LONG duration:LONG ): clippedEncoder:GTSENCODER\\nTIMECLIP( lencoder:LIST<GTSENCODER> end:LONG duration:LONG ): lclippedEncoders:LIST<GTSENCODER>\\nTIMECLIP( encoder:GTSENCODER stop:STRING start:STRING ): clippedEncoder:GTSENCODER\\nTIMECLIP( lencoder:LIST<GTSENCODER> stop:STRING start:STRING ): lclippedEncoders:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMECLIP\"},\"TIMED\":{\"description\":\"The `TIMED` function converts a macro to a timed macro, recording its execution time and its number of calls.\\n\\nTo recover the associated statistics, use [`CHRONOSTATS`](/doc/CHRONOSTATS).\\n\\n@param `name` A name identifying the macro.\\n\\n@param `macro` The macro you want to monitor.\\n\\n@param `timedMacro` A macro which, when called, will update the statitics associated with the given name.\\n\\n\",\"signature\":\"TIMED( macro:MACRO name:STRING ): timedMacro:MACRO\",\"tags\":[\"debug\"],\"since\":\"2.1.0\",\"OPB64name\":\"TIMED\"},\"TIMEMODULO\":{\"description\":\"Splits Geo Time Series™ into sub-GTS whose timestamps are the original timestamp modulo a given modulus value. Each sub-GTS will bear a label with the quotient of the original timestamps divided by the modulus. The output list order is not guaranteed, use [`SORTBY`](/doc/SORTBY) if you want to order the output by label.\\n\\nThis function can be used to generate for example one Geo Time Series™ per day with ticks from 0 to 86400 s (excluded).\\n\\n@param `label` Name of the label which will have the quotient value.\\n\\n@param `modulus` Value by which to divide the original timestamps.\\n\\n@param `gts` Geo Time Series™ to split.\\n\\n@param `splits` Resulting splits.\\n\\n@param `lgts` List of GTS to split.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"TIMEMODULO( gts:GTS modulus:LONG label:STRING ): splits:LIST<GTS>\\nTIMEMODULO( lgts:LIST<GTS> modulus:LONG label:STRING ): lsplits:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMEMODULO\"},\"TIMEOFF\":{\"description\":\"Turns off the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"TIMEOFF(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEOFF\"},\"TIMEON\":{\"description\":\"Turns on the display of the execution time of each WarpScript™ line entered in interactive (REPL) mode.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"TIMEON(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"TIMEON\"},\"TIMESCALE\":{\"description\":\"Modifies the ticks of Geo Time Series™ instances by multiplying each tick by a provided scale.      \\n\\nThe resulting tick will be converted to a LONG after multiplication by the scale.\\n\\nIf the Geo Time Series™ instance is bucketized, the `lastbucket` and `bucketspan` parameters will also be scaled. If the scale would incur a `bucketspan` of 0, the call will end with an error.\\n\\n@param `scale` Scale by which to multiply each tick.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `scaled` Geo Time Series™ result.\\n\\n@param `lscaled` List of Geo Time Series™ result.\\n\\n\",\"signature\":\"TIMESCALE( gts:GTS scale:DOUBLE ): scaled:GTS\\nTIMESCALE( gts:GTS scale:LONG ): scaled:GTS\\nTIMESCALE( lgts:LIST<GTS> scale:DOUBLE ): lscaled:LIST<GTS>\\nTIMESCALE( lgts:LIST<GTS> scale:LONG ): lscaled:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESCALE\"},\"TIMESHIFT\":{\"description\":\"Shifts the ticks of Geo Time Series™ instances by a given amount.\\n\\n@param `offset` Offset to apply to the ticks, in time units.\\n\\n@param `gts` Single Geo Time Series™ instance to shift.\\n\\n@param `lgts` List of GTS to shift.\\n\\n@param `shifted` Shifted Geo Time Series™.\\n\\n@param `lshifted` List of shifted Geo Time Series™.\\n\\n\",\"signature\":\"TIMESHIFT( gts:GTS offset:LONG ): shifted:GTS\\nTIMESHIFT( lgts:LIST<GTS> offset:LONG ): lshifted:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESHIFT\"},\"TIMESPLIT\":{\"description\":\"The `TIMESPLIT` functions splits Geo Time Series™ instances based on *quiet periods*, *i.e.* periods during which the GTS has no values.\\n\\nWhenever a quiet period longer than a minimum duration is encountered, the Geo Time Series™ is split.\\n\\nIf input gts has no values or if 'label' is already part of the labels of 'gts', then the resulting list of GTS will only contain a clone of 'gts'. **Make sure to test your GTS split size if needed.**\\n\\n@param `label` Name of label in which to store the sequence number.\\n\\n@param `minvalues` Minimum number of values a split should contain. Splits with less than that many values will be discarded.\\n\\n@param `quietperiod` Minimum duration of the silent period (*i.e.* with no values) between splits.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `splits` List of resulting splits.\\n\\n@param `lsplits` List of lists of resulting splits.\\n\\n\",\"signature\":\"TIMESPLIT( gts:GTS quietperiod:LONG minvalues:LONG label:STRING ): splits:LIST<GTS>\\nTIMESPLIT( lgts:LIST<GTS> quietperiod:LONG minvalues:LONG label:STRING ): lsplits:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMESPLIT\"},\"TIMINGS\":{\"description\":\"Turns on the collection of timing information for each line of the script. The collected timings can be put onto the stack by using [`ELAPSED`](/doc/ELAPSED).\\n\\n\",\"signature\":\"\",\"tags\":[\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"TIMINGS\"},\"TLTTB\":{\"description\":\"The `TLTTB` function performs downsampling of Geo Time Series™ by applying the [LTTB (Largest Triangle Three Buckets)](http://skemman.is/stream/get/1946/15343/37285/3/SS_MSthesis.pdf) algorithm. This algorithm downsamples a GTS by selecting datapoints from the original GTS which will preserve the overall shape of the graphical representation of the data. It differs from the [`LTTB`](doc/LTTB) function by the fact that it considers time based buckets instead of buckets based on a number of values.\\n\\n@param `samples` Number of datapoints to keep.\\n\\n@param `gts` Geo Time Series™ instance to downsample.\\n\\n@param `downsampled` Downsampled GTS.\\n\\n@param `lgts` List of Geo Time Series™ to downsample.\\n\\n@param `ldownsampled` List of downsampled GTS.\\n\\n\",\"signature\":\"TLTTB( gts:GTS samples:LONG ): downsampled:GTS\\nTLTTB( lgts:LIST<GTS> samples:LONG ): ldownsampled:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"TLTTB\"},\"TOBIN\":{\"description\":\"Converts the long on top of the stack to its 64 bits binary representation.\\n\\n@param `param` value to convert\\n\\n@param `result` String converted binary representation of param\\n\\n\",\"signature\":\"TOBIN( param:LONG ): result:STRING\",\"tags\":[\"conversion\",\"strings\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBIN\"},\"TOBITS\":{\"description\":\"Converts a number or each numerical value of a Geo Time Series™ into a LONG with the same bits as the DOUBLE ([IEEE754](https://en.wikipedia.org/wiki/IEEE_754)) encoding of the original number.\\n\\n**Deprecation notice** the `TOBITS` function will be removed, please use `->DOUBLEBITS` or `->FLOATBITS`.\\n\\n@param `number` Numeric value to represent, will first be converted to a DOUBLE if not already the case.\\n\\n@param `bits` LONG containing the same bits as the double precision IEEE754 representation of the input.\\n\\n@param `gts` Numerical Geo Time Series™ to convert.\\n\\n@param `longgts` Result GTS with LONG values.\\n\\n\",\"signature\":\"TOBITS( number:NUMBER ): bits:LONG\\nTOBITS( gts:GTS ): longgts:GTS\",\"tags\":[\"math\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOBITS\"},\"TOBOOLEAN\":{\"description\":\"Converts a value of primitive type into a boolean value.\\n\\nThe `TOBOOLEAN` function consumes a parameter from the top of the stack and pushes back its conversion to boolean.\\nNumbers will be false if they are equal to 0 and true otherwise.\\nStrings will be false if they are equals to '' and true otherwise.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The boolean conversion of the value\\n\\n\",\"signature\":\"TOBOOLEAN( value:BOOLEAN ): result:BOOLEAN\\nTOBOOLEAN( value:NUMBER ): result:BOOLEAN\\nTOBOOLEAN( value:STRING ): result:BOOLEAN\",\"tags\":[\"conversion\"],\"since\":\"1.0.5\",\"OPB64name\":\"TOBOOLEAN\"},\"TODEGREES\":{\"description\":\"Converts an angle measured in radians to its equivalent in degrees.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from radians to degrees.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in radian to convert in degree\\n\\n@param `result` Result of the conversion from radians to degrees\\n\\n@param `langle` List of angles in radian to convert in degree\\n\\n@param `lresult` List of results of the conversion from radians to degrees\\n\\n\",\"signature\":\"TODEGREES( angle:NUMBER ): result:DOUBLE\\nTODEGREES( langle:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODEGREES\"},\"TODOUBLE\":{\"description\":\"Converts a value of primitive type into a double value.\\n\\nThe `TODOUBLE` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to double.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The double conversion of the value\\n\\n\",\"signature\":\"TODOUBLE( value:BOOLEAN ): result:DOUBLE\\nTODOUBLE( value:NUMBER ): result:DOUBLE\\nTODOUBLE( value:STRING ): result:DOUBLE\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TODOUBLE\"},\"TOHEX\":{\"description\":\"Converts a long to its 64 bits hexadecimal representation.\\n\\n@param `input` Signed long integer.\\n\\n@param `output` Hexadecimal string representation of input.\\n\\n\",\"signature\":\"TOHEX( input:LONG ): output:STRING\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOHEX\"},\"TOINTEXACT\":{\"description\":\"The `TOINTEXACT` function consumes one LONG from the top of the stack and puts back the value. If the result overflows an INT, this function fails.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` The value to be checked not to overflow an INT\\n\\n@param `result` The given value, converted to Long\\n\\n@param `lvalue` List of values to be checked not to overflow an INT\\n\\n@param `lresult` List of given values, converted to Long\\n\\n\",\"signature\":\"TOINTEXACT( value:NUMBER ): result:LONG\\nTOINTEXACT( lvalue:LIST<NUMBER> ): lresult:LIST<LONG>\",\"tags\":[\"math\"],\"since\":\"1.2.23\",\"OPB64name\":\"TOINTEXACT\"},\"TOKENDUMP\":{\"description\":\"Deciphers a token and outputs a map describing the various elements of the token.\\n\\nThe map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Original token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| params | MAP | Map of token parameters, can be used as input to [`TOKENGEN`](/doc/TOKENGEN) |\\n\\nThe `params` map contains the following entries for both `READ` and `WRITE` tokens:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| type  | STRING | `READ` or `WRITE` depending on the type of token |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in ms since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in ms since the Unix Epoch |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nAdditionally, for `READ` tokens, the map contains those entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, those will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nNote that the `TOKENDUMP` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration key was not set.\\n\\n\\n@param `token` Token to decode.\\n\\n@param `map` Map with the extracted parameters, the original token and its *ident*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENDUMP` from Worf.\\n\\n\",\"signature\":\"TOKENDUMP( token:STRING ): map:MAP\\nTOKENDUMP( token:STRING secret:STRING ): map:MAP\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENDUMP\"},\"TOKENGEN\":{\"description\":\"Generates a token given a map of parameters. The `TOKENGEN` function outputs a map.\\n\\nThe input parameter map contains the following entries:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| id | STRING | Optional identifier that will be put verbatim in the result map |\\n| type  | STRING | `READ` or `WRITE` depending on the type of token to generate |\\n| owner | STRING | UUID of the owner associated with the token |\\n| producer | STRING | UUID of the producer associated with the token |\\n| application | STRING | Name of application asociated with the token |\\n| issuance | LONG | Issuance timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| expiry | LONG | Expiry timestamp of the token, in **milliseconds** since the Unix Epoch |\\n| ttl | LONG | If `expiry` is not specified, a time to live can be set with this key. The TTL is expressed in **milliseconds**, the computed expiry timestamp will be the issuance timestamp plus the ttl |\\n| labels | MAP | Map of labels which will be added to the pushed Geo Time Series™ int the case of a `WRITE` token, or map of label selectors which will be added to the selection criteria for a `READ` token |\\n| attributes | MAP | Map of attributes attached to the token |\\n\\nWhen generating a `READ` token, the following parameters are needed to ensure data isolation:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| owners | LIST | List of owners the `READ` token can access, they will be added to the selection criteria |\\n| producers | LIST | List of producers the `READ` token can access, they will be added to the selection criteria |\\n| applications | LIST | List of applications the `READ` token can access, they will be added to the selection criteria |\\n\\nIf one of these parameter key is not set or set to an empty list, then the generated `READ` token will be granted access to all the scope associated with the parameter key. For example, if `owners` is not set, data from all owners will be accessible to this token.\\n\\nThe `TOKENGEN` function outputs a map with the following keys:\\n\\n| Key | Type | Description |\\n|-----|------|-------------|\\n| token | STRING | Generated token |\\n| ident | LONG | TokenIdent associated with `token`, can be used in a [TRL](/content/03_Documentation/05_Security/04_Token_revocation_list) |\\n| id | STRING | Optional identifier if the `id` key was specified in the parameter map |\\n\\nNote that the `TOKENGEN` function can only be called using the [`Worf`](/content/03_Documentation/05_Security/03_Worf#tokengen) tool if the `token.secret` configuration was not set.\\n\\n@param `params` Map of parameters used to generate the token.\\n\\n@param `result` Map containing the token, its *ident* and an optional *id*.\\n\\n@param `secret` Secret configured via `token.secret`. This parameter should not be specified when calling `TOKENGEN` from Worf.\\n\\n\",\"signature\":\"TOKENGEN( params:MAP ): result:MAP\\nTOKENGEN( params:MAP secret:STRING ): result:MAP\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.0\",\"OPB64name\":\"TOKENGEN\"},\"TOKENINFO\":{\"description\":\"Retrieves information from token.\\n\\nThe `TOKENINFO` function consumes a token from the top of the stack and pushes back a map containing the token information:\\n* type: type of token 'Read' or 'Write'\\n* issuance: timestamp of token creation, in **milliseconds** since the Unix Epoch \\n* expiry: timestamp of token expiration, in **milliseconds** since the Unix Epoch \\n* application: name of the application accessing the data\\n* apps: list of applications whose data can be accessed (usually limited to a single application)\\n\\n@param `token` Token to extract informations\\n\\n@param `infos` Token informations extract from the tokens\\n\\n\",\"signature\":\"TOKENINFO( token:STRING ): infos:MAP\",\"tags\":[\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOKENINFO\"},\"TOKENSECRET\":{\"description\":\"Modifies the secret needed for using `TOKENGEN` or `TOKENDUMP`.\\n\\nThis function is only useable if a secret was configured using `token.secret`.\\n\\n@param `secret` Current secret for token operations, initially the value configured via `token.secret`.\\n\\n@param `newsecret` New secret to set for token operations.\\n\\n\",\"signature\":\"TOKENSECRET( newsecret:STRING secret:STRING ): \",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"TOKENSECRET\"},\"TOLONG\":{\"description\":\"Converts a value of primitive type or a **BYTE ARRAY** into a long value.\\n\\nThe `TOLONG` function consumes a parameter (BOOLEAN, LONG, DOUBLE, STRING) from the top of the stack and pushes back its conversion to long.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The long conversion of the value\\n\\n@param `array` Maximum 8 bytes to convert to a LONG. Sign is kept.\\n\\n\",\"signature\":\"TOLONG( value:BOOLEAN ): result:LONG\\nTOLONG( value:NUMBER ): result:LONG\\nTOLONG( value:STRING ): result:LONG\\nTOLONG( array:BYTES ): result:LONG\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLONG\"},\"TOLOWER\":{\"description\":\"Converts the **STRING** on top of the stack to lower case.\\n\\n@param `input` input string\\n\\n@param `output` Lower case string\\n\\n\",\"signature\":\"TOLOWER( input:STRING ): output:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOLOWER\"},\"TORADIANS\":{\"description\":\"Converts an angle measured in degrees to its equivalent in radians.\\n\\nThe `TORADIANS` function consumes a number from the top of the stack and pushes back its conversion from degrees to radians.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `angle` Angle in degree to convert in radian\\n\\n@param `result` Result of the conversion from degree to radian\\n\\n@param `langle` List of angles in degree to convert in radian\\n\\n@param `lresult` List of results of the conversion from degree to radian\\n\\n\",\"signature\":\"TORADIANS( angle:NUMBER ): result:DOUBLE\\nTORADIANS( langle:LIST<NUMBER> ): lresult:LIST<DOUBLE>\",\"tags\":[\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TORADIANS\"},\"TOSELECTOR\":{\"description\":\"The `TOSELECTOR` function takes a Geo Time Series™ or Geo Time Series™ LIST from the top of the stack and, for each encountered GTS, replace it with a selector which would select it.\\n\\nThis selector can be used as input of [`PARSESELECTOR`](/doc/PARSESELECTOR) for a [`FETCH`](/doc/FETCH).\\n\\n@param `gts` The input Geo Time Series™.\\n\\n@param `gtslist` The input list of Geo Time Series™.\\n\\n@param `encoder` The input encoder.\\n\\n@param `encoderlist` The input list of encoders.\\n\\n@param `selector` The selector string.\\n\\n@param `selectorlist` The list of selector strings, one per GTS in gtslist.\\n\\n\",\"signature\":\"TOSELECTOR( gts:GTS ): selector:STRING\\nTOSELECTOR( gtslist:LIST<GTS> ): selectorlist:LIST<STRING>\\nTOSELECTOR( encoder:GTSENCODER ): selector:STRING\\nTOSELECTOR( encoderlist:LIST<GTSENCODER> ): selectorlist:LIST<STRING>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSELECTOR\"},\"TOSTRING\":{\"description\":\"Converts a value of primitive type into a string value.\\n\\nThe `TOSTRING` function consumes a parameter from the top of the stack and pushes back its conversion to string.\\n\\nNote that GTS are converted to input format and that the string ends with CRLF to follow HTTP recommendations.\\n\\n@param `value` The value of primitive type\\n\\n@param `result` The string conversion of the value\\n\\n\",\"signature\":\"TOSTRING( value:NUMBER ): result:STRING\\nTOSTRING( value:BOOLEAN ): result:STRING\\nTOSTRING( value:STRING ): result:STRING\\nTOSTRING( value:GTS ): result:STRING\",\"tags\":[\"strings\",\"conversion\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOSTRING\"},\"TOTIMESTAMP\":{\"description\":\"Converts a date in format ISO8601 into a timestamp in the platform's time unit.\\n\\nThe `TOTIMESTAMP` function consumes a string parameter (date + time + time zone) from the top of the stack and pushes back its conversion to a number of time units since the Unix Epoch.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nThe supported format is ISO8601 and are:\\n* yyyy-mm-dddThh:mm:ss.ssssssZ\\n* yyyy-mm-dddThh:mm:ss+hh:mm\\n\\nAs the string are URL encoded, the symbol + have to be replaced by %2B, otherwise a space will replace the + in the string.\\n\\n@param `input` ISO8601 string.\\n\\n@param `result` timestamp in the platform unit.\\n\\n\",\"signature\":\"TOTIMESTAMP( input:STRING ): result:LONG\",\"tags\":[\"conversion\",\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOTIMESTAMP\"},\"TOUPPER\":{\"description\":\"Converts the **STRING** on top of the stack to upper case.\\n\\n@param `input` input string\\n\\n@param `output` Upper case string\\n\\n\",\"signature\":\"TOUPPER( input:STRING ): output:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TOUPPER\"},\"TR\":{\"description\":\"Computes the [trace](https://en.wikipedia.org/wiki/Trace_(linear_algebra)) of a square matrix. If the input matrix is not square, an error is raised.\\n\\n@param `matrix` The square matrix for which to compute the trace.\\n\\n@param `trace` The computed trace.\\n\\n\",\"signature\":\"TR( matrix:MATRIX ): trace:DOUBLE\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TR\"},\"TRANSPOSE\":{\"description\":\"Computes the [transpose](https://en.wikipedia.org/wiki/Transpose) of a matrix.\\n\\n@param `matrix` Matrix to transpose.\\n\\n@param `transpose` The transpose of the original matrix.\\n\\n\",\"signature\":\"TRANSPOSE( matrix:MATRIX ): transpose:MATRIX\",\"tags\":[\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"TRANSPOSE\"},\"TRIM\":{\"description\":\"Trims whitespaces from both ends of the string on top of the stack.\\n\\n@param `str` String to trim\\n\\n@param `trimmedstr` String trimmed\\n\\n\",\"signature\":\"TRIM( str:STRING ): trimmedstr:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"TRIM\"},\"TRY\":{\"description\":\"The `TRY` function provides a way to execute a macro in a safety harness with [Exception handling](https://en.wikipedia.org/wiki/Exception_handling).\\n\\nIf an error is thrown, it is recorded and will be available via [`ERROR`](/doc/ERROR).\\n\\n@param `try` Macro whose execution is *attempted*.\\n\\n@param `catch` Macro which will be executed if an error is encountered while executing the `try` macro.\\n\\n@param `finally` Macro which will be executed unconditionally after either the `try` or `try`/`catch` execution.\\n\\n\",\"signature\":\"TRY( try:MACRO catch:MACRO finally:MACRO ): \",\"tags\":[\"control\"],\"since\":\"1.2.11\",\"OPB64name\":\"TRY\"},\"TSELEMENTS\":{\"description\":\"Alias of [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nThe `TSELEMENTS` function consumes an optional **STRING** timezone and a **LONG** timestamp and pushes back information on the day and time it represents as a **LIST** of **LONG**:\\n```flow\\n[\\n    year\\n    month\\n    day_of_month\\n    hours\\n    minutes\\n    seconds\\n    subseconds_in_platform_unit\\n    day_of_year\\n    day_of_week\\n    week_of_year\\n  ]\\n```\\n\\nThe indexing is the following: `month`, `day_of_month`, `day_of_year`, `day_of_week` and `week_of_year` use 1-indexing. For `day_of_week`, Monday has the value `1` and Sunday `7`.\\n\\nDepending on the platform time unit, the part representing subseconds can have 3, 6 or 9 digits respectively for milliseconds, microseconds or nanoseconds platform time unit.\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"TSELEMENTS( timestamp:LONG ): dateAndTimeElements:LIST<LONG>\\nTSELEMENTS( timestamp:LONG timezone:STRING ): dateAndTimeElements:LIST<LONG>\",\"tags\":[\"date\",\"time\"],\"since\":\"1.0.0\",\"OPB64name\":\"TSELEMENTS\"},\"TSELEMENTS->\":{\"description\":\"The `TSELEMENTS->` function consumes an optional **STRING** timezone and a **LIST** of **LONG** describing a time and date and pushes back the **LONG** timestamp. The **LIST** of **LONG** follows the format given by [`->TSELEMENTS`](/doc/AItJJoKBGJp4I_GI).\\n\\nValid values for the timezone can be found on the [Joda website](http://joda-time.sourceforge.net/timezones.html) in any of the three columns. If no timezone is specified the pushed back representation is UTC.\\n\\n@param `timezone` Timezone of the pushed back date and time elements.\\n\\n@param `timestamp` Timestamp in platform unit, UTC.\\n\\n@param `dateAndTimeElements` List of long in the format given in the description.\\n\\n\",\"signature\":\"TSELEMENTS->( dateAndTimeElements:LIST<LONG> ): timestamp:LONG\\nTSELEMENTS->( dateAndTimeElements:LIST<LONG> timezone:STRING ): timestamp:LONG\",\"tags\":[\"date\",\"time\"],\"since\":\"1.2.0\",\"OPB64name\":\"K4C4I3KCGJtJJmoy\"},\"TYPEOF\":{\"description\":\"Gets the type of an element.\\n\\nThe `TYPEOF` function consumes the top element on the stack and pushes back a string containing the type. The output could be:\\n+ AGGREGATOR\\n+ BITSET\\n+ BOOLEAN\\n+ BYTES\\n+ CONTEXT\\n+ COUNTER\\n+ DOUBLE\\n+ FILLER\\n+ FILTER\\n+ GEOSHAPE\\n+ GTS\\n+ GTSENCODER\\n+ KEY\\n+ LIST\\n+ LONG\\n+ MACRO\\n+ MAP\\n+ MARK\\n+ MATCHER\\n+ MATRIX\\n+ NULL\\n+ OPERATOR\\n+ PFONT\\n+ PGRAPHICS\\n+ PIMAGE\\n+ PSHAPE\\n+ REDUCER\\n+ SET\\n+ STRING\\n+ VECTOR\\n+ VLIST\\n\\nFor any object introduced by a WarpScript extension whose output of TYPEOF is not in the list thereof, the output would be preceded by \\\"X-\\\".\\n\\nNote: since revision 2.5.0, the TYPEOF output of bucketizers, mappers, reducers is changed from 'MAPPER' to 'AGGREGATOR'.\\n\\n\\n@param `object` Any kind of reference\\n\\n@param `type` The type of the object\\n\\n\",\"signature\":\"TYPEOF( object:ANY ): type:STRING\",\"tags\":[\"stack\",\"debug\"],\"since\":\"1.0.0\",\"OPB64name\":\"TYPEOF\"},\"UDF\":{\"description\":\"The `UDF` function invokes a User Defined Function from a Jar. A new function instance is loaded at each invocation.\\n\\nThe UDF is a Java class implementing `io.warp10.warp.sdk.WarpScriptJavaFunction` or `io.warp10.warp.sdk.WarpScriptRawJavaFunction`. These interfaces will be deprecated in future releases of Warp 10.\\n\\n@param `class` Fully qualified Java class name of the UDF to invoke.\\n\\n\",\"signature\":\"UDF( class:STRING ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UDF\"},\"ULP\":{\"description\":\"Returns the size of the [ULP (Unit in the Last Place)](https://en.wikipedia.org/wiki/Unit_in_the_last_place) for the argument. The ulp for a DOUBLE is the positive distance between this floating-point value and the DOUBLE value next larger in magnitude.\\n\\nSince 2.6.0, this function can be applied to a list of numeric values.\\n\\n@param `value` Numeric value.\\n\\n@param `ulp` Computed ULP.\\n\\n@param `lvalue` List of numeric values.\\n\\n@param `lulp` List of computed ULPs.\\n\\n\",\"signature\":\"ULP( value:NUMBER ): ulp:DOUBLE\\nULP( lvalue:LIST<NUMBER> ): lulp:LIST<DOUBLE>\",\"tags\":[\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"ULP\"},\"UNBUCKETIZE\":{\"description\":\"Transforms a bucketized Geo Time Series™ into a non bucketized one. Note that this function transforms the original GTS, it does not clone it.\\n\\n@param `gts` Single Geo Time Series™ instance.\\n\\n@param `lgts` List of Geo Time Series™ instances.\\n\\n\",\"signature\":\"UNBUCKETIZE( gts:GTS ): gts:GTS\\nUNBUCKETIZE( lgts:LIST<GTS> ): lgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNBUCKETIZE\"},\"UNBUCKETIZE.CALENDAR\":{\"description\":\"On a GTS that is calendar-bucketized, this function replaces the ticks with the timestamp end boundaries of each bucket, and unbucketize it.\\n\\n@param `gts` One or more Geo Time Series™ or lists of Geo Time Series™\\n\\n@param `lgts` One or more lists of Geo Time Series™\\n\\n\",\"signature\":\"UNBUCKETIZE.CALENDAR( gts:GTS ): gts:GTS\\nUNBUCKETIZE.CALENDAR( lgts:LIST<GTS> ): lgts:LIST<GTS>\",\"tags\":[\"framework\",\"bucketize\",\"gts\",\"bucketizer\",\"date\"],\"since\":\"2.4.1\",\"OPB64name\":\"UNBUCKETIZE.CALENDAR\"},\"UNGZIP\":{\"description\":\"Decompresses a byte array containing data compressed by [`GZIP`](doc/GZIP).\\n\\n@param `compressed` Compressed byte array to decompress.\\n\\n@param `uncompressed` Byte array resulting from the decompression of 'compressed'.\\n\\n\",\"signature\":\"UNGZIP( compressed:BYTES ): uncompressed:BYTES\",\"tags\":[\"conversion\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNGZIP\"},\"UNION\":{\"description\":\"Computes the union &#x222a; of two sets.\\n\\nThe `UNION` function consumes two sets from the top of the stack and pushes back its mathematical union.\\n\\n@param `setA` The *A* set\\n\\n@param `setB` The *B* set\\n\\n@param `output` The new set containing *A* &#x222a; *B*\\n\\n\",\"signature\":\"UNION( setA:SET setB:SET ): output:SET\",\"tags\":[\"sets\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNION\"},\"UNIQUE\":{\"description\":\"The `UNIQUE` function eliminates duplicate elements on the LIST on the top of the stack.\\nThe order of the resulting LIST is not the same than the original one.\\n\\nIt makes elements of a list unique by converting it to a set temporarily. See [()](/doc/91Z) for more informations.\\n\\n@param `input` The list to parse\\n\\n@param `output` The new list object, without any duplicates\\n\\n\",\"signature\":\"UNIQUE( input:LIST ): output:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNIQUE\"},\"UNLIST\":{\"description\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`]`](/doc/MF).\\n\\n@param `list` List to expand.\\n\\n@param `elts` Elements of `list`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"signature\":\"UNLIST( list:LIST ): mark:MARK elts:ANY*\",\"tags\":[\"lists\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNLIST\"},\"UNMAP\":{\"description\":\"Unpacks a map, pushing its keys and values onto the stack along a mark as the deepest stack element such that one can use [`}`](/doc/UF) to rebuild the map.\\n\\n@param `k1` First map key.\\n\\n@param `v1` First map value.\\n\\n@param `kN` Nth map key.\\n\\n@param `vN` Nth map value.\\n\\n@param `map` Map to unpack.\\n\\n@param `mark` Mark indicating the deepest level to consider when building the map.\\n\\n\",\"signature\":\"UNMAP( map:MAP ): mark:MARK k1:ANY v1:ANY kN:ANY vN:ANY\",\"tags\":[\"maps\"],\"since\":\"1.0.11\",\"OPB64name\":\"UNMAP\"},\"UNPACK\":{\"description\":\"The `UNPACK` function unpacks a list of numeric or boolean values according to a specified string format.\\n\\nEndianness is at bit-level and not byte-level.\\n\\n* **<Lxx**: Little-endian long, `xx` is optional and is the number of bits which must be less or equal to 64.\\n* **>Lxx**: Big-endian long, `xx` is optional and is the number of bits which must be less or equal to 64\\n* **<Uxx**: Little-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **>Uxx**: Big-endian unsigned long, `xx` is optional and is the number of bits which must be less or equal to 64. U and L only differ when unpacking.\\n* **<D**: Little-endian Double length always equals 64 bits.\\n* **>D**: Big-endian Double length always equals 64 bits.\\n* **B**: Boolean\\n* **Sxx**: Any number of bits set to 1, `xx` is mandatory.\\n* **sxx**: Any number of bits set to 0, `xx` is mandatory.\\n\\n* **<**: No bigendian\\n* **>**: Bigendian\\n* **L**: Long\\n* **B**: Boolean\\n* **D**: Double length always equals 64.\\n* **<L32**: No bigendian 32 bits Long\\n\\n@param `list` Pqcked list to unpack\\n\\n@param `format` Format used to unpack\\n\\n@param `result` Unpacked list\\n\\n\",\"signature\":\"UNPACK( list:BYTES format:STRING ): result:LIST<ANY>\",\"tags\":[\"lists\"],\"since\":\"1.0.7\",\"OPB64name\":\"UNPACK\"},\"UNSECURE\":{\"description\":\"The `UNSECURE` function decrypts a secure script. The correct secret MUST have been set unsing [`SECUREKEY`](doc/SECUREKEY) prior to calling this function.\\n\\n@param `secure` STRING with the secure script to decode.\\n\\n@param `script` Decoded scripted.\\n\\n\",\"signature\":\"UNSECURE( secure:STRING ): script:STRING\",\"tags\":[\"crypto\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNSECURE\"},\"UNSET\":{\"description\":\"Expands a list by pushing a [`MARK`](/doc/MARK) followed by all the lists elements onto the stack.\\n\\nThe list can be regenerated by calling [`)`](/doc/9F).\\n\\n@param `set` Set to expand.\\n\\n@param `elts` Elements of `set`.\\n\\n@param `mark` Instance of MARK.\\n\\n\",\"signature\":\"UNSET( set:SET ): mark:MARK elts:ANY*\",\"tags\":[\"sets\"],\"since\":\"2.6.0\",\"OPB64name\":\"UNSET\"},\"UNTIL\":{\"description\":\"The `UNTIL` function implements an until loop. It takes two macros as arguments from the stack: the code to execute until the condition is true and the condition to evaluate after every iteration.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force UNTIL to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n\\n@param `code` Macro executed on each loop\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"UNTIL( code:MACRO condition:MACRO ): \\nUNTIL( code:MACRO condition:MACRO index:BOOLEAN ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNTIL\"},\"UNWRAP\":{\"description\":\"Unwraps packed Geo Time Series™ instances.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"signature\":\"UNWRAP( wrapped:STRING ): gts:GTS\\nUNWRAP( wrappedbytes:BYTES ): gts:GTS\\nUNWRAP( lwrapped:LIST<STRING> ): lgts:LIST<GTS>\\nUNWRAP( lwrapped:LIST<BYTES> ): lgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"UNWRAP\"},\"UNWRAPEMPTY\":{\"description\":\"Unwraps wrapped Geo Time Series™ instances without unpacking the actual datapoints. This is handy to extract the metadata (class, labels, attributes) from a set of wrapped GTS.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `gts` Decoded Geo Time Series™.\\n\\n@param `lgts` List of decoded Geo Time Series™.\\n\\n\",\"signature\":\"UNWRAPEMPTY( wrapped:STRING ): gts:GTS\\nUNWRAPEMPTY( wrappedbytes:BYTES ): gts:GTS\\nUNWRAPEMPTY( lwrapped:LIST<STRING> ): lgts:LIST<GTS>\\nUNWRAPEMPTY( lwrapped:LIST<BYTES> ): lgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPEMPTY\"},\"UNWRAPENCODER\":{\"description\":\"Unwraps packed Geo Time Series™ into encoders.      \\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `encoder` Encoder with decoded Geo Time Series™ datapoints.\\n\\n@param `lencoder` List of encoders with decoded Geo Time Series™.\\n\\n\",\"signature\":\"UNWRAPENCODER( wrapped:STRING ): encoder:GTSENCODER\\nUNWRAPENCODER( wrappedbytes:BYTES ): encoder:GTSENCODER\\nUNWRAPENCODER( lwrapped:LIST<STRING> ): lencoder:LIST<GTSENCODER>\\nUNWRAPENCODER( lwrapped:LIST<BYTES> ): lencoder:LIST<GTSENCODER>\",\"tags\":[\"gts\"],\"since\":\"1.2.9\",\"OPB64name\":\"UNWRAPENCODER\"},\"UNWRAPSIZE\":{\"description\":\"Extracts the size (number of datapoints) of wrapped Geo Time Series™ instances.\\n\\n@param `wrapped` String representation of a packed Geo Time Series™ instance.\\n\\n@param `wrappedbytes` Byte array of a packed GTS.\\n\\n@param `lwrapped` List of packed representations of Geo Time Series™, either as STRING or byte arrays.\\n\\n@param `size` Decoded Geo Time Series™ size.\\n\\n@param `lsize` List of decoded Geo Time Series™ sizes.\\n\\n\",\"signature\":\"UNWRAPSIZE( wrapped:STRING ): size:LONG\\nUNWRAPSIZE( wrappedbytes:BYTES ): size:LONG\\nUNWRAPSIZE( lwrapped:LIST<STRING> ): lsize:LIST<LONG>\\nUNWRAPSIZE( lwrapped:LIST<BYTES> ): lsize:LIST<LONG>\",\"tags\":[\"gts\"],\"since\":\"1.2.5\",\"OPB64name\":\"UNWRAPSIZE\"},\"UPDATE\":{\"description\":\"Pushes Geo Time Series™ data to the Warp 10 instance.\\n\\nThe `UPDATE` function allows you to push data directly from your WarpScript code without having to retrieve the data and use the `/update` endpoint.\\n\\nThe GTS or Encoder instances to push *MUST* have a non empty name and in the case of Geo Time Series™ *MUST* have been renamed (to avoid pushing data by mistake which could override existing data you just retrieved).\\n\\n@param `token` Write token to use for pushing the data.\\n\\n@param `gts` Geo Time Series™ to push.\\n\\n@param `encoder` GTS Encoder to push.\\n\\n@param `list` List containing Geo Time Series™ and/or GTS Encoder instances to push.\\n\\n\",\"signature\":\"UPDATE( gts:GTS token:STRING ): \\nUPDATE( encoder:GTSENCODER token:STRING ): \\nUPDATE( list:LIST<GTS> token:STRING ): \\nUPDATE( list:LIST<GTSENCODER> token:STRING ): \",\"tags\":[\"gts\",\"platform\"],\"since\":\"1.0.0\",\"OPB64name\":\"UPDATE\"},\"UPDATEOFF\":{\"description\":\"Disables update operations on the platform. Attempts to perform such operations will fail with the provided message.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n@param `message` Message to return when an update operation is attempted.\\n\\n\",\"signature\":\"UPDATEOFF( message:STRING secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEOFF\"},\"UPDATEON\":{\"description\":\"Enables update operations on the platform.\\n\\n@param `secret` Warp 10™ Manager Secret.\\n\\n\",\"signature\":\"UPDATEON( secret:STRING ): \",\"tags\":[\"platform\"],\"since\":\"2.0.3\",\"OPB64name\":\"UPDATEON\"},\"URLDECODE\":{\"description\":\"Decodes a [URL encoded](https://en.wikipedia.org/wiki/Percent-encoding) STRING.\\n\\n@param `encoded` Encoded STRING to decode.\\n\\n@param `decoded` Decoded STRING.\\n\\n\",\"signature\":\"URLDECODE( encoded:STRING ): decoded:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLDECODE\"},\"URLENCODE\":{\"description\":\"Encodes a STRING using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and replacing occurrences of '+' with '%20'.\\n\\nThe character set used is [UTF-8](https://en.wikipedia.org/wiki/UTF-8).\\n\\n@param `string` Input STRING to encode.\\n\\n@param `encoded` Encoded version of 'string' using the UTF-8 character set.\\n\\n\",\"signature\":\"URLENCODE( string:STRING ): encoded:STRING\",\"tags\":[\"strings\"],\"since\":\"1.0.0\",\"OPB64name\":\"URLENCODE\"},\"URLFETCH\":{\"description\":\"The `URLFETCH` function sends HTTP(S) GET requests, waits for the responses and puts them on the stack.\\n\\nFor security reasons, the stack must be authenticated for this function to work, see [`AUTHENTICATE`](/doc/AUTHENTICATE).\\n\\nSince 2.7.0, this function also accepts a MAP of headers.\\n\\n@param `url` The URL to send the GET request to. Must begin with `http://` or `https://`.\\n\\n@param `urls` The list of URLs to send the GET requests to. Each URL must begin with `http://` or `https://`. \\n\\n@param `result` A list containing, for each URL, a 4-element list. These 4-element lists contain, in this order, a LONG status code, a STRING status message or an empty STRING if not available, a MAP of headers and a STRING representing a bytes array encoded as base 64.\\n\\n@param `headers` \\n\\n\",\"signature\":\"URLFETCH( url:STRING ): result:LIST<LIST>\\nURLFETCH( url:STRING headers:MAP ): result:LIST<LIST>\\nURLFETCH( urls:LIST<STRING> ): result:LIST<LIST>\\nURLFETCH( urls:LIST<STRING> headers:MAP ): result:LIST<LIST>\",\"tags\":[\"extensions\",\"web\"],\"since\":\"1.0.2\",\"OPB64name\":\"URLFETCH\"},\"UUID\":{\"description\":\"Pushes onto the stack a randomly generated [UUID](https://en.wikipedia.org/wiki/Universally_unique_identifier).\\n\\n@param `uuid` Generated UUID string\\n\\n\",\"signature\":\"UUID(): uuid:STRING\",\"tags\":[\"misc\"],\"since\":\"1.0.0\",\"OPB64name\":\"UUID\"},\"V->\":{\"description\":\"The `V->` function converts a Vector (VLIST) on top of the stack into a list.\\n\\n@param `list` Input Vector.\\n\\n@param `result` Result list.\\n\\n\",\"signature\":\"V->( list:VLIST ): result:LIST\",\"tags\":[\"lists\",\"conversion\",\"pig\"],\"since\":\"1.0.11\",\"OPB64name\":\"KXoy\"},\"VALUEDEDUP\":{\"description\":\"Deletes duplicated values of the Geo Time Series™.\\n\\nThe `VALUEDEDUP` function takes as parameter a **GTS** or a **LIST** of **GTS** and it removes its duplicate values.\\n\\nExpects a boolean indicating whether we keep the oldest or most recent datapoint for a given value.\\n\\n@param `order` Boolean value, true for keeping the oldest datapoint for a given value, false otherwise.\\n\\n@param `gts` Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `lgts` List of Geo Time Series™ for which to remove the duplicated values.\\n\\n@param `dedupgts` Geo Time Series™ with unique values.\\n\\n@param `ldedupgts` List of Geo Time Series™ with unique values.\\n\\n\",\"signature\":\"VALUEDEDUP( gts:GTS order:BOOLEAN ): dedupgts:GTS\\nVALUEDEDUP( lgts:LIST<GTS> order:BOOLEAN ): ldedupgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEDEDUP\"},\"VALUEHISTOGRAM\":{\"description\":\"Produces the value histogram of a Geo Time Series™ or (since 2.2.0) of a GTS Encoder.\\n\\nThe histogram is a map with an entry for each value (used as the map key), with an associated value equal to the number of occurrences of the value in the series.\\n\\nIf the input is a bucketized Geo Time Series™, the `NULL` key will have an associated value which is the number of buckets without values (assuming no datapoints were added at timestamps other than those of buckets).\\n\\nWhen the input is a GTS Encoder, keys may be BigDecimal, LONG, DOUBLE, BOOLEAN or STRING, binary values are not used as keys, their STRING representation (in ISO-8859-1) is used.\\n\\n@param `gts` Geo Time Series™ for which to compute the histogram\\n\\n@param `encoder` GTS Encoder for which to compute the histogram\\n\\n@param `histogram` The value histogram for the input Geo Time Series™ or GTS Encoder\\n\\n@param `list` List of Geo Time Series™ or GTS Encoders\\n\\n@param `lhistogram` The list of value histogram maps\\n\\n\",\"signature\":\"VALUEHISTOGRAM( gts:GTS ): histogram:MAP\\nVALUEHISTOGRAM( encoder:GTSENCODER ): histogram:MAP\\nVALUEHISTOGRAM( list:LIST<GTS> ): lhistogram:LIST<MAP>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUEHISTOGRAM\"},\"VALUELIST\":{\"description\":\"Gets values from a **MAP**.\\n\\nThe function `VALUELIST` extracts the values of a **MAP** on the top of the stack and pushes on the stack a list with those values. The **MAP** is consumed.\\n\\n\\n@param `map` Map for which to get the values.\\n\\n@param `values` List of values for the input MAP.\\n\\n\",\"signature\":\"VALUELIST( map:MAP ): values:LIST\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUELIST\"},\"VALUES\":{\"description\":\"Gets the values of Geo Time Series™ or encoders.\\n\\nThe `VALUES` function consumes a Geo Time Series™, an encoder or a list thereof from the stack, and it replaces each instance of Geo Time Series™ or encoder by a list of its values.\\n\\n@param `gts` Geo Time Series™ for which to get the values.\\n\\n@param `lgts` List of Geo Time Series™ for which to get the values.\\n\\n@param `encoder` Encoder for which to get the values.\\n\\n@param `lencoder` List of encoders for which to get the values.\\n\\n@param `values` List of values from the input Geo Time Series™.\\n\\n@param `lvalues` List of list of values from the input Geo Time Series™ list.\\n\\n\",\"signature\":\"VALUES( gts:GTS ): values:LIST\\nVALUES( lgts:LIST<GTS> ): lvalues:LIST<LIST>\\nVALUES( encoder:GTSENCODER ): values:LIST\\nVALUES( lencoder:LIST<GTSENCODER> ): lvalues:LIST<LIST>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUES\"},\"VALUESORT\":{\"description\":\"Sorts values of the Geo Time Series™ in ascending order.\\n\\nThe function `VALUESORT` takes the **GTS** on top of the stack and sort its values (and associated locations/elevations) in ascending order.\\n\\n@param `gts` Geo Time Series™ for which to sort the values.\\n\\n@param `sortedgts` Geo Time Series™ with sorted values.\\n\\n@param `lgts` List of Geo Time Series™.\\n\\n@param `lsortedgts` List of Geo Time Series™ with sorted values.\\n\\n\",\"signature\":\"VALUESORT( gts:GTS ): sortedgts:GTS\\nVALUESORT( lgts:LIST<GTS> ): lsortedgts:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESORT\"},\"VALUESPLIT\":{\"description\":\"Splits Geo Time Series™ by values.\\n\\nThe function `VALUESPLIT` takes one **STRING** on top of the stack plus one **GTS** or a list of **GTS**. It splits **GTS** by values and creates a **GTS** for each different value. For each new **GTS**, the label specified in parameter will be added.\\n\\nThe new **GTS** will be sorted by value with `VALUESORT`.\\n\\n@param `label` Label to add to the new Geo Time Series™.\\n\\n@param `gts` Geo Time Series™ to split by value.\\n\\n@param `splitedgts` List of Geo Time Series™ splited by value.\\n\\n@param `lgts` List of Geo Time Series™ to split by value.\\n\\n@param `lsplitedgts` List of Geo Time Series™ splited by value.\\n\\n\",\"signature\":\"VALUESPLIT( gts:GTS label:STRING ): splitedgts:LIST<GTS>\\nVALUESPLIT( lgts:LIST<GTS> label:STRING ): lsplitedgts:LIST<LIST<GTS>>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"VALUESPLIT\"},\"VARINT->\":{\"description\":\"The `VARINT` function decodes [VarInt](https://developers.google.com/protocol-buffers/docs/encoding#varints) encoded numbers.\\n\\n@param `numbers` List of decoded numbers.\\n\\n@param `encoded` Byte array containing the encoded number(s) to decode.\\n\\n@param `count` Maximum number of `LONG`s to decode.\\n\\n@param `processed` Number of bytes which were processed to decode the numbers.\\n\\n\",\"signature\":\"VARINT->( encoded:BYTES ): numbers:LIST<LONG>\\nVARINT->( encoded:BYTES count:LONG ): numbers:LIST<LONG> processed:LONG\",\"tags\":[\"conversion\",\"binary\"],\"since\":\"2.6.0\",\"OPB64name\":\"KZ4HHJtJAIs\"},\"VARS\":{\"description\":\"Extracts all variables used in a macro. The `VARS` function scans the macro for occurrences of `LOAD`, `STORE` or `CSTORE` functions and inspects the associated variable name. If such a name is not an explicit STRING, the call to `VARS` will fail with an error.\\n\\nThe list of symbols is sorted according to the number of occurrences encountered, decreasing.\\n\\n@param `macro` Macro to inspect.\\n\\n@param `vars` List of encountered symbols.\\n\\n@param `onlyPoprAndStore` Returns only variables used by POPR, CPOPR and STORE. Defaults to false.\\n\\n\",\"signature\":\"VARS( macro:MACRO ): vars:LIST<STRING>\\nVARS( macro:MACRO onlyPoprAndStore:BOOLEAN ): vars:LIST<STRING>\",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"VARS\"},\"VEC->\":{\"description\":\"The `VEC->` function converts a Vector into a list.\\n\\n\\n@param `input` Vector to convert\\n\\n@param `result` list\\n\\n\",\"signature\":\"VEC->( input:VECTOR ): result:LIST\",\"tags\":[\"lists\",\"conversion\",\"math\"],\"since\":\"1.0.6\",\"OPB64name\":\"KZK2AIs\"},\"WEBCALL\":{\"description\":\"Makes an outbound HTTP call.\\n\\nNote that the hosts which may be reached via `WEBCALL` might have been restricted through the use of the `webcall.host.patterns` Warp&nbsp;10 configuration parameter.\\n\\nThe write token is here to check you have the right to send a webcall. If the write token is valid, then the request is sent. It will never be sent in the request.\\n\\nThe call to `WEBCALL` returns a UUID on the stack. The actual request is performed asynchronously, the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`.\\n\\n@param `body` body of the request.\\n\\n@param `headers` map of additionnal http headers.\\n\\n@param `url` supported schemes are http and https.\\n\\n@param `method` `GET` or `POST` string.\\n\\n@param `token` valid write token\\n\\n@param `uuid` the UUID will appear in the `X-Warp10-WebCall` header or the header configured via `http.header.webcall.uuid`\\n\\n\",\"signature\":\"WEBCALL( token:STRING method:STRING url:STRING headers:MAP body:STRING ): uuid:STRING\",\"tags\":[\"web\"],\"since\":\"1.0.0\",\"OPB64name\":\"WEBCALL\"},\"WF.ADDREPO\":{\"description\":\"The `WF.ADDREPO` function allows you to add a repository to the list of repositories taken into account by the WarpFleet™ macro resolver.\\n\\nIf the URL is valid (syntaxically), then it will be added at the end of the current list of repositories scanned by the resolver. All repository URLs will then be validated by the `validator` macro defined in the configuration (`warpfleet.macros.validator`). Those URLs for which the `validator` macro returned true will be retained.\\n\\nNote that the repository is only added in the scope of the current stack.\\n\\n@param `url` URL to add to the list of repositories.\\n\\n\",\"signature\":\"WF.ADDREPO( url:STRING ): \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.ADDREPO\"},\"WF.GETREPOS\":{\"description\":\"Retrieves the current list of repositories used by the WarpFleet™ resolver.\\n\\nNote that if the configuration disabled the use of this function (via `warpfleet.getrepos.disable`), the returned list will be empty even though it contains repositories.\\n\\n@param `repos` Current list of repository URLs.\\n\\n\",\"signature\":\"WF.GETREPOS(): repos:LIST<STRING>\",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.GETREPOS\"},\"WF.SETREPOS\":{\"description\":\"Sets the list of repositories used by the WarpFleet™ resolver to the given value (list of valid URLs).\\n\\nEach URL is tested against WarpFleet™ validator macro to check if it is allowed. Non-valid ones are discarded.\\n\\nNote that this changes the list only for the scope of the current WarpScript execution.\\n\\n@param `repos` List of URLs to use for the WarpFleet™ resolver.\\n\\n\",\"signature\":\"WF.SETREPOS( repos:LIST<STRING> ): \",\"tags\":[\"stack\"],\"since\":\"2.0.3\",\"OPB64name\":\"WF.SETREPOS\"},\"WFOFF\":{\"description\":\"The `WFOFF` function disables the WarpFleet™ Resolver. It can be re-enabled using `WFON`.\\n\\nThis is useful when you want to ensure that a macro call only looks it up locally.\\n\\n\",\"signature\":\"WFOFF(): \",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFOFF\"},\"WFON\":{\"description\":\"The `WFON` function enables the WarpFleet™ Resolver after it has been disabled by `WFOFF`.\\n\\n\",\"signature\":\"WFON(): \",\"tags\":[\"stack\"],\"since\":\"2.1.0\",\"OPB64name\":\"WFON\"},\"WHILE\":{\"description\":\"The `WHILE` function implements a while loop. It takes two macros as arguments from the stack: the condition macro to evaluate and the macro to execute while the condition is true.\\n\\nIf one iteration takes too long (`warpscript.maxloop`) the loop will be killed.\\n\\nSince Warp 10 2.4.0, you can force WHILE to push an index (iteration count, start at 0) on the top of the stack before calling the macro.\\n\\n@param `condition` Macro evaluated for the loop condition, must leave a boolean on top of the stack\\n\\n@param `code` Macro executed on each loop\\n\\n@param `index` When set to true, the current index (iteration count, starts at 0) will be on the top of the stack. By default, false\\n\\n\",\"signature\":\"WHILE( condition:MACRO code:MACRO ): \\nWHILE( condition:MACRO code:MACRO index:BOOLEAN ): \",\"tags\":[\"control\"],\"since\":\"1.0.0\",\"OPB64name\":\"WHILE\"},\"WRAP\":{\"description\":\"The `WRAP` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a STRING.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAP( encoder:GTSENCODER ): wrapped:STRING\\nWRAP( lencoder:GTSENCODER ): lwrapped:LIST<STRING>\\nWRAP( gts:GTS ): wrapped:STRING\\nWRAP( lgts:LIST<GTS> ): lwrapped:LIST<STRING>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.0\",\"OPB64name\":\"WRAP\"},\"WRAPFAST\":{\"description\":\"The `WRAPFAST` function packs a Geo Time Series™ (or a list thereof) or a GTS Encoder into a byte array. For fast execution, the content of the GTS is not compressed, so the resulting byte array will be larger than that produced by `WRAPRAW`.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPFAST( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPFAST( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPFAST( gts:GTS ): wrapped:BYTES\\nWRAPFAST( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPFAST\"},\"WRAPMV\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPRAWOPT`, `WRAPMV` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPMV( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPMV( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPMV( gts:GTS ): wrapped:BYTES\\nWRAPMV( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.1.0\",\"OPB64name\":\"WRAPMV\"},\"WRAPMV!\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES array as if the input was a Multivariate value.\\n\\nJust like `WRAPMV`, `WRAPMV!` attempts to optimize the representation of DOUBLE values for Geo Time Series™ but unlike `WARPMV`, it does not increase the compression agressiveness for GTS Encoders.\\n\\nThe result is also stripped of all Metadata (class, labels, attributes), and no sizing hint is given.        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPMV!( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPMV!( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPMV!( gts:GTS ): wrapped:BYTES\\nWRAPMV!( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\",\"encoder\",\"multivariate\"],\"since\":\"2.6.0\",\"OPB64name\":\"Kp80J3pL7F\"},\"WRAPOPT\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a STRING. The packing performed by `WRAPOPT` differs from that of [`WRAP`](/doc/WRAP) only by the fact that `WRAPOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of STRINGs containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPOPT( encoder:GTSENCODER ): wrapped:STRING\\nWRAPOPT( lencoder:GTSENCODER ): lwrapped:LIST<STRING>\\nWRAPOPT( gts:GTS ): wrapped:STRING\\nWRAPOPT( lgts:LIST<GTS> ): lwrapped:LIST<STRING>\",\"tags\":[\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPOPT\"},\"WRAPRAW\":{\"description\":\"The `WRAPRAW` function packs a Geo Time Series™ into a byte array.\\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPRAW( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPRAW( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPRAW( gts:GTS ): wrapped:BYTES\\nWRAPRAW( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.0.7\",\"OPB64name\":\"WRAPRAW\"},\"WRAPRAWOPT\":{\"description\":\"Packs a Geo Time Series™ (or a list thereof) or a GTS Encoder instance into a BYTES. The packing performed by `WRAPRAWOPT` differs from that of [`WRAPRAW`](/doc/WRAPRAW) only by the fact that `WRAPRAWOPT` attempts to optimize the representation of DOUBLE values for Geo Time Series™ and increases the compression agressiveness for GTS Encoders.\\n        \\n\\n@param `encoder` GTS Encoder to pack.\\n\\n@param `gts` Geo Time Series™ instance to pack.\\n\\n@param `lgts` List of Geo Time Series™ to pack.\\n\\n@param `lencoder` List of GTS encoders to pack.\\n\\n@param `wrapped` String containing the packed Geo Time Series™ or Encoder.\\n\\n@param `lwrapped` List of byte arrays containing packed GTS or Encoders.\\n\\n\",\"signature\":\"WRAPRAWOPT( encoder:GTSENCODER ): wrapped:BYTES\\nWRAPRAWOPT( lencoder:GTSENCODER ): lwrapped:LIST<BYTES>\\nWRAPRAWOPT( gts:GTS ): wrapped:BYTES\\nWRAPRAWOPT( lgts:LIST<GTS> ): lwrapped:LIST<BYTES>\",\"tags\":[\"gts\",\"encoder\"],\"since\":\"1.2.3\",\"OPB64name\":\"WRAPRAWOPT\"},\"WSINFO\":{\"description\":\"Displays informations about WarpScript environments with a given session id. The informations are returned as a map identical to that returned by [`WSPS`](/doc/WSPS):\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `session` Session of the environments to inspect.\\n\\n@param `infos` List of informations about each WarpScript execution environment with 'session' as their session name.\\n\\n\",\"signature\":\"WSINFO( session:STRING ): infos:LIST<MAP>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSINFO\"},\"WSKILL\":{\"description\":\"Kills the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP) and marking the environment as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to kill.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"signature\":\"WSKILL( uuid:STRING secret:STRING ): status:BOOLEAN\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILL\"},\"WSKILLSESSION\":{\"description\":\"Kills the execution WarpScript programs by forcing a call to [`STOP`](/doc/STOP) and marking the environments as forcibly stopped.\\n\\nAny further attempt to execute a function will also force a call to [`STOP`](/doc/STOP).\\n\\n@param `session` Session id of the WarpScript execution environments to kill.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"signature\":\"WSKILLSESSION( session:STRING ): count:LONG\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSKILLSESSION\"},\"WSNAME\":{\"description\":\"Modifies the name associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stack.name` in the attributes map.\\n\\nName size is limited to 128 characters.\\n\\n@param `name` Name to assign to the calling execution environment, or `NULL` to simply read the current name.\\n\\n@param `current` Name assigned to the execution environment.\\n\\n\",\"signature\":\"WSNAME( name:STRING ): current:STRING\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSNAME\"},\"WSPS\":{\"description\":\"Lists all the registers WarpScript execution environments. For each environment a map is returned with the following fields:\\n\\n| Key | Description |\\n|-----|-------------|\\n| `uuid` | Unique id associated with the environment. |\\n| `attributes` | Map of exposed stack attributes. |\\n\\nThe list of exposed attributes may evolve in future releases.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `procs` List of informations about each registered WarpScript execution environment.\\n\\n\",\"signature\":\"WSPS( secret:STRING ): procs:LIST<MAP>\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSPS\"},\"WSSESSION\":{\"description\":\"Modifies the session id associated with the execution environment. This name appears in the informations returned by [`WSPS`](/doc/WSPS) and [`WSINFO`](/doc/WSINFO) under the key `stackps.session` in the attributes map.\\n\\nSession id size is limited to 128 characters.\\n\\nSession can also be set by setting the `X-Warp10-WarpScriptSession` header.\\n\\nOnce the session has been set it cannot be modified.\\n\\n@param `session` Session id to assign to the calling execution environment, or NULL to simply read the current session id.\\n\\n@param `current` The session id assigned to the execution environment.\\n\\n\",\"signature\":\"WSSESSION( session:STRING ): current:STRING\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSESSION\"},\"WSSTACK\":{\"description\":\"Select the WarpScript™ (*i.e.* SNAPSHOT) format for the display of stack levels.\\n\\nWhen called outside of interactive mode, does nothing.\\n\\n\",\"signature\":\"WSSTACK(): \",\"tags\":[\"stack\"],\"since\":\"2.0.0\",\"OPB64name\":\"WSSTACK\"},\"WSSTOP\":{\"description\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\n@param `secret` Secret for process status operations.\\n\\n@param `uuid` UUID of the WarpScript execution environment to stop.\\n\\n@param `status` `true` if an environment was found with that `uuid`, `false` otherwise.\\n\\n\",\"signature\":\"WSSTOP( uuid:STRING secret:STRING ): status:BOOLEAN\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOP\"},\"WSSTOPSESSION\":{\"description\":\"Stops the execution of a WarpScript program by forcing a call to [`STOP`](/doc/STOP). If the WarpScript program is currently in a [`TRY`](/doc/TRY) call, the execution may continue depending on the *catch* macro.\\n\\nThe environments to stop are identified by a session id.\\n\\n@param `session` Session of the WarpScript execution environments to stop.\\n\\n@param `count` Number of environments which had `session` as their session id.\\n\\n\",\"signature\":\"WSSTOPSESSION( session:STRING ): count:LONG\",\"tags\":[\"extensions\",\"platform\"],\"since\":\"2.5.0\",\"OPB64name\":\"WSSTOPSESSION\"},\"Z->\":{\"description\":\"Unpacks LONG values from a [Morton Code](https://en.wikipedia.org/wiki/Z-order_curve) stored in a byte array.\\n\\n@param `bitwidth` Size in bits of the LONG values to extract, from 1 to 63.\\n\\n@param `n` Number of LONG values to extract.\\n\\n@param `z` Byte array containing the Morton Code to unpack.\\n\\n@param `longs` List of extracted LONG values.\\n\\n\",\"signature\":\"Z->( z:BYTES n:LONG bitwidth:LONG ): longs:LIST<LONG>\",\"tags\":[\"conversion\"],\"since\":\"1.0.6\",\"OPB64name\":\"LXoy\"},\"ZDISCORDS\":{\"description\":\"The `ZDISCORDS` function detects discords in a standardized ([`STANDARDIZE`](/doc/STANDARDIZE) Geo Time Series™. The discord detection\\n algorithm is based on identifying outlier patterns in the Geo Time Series™. Outliers are patterns which differ significantly from their nearest neighbor.\\n\\nThe following constraints are enforced:\\n\\n- pattern length must divide window size\\n- quantization scale must be a power of two from 2 to 65536\\n- `ZDISCORDS` can only be applied to numeric Geo Time Series™ which are bucketized and filled (i.e. no bucket with missing values).\\n\\nGiven the `ZDISCORDS` expects the Geo Time Series™ it operates on to be standardized ([`STANDARDIZE`](/doc/STANDARDIZE), the discord detection \\nalgorithm is more sensitive than that of [`DISCORDS`](/doc/DISCORDS).\\n\\n@param `distance` This ratio is used to ignore patterns whose distance to their nearest neighbor is less than 1/ratio that of the previously selected pattern. This parameter is for advanced users, it is safe to leave it to 0.0.\\n\\n@param `overlapping` Flag indicating whether or not the `ZDISCORDS` function should report overlapping discords.\\n\\n@param `maximum` The maximum number of discords to identify.\\n\\n@param `window_size` Window size which is the width of each interval on which the pattern extraction should be performed, a pattern length which will determine how the window is segmented, and lastly a quantization scale which will determine how many different buckets will be used to ventilate the series values. (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `result` Geo Time Series™ whose ticks are those where discords were detected. The value, location and elevation at each tick are those of the input Geo Time Series™.\\n\\n\",\"signature\":\"ZDISCORDS( window_size:LONG maximum:LONG overlapping:BOOLEAN distance:DOUBLE ): result:GTS\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZDISCORDS\"},\"ZDTW\":{\"description\":\"The `DTW` function computes a [Dynamic Time Warping](https://en.wikipedia.org/wiki/Dynamic_time_warping) pseudo-distance on two Geo Time Series™.\\n\\nThe Geo Time Series™ will be Z-normalized prior to the computation.\\n\\n@param `threshold` Value above which the DTW computation will be aborted. Use 0.0 to disable the abort feature.\\n\\n@param `gts1` First Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `gts2` Second Geo Time Series™ on which to perform the DTW operation.\\n\\n@param `dtw` The computed Dynamic Time Warping or -1 if the threshold was reached.\\n\\n\",\"signature\":\"ZDTW( gts1:GTS gts2:GTS threshold:DOUBLE ): dtw:DOUBLE\",\"tags\":[\"gts\",\"distance\"],\"since\":\"1.2.11\",\"OPB64name\":\"ZDTW\"},\"ZIP\":{\"description\":\"The function ZIP takes a list of lists as parameters. Each list which are not singletons must be of same size.\\n\\nIt returns a list of lists where the i-th list contains the i-th elements of each input list in the same order.\\n\\nAlso, it considers singletons as a list of the same size with a duplicated value.\\n\\n@param `input` List of lists\\n\\n@param `output` List of lists\\n\\n\",\"signature\":\"ZIP( input:LIST<LIST> ): output:LIST<LIST>\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZIP\"},\"ZPATTERNDETECTION\":{\"description\":\"The `ZPATTERNDETECTION` function will detect patterns in a Geo Time Series™. The patterns it is able to detect are those extracted by the [`ZPATTERNS`](/doc/ZPATTERNS) or [`PATTERNS`](/doc/PATTERNS) functions.\\n\\nThe `ZPATTERNDETECTION` does not standardize the datapoints in the sliding window, assuming (wrongly) they already are.\\n\\nThe following constraints are enforced:\\n\\n* pattern length must divide window size\\n* quantization scale must be a power of two from 2 to 65536\\n* `ZPATTERNDETECTION` can only be applied to numeric Geo Time Series™ which are [bucketized](/doc/BUCKETIZE) and [filled](/doc/FILLVALUE) (i.e. no bucket with missing values).\\n* the patterns to detect must have been extracted with the same quantization scale and pattern length, the window size can be different.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `patterns` The list of patterns to detect (see [`PATTERNS`](/doc/PATTERNS))\\n\\n@param `lgts` The list of Geo Time Series™ to transform.\\n\\n@param `gts` The single GTS to transform.\\n\\n@param `result` The new Geo Time Series™ with values only at ticks at which one of the patterns was detected. The actual pattern detected is not available, call `PATTERNDETECTION` with a single pattern if you need to keep track of it.\\n\\n@param `lresult` The list of result GTS.\\n\\n\",\"signature\":\"ZPATTERNDETECTION( gts:GTS patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nZPATTERNDETECTION( lgts:LIST<GTS> patterns:LIST<STRING> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNDETECTION\"},\"ZPATTERNS\":{\"description\":\"Extracts symbolic patterns from Geo Time Series™ as [`PATTERNS`](/doc/PATTERNS) does, but does not standardize each window, assuming (wrongly) the GTS windows are already standardized.\\n\\n@param `wsize` The window size which is the width of each interval on which the pattern extraction should be performed\\n\\n@param `length` The pattern length which will determine how the window is segmented\\n\\n@param `scale` The quantization scale which will determine how many different buckets will be used to ventilate the series values\\n\\n@param `lgts` The list of Geo Time Series™ to transform\\n\\n@param `gts` The single GTS to transform\\n\\n@param `result` The new Geo Time Series™ of patterns. The value at each tick is the pattern corresponding to the window of window size starting at the given tick\\n\\n@param `lresult` The list of result GTS\\n\\n\",\"signature\":\"ZPATTERNS( gts:GTS wsize:NUMBER length:NUMBER scale:NUMBER ): result:GTS\\nZPATTERNS( lgts:LIST<GTS> wsize:NUMBER length:NUMBER scale:NUMBER ): lresult:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.13\",\"OPB64name\":\"ZPATTERNS\"},\"ZSCORE\":{\"description\":\"The 'ZSCORE' function consumes a flag, then normalizes a Geo Time Series™ or a **LIST** of Geo Time Series™ that are below by replacing their values by their [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe flag indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median).\\n\\nIf the GTS isn’t of type **DOUBLE** or if the deviation equals 0, an exception is raised.\\n\\n@param `flag` Indicates whether to use the mean (False), or the median (True) to calculate the [Z-score](https://en.wikipedia.org/wiki/Standard_score).\\n\\n@param `gts` Geo Time Series™\\n\\n@param `gtsList` List of Geo Time Series™\\n\\n@param `result` Geo Time Series™\\n\\n@param `resultList` List of Geo Time Series™\\n\\n\",\"signature\":\"ZSCORE( gts:GTS flag:BOOLEAN ): result:GTS\\nZSCORE( gtsList:LIST<GTS> flag:BOOLEAN ): resultList:LIST<GTS>\",\"tags\":[\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORE\"},\"ZSCORETEST\":{\"description\":\"The ZSCORETEST function detects outliers in a GTS by comparing the Z-score of its values with a given threshold.\\n\\nThe Z-score of a value represents the number of standard deviations (or median absolute deviations) it is away from the mean (or the median). If this value is greater than the given threshold, it is flagged as an outlier.\\n\\nA LIST of ticks, corresponding to the outliers, is pushed back onto the stack.\\n\\nThis function only applies to GTS of type **DOUBLE**.\\n\\n@param `gts` The Geo Time Series™ to test\\n\\n@param `result` List of the detected outliers timestamps\\n\\n@param `lgts` The list of Geo Time Series™ to test\\n\\n@param `lresult` List of list of the detected outliers timestamps\\n\\n@param `mad` False: use the mean/sigma, true: use the median/mad to calculate the Z-score\\n\\n@param `trigger` Optional threshold. Default value is 3.5\\n\\n\",\"signature\":\"ZSCORETEST( gts:GTS mad:BOOLEAN ): result:LIST<LONG>\\nZSCORETEST( lgts:LIST<GTS> mad:BOOLEAN ): lresult:LIST<LIST<LONG>>\\nZSCORETEST( gts:GTS mad:BOOLEAN trigger:DOUBLE ): result:LIST<LONG>\\nZSCORETEST( lgts:LIST<GTS> mad:BOOLEAN trigger:DOUBLE ): lresult:LIST<LIST<LONG>>\",\"tags\":[\"gts\",\"outlier\"],\"since\":\"1.0.0\",\"OPB64name\":\"ZSCORETEST\"},\"[\":{\"description\":\"Starts a list creation.\\n\\nThe `[` function creates a list by pushing a mark onto the stack. This is a syntactic help to better present list constructions. This function behaves like [`MARK`](/doc/MARK).\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\"[(): mark:MARK\",\"tags\":[\"lists\",\"stack\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lk\"},\"[[\":{\"description\":\"Pushes a MARK on the stack. This is a syntaxic help to better present Vector (VLIST) constructions.\\n \\n\\n@param `mark` A MARK instance.\\n\\n\",\"signature\":\"[[(): mark:MARK\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"Lpg\"},\"[[]]\":{\"description\":\"Pushes an empty Vector onto the stack.\\n\\n@param `vector` Empty Vector.\\n\\n\",\"signature\":\"[[]](): vector:VLIST\",\"tags\":[\"lists\"],\"since\":\"1.2.13\",\"OPB64name\":\"LphSMF\"},\"[]\":{\"description\":\"The [] function creates an empty LIST on the top of the stack.\\n\\n\\n@param `content` 0 to n elements.\\n\\n@param `newlist` list instance, initialized with content.\\n\\n\",\"signature\":\"[]( content:ANY ): newlist:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"Lpo\"},\"]\":{\"description\":\"Closes a currently open list and pushes it onto the stack.\\n\\n  The `]` function pops from the stack the elements of the list up to the first mark encountered. The marks are consumed.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"signature\":\"]( mark:MARK v1:ANY vN:ANY ): list:LIST\",\"tags\":[\"lists\"],\"since\":\"1.0.0\",\"OPB64name\":\"MF\"},\"]]\":{\"description\":\"Closes a currently open Vector (VLIST) and pushes it onto the stack. The elements on the stack are those up to the first mark encountered. The mark is discarded.\\n\\nVLIST are represented as lists on the stack.\\n\\n@param `v1` The first value\\n\\n@param `vN` The Nth value\\n\\n@param `list` The built list\\n\\n@param `mark` The mark indicating the deepest level to consider when building the list\\n\\n\",\"signature\":\"]]( mark:MARK v1:ANY vN:ANY ): list:VLIST\",\"tags\":[\"pig\"],\"since\":\"1.2.13\",\"OPB64name\":\"MKo\"},\"^\":{\"description\":\"Performs a bitwise **XOR** operation.\\n\\nThe `^` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **XOR**.\\n\\nSince Warp 10™ 2.1, `^` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be XOR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with XOR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts XOR with mask\\n\\n\",\"signature\":\"^( p1:LONG p2:LONG ): result:LONG\\n^( inputgts:GTS mask:LONG ): maskedgts:GTS\\n^( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"MV\"},\"bucketizer.and\":{\"description\":\"The `bucketizer.and` function applies the logical operator **AND** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.and(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.and\"},\"bucketizer.count\":{\"description\":\"The `bucketizer.count` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.count(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count\"},\"bucketizer.count.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.count.exclude-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.exclude-nulls` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.count.exclude-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.exclude-nulls\"},\"bucketizer.count.include-nulls\":{\"description\":\"**Deprecated**: `bucketizer.count.include-nulls` has the same behavior as `bucketizer.count`, use `bucketizer.count` instead.\\n\\nThe `bucketizer.count.include-nulls function computes the number of values, including null values, found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.count.include-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.include-nulls\"},\"bucketizer.count.nonnull\":{\"description\":\"The `bucketizer.count.nonnull` function computes the number of non-null values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.count.nonnull(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.count.nonnull\"},\"bucketizer.first\":{\"description\":\"The `bucketizer.first` function returns the first value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.first` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.first(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.first\"},\"bucketizer.join\":{\"description\":\"The `bucketizer.join` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"bucketizer.join( separator:STRING ): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join\"},\"bucketizer.join.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.join.forbid-nulls` has the same behavior as `bucketizer.join`, use `bucketizer.join` instead.\\n\\nThe `bucketizer.join.forbid-nulls` function renders the the concatenation of the string representation of values separated by the join string for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"bucketizer.join.forbid-nulls( separator:STRING ): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.join.forbid-nulls\"},\"bucketizer.last\":{\"description\":\"The `bucketizer.last` function returns the last value of the interval to bucketize with its associated location and elevation.\\n\\nThe `bucketizer.last` function can be applied to values of any type.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.last(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.last\"},\"bucketizer.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) of each bucket.\\n\\nThe returned location is the median of all the locations in the bucket, and the returned elevation is the median of all the elevations in the bucket.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.mad(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.0\",\"OPB64name\":\"bucketizer.mad\"},\"bucketizer.max\":{\"description\":\"The `bucketizer.max` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.max(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max\"},\"bucketizer.max.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.max.forbid-nulls` has the same behavior as `bucketizer.max`, use `bucketizer.max` instead.\\n\\nThe `bucketizer.max.forbid-nulls` function returns the max of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\nThe `bucketizer.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.max.forbid-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.max.forbid-nulls\"},\"bucketizer.mean\":{\"description\":\"The `bucketizer.mean` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.mean(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean\"},\"bucketizer.mean.circular\":{\"description\":\"The `bucketizer.mean.circular` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`bucketizer.mean.circular.exclude-nulls`](/doc/bucketizer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `bucketizer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"bucketizer.mean.circular( modulo:NUMBER ): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular\"},\"bucketizer.mean.circular.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.mean.circular.exclude-nulls` has the same behavior as `bucketizer.mean.circular`, use `bucketizer.mean.circular` instead.\\n        \\nThe `bucketizer.mean.circular.exclude-nulls` function returns the the circular mean of all the values found in the bucket.  \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned.\\n\\nThe `bucketizer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"bucketizer.mean.circular.exclude-nulls( modulo:NUMBER ): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.circular.exclude-nulls\"},\"bucketizer.mean.exclude-nulls\":{\"description\":\"**Deprecated**: `bucketizer.mean.exclude-nulls` has the same behavior as `bucketizer.mean`, use `bucketizer.mean` instead.\\n \\nThe `bucketizer.mean.exclude-nulls` function returns the mean of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `bucketizer.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.mean.exclude-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.mean.exclude-nulls\"},\"bucketizer.median\":{\"description\":\"The `bucketizer.median` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.median(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.median\"},\"bucketizer.median.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.median.forbid-nulls` has the same behavior as `bucketizer.median`, use `bucketizer.median` instead.\\n\\nThe `bucketizer.median.forbid-nulls` function returns the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.median.forbid-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"2.4.0\",\"OPB64name\":\"bucketizer.median.forbid-nulls\"},\"bucketizer.min\":{\"description\":\"The `bucketizer.min` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.min(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min\"},\"bucketizer.min.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.min.forbid-nulls` has the same behavior as `bucketizer.min`, use `bucketizer.min` instead.\\n\\nThe `bucketizer.min.forbid-nulls` function returns the min of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the selected value. If the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `bucketizer.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value true is considered greater than false.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.min.forbid-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.min.forbid-nulls\"},\"bucketizer.or\":{\"description\":\"The `bucketizer.or` function applies the logical operator **OR** on all the values found in the interval to bucketize.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.or(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.or\"},\"bucketizer.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the bucket.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n@param `percentile` Percentile to consider\\n\\n\",\"signature\":\"bucketizer.percentile( percentile:NUMBER ): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.percentile\"},\"bucketizer.rms\":{\"description\":\"The `bucketizer.rms` function returns the root mean square of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe location and elevation returned are the last one encountered for each bucket.\\n\\nThe `bucketizer.rms` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.rms(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.2.18\",\"OPB64name\":\"bucketizer.rms\"},\"bucketizer.sd\":{\"description\":\"This bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.sd( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd\"},\"bucketizer.sd.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.sd.forbid-nulls` has the same behavior as `bucketizer.sd`, use `bucketizer.sd` instead.\\n\\nThis bucketizer function returns the standard deviation of each bucket. The location and elevation returned are those associated with the most recent value in the bucket.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `bucketizer.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"bucketizer.sd.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"2.2.1\",\"OPB64name\":\"bucketizer.sd.forbid-nulls\"},\"bucketizer.sum\":{\"description\":\"The `bucketizer.sum` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.sum(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum\"},\"bucketizer.sum.forbid-nulls\":{\"description\":\"**Deprecated**: `bucketizer.sum.forbid-nulls` has the same behavior as `bucketizer.sum`, use `bucketizer.sum` instead.\\n\\nThe `bucketizer.sum.forbid-nulls` function returns the sum of all the values found for each bucket of a [bucketized](/doc/BUCKETIZE) Geo Time Series™.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `bucketizer.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bucketizer` Bucketizer to apply\\n\\n\",\"signature\":\"bucketizer.sum.forbid-nulls(): bucketizer:AGGREGATOR\",\"tags\":[\"bucketizer\"],\"since\":\"1.0.11\",\"OPB64name\":\"bucketizer.sum.forbid-nulls\"},\"d\":{\"description\":\"Converts a number of days (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of days from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of days to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of days\\n\\n\",\"signature\":\"d( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"d\"},\"e\":{\"description\":\"Alias of [E](/doc/GF).\\n\\nThe `e` function pushes the value of *e* (2.718281828459045) onto the stack.\\n\\n@param `eValue` Value of *e* (2.718281828459045).\\n\\n\",\"signature\":\"e(): eValue:DOUBLE\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"OF\"},\"filler.interpolate\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with a linear interpolation of enclosing values in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading or trailing ticks as there is no possible interpolation.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"filler.interpolate(): filler:FILLER\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.interpolate\"},\"filler.next\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the next value in a Geo Time Series™.\\n\\nNote that this function will not fill missing trailing ticks as there is no next value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"filler.next(): filler:FILLER\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.next\"},\"filler.previous\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the previous value in a Geo Time Series™.\\n\\nNote that this function will not fill missing leading ticks as there is no previous value to use.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"filler.previous(): filler:FILLER\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.previous\"},\"filler.trend\":{\"description\":\"Pushes onto the stack a *filler* function which fills missing values with the centroid of the points computed by projecting trends from both sides of the missing point.\\n\\nNote that this function will fill all missing points.\\n\\n@param `filler` Filler function to use for filling missing values.\\n\\n\",\"signature\":\"filler.trend(): filler:FILLER\",\"tags\":[\"filler\"],\"since\":\"2.0.0\",\"OPB64name\":\"filler.trend\"},\"filter.all.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.eq( filter-value:LONG ): result:FILTER\\nfilter.all.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.all.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.all.eq( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.eq\"},\"filter.all.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.ge( filter-value:LONG ): result:FILTER\\nfilter.all.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.all.ge( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ge\"},\"filter.all.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.gt( filter-value:LONG ): result:FILTER\\nfilter.all.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.all.gt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.gt\"},\"filter.all.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.le( filter-value:LONG ): result:FILTER\\nfilter.all.le( filter-value:DOUBLE ): result:FILTER\\nfilter.all.le( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.le\"},\"filter.all.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.lt( filter-value:LONG ): result:FILTER\\nfilter.all.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.all.lt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.lt\"},\"filter.all.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose every value does not equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.all.ne( filter-value:LONG ): result:FILTER\\nfilter.all.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.all.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.all.ne( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.all.ne\"},\"filter.any.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.eq( filter-value:LONG ): result:FILTER\\nfilter.any.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.any.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.any.eq( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.eq\"},\"filter.any.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.ge( filter-value:LONG ): result:FILTER\\nfilter.any.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.any.ge( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ge\"},\"filter.any.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.gt( filter-value:LONG ): result:FILTER\\nfilter.any.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.any.gt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.gt\"},\"filter.any.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is lower or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.le( filter-value:LONG ): result:FILTER\\nfilter.any.le( filter-value:DOUBLE ): result:FILTER\\nfilter.any.le( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.le\"},\"filter.any.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value is strictly lower than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.lt( filter-value:LONG ): result:FILTER\\nfilter.any.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.any.lt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.lt\"},\"filter.any.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose at least one value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.any.ne( filter-value:LONG ): result:FILTER\\nfilter.any.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.any.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.any.ne( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.any.ne\"},\"filter.byattr\":{\"description\":\"This filter function only selects the Geo Time Series™ whose attributes match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.byattr( filter:MAP ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.byattr\"},\"filter.byclass\":{\"description\":\"This filter function only selects the Geo Time Series™ whose class name matches the filter parameter.\\n\\n@param `filter` The filter parameter is a **STRING**, if it starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.byclass( filter:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.byclass\"},\"filter.bylabels\":{\"description\":\"This filter function only selects the Geo Time Series™ whose labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.bylabels( filter:MAP ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bylabels\"},\"filter.bylabelsattr\":{\"description\":\"This filter function only selects the Geo Time Series™ whose attributes or labels match the filter parameter.\\n\\n@param `filter` The filter parameter is a map of attributes or labels names as key and a selector as value. If the selector starts with `~`, the rest of the string is considered as a regular expression. If it starts with `=`, it is considered as an exact match. If it does not start with `~` or `=`, it is also considered as an exact match.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.bylabelsattr( filter:MAP ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.11\",\"OPB64name\":\"filter.bylabelsattr\"},\"filter.bymetadata\":{\"description\":\"Filter GTSs by retaining those whose metadata **exactly** match at least one metadata from the given GTS list. \\n\\nThe metadata consists of the classname and labels.\\n\\n@param `lgts` List of GTSs to extract the metadata from.\\n\\n@param `filter` Filter to apply which will keep only GTSs with exact metadata matching.\\n\\n\",\"signature\":\"filter.bymetadata( lgts:LIST<GTS> ): filter:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.bymetadata\"},\"filter.byselector\":{\"description\":\"This filter allow to select GTS with a standard or an extended selector.\\n###### Standard selector: `classname{labelOrAttribute=x}`\\n- If classname match, `filter.byselector` looks into input labels to check if labelOrAttribute exists and equals x. If labelOrAttribute is not found among input labels, it looks into input attributes if the label exists and equals x.\\n###### Extended selector: `classname{labelname=x}{attributename=y}` matches if:\\n- classname matches\\n- input have labelname in its labels, and label value matches\\n- input have attributename in its labels, and attribute value matches\\n\\n###### Selectors example:\\n- `~.*{}` matches everything.\\n- `={}` matches only emtpy classnames, whatever the labels and attributes.\\n- `~.*{label=value}{} filter.byselector` is equivalent to `{ 'label' 'value' } filter.bylabels`.\\n- `~.*{}{attribute~value} filter.byselector` is equivalent to `{ 'attribute' '~value' } filter.byattr`.\\n\\n\\n@param `selector` The selector parameter. It could be a standard or an extended selector.\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.byselector( selector:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.byselector\"},\"filter.bysize\":{\"description\":\"Filter GTSs by retaining those whose size is contained between specified bounds (inclusive).\\n\\n@param `min` The minimum size\\n\\n@param `max` The maximum size\\n\\n@param `result` The filter to apply\\n\\n\",\"signature\":\"filter.bysize( min:LONG max:LONG ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"2.4.0\",\"OPB64name\":\"filter.bysize\"},\"filter.last.eq\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value equals the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.eq( filter-value:LONG ): result:FILTER\\nfilter.last.eq( filter-value:DOUBLE ): result:FILTER\\nfilter.last.eq( filter-value:BOOLEAN ): result:FILTER\\nfilter.last.eq( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.eq\"},\"filter.last.ge\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is greater or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.ge( filter-value:LONG ): result:FILTER\\nfilter.last.ge( filter-value:DOUBLE ): result:FILTER\\nfilter.last.ge( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ge\"},\"filter.last.gt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is greater than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.gt( filter-value:LONG ): result:FILTER\\nfilter.last.gt( filter-value:DOUBLE ): result:FILTER\\nfilter.last.gt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.gt\"},\"filter.last.le\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is less or equal to the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.le( filter-value:LONG ): result:FILTER\\nfilter.last.le( filter-value:DOUBLE ): result:FILTER\\nfilter.last.le( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.le\"},\"filter.last.lt\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value is less than the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.lt( filter-value:LONG ): result:FILTER\\nfilter.last.lt( filter-value:DOUBLE ): result:FILTER\\nfilter.last.lt( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.lt\"},\"filter.last.ne\":{\"description\":\"This filter function only selects the Geo Time Series™ whose last value does not equal the filter parameter.\\n\\nThe filter parameter is a **LONG**, a **DOUBLE**, a **BOOLEAN** or a **STRING**.\\n\\n@param `filter-value` filter parameter\\n\\n@param `result` Filter to apply\\n\\n\",\"signature\":\"filter.last.ne( filter-value:LONG ): result:FILTER\\nfilter.last.ne( filter-value:DOUBLE ): result:FILTER\\nfilter.last.ne( filter-value:BOOLEAN ): result:FILTER\\nfilter.last.ne( filter-value:STRING ): result:FILTER\",\"tags\":[\"filter\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.last.ne\"},\"filter.latencies\":{\"description\":\"Pushes onto the stack a *pseudo* FILTER which computes latencies in a network. It uses the [`FILTER`](/doc/FILTER) framework for conveniency but really returns new GTS.\\n\\nThe input Geo Time Series™ are assumed to have values which are fingerprints of packet payloads. The first GTS is assumed to be the *uplink* and all the other GTS the *downlinks*.\\n\\nThe ticks are the time at which a packet with the given fingerprint was observed.\\n\\nThe generated Geo Time Series™ will have the same ticks as the uplink one, except the values will be latencies instead of packet fingerprints.\\n\\nThe `filter.latencies` function accepts a number of options:\\n\\n| Option | Description |\\n|--------|-------------|\\n| uplink.latency.min | Compute minimum latency on the uplink. |\\n| uplink.latency.max | Compute maximum latency on the uplink. |\\n| downlink.latency.min | Compute minimum latency on each downlink. |\\n| downlink.latency.max | Compute maximum latency on each downlink. |\\n| downlink.matches | Compute the number of matches for each downlink. |\\n| downlinks.totalmatches | Computes the total number of matches across downlinks. |\\n| downlinks.bitsets | Computes a bitset of downlinks which saw the packet (limited to 64 downlinks). |\\n| downlinks.withmatches | Computes the number of downlinks with matches for the given packet. |\\n\\nThis pseudo FILTER is very specific to a networking use case, but it is a good demonstration of the power of WarpScript and its frameworks.\\n\\n@param `options` List of options, see above for their description.\\n\\n@param `maxLatency` Maximum allowable latency, packets with latency above this threshold are ignored.\\n\\n@param `minLatency` Minimum latency, packets with a latency below this threshold are ignored.\\n\\n@param `filter` Instance of `filter.latencies`.\\n\\n\",\"signature\":\"filter.latencies( minLatency:LONG maxLatency:LONG options:LIST<STRING> ): filter:FILTER\",\"tags\":[\"filter\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"filter.latencies\"},\"h\":{\"description\":\"Converts a number of hours (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of hours from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of hours to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of hours\\n\\n\",\"signature\":\"h( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"h\"},\"m\":{\"description\":\"Converts a number of minutes (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of minutes from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of minutes to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of minutes\\n\\n\",\"signature\":\"m( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"m\"},\"mapper.abs\":{\"description\":\"This mapper function returns the absolute value of single value in a sliding window.\\n\\nThe `mapper.abs` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.abs(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.abs\"},\"mapper.add\":{\"description\":\"This mapper function adds a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.add` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.add` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Value to add\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.add( constant:DOUBLE ): result:AGGREGATOR\\nmapper.add( constant:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.add\"},\"mapper.and\":{\"description\":\"This mapper function applies the logical operator **AND** on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.and(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.and\"},\"mapper.ceil\":{\"description\":\"This mapper function rounds the single value in a sliding window to the closests greater **LONG**.\\n\\nThe `mapper.ceil` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ceil(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.ceil\"},\"mapper.count\":{\"description\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.count(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count\"},\"mapper.count.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.count.exclude-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.count.exclude-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.exclude-nulls\"},\"mapper.count.include-nulls\":{\"description\":\"**Deprecated**: `mapper.count.include-nulls` has the same behavior as `mapper.count`, use `mapper.count` instead.\\n\\nThis mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are included.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.count.include-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.include-nulls\"},\"mapper.count.nonnull\":{\"description\":\"This mapper function counts the number of all values found in the sliding window. The associated location and elevation are\\nthose of the most recent tick of the window. Null values are excluded.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.count.nonnull(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.count.nonnull\"},\"mapper.day\":{\"description\":\"This mapper function returns the day of the tick for which it is computed.\\n\\nThe `mapper.day` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n@param `timezone` Timezone to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"mapper.day( timezone:STRING ): result:AGGREGATOR\\nmapper.day( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.day\"},\"mapper.delta\":{\"description\":\"This mapper function computes the delta between the last and first values (delta = last - first) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.delta` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does \\nnot return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.delta(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.delta\"},\"mapper.dotproduct\":{\"description\":\"The `mapper.dotproduct` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.dotproduct( vector:LIST ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct\"},\"mapper.dotproduct.positive\":{\"description\":\"The `mapper.dotproduct.positive` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it sets all negative results to 0.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.dotproduct.positive( vector:LIST ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.positive\"},\"mapper.dotproduct.sigmoid\":{\"description\":\"The `mapper.dotproduct.sigmoid` function consumes a vector as parameter (a **LIST** of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the sigmoid of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.dotproduct.sigmoid( vector:LIST ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.sigmoid\"},\"mapper.dotproduct.tanh\":{\"description\":\"The `mapper.dotproduct.tanh` function consumes a vector as parameter (a **LIST* of **DOUBLE**) from the top of the stack.\\n\\nThe resulting mapper computes the dot product of the given vector with the values of the sliding window, then it returns the \\n[hyperbolic tangent](https://en.wikipedia.org/wiki/Hyperbolic_function) of this result.\\n\\nIf the sliding window at a tick does not have the same size as the given vector, then no value is produced.\\n\\nThe resulting mapper can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `vector` Element of the vector\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.dotproduct.tanh( vector:LIST ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.dotproduct.tanh\"},\"mapper.eq\":{\"description\":\"This mapper function returns the first value in a sliding window which is equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.eq` function can be applied to data of any type.\\n\\nThe `mapper.eq` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq( parameter:LONG ): result:AGGREGATOR\\nmapper.eq( parameter:DOUBLE ): result:AGGREGATOR\\nmapper.eq( parameter:BOOLEAN ): result:AGGREGATOR\\nmapper.eq( parameter:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.eq\"},\"mapper.eq.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is equal to a given value.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.eq.elev` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq.elev( parameter:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.elev\"},\"mapper.eq.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is equal to a given value.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.eq.hhcode` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq.hhcode( parameter:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.hhcode\"},\"mapper.eq.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is equal to a given value.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.eq.lat` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq.lat( parameter:LONG ): result:AGGREGATOR\\nmapper.eq.lat( parameter:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lat\"},\"mapper.eq.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is equal to a given value.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.eq.lon` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq.lon( parameter:LONG ): result:AGGREGATOR\\nmapper.eq.lon( parameter:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.lon\"},\"mapper.eq.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is equal to a given value.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.eq.tick` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.eq.tick( parameter:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.eq.tick\"},\"mapper.exp\":{\"description\":\"This mapper function raises a constant to the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.exp` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.exp` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\n> ## Note\\n> The `mapper.exp` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n>\\n> So you are looking for a way to apply the exponential function, ex, to a series of Geo Time Series™. It’s very easy to do it using `mapper.exp` and the\\n> [`e`](/doc/OF) constant.\\n\\n@param `result` Mapper to apply\\n\\n@param `constant` Constant to use\\n\\n\",\"signature\":\"mapper.exp( constant:LONG ): result:AGGREGATOR\\nmapper.exp( constant:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.exp\"},\"mapper.finite\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns its input value only if it is finite (*i.e.* a non DOUBLE or a DOUBLE which is neither NaN nor Infinity).\\n\\n@param `result` Instance of mapper.finite.\\n\\n\",\"signature\":\"mapper.finite(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.finite\"},\"mapper.first\":{\"description\":\"This mapper function returns the first value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.first` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.first(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.first\"},\"mapper.floor\":{\"description\":\"This mapper function rounds the *single value* in a sliding window to the closests lower **LONG**.\\n\\nThe `mapper.floor` function can be applied to data of type **LONG** or **DOUBLE**.      \\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.floor(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.floor\"},\"mapper.ge\":{\"description\":\"This mapper function returns the first value in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ge` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.ge` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge( threshold:LONG ): result:AGGREGATOR\\nmapper.ge( threshold:STRING ): result:AGGREGATOR\\nmapper.ge( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ge\"},\"mapper.ge.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ge.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge.elev( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.elev\"},\"mapper.ge.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ge.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge.hhcode( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.hhcode\"},\"mapper.ge.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ge.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.ge.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lat\"},\"mapper.ge.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ge.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.ge.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.lon\"},\"mapper.ge.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is greater or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ge.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ge.tick( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ge.tick\"},\"mapper.geo.approximate\":{\"description\":\"Pushes onto the stack a mapper instance which will transform the input Geo Time Series™ by approximating the location to the givnen resolution.\\n\\nApproximation is done by clearing lower bits of the location [HHCode](https://en.wikipedia.org/wiki/HHCode). At resolution `R`, the lower `64 - 2R` bits are cleared.\\n\\n| Resolution | Precision |\\n| --- | --- |\\n| 2 | 10,000 km |\\n| 4 | 2,500 km |\\n| 6 | 625 km |\\n| 8 | 156 km |\\n| 10 | 39 km |\\n| 12 | 10 km |\\n| 14 |  2.5 km |\\n| 16 | 600 m |\\n| 18 | 150 m |\\n| 20 | 40 m |\\n| 22 | 10 m |\\n| 24 | 2.5 m |\\n| 26 | 60 cm |\\n| 28 | 15 cm |\\n| 30 | 4 cm |\\n\\nThe exact precision is 40,000 km divided by 2**resolution.\\n\\n\\n\\n@param `resolution` HHCode resolution at which to approximate the locations. Resoluion is an even number between 2 (coarsest) and 32 (finest).\\n\\n@param `result` Instance of mapper.\\n\\n\",\"signature\":\"mapper.geo.approximate( resolution:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.approximate\"},\"mapper.geo.clear\":{\"description\":\"Pushes onto the stack a mapper which will discard location and elevation information when applied to a Geo Time Series™.\\n\\nThis mapper can only be applied to single values\\n\\n@param `result` Instance of the `mapper.geo.clear` mapper.\\n\\n\",\"signature\":\"mapper.geo.clear(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.geo.clear\"},\"mapper.geo.fence\":{\"description\":\"This function produces a `mapper` which outputs a `BOOLEAN` for each point with an associated location. The value of the output is `true` if the location is inside the provided `GEOSHAPE` and `false` otherwise.\\nThe geo zone can be defined in [WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using [`GEO.WKT`](/doc/GEO.WKT) or in [GeoJSON](https://en.wikipedia.org/wiki/GeoJSON) using [`GEO.JSON`](/doc/GEO.JSON).\\n\\n@param `zone` Geographical zone.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.geo.fence( zone:GEOSHAPE ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"2.7.1\",\"OPB64name\":\"mapper.geo.fence\"},\"mapper.geo.outside\":{\"description\":\"This mapper filters the Geo Time Series™, keeping only the points outside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.geo.outside( geoZone:GEOSHAPE ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.outside\"},\"mapper.geo.within\":{\"description\":\"This mapper filters the Geo Time Series™, keeping only the points inside a geographical zone (geo zone). The geo zone can be defined in\\n[WKT](http://en.wikipedia.org/wiki/Well-known_text) format by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `geoZone` Geo zone defined by using the [`GEO.WKT`](/doc/GEO.WKT) function.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.geo.within( geoZone:GEOSHAPE ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.geo.within\"},\"mapper.gt\":{\"description\":\"This mapper function returns the first value in a sliding window which is greater than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.gt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.gt` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt( threshold:LONG ): result:AGGREGATOR\\nmapper.gt( threshold:STRING ): result:AGGREGATOR\\nmapper.gt( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.gt\"},\"mapper.gt.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is greater than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.gt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt.elev( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.elev\"},\"mapper.gt.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is greater than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.gt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt.hhcode( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.hhcode\"},\"mapper.gt.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is greater than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.gt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.gt.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lat\"},\"mapper.gt.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is greater than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.gt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.gt.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.lon\"},\"mapper.gt.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is greater than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.gt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.gt.tick( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.gt.tick\"},\"mapper.hdist\":{\"description\":\"The `mapper.hdist` function computes the total distance traveled while going through the points in the sliding window in chronological order. This distance is in meters.\\n\\nThe distance used is the loxodromic distance aka rhumb line. As a consequence, elevation is not taken into account in the distance.\\n\\nIf a point has no position in the sliding window, it is ignored.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe `mapper.hdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `hdistMapper` A function which can be used in a mapper.\\n\\n\",\"signature\":\"mapper.hdist(): hdistMapper:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hdist\"},\"mapper.highest\":{\"description\":\"This mapper function returns the value associated with the highest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the most recent is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.highest(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.highest\"},\"mapper.hour\":{\"description\":\"This mapper function returns the hour of the tick for which it is computed.\\n\\nThe `mapper.hour` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"mapper.hour( timezone:STRING ): result:AGGREGATOR\\nmapper.hour( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.hour\"},\"mapper.hspeed\":{\"description\":\"This mapper function computes the horizontal speed along the path traveled in the sliding window.\\n\\nThe distance is computed by summing the distances along the rhumb line between two consecutive locations.\\n\\nIf there is only one tick in the sliding window, the speed is 0.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.hspeed` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.hspeed(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.hspeed\"},\"mapper.join\":{\"description\":\"This mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"mapper.join( separator:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join\"},\"mapper.join.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.join.forbid-nulls` has the same behavior as `mapper.join`, use `mapper.join` instead.\\n\\nThis mapper function renders the the concatenation of the string representation of values separated by the join string of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n@param `separator` Separator used for concatenation\\n\\n\",\"signature\":\"mapper.join.forbid-nulls( separator:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.join.forbid-nulls\"},\"mapper.kernel.cosine\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [cosine kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics.\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.cosine( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.cosine\"},\"mapper.kernel.epanechnikov\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using an [epanechnikov kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.epanechnikov( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.epanechnikov\"},\"mapper.kernel.gaussian\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [gaussian kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.gaussian( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.gaussian\"},\"mapper.kernel.logistic\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [logistic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted average](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) algorithm.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.logistic( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.logistic\"},\"mapper.kernel.quartic\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [quartic kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.quartic( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.quartic\"},\"mapper.kernel.silverman\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [silverman kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.silverman( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.silverman\"},\"mapper.kernel.triangular\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triangular kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.triangular( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triangular\"},\"mapper.kernel.tricube\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [tricube kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.tricube( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.tricube\"},\"mapper.kernel.triweight\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [triweight kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.triweight( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.triweight\"},\"mapper.kernel.uniform\":{\"description\":\"This function pushes onto the stack a [kernel smoothing](https://en.wikipedia.org/wiki/Kernel_smoother) mapper using a [uniform kernel](https://en.wikipedia.org/wiki/Kernel_(statistics)#In_non-parametric_statistics).\\nThe mapper applies the [Nadaraya-Watson kernel-weighted](https://en.wikipedia.org/wiki/Kernel_regression#Nadaraya.E2.80.93Watson_kernel_regression) average algorithm.\\n\\nThe function expects on top of the stack a bandwidth expressed as an odd number of ticks and below it a step expressed in time units. The step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel. The bandwidth in time units is the bandwidth in ticks times the step.\\n\\n@param `step` Expressed in time units, the step parameter is used to determine the distance of a tick from the tick being computed to feed it into the kernel.\\n\\n@param `bandwidth` Odd number of ticks, the bandwidth in time units is the bandwidth in ticks times the step\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.kernel.uniform( bandwidth:LONG step:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.kernel.uniform\"},\"mapper.last\":{\"description\":\"This [`mapper`](/doc/MAP) function returns the last value of each sliding window with its associated location and elevation.\\n\\nThe `mapper.last` function can be applied to values of any type.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.last(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.last\"},\"mapper.le\":{\"description\":\"This mapper function returns the first value in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.le` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.le` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le( threshold:DOUBLE ): result:AGGREGATOR\\nmapper.le( threshold:LONG ): result:AGGREGATOR\\nmapper.le( threshold:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.le\"},\"mapper.le.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.le.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le.elev( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.elev\"},\"mapper.le.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less or equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.le.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le.hhcode( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.hhcode\"},\"mapper.le.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.le.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.le.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lat\"},\"mapper.le.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is less or equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.le.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.le.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.lon\"},\"mapper.le.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is less or equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.le.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.le.tick( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.le.tick\"},\"mapper.log\":{\"description\":\"This mapper function takes the log of the **single value** in a sliding window in the base used as parameter to `mapper.log`.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.log` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.log` function must be parameterized with the constant.\\n\\nThe result is always of type **DOUBLE**.\\n\\nThe `mapper.log` mapper needs a single value sliding window, i.e. pre-window and post-window to 0.\\n\\n@param `constant` Constant parameter\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.log( constant:DOUBLE ): result:AGGREGATOR\\nmapper.log( constant:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.log\"},\"mapper.lowest\":{\"description\":\"This mapper function returns the value associated with the lowest elevation in the sliding window. The location and elevation returned are those \\nassociated with the selected value. In case of multiple occurrences, the one appearing first chronologically is selected.\\n\\nIf no elevation data was found in the sliding window, no value will be returned.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lowest(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.lowest\"},\"mapper.lt\":{\"description\":\"This mapper function returns the first value in a sliding window which is less than a given threshold.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.lt` function can be applied to data of any type except **BOOLEAN**.\\n\\nThe `mapper.lt` function must be parameterized with the threshold.\\n\\n\\n@param `threshold` Threshold used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt( threshold:DOUBLE ): result:AGGREGATOR\\nmapper.lt( threshold:LONG ): result:AGGREGATOR\\nmapper.lt( threshold:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.lt\"},\"mapper.lt.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is less than a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.lt.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt.elev( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.elev\"},\"mapper.lt.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is less than a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.lt.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt.hhcode( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.hhcode\"},\"mapper.lt.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is less than a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.lt.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.lt.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lat\"},\"mapper.lt.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is less than a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.lt.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.lt.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.lon\"},\"mapper.lt.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is less than a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.lt.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.lt.tick( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.lt.tick\"},\"mapper.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) over each sliding window.\\n\\nThe returned location is the median of all the locations in the sliding window, and the returned elevation is the median of all the elevations in the window.\\n\\n@param `result` Instance of `mapper.mad`.\\n\\n\",\"signature\":\"mapper.mad(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.2.0\",\"OPB64name\":\"mapper.mad\"},\"mapper.max\":{\"description\":\"This mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.max(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max\"},\"mapper.max.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.max.forbid-nulls` has the same behavior as `mapper.max`, use `mapper.max` instead.\\n\\nThis mapper function returns the max of all the values found in each sliding window. The associated location and elevation are those of the selected value. If the max value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.max.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.max.forbid-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.max.forbid-nulls\"},\"mapper.max.x\":{\"description\":\"This mapper function returns the max between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.max.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.max.x( constant:DOUBLE ): result:AGGREGATOR\\nmapper.max.x( constant:LONG ): result:AGGREGATOR\\nmapper.max.x( constant:STRING ): result:AGGREGATOR\\nmapper.max.x( constant:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.max.x\"},\"mapper.mean\":{\"description\":\"This mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.mean(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean\"},\"mapper.mean.circular\":{\"description\":\"This function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`mapper.mean.circular.exclude-nulls`](/doc/mapper.mean.circular.exclude-nulls) if your sliding windows may contain nulls.\\n\\nThe `mapper.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"mapper.mean.circular( modulo:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular\"},\"mapper.mean.circular.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.mean.circular.exclude-nulls` has the same behavior as `mapper.mean.circular`, use `mapper.mean.circular` instead.\\n\\nThis function will push a mapper onto the stack which can then be used to compute the circular mean of all the values found in each sliding window. \\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe mapper function produced by `mapper.mean.circular.exclude-nulls` can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING**\\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `mapper.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be used to determine the span \\nof circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `result` Mapper to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"mapper.mean.circular.exclude-nulls( modulo:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.circular.exclude-nulls\"},\"mapper.mean.exclude-nulls\":{\"description\":\"**Deprecated**: `mapper.mean.exclude-nulls` has the same behavior as `mapper.mean`, use `mapper.mean` instead.\\n        \\nThis mapper function returns the mean of all the values found in each sliding window. The associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `mapper.mean.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.mean.exclude-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.mean.exclude-nulls\"},\"mapper.median\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median`.\\n\\n\",\"signature\":\"mapper.median(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.median\"},\"mapper.median.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.median.forbid-nulls` has the same behavior as `mapper.median`, use `mapper.median` instead.\\n\\nPushes onto the stack an AGGREGATOR which computes the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values in the sliding window.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `result` Instance of `mapper.median.forbid-nulls`.\\n\\n\",\"signature\":\"mapper.median.forbid-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"2.4.0\",\"OPB64name\":\"mapper.median.forbid-nulls\"},\"mapper.min\":{\"description\":\"This mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.min(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min\"},\"mapper.min.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.min.forbid-nulls` has the same behavior as `mapper.min`, use `mapper.min` instead.\\n\\nThis mapper function returns the min of all the values found in each sliding window. The associated location and elevation are those of the selected value. \\nIf the min value is encountered several times, the selected one is the one that appears first chronologically.\\n\\nThe `mapper.min.forbid-nulls` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than **true**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.min.forbid-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.min.forbid-nulls\"},\"mapper.min.x\":{\"description\":\"This mapper function returns the min between a constant passed as parameter and each value. The associated location and elevation are those of the \\nselected value.\\n\\nThe `mapper.min.x` function can be applied to values of any type, when applied to **BOOLEAN** types, the value **false** is considered less than true.\\n\\n\\n@param `constant` Constant used to compare\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.min.x( constant:DOUBLE ): result:AGGREGATOR\\nmapper.min.x( constant:LONG ): result:AGGREGATOR\\nmapper.min.x( constant:STRING ): result:AGGREGATOR\\nmapper.min.x( constant:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.min.x\"},\"mapper.minute\":{\"description\":\"This mapper function returns the minute of the tick for which it is computed.\\n\\nThe `mapper.minute` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"mapper.minute( timezone:STRING ): result:AGGREGATOR\\nmapper.minute( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.minute\"},\"mapper.mod\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the remainder of a value given a modulus.\\n\\nThis MAPPER can only be applied to a single value.\\n\\n@param `modulus` Modulus to consider when computing the remainder.\\n\\n@param `result` Instance of `mapper.mod`.\\n\\n\",\"signature\":\"mapper.mod( modulus:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.2.3\",\"OPB64name\":\"mapper.mod\"},\"mapper.month\":{\"description\":\"This mapper function returns the month of the tick for which it is computed.\\n\\nThe `mapper.month` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.month( timezone:STRING ): result:AGGREGATOR\\nmapper.month( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.month\"},\"mapper.mul\":{\"description\":\"This mapper function multiplies by a constant the single value in a sliding window.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.mul` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.mul` function must be parameterized with the constant.\\n\\nThe result will be of the same type as the constant.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.mul( constant:LONG ): result:AGGREGATOR\\nmapper.mul( constant:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.mul\"},\"mapper.ne\":{\"description\":\"This mapper function returns the first value in a sliding window which is not equal to a given value.\\n\\nThe associated location and elevation are those of the selected value.\\n\\nThe `mapper.ne` function can be applied to data of any type.\\n\\nThe `mapper.ne` function must be parameterized with the value against which to test for equality.\\n\\n@param `parameter` Parameter to use for comparision\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne( parameter:LONG ): result:AGGREGATOR\\nmapper.ne( parameter:DOUBLE ): result:AGGREGATOR\\nmapper.ne( parameter:BOOLEAN ): result:AGGREGATOR\\nmapper.ne( parameter:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.ne\"},\"mapper.ne.elev\":{\"description\":\"This mapper function returns the first elevation in a sliding window which is not equal to a given threshold.\\n\\nThe associated location and value are those of the selected elevation.\\n\\nThe `mapper.ne.elev` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne.elev( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.elev\"},\"mapper.ne.hhcode\":{\"description\":\"This mapper function returns the first location expressed as a hhcode in a sliding window which is not equal to a given threshold.\\n\\nThe associated elevation and value are those of the selected location.\\n\\nThe `mapper.ne.hhcode` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne.hhcode( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.hhcode\"},\"mapper.ne.lat\":{\"description\":\"This mapper function returns the first latitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated longitude, elevation and value are those of the selected latitude.\\n\\nThe `mapper.ne.lat` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne.lat( threshold:LONG ): result:AGGREGATOR\\nmapper.ne.lat( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lat\"},\"mapper.ne.lon\":{\"description\":\"This mapper function returns the first longitude in a sliding window which is not equal to a given threshold.\\n\\nThe associated latitude, elevation and value are those of the selected longitude.\\n\\nThe `mapper.ne.lon` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne.lon( threshold:LONG ): result:AGGREGATOR\\nmapper.ne.lon( threshold:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.lon\"},\"mapper.ne.tick\":{\"description\":\"This mapper function returns the first tick in a sliding window which is not equal to a given threshold.\\n\\nThe associated location, elevation and value are those of the selected tick.\\n\\nThe `mapper.ne.tick` function must be parameterized with the threshold.\\n\\n@param `threshold` Threshold\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.ne.tick( threshold:LONG ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"2.2.0\",\"OPB64name\":\"mapper.ne.tick\"},\"mapper.npdf\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the probability of a value given a normal distribution.\\n\\n@param `mu` Mean of the normal (Gaussian) distribution to consider.\\n\\n@param `sigma` Standard deviation of the normal (Gaussian) distribution to consider.\\n\\n@param `result` Instance of `mapper.npdf`.\\n\\n\",\"signature\":\"mapper.npdf( mu:DOUBLE sigma:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"gts\",\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.npdf\"},\"mapper.or\":{\"description\":\"This mapper function applies the logical operator OR on all the values found in each sliding window.\\n\\nThe associated location and elevation are those of the most recent tick of the interval.\\n\\nThe `mapper.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.or(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.or\"},\"mapper.parsedouble\":{\"description\":\"This mapper function converts a **STRING** single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.parsedouble` function can be applied to data of type **STRING**.\\n\\nThis function expects a [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) \\nparameter in top of the mapper. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `tag` [IETF BCP 47 language tag string](https://docs.oracle.com/javase/8/docs/api/java/util/Locale.html#forLanguageTag-java.lang.String-) parameter. This tag is used to parse the **STRING** given as input according to the specified double format of this language.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.parsedouble( tag:STRING ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.2.5\",\"OPB64name\":\"mapper.parsedouble\"},\"mapper.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values in the sliding window.\\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `percentile` Percentile to consider.\\n\\n@param `result` Instance of `mapper.percentile`.\\n\\n\",\"signature\":\"mapper.percentile( percentile:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\",\"gts\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.percentile\"},\"mapper.pow\":{\"description\":\"This mapper function raises the single value in a sliding window to a constant power.\\n\\nIf the sliding window is empty, the function does not return any value. If the sliding window contains more than a single value, an error is produced.\\n\\nThe associated location and elevation are those of the single value.\\n\\nThe `mapper.pow` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\nThe `mapper.pow` function must be parameterized with the constant.\\n\\nThe result is always of type DOUBLE.\\n\\n@param `constant` Constant to apply\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.pow( constant:LONG ): result:AGGREGATOR\\nmapper.pow( constant:DOUBLE ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.pow\"},\"mapper.product\":{\"description\":\"This mapper function computes the product of all the values found in the sliding window.\\n\\nThe `mapper.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\nOn [bucketized](/doc/BUCKETIZE) Geo Time Series™, it is necessary to fill gaps with [`FILLVALUE`](/doc/FILLVALUE)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.product(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.product\"},\"mapper.rate\":{\"description\":\"This mapper function computes the rate of change between the first and last values (rate = (last - first) / (lastick - firsttick)) of each sliding window. The location and\\nelevation returned are those associated with the most recent value in the sliding window.\\n\\nThe `mapper.rate` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value. If the\\nsliding window contains less than 2 values, the rate of change will be 0.0.\\n\\nThe rate of change is expressed in units per second.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.rate(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.rate\"},\"mapper.replace\":{\"description\":\"This mapper function replaces windows with at least one value with a constant. The location and elevation returned are those associated with the most \\nrecent value in the sliding window.\\n\\n@param `constant` constant used for replacement\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.replace( constant:LONG ): result:AGGREGATOR\\nmapper.replace( constant:DOUBLE ): result:AGGREGATOR\\nmapper.replace( constant:STRING ): result:AGGREGATOR\\nmapper.replace( constant:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.replace\"},\"mapper.rms\":{\"description\":\"This mapper function returns the root mean square of all the values found in each sliding window. The associated location is the last one of the window.\\n\\nThe `mapper.rms` function can only be applied to values of type **LONG** or **DOUBLE**.\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.rms(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.2.18\",\"OPB64name\":\"mapper.rms\"},\"mapper.round\":{\"description\":\"This mapper function rounds the *single value* in a sliding window to the closests **LONG**.\\n\\nThe `mapper.round` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.round(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.round\"},\"mapper.sd\":{\"description\":\"This mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sd( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd\"},\"mapper.sd.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.sd.forbid-nulls` has the same behavior as `mapper.sd`, use `mapper.sd` instead.\\n\\nThis mapper function returns the standard deviation of each sliding window. The location and elevation returned are those associated with the most recent value in the sliding window.\\n\\nThe standard deviation is the square root of the variance as computed by [`mapper.var`](/doc/mapper.var).\\n\\nThe `mapper.sd.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sd.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sd.forbid-nulls\"},\"mapper.second\":{\"description\":\"This mapper function returns the second of the tick for which it is computed.\\n\\nThe `mapper.second` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"mapper.second( timezone:STRING ): result:AGGREGATOR\\nmapper.second( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.second\"},\"mapper.sigmoid\":{\"description\":\"This mapper function returns the sigmoid of *single value* in a sliding window.\\n\\nThe `mapper.sigmoid` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sigmoid(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sigmoid\"},\"mapper.sqrt\":{\"description\":\"This mapper function computes the square root of the single value in a sliding window.\\n\\nFor negative numerics, this mapper returns **NaN**. For string values, this mapper returns 0.\\n\\nThe associated location and elevation are those of the single value.\\n\\n> ### Note\\n> The `mapper.sqrt` mapper needs a single value sliding window, i.e. pre-window and post-window to 0\\n\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sqrt(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.2.11\",\"OPB64name\":\"mapper.sqrt\"},\"mapper.sum\":{\"description\":\"This mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sum(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum\"},\"mapper.sum.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.sum.forbid-nulls` has the same behavior as `mapper.sum`, use `mapper.sum` instead.\\n\\nThis mapper function computes the sum of all the values found in the sliding window. The associated location and elevation are those of the most recent tick of the window.\\n\\nThe `mapper.sum.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.sum.forbid-nulls(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.sum.forbid-nulls\"},\"mapper.tanh\":{\"description\":\"This mapper function returns the hyperbolic tangent of *single value* in a sliding window.\\n\\nThe `mapper.tanh` function can be applied to data of type **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.tanh(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tanh\"},\"mapper.tick\":{\"description\":\"This mapper function returns the tick for which it is computed. The associated location and elevation are those of the selected value.\\n\\nThe `mapper.tick` function can be applied to values of any type.        \\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.tick(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.tick\"},\"mapper.toboolean\":{\"description\":\"This mapper function converts the single value in a sliding window to **BOOLEAN**.\\n\\nThe `mapper.toboolean` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.toboolean(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.toboolean\"},\"mapper.todouble\":{\"description\":\"This mapper function converts the single value in a sliding window to **DOUBLE**.\\n\\nThe `mapper.todouble` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.todouble(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.todouble\"},\"mapper.tolong\":{\"description\":\"This mapper function converts the single value in a sliding window to **LONG**.\\n\\nThe `mapper.tolong` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.tolong(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tolong\"},\"mapper.tostring\":{\"description\":\"This mapper function converts the single value in a sliding window to **STRING**.\\n\\nThe `mapper.tostring` function can be applied to data of type **BOOLEAN**, **STRING**, **LONG** or **DOUBLE**.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.tostring(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.tostring\"},\"mapper.truecourse\":{\"description\":\"Pushes onto the stack a mapper which will compute the initial [true course]http://www.edwilliams.org/avform.htm#Crs) on a great circle from the first to the last datapoint in the sliding window.\\n\\nThe location and elevation of the result is that of the tick being considered.\\n\\n@param `result` Instance of mapper.truecourse.\\n\\n\",\"signature\":\"mapper.truecourse(): result:AGGREGATOR\",\"tags\":[\"mapper\",\"geo\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.truecourse\"},\"mapper.var\":{\"description\":\"This mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.var( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var\"},\"mapper.var.forbid-nulls\":{\"description\":\"**Deprecated**: `mapper.var.forbid-nulls` has the same behavior as `mapper.var`, use `mapper.var` instead.\\n\\nThis mapper function returns the variance of all the values found in each sliding window. The location and elevation returned are those associated \\nwith the most recent value in the sliding window.\\n\\nIf the number of values in the sliding window is greater than one, [Bessel’s correction](http://en.wikipedia.org/wiki/Bessel's_correction) is applied. \\nThe `mapper.var.forbid-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** or **BOOLEAN** it does not return any value.\\n\\nIf a value is **NULL** in the bucket, the result is **NULL**.\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.var.forbid-nulls( bessel:BOOLEAN ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.var.forbid-nulls\"},\"mapper.vdist\":{\"description\":\"This mapper function computes the total distance traveled in the vertical plane in the sliding window.\\n\\nThe distance is computed by summing the distances between consecutive elevations (this differs from the computation done in [`mapper.vspeed`](/doc/mapper.vspeed))\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed distance is expressed in meters.\\n\\nThe `mapper.vdist` function can be applied to data of any type since it only considers locations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.vdist(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vdist\"},\"mapper.vspeed\":{\"description\":\"This mapper function computes the vertical speed between the first and last readings of the sliding window. It does not compute the speed based on the total\\nvertical distance traveled in the sliding window, it only considers its extrema (it differs significantly of what is done for horizontal speed in\\n[`mapper.hspeed`](/doc/mapper.hspeed)), thus the result can be positive or negative.\\n\\nIf one of the extrema of the sliding window has no elevation, no value is returned.\\n\\nThe associated location and elevation are those at the tick being computed if it is part of the sliding window.\\n\\nThe computed speed is expressed in meters per second.\\n\\nThe `mapper.vspeed` function can be applied to data of any type since it only considers elevations.\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.vspeed(): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.11\",\"OPB64name\":\"mapper.vspeed\"},\"mapper.weekday\":{\"description\":\"This mapper function returns the day of the week of the tick for which it is computed.\\n\\nThe `mapper.weekday` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `offset` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n\",\"signature\":\"mapper.weekday( timezone:STRING ): result:AGGREGATOR\\nmapper.weekday( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.weekday\"},\"mapper.year\":{\"description\":\"This mapper function returns the year of the tick for which it is computed.\\n\\nThe `mapper.year` function can be applied to values of any type.\\n\\n@param `timezone` Timezone to use\\n\\n@param `result` Mapper to apply\\n\\n@param `offset` Time offset in milliseconds, can be used instead of a named timezone.\\n\\n\",\"signature\":\"mapper.year( timezone:STRING ): result:AGGREGATOR\\nmapper.year( offset:NUMBER ): result:AGGREGATOR\",\"tags\":[\"mapper\"],\"since\":\"1.0.0\",\"OPB64name\":\"mapper.year\"},\"max.tick.sliding.window\":{\"description\":\"Pushes onto the stack [`MAXLONG`](/doc/MAXLONG) divided by 2, to serve as the maximum number of ticks left or right of the current tick in a [`MAP`](/doc/MAP) sliding window.\\n\\nGiven that a Geo Time Series™ can have no more than 2**32 datapoints, this value is sufficient to cover the whole GTS left or right of the current tick.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"signature\":\"max.tick.sliding.window(): max:LONG\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.tick.sliding.window\"},\"max.time.sliding.window\":{\"description\":\"Pushes onto the stack half of the minimum LONG value, to serve as a *pre* or *post* extension of a [`MAP`](/doc/MAP) sliding window in time units.\\n\\nThis value spans a lot of time but may not be enough to cover the entirety of a GTS.\\n\\n@param `max` Value pushed onto the stack.\\n\\n\",\"signature\":\"max.time.sliding.window(): max:LONG\",\"tags\":[\"mapper\",\"framework\"],\"since\":\"1.0.0\",\"OPB64name\":\"max.time.sliding.window\"},\"ms\":{\"description\":\"Converts a number of milliseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of milliseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of milliseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of milliseconds\\n\\n\",\"signature\":\"ms( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ms\"},\"ns\":{\"description\":\"Converts a number of nanoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of nanoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of nanoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of nanoseconds\\n\\n\",\"signature\":\"ns( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ns\"},\"op.add\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter Geo Time Series™.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator forbids null values, *i.e.* if a `null` is encountered, then there will be no result for the given tick.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.add(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.add\"},\"op.add.ignore-nulls\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), will add the values of the parameter GTS.\\n\\nThe type of the result is determined by the first value encountered.\\n\\nIf the result is of type **STRING**, then the operator acts as a concatenation.\\n\\nWhen the result is numeric, **STRING** values will cause an error, and **BOOLEAN** values will be converted to 1 (`true`) or 0 (`false`).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.add.ignore-nulls(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.add.ignore-nulls\"},\"op.and\":{\"description\":\"To apply an `op.and` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.and(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and\"},\"op.and.ignore-nulls\":{\"description\":\"To apply an `op.and.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.and.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.and.ignore-nulls` operation will applies **AND** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.and.ignore-nulls(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.and.ignore-nulls\"},\"op.div\":{\"description\":\"To apply an `op.div` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.div is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.div` operation can only operate on equivalence classes which have two GTS (if the equivalence class has more than two GTS, there is no result guaranted). It will divide at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.div(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.div\"},\"op.eq\":{\"description\":\"To apply an `op.eq` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then op.eq is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.eq` operation will check for equality at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.eq(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.eq\"},\"op.ge\":{\"description\":\"To apply an `op.ge` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ge` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ge` operation will check at each tick if the value of the current GTS is greater or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.ge(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ge\"},\"op.gt\":{\"description\":\"To apply an `op.gt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.gt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.gt` operation will check at each tick if the value of the current GTS is greater than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.gt(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.gt\"},\"op.le\":{\"description\":\"To apply an `op.le` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.le` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.le` operation will check at each tick if the value of the current GTS is lesser or equals to the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.le(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.le\"},\"op.lt\":{\"description\":\"To apply an `op.lt` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.lt` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.lt` operation will check at each tick if the value of the current GTS is lesser than the value of the next GTS. In a recursive way, it will run throw all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.lt(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.lt\"},\"op.mask\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), retains datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.mask(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mask\"},\"op.mul\":{\"description\":\"To apply an `op.mul` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.mul(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.mul\"},\"op.mul.ignore-nulls\":{\"description\":\"To apply an `op.mul.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.mul.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.mul.ignore-nulls` operation will multiply at each tick all the values of all the GTS belonging to the same class (if they do have a value for this current tick). To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\nSome types cannot be multiplied (eg it’s not possible to multiply a **STRING** to a **LONG**).\\n\\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.mul.ignore-nulls(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.2.4\",\"OPB64name\":\"op.mul.ignore-nulls\"},\"op.ne\":{\"description\":\"To apply an `op.ne` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.ne` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.ne` operation will check for inequality at each tick all the values of all the GTS belonging to the same class. If one GTS doesn’t have a value for the current tick the result for this tick is false.\\n\\nThe elevation and location are cleared.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.ne(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.ne\"},\"op.negmask\":{\"description\":\"Pushes onto the stack an operator which, in an [`APPLY`](/doc/APPLY), removes datapoints in Geo Time Series™ for the ticks where a BOOLEAN *mask* Geo Time Series™ has `true` values.\\n\\nThis operator can only be applied to pairs of GTS.\\n\\n@param `op` The operator instance.\\n\\n\",\"signature\":\"op.negmask(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.negmask\"},\"op.or\":{\"description\":\"To apply an `op.or` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.or(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or\"},\"op.or.ignore-nulls\":{\"description\":\"To apply an `op.or.ignore-nulls` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.or.ignore-nulls` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe `op.or.ignore-nulls` operation will applies an **OR** at each tick on values of all the GTS belonging to the same class (in the order they are passed). The elevation and location are cleared. To produce a result, all GTS of a same class must have a value at a same tick.\\n\\nIf the first value found isn’t a boolean, all values produced will be false.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n      \\nThis operator simply ignores null values.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.or.ignore-nulls(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.or.ignore-nulls\"},\"op.sub\":{\"description\":\"To apply an `op.sub` operation, N parameters are on top of the stack: N-1 Geo Time Series™ lists and one labels List. According to those labels, it produces multiple equivalence classes from the GTS inside those N-1 lists (if they match the same labels as the equivalence class). Then `op.sub` is applyied to the GTS in those classes, building only one result GTS for each class.\\n\\nThe sub operator can only operate on equivalence classes which have **exactly two GTS**. It will substract at each tick the value of the first GTS by the value of the second GTS. To produce a result, both GTS of a same class must have a value at a same tick.\\n\\nThe type of the resulting GTS will be determined by the first non null value. It only operates on **LONG** and **DOUBLE**.\\n\\nThe name of the resulting GTS is the one of the last GTS of the equivalence class. The labels kept are the one of the equivalence class.\\n\\n@param `op` The instance of operator.\\n\\n\",\"signature\":\"op.sub(): op:OPERATOR\",\"tags\":[\"op\"],\"since\":\"1.0.11\",\"OPB64name\":\"op.sub\"},\"pi\":{\"description\":\"Alias of [PI](/doc/J3Z).\\n\\nPushes &#x03c0; constant on the stack (3.1415...).\\n\\n@param `pi` Pi constant\\n\\n\",\"signature\":\"pi(): pi:DOUBLE\",\"tags\":[\"math\",\"constants\"],\"since\":\"1.0.0\",\"OPB64name\":\"R5Z\"},\"ps\":{\"description\":\"Converts a number of picoseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of picoseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of picoseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of picoseconds\\n\\n\",\"signature\":\"ps( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"ps\"},\"reducer.and\":{\"description\":\"The `reducer.and` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.and(): reducer:AGGREGATOR\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and\"},\"reducer.and.exclude-nulls\":{\"description\":\"The `reducer.and.exclude-nulls` function outputs the result of the logical operator **AND** for each tick value of Geo Time Series™ \\nwhich are in the same equivalence class, excluding nulls from the computation.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.and.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, \\nthe current value is considered to be **false**.\\n\\nThe standard version of this reducer, `reducer.and`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.and.exclude-nulls`, will exclude all `null` values when computing the **AND**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.and.exclude-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\",\"logic\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.and.exclude-nulls\"},\"reducer.argmax\":{\"description\":\"The `reducer.argmax` function outputs for each tick, the tick and the concatenation separated by ‘,’ of the values of the labels for which the\\nvalue is the maximum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the maximum to report (use 0 to report all), and a **STRING**\\nparameter to choose on which label it operates.\\n\\n@param `maximum` Maximum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.argmax( label:STRING maximum:LONG ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmax\"},\"reducer.argmin\":{\"description\":\"The `reducer.argmin` function outputs for each tick, the tick and the concatenation separated by ‘,’ \\nwith the values of the labels for which the value is the minimum of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThere is no location and elevation returned.\\n\\nThis reducer takes an additional **LONG** parameter to choose the minimum to report (use 0 to report all), and a **STRING** \\nparameter to choose on which label it operates.\\n\\n@param `minimum` Minimum to report (use 0 to report all)\\n\\n@param `label` Operated label\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.argmin( label:STRING minimum:LONG ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.argmin\"},\"reducer.count\":{\"description\":\"The `reducer.count` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe include null version, [`reducer.count.include-nulls`](/doc/reducer.count.include-nulls), will include null values when computing the count. The exclude null version, \\n[`reducer.count.exclude-nulls`](/doc/reducer.count.exclude-nulls), will exclude null values when computing the count.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.count(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count\"},\"reducer.count.exclude-nulls\":{\"description\":\"The `reducer.count.exclude-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.count.exclude-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.exclude-nulls\"},\"reducer.count.include-nulls\":{\"description\":\"The `reducer.count.include-nulls` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are included.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.count.include-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.include-nulls\"},\"reducer.count.nonnull\":{\"description\":\"The `reducer.count.nonnull` function computes for each tick the number of measures of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nNull values are excluded.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.count.nonnull(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.count.nonnull\"},\"reducer.join\":{\"description\":\"The 'reducer.join' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will exclude all null values when computing the join.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"reducer.join( separator:STRING ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join\"},\"reducer.join.forbid-nulls\":{\"description\":\"Alias of [`reducer.join.nonnull`](/doc/reducer.join.nonnull).\\n\\nThe 'reducer.join.forbid-nulls' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"reducer.join.forbid-nulls( separator:STRING ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.forbid-nulls\"},\"reducer.join.nonnull\":{\"description\":\"Alias of [`reducer.join.forbid-nulls`](/doc/reducer.join.forbid-nulls).\\n\\nThe 'reducer.join.nonnull' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"reducer.join.nonnull( separator:STRING ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.nonnull\"},\"reducer.join.urlencoded\":{\"description\":\"The 'reducer.join.urlencoded' function outputs for each tick of Geo Time Series™ which are in the same equivalence class, the concatenation of the string representation of values separated by the join string using [URL Encoding](https://en.wikipedia.org/wiki/Percent-encoding) and the [UTF-8](https://en.wikipedia.org/wiki/UTF-8) charset.\\n\\nThe location and elevation returned are from the latest measure.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `separator` Separator string\\n\\n\",\"signature\":\"reducer.join.urlencoded( separator:STRING ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.join.urlencoded\"},\"reducer.mad\":{\"description\":\"Pushes onto the stack an AGGREGATOR which computes the [Median Absolute Deviation](https://en.wikipedia.org/wiki/Median_absolute_deviation) for each ticks. Null values are removed before computing the MAD for each ticks.\\n\\nThe returned location is the median of all the locations and the returned elevation is the median of all the elevations.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.mad(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.2.0\",\"OPB64name\":\"reducer.mad\"},\"reducer.max\":{\"description\":\"The `reducer.max` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will exclude all null values when computing the maximum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.max(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max\"},\"reducer.max.forbid-nulls\":{\"description\":\"Alias of [`reducer.max.nonnull`](/doc/reducer.max.nonnull).\\n\\nThe `reducer.max.forbid-nulls` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.max.forbid-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.forbid-nulls\"},\"reducer.max.nonnull\":{\"description\":\"Alias of [`reducer.max.forbid-nulls`](/doc/reducer.max.forbid-nulls).\\n\\nThe `reducer.max.nonnull` function outputs for each tick the maximum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first maximum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.max.nonnull(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.max.nonnull\"},\"reducer.mean\":{\"description\":\"The `reducer.mean` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.mean(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean\"},\"reducer.mean.circular\":{\"description\":\"The `reducer.mean.circular` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, no value will be returned. Use [`reducer.mean.circular.exclude-nulls`](/doc/reducer.mean.circular.exclude-nulls) if your GTS contain nulls.\\n\\nThe `reducer.mean.circular` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"reducer.mean.circular( modulo:NUMBER ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular\"},\"reducer.mean.circular.exclude-nulls\":{\"description\":\"The `reducer.mean.circular.exclude-nulls` function returns the the circular mean of all the values for each value of Geo Time Series™.\\nThe associated location is the centroid of all the encountered locations. The associated elevation is the mean of the encountered elevations.\\n\\nThe `reducer.mean.circular.exclude-nulls` function can only be applied to values of type **LONG** or **DOUBLE**, when applied to **STRING** \\nor **BOOLEAN** it does not return any value.\\n\\nIf any tick is undefined, it is excluded from computing.\\n\\nThe `reducer.mean.circular.exclude-nulls` function expects a positive, finite, numeric period on top of the stack, this period will be \\nused to determine the span of circular values, use for example 360.0 if you wish to compute the circular mean of degree angles.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `modulo` The span of circular values\\n\\n\",\"signature\":\"reducer.mean.circular.exclude-nulls( modulo:NUMBER ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.circular.exclude-nulls\"},\"reducer.mean.exclude-nulls\":{\"description\":\"The `reducer.mean.exclude-nulls` function outputs for each tick the mean of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location returned is the centroid of all the locations, the elevation is the average elevation.\\n\\nIt will exclude all null values when computing the mean.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.mean.exclude-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.mean.exclude-nulls\"},\"reducer.median\":{\"description\":\"The `reducer.median` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.median(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.median\"},\"reducer.median.forbid-nulls\":{\"description\":\"The `reducer.median.forbid-nulls` function outputs for each tick the median, as defined by the [NIST](https://www.itl.nist.gov/div898/handbook/eda/section3/eda351.htm), of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE** and it always returns a **DOUBLE**.\\n\\nIf this reducer encouters a **NULL** value, ie ticks do not match between Geo Times Series™ in the same equivalence class, it throws an error.\\n\\nAs the median is effectively computed using one or two points, the location/elevation of the result is:\\n- not defined is there is no location/elevation\\n- the value of the location/elevation if only one point has this info\\n- the centroid/mean of the location/elevation if the two points have this info.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.median.forbid-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"2.4.0\",\"OPB64name\":\"reducer.median.forbid-nulls\"},\"reducer.min\":{\"description\":\"The `reducer.min` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will exclude all null values when computing the minimum.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.min(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min\"},\"reducer.min.forbid-nulls\":{\"description\":\"Alias of [`reducer.min.nonnull`](/doc/reducer.min.nonnull).\\n\\nThe `reducer.min.forbid-nulls` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.min.forbid-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.forbid-nulls\"},\"reducer.min.nonnull\":{\"description\":\"Alias of [`reducer.min.forbid-nulls`](/doc/reducer.min.forbid-nulls).\\n\\nThe `reducer.min.nonnull` function outputs for each tick the minimum value of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on any type.\\n\\nThe location and elevation returned are those of the first minimum value encountered.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.min.nonnull(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.min.nonnull\"},\"reducer.or\":{\"description\":\"The `reducer.or` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.or(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or\"},\"reducer.or.exclude-nulls\":{\"description\":\"The `reducer.or.exclude-nulls` function outputs the result of the logical operator `OR` for each tick value of Geo Time Series™ which are in the same equivalence class.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe `reducer.or.exclude-nulls` function can be applied to values of any type, when not applied to **BOOLEAN** types, the current value is considered to be false.\\n\\nThe standard version of this reducer, `reducer.or`, will return `null` for any tick where one or more GTS have `null` values. The *exclude null* version, `reducer.or.exclude-nulls`, will exclude all `null` values when computing the **OR**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.or.exclude-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.or.exclude-nulls\"},\"reducer.percentile\":{\"description\":\"Pushes onto the stack an AGGREGATOR which returns the N^th^ percentile of the values for each tick.\\n\\nFor this reducer, GTS must be aligned and must have a value for each tick of each GTS. \\n\\nThe returned location and elevation are those of the chosen value.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.percentile(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.percentile\"},\"reducer.product\":{\"description\":\"This reducer function computes the product of all the values for each tick.\\n\\nThe `reducer.product` function can only be applied to values of type **LONG** or **DOUBLE**, it will produce no value for types **STRING** and **BOOLEAN**.\\n\\nWarning: with **LONG** values, computation can silently overflow.\\n\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.product(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.product\"},\"reducer.rms\":{\"description\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIf one value is null, there won't be any result for the concerned tick.\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.rms(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms\"},\"reducer.rms.exclude-nulls\":{\"description\":\"The `reducer.rms` function computes for each tick the root mean square of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **DOUBLE** and **LONG**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nThe exclude null version [`reducer.rms.exclude-nulls`](/doc/reducer.rms.exclude-nulls), will exclude null values before computing the rms. Even if input GTS are misaligned, there will be one result per tick.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.rms.exclude-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.2.18\",\"OPB64name\":\"reducer.rms.exclude-nulls\"},\"reducer.sd\":{\"description\":\"The `reducer.sd` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"reducer.sd( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd\"},\"reducer.sd.forbid-nulls\":{\"description\":\"The `reducer.sd.forbid-nulls` function outputs for each tick the standard deviation of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"reducer.sd.forbid-nulls( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sd.forbid-nulls\"},\"reducer.shannonentropy.0\":{\"description\":\"The `reducer.shannonentropy.0` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 0 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.shannonentropy.0(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.0\"},\"reducer.shannonentropy.1\":{\"description\":\"The `reducer.shannonentropy.1` computes the [Shannon entropy](https://en.wikipedia.org/wiki/Entropy_%28information_theory%29#Entropy_as_information_content) of the values it receives from the framework [`REDUCE`](/doc/REDUCE) at each tick.\\n\\nThe values are considerred as occurences of an underlying symbol (or as values of a counter).\\n\\nThe returned entropy is normalized by being divided by log(N) where N is the number of values.\\n\\nIf N equals 1, then 1 is returned.\\n\\nThe input values must be of type **LONG**.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.shannonentropy.1(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.shannonentropy.1\"},\"reducer.sum\":{\"description\":\"The `reducer.sum` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.sum(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum\"},\"reducer.sum.forbid-nulls\":{\"description\":\"Alias of [`reducer.sum.nonnull`](/doc/reducer.sum.nonnull).\\n\\nThe `reducer.sum.forbid-nulls` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.sum.forbid-nulls(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.forbid-nulls\"},\"reducer.sum.nonnull\":{\"description\":\"Alias of [`reducer.sum.forbid-nulls`](/doc/reducer.sum.forbid-nulls).\\n\\nThe `reducer.sum.nonnull` function computes at each tick the sum of the values of Geo Time Series™ which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first one encountered, which may vary depending on the order of the parameters.\\n\\nIt will return **null** for any tick where one or more GTS have **null** values.\\n\\n@param `reducer` Reducer to apply\\n\\n\",\"signature\":\"reducer.sum.nonnull(): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.sum.nonnull\"},\"reducer.var\":{\"description\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"reducer.var( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var\"},\"reducer.var.forbid-nulls\":{\"description\":\"The `reducer.var` function outputs for each tick the variance of the values of Geo Time SeriesTM which are in the same equivalence class.\\n\\nIt operates on **LONG** and **DOUBLE**.\\n\\nThe location and elevation returned are the first encountered.\\n\\nThis reducer takes an additional boolean parameter to choose if Bessel correction should be applied.\\n\\nIt will exclude all null values when computing the result.\\n\\n@param `reducer` Reducer to apply\\n\\n@param `bessel` True if apply a [Basel's correction](https://en.wikipedia.org/wiki/Bessel's_correction)\\n\\n\",\"signature\":\"reducer.var.forbid-nulls( bessel:BOOLEAN ): reducer:AGGREGATOR\",\"tags\":[\"reducer\"],\"since\":\"1.0.11\",\"OPB64name\":\"reducer.var.forbid-nulls\"},\"s\":{\"description\":\"Converts a number of seconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of seconds from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of seconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of seconds\\n\\n\",\"signature\":\"s( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"s\"},\"us\":{\"description\":\"Converts a number of microseconds (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of microseconds from the top of the stack and pushes back the number of time units corresponding.\\n\\nIf you ask for a lower unit than the platform configuration, you will get a long rounded to the closest value.\\n\\n@param `input` Number of microseconds to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of microseconds\\n\\n\",\"signature\":\"us( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"us\"},\"w\":{\"description\":\"Converts a number of weeks (positive or negative) in the platform's time unit.\\n\\nThe time unit depends on the platform configuration `warp.timeunits` (microseconds by default on a standalone).\\n\\nIt consumes a number of weeks from the top of the stack and pushes back the number of time units corresponding.\\n\\n@param `input` Number of weeks to convert in the platform's time unit\\n\\n@param `output` Number of time units corresponding to the number of weeks\\n\\n\",\"signature\":\"w( input:NUMBER ): output:LONG\",\"tags\":[\"date\"],\"since\":\"1.0.0\",\"OPB64name\":\"w\"},\"{\":{\"description\":\"Starts a map creation.\\n\\nThe `{` function creates a map by pushing a mark onto the stack. This is a syntactic help to better present map constructions. This function behaves like [`MARK`].\\n\\n@param `mark` A MARK object.\\n\\n\",\"signature\":\"{(): mark:MARK\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tk\"},\"{}\":{\"description\":\"The {} function creates an empty MAP on the top of the stack.\\n\\n\\n@param `newmap` Empty map instance.\\n\\n\",\"signature\":\"{}(): newmap:MAP\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"Tro\"},\"|\":{\"description\":\"Performs a bitwise **OR** operation.\\n\\nThe `|` operator consumes two **LONG** from the top of the stack and pushes back their bitwise **OR**.\\n \\nSince Warp 10™ 2.1, `|` can be applied on two long GTS, or on one long GTS and a long mask.\\n\\n@param `p1` The first parameter\\n\\n@param `p2` The second parameter\\n\\n@param `result` The bitwise **XOR** result\\n\\n@param `inputgts` Since 2.1, a GTS with long values\\n\\n@param `gts1` Since 2.1, a GTS with long values\\n\\n@param `gts2` Since 2.1, a GTS with long values\\n\\n@param `mask` Since 2.1, a long which will be OR to every value of inputgts\\n\\n@param `outputgts` Since 2.1, a new sorted GTS with OR between each input values. Values are presents only for common input ticks.\\n\\n@param `maskedgts` Since 2.1, a new sorted GTS where values are inputs from inputgts OR with mask\\n\\n\",\"signature\":\"|( p1:LONG p2:LONG ): result:LONG\\n|( inputgts:GTS mask:LONG ): maskedgts:GTS\\n|( gts1:GTS gts2:GTS ): outputgts:GTS\",\"tags\":[\"binary\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"U.\"},\"||\":{\"description\":\"The `||` operator is a synonymous for [`OR`](/doc/OR).\\n\\nIt performs a logical **OR** on its parameters. When applied to a list of parameters, the parameter scan stops at the first `true` value encountered.\\n\\nSince Warp 10™ 2.1, `||` can be applied on two boolean GTS to produce a new GTS.\\n\\n@param `p1` The first boolean\\n\\n@param `p2` The second boolean\\n\\n@param `l` The list containing BOOLEANs or MACROs returning BOOLEANs\\n\\n@param `result` The boolean result of the logical OR applied to the parameters\\n\\n@param `gts1` Since 2.1, a boolean GTS input\\n\\n@param `gts2` Since 2.1, a boolean GTS input\\n\\n@param `gtsresult` Since 2.1, a new sorted GTS with OR between each common tick input values.\\n\\n\",\"signature\":\"||( p1:BOOLEAN p2:BOOLEAN ): result:BOOLEAN\\n||( l:LIST ): result:BOOLEAN\\n||( gts1:GTS gts2:GTS ): gtsresult:GTS\",\"tags\":[\"operators\",\"logic\"],\"since\":\"1.0.0\",\"OPB64name\":\"U6k\"},\"}\":{\"description\":\"Closes a currently open map and pushes it onto the stack.\\n\\nThe `}` function pops from the stack the elements (key/value pairs) of the map up to the first mark. The marks are consumed.\\n\\n@param `k1` The first key\\n\\n@param `v1` The first value\\n\\n@param `kN` The Nth key\\n\\n@param `vN` The Nth value\\n\\n@param `map` The built map\\n\\n@param `mark` The mark indicating the deepest level to consider when building the map\\n\\n\",\"signature\":\"}( mark:MARK k1:ANY v1:ANY kN:ANY vN:ANY ): map:MAP\",\"tags\":[\"maps\"],\"since\":\"1.0.0\",\"OPB64name\":\"UF\"},\"~\":{\"description\":\"Computes the unary bitwise complement of the long value on top of the stack.\\n\\n@param `param` Value to compute\\n\\n@param `result` Bitwise result\\n\\n\",\"signature\":\"~( param:LONG ): result:LONG\",\"tags\":[\"operators\",\"binary\",\"math\"],\"since\":\"1.0.0\",\"OPB64name\":\"UV\"},\"~=\":{\"description\":\"The `~=` operator consumes three parameters from the top of the stack, two operands p1 and p2 and a tolerance factor lambda, \\nand pushes onto the stack true if *|p1-p2| < lambda*, i.e. the difference between the two operands is lesser than lambda.\\n\\nThe two parameters must be of numeric types.\\n\\nThe operator `~=` is useful when making comparaisons between doubles, where floating point operations generate rounding errors.\\n\\n@param `p1` First number\\n\\n@param `p2` Second number\\n\\n@param `lambda` Tolerance factor lambda\\n\\n@param `result` \\n\\n\",\"signature\":\"~=( p2:DOUBLE p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:DOUBLE ): result:BOOLEAN\\n~=( p2:DOUBLE p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:LONG ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:LONG ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:LONG ): result:BOOLEAN\\n~=( p2:DOUBLE p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\\n~=( p2:DOUBLE p1:LONG lambda:COUNTER ): result:BOOLEAN\\n~=( p2:LONG p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\\n~=( p2:DOUBLE p1:COUNTER lambda:COUNTER ): result:BOOLEAN\\n~=( p2:COUNTER p1:DOUBLE lambda:COUNTER ): result:BOOLEAN\",\"tags\":[\"math\",\"operators\"],\"since\":\"1.0.0\",\"OPB64name\":\"UYo\"}};\n            ","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {CancellationToken, editor, IMarkdownString, languages, Position, Range} from 'monaco-editor';\nimport {globalfunctions as flowsGlobals} from '../../../model/flowsGlobals';\nimport {W10HoverProvider} from './W10HoverProvider';\nimport {EditorUtils} from './editorUtils';\nimport Hover = languages.Hover;\nimport ProviderResult = languages.ProviderResult;\n\nexport class FLoWSHoverProvider extends W10HoverProvider {\n\n  constructor() {\n    super(EditorUtils.FLOWS_LANGUAGE);\n  }\n\n  provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover> {\n    return super._provideHover(model, position, token, flowsGlobals);\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n\nimport {languages} from 'monaco-editor';\nimport IndentAction = languages.IndentAction;\n\nexport class FLoWSLanguageConfiguration {\n  getConfiguration(): languages.LanguageConfiguration {\n    return {\n      wordPattern: /[^\\s\\t\\(]+/,\n      comments: {\n        lineComment: '//',\n        blockComment: ['/**', '*/']\n      },\n      brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n        ['<\\'', '\\'>'],\n        ['[[', ']]']\n      ],\n      autoClosingPairs: [\n        {open: '{', close: '}'},\n        {open: '[', close: ']'},\n        {open: '(', close: ')'},\n        {open: '[[', close: ']]'},\n        {open: ' \\'', close: '\\'', notIn: ['string', 'comment']},\n        {open: '\"', close: '\"', notIn: ['string']},\n        {open: '`', close: '`', notIn: ['string', 'comment']},\n        {open: '/**', close: ' */', notIn: ['string']},\n      ],\n      autoCloseBefore: ';:.,=}])> \\n\\t',\n      surroundingPairs: [\n        {open: '{', close: '}'},\n        {open: '[', close: ']'},\n        {open: '(', close: ')'},\n        {open: '[[', close: ']]'},\n        {open: '\\'', close: '\\''},\n        {open: '\"', close: '\"'},\n        {open: '`', close: '`'},\n      ],\n      indentationRules: {\n        increaseIndentPattern: /^\\s*(\\[|{|\\(|\\[\\[)\\b.*$/,\n        decreaseIndentPattern: /^\\s*(]|}|\\)|]]|'>)\\b.*$/\n      },\n      onEnterRules: [\n        {\n          // e.g. /** | */\n          beforeText: /^\\s*\\/\\*\\*(?!\\/)([^*]|\\*(?!\\/))*$/,\n          afterText: /^\\s*\\*\\/$/,\n          action: {indentAction: IndentAction.IndentOutdent, appendText: ' * '},\n        },\n        {\n          // e.g. /** ...|\n          beforeText: /^\\s*\\/\\*\\*(?!\\/)([^*]|\\*(?!\\/))*$/,\n          action: {indentAction: IndentAction.None, appendText: ' * '},\n        },\n        {\n          // e.g.  * ...|\n          beforeText: /^(\\t|( {2}))* \\*( ([^*]|\\*(?!\\/))*)?$/,\n          action: {indentAction: IndentAction.None, appendText: '* '},\n        },\n        {\n          // e.g.  */|\n          beforeText: /^(\\t|( {2}))* \\*\\/\\s*$/,\n          action: {indentAction: IndentAction.None, removeText: 1},\n        },\n      ],\n    };\n  }\n}\n","export class MonarchFlows {\n        public static rules:any =  {\n    \"keywords\": [\n        \"!\",\n        \"!=\",\n        \"%\",\n        \"&\",\n        \"&&\",\n        \"(\",\n        \"()\",\n        \")\",\n        \"*\",\n        \"**\",\n        \"+\",\n        \"+!\",\n        \"-\",\n        \"->B64\",\n        \"->B64URL\",\n        \"->BIN\",\n        \"->BYTES\",\n        \"->DOUBLEBITS\",\n        \"->ENCODER\",\n        \"->ENCODERS\",\n        \"->FLOATBITS\",\n        \"->GEOCELL\",\n        \"->GEOHASH\",\n        \"->GEOJSON\",\n        \"->GEOSHAPE\",\n        \"->GTS\",\n        \"->GTSHHCODE\",\n        \"->GTSHHCODELONG\",\n        \"->HEX\",\n        \"->HHCODE\",\n        \"->HHCODELONG\",\n        \"->JSON\",\n        \"->LIST\",\n        \"->LONGBYTES\",\n        \"->MAP\",\n        \"->MAT\",\n        \"->MVSTRING\",\n        \"->OPB64\",\n        \"->PICKLE\",\n        \"->Q\",\n        \"->SET\",\n        \"->TSELEMENTS\",\n        \"->V\",\n        \"->VARINT\",\n        \"->VEC\",\n        \"->WKB\",\n        \"->WKT\",\n        \"->Z\",\n        \"/\",\n        \"<\",\n        \"<<\",\n        \"<=\",\n        \"==\",\n        \">\",\n        \">=\",\n        \">>\",\n        \">>>\",\n        \"ABS\",\n        \"ACCEL.CACHE\",\n        \"ACCEL.NOCACHE\",\n        \"ACCEL.NOPERSIST\",\n        \"ACCEL.PERSIST\",\n        \"ACCEL.REPORT\",\n        \"ACOS\",\n        \"ADDDAYS\",\n        \"ADDDURATION\",\n        \"ADDEXACT\",\n        \"ADDMONTHS\",\n        \"ADDVALUE\",\n        \"ADDYEARS\",\n        \"AESUNWRAP\",\n        \"AESWRAP\",\n        \"AGO\",\n        \"AND\",\n        \"APPEND\",\n        \"APPLY\",\n        \"ASENCODERS\",\n        \"ASIN\",\n        \"ASREGS\",\n        \"ASSERT\",\n        \"ASSERTMSG\",\n        \"ATAN\",\n        \"ATAN2\",\n        \"ATBUCKET\",\n        \"ATINDEX\",\n        \"ATTICK\",\n        \"ATTRIBUTES\",\n        \"AUTHENTICATE\",\n        \"B64->\",\n        \"B64TOHEX\",\n        \"B64URL->\",\n        \"BBOX\",\n        \"BIN->\",\n        \"BINTOHEX\",\n        \"BITCOUNT\",\n        \"BITGET\",\n        \"BITSTOBYTES\",\n        \"BOOTSTRAP\",\n        \"BREAK\",\n        \"BUCKETCOUNT\",\n        \"BUCKETIZE\",\n        \"BUCKETIZE.CALENDAR\",\n        \"BUCKETSPAN\",\n        \"BYTES->\",\n        \"BYTESTOBITS\",\n        \"CALL\",\n        \"CBRT\",\n        \"CEIL\",\n        \"CEVAL\",\n        \"CHECKMACRO\",\n        \"CHECKSHAPE\",\n        \"CHRONOEND\",\n        \"CHRONOSTART\",\n        \"CHRONOSTATS\",\n        \"CHUNK\",\n        \"CHUNKENCODER\",\n        \"CLEAR\",\n        \"CLEARDEFS\",\n        \"CLEARREGS\",\n        \"CLEARSYMBOLS\",\n        \"CLEARTOMARK\",\n        \"CLIP\",\n        \"CLONE\",\n        \"CLONEEMPTY\",\n        \"CLONEREVERSE\",\n        \"COMMONTICKS\",\n        \"COMPACT\",\n        \"CONTAINS\",\n        \"CONTAINSKEY\",\n        \"CONTAINSVALUE\",\n        \"CONTINUE\",\n        \"COPYGEO\",\n        \"COPYSIGN\",\n        \"CORRELATE\",\n        \"COS\",\n        \"COSH\",\n        \"COUNTER\",\n        \"COUNTERDELTA\",\n        \"COUNTERSET\",\n        \"COUNTERVALUE\",\n        \"COUNTTOMARK\",\n        \"CPOPR\",\n        \"CPROB\",\n        \"CROP\",\n        \"CSTORE\",\n        \"DEBUGOFF\",\n        \"DEBUGON\",\n        \"DECREMENTEXACT\",\n        \"DEDUP\",\n        \"DEF\",\n        \"DEFINED\",\n        \"DEFINEDMACRO\",\n        \"DEFLATE\",\n        \"DELETE\",\n        \"DELETEOFF\",\n        \"DELETEON\",\n        \"DEPTH\",\n        \"DEREF\",\n        \"DET\",\n        \"DIFFERENCE\",\n        \"DISCORDS\",\n        \"DOC\",\n        \"DOCMODE\",\n        \"DOUBLEBITS->\",\n        \"DOUBLEEXPONENTIALSMOOTHING\",\n        \"DROP\",\n        \"DROPN\",\n        \"DTW\",\n        \"DUP\",\n        \"DUPN\",\n        \"DURATION\",\n        \"DWTSPLIT\",\n        \"E\",\n        \"ECGEN\",\n        \"ECHOOFF\",\n        \"ECHOON\",\n        \"ECPRIVATE\",\n        \"ECPUBLIC\",\n        \"ECSIGN\",\n        \"ECVERIFY\",\n        \"ELAPSED\",\n        \"ELEVATIONS\",\n        \"EMPTY\",\n        \"ENCODER->\",\n        \"ERROR\",\n        \"ESDTEST\",\n        \"EVALSECURE\",\n        \"EVERY\",\n        \"EXP\",\n        \"EXPM1\",\n        \"EXPORT\",\n        \"EXTLOADED\",\n        \"F\",\n        \"FDWT\",\n        \"FETCH\",\n        \"FETCHBOOLEAN\",\n        \"FETCHDOUBLE\",\n        \"FETCHLONG\",\n        \"FETCHSTRING\",\n        \"FFT\",\n        \"FFTAP\",\n        \"FFTWINDOW\",\n        \"FILL\",\n        \"FILLNEXT\",\n        \"FILLPREVIOUS\",\n        \"FILLTICKS\",\n        \"FILLVALUE\",\n        \"FILTER\",\n        \"FILTERBY\",\n        \"FIND\",\n        \"FINDSETS\",\n        \"FINDSTATS\",\n        \"FIRSTTICK\",\n        \"FLATTEN\",\n        \"FLOATBITS->\",\n        \"FLOOR\",\n        \"FLOORDIV\",\n        \"FLOORMOD\",\n        \"FORGET\",\n        \"FROMBIN\",\n        \"FROMBITS\",\n        \"FROMHEX\",\n        \"FUNCTIONS\",\n        \"FUSE\",\n        \"GEO.BUFFER\",\n        \"GEO.COVER\",\n        \"GEO.COVER.RL\",\n        \"GEO.DIFFERENCE\",\n        \"GEO.INTERSECTION\",\n        \"GEO.INTERSECTS\",\n        \"GEO.JSON\",\n        \"GEO.JSON.UNIFORM\",\n        \"GEO.NORMALIZE\",\n        \"GEO.OPTIMIZE\",\n        \"GEO.REGEXP\",\n        \"GEO.UNION\",\n        \"GEO.WITHIN\",\n        \"GEO.WKB\",\n        \"GEO.WKB.UNIFORM\",\n        \"GEO.WKT\",\n        \"GEO.WKT.UNIFORM\",\n        \"GEOCELL->\",\n        \"GEOHASH->\",\n        \"GEOPACK\",\n        \"GEOSHAPE->\",\n        \"GEOSHIFT\",\n        \"GEOSPLIT\",\n        \"GEOUNPACK\",\n        \"GET\",\n        \"GETEXPONENT\",\n        \"GETHOOK\",\n        \"GETSECTION\",\n        \"GOLDWRAP\",\n        \"GROUPBY\",\n        \"GRUBBSTEST\",\n        \"GTSHHCODE->\",\n        \"GZIP\",\n        \"HASH\",\n        \"HAVERSINE\",\n        \"HEADER\",\n        \"HEX->\",\n        \"HEXTOB64\",\n        \"HEXTOBIN\",\n        \"HHCODE->\",\n        \"HHCODE.BBOX\",\n        \"HHCODE.CENTER\",\n        \"HHCODE.EAST\",\n        \"HHCODE.NORTH\",\n        \"HHCODE.NORTH.EAST\",\n        \"HHCODE.NORTH.WEST\",\n        \"HHCODE.SOUTH\",\n        \"HHCODE.SOUTH.EAST\",\n        \"HHCODE.SOUTH.WEST\",\n        \"HHCODE.WEST\",\n        \"HIDE\",\n        \"HLOCATE\",\n        \"HULLSHAPE\",\n        \"HUMANDURATION\",\n        \"HYBRIDTEST\",\n        \"HYBRIDTEST2\",\n        \"HYPOT\",\n        \"IDENT\",\n        \"IDWT\",\n        \"IEEEREMAINDER\",\n        \"IFFT\",\n        \"IMMUTABLE\",\n        \"IMPORT\",\n        \"INCREMENTEXACT\",\n        \"INFLATE\",\n        \"INFO\",\n        \"INFOMODE\",\n        \"INTEGRATE\",\n        \"INTERPOLATE\",\n        \"INTERSECTION\",\n        \"INV\",\n        \"ISAUTHENTICATED\",\n        \"ISNULL\",\n        \"ISNaN\",\n        \"ISO8601\",\n        \"ISODURATION\",\n        \"ISONORMALIZE\",\n        \"JOIN\",\n        \"JSON->\",\n        \"JSONLOOSE\",\n        \"JSONSTACK\",\n        \"JSONSTRICT\",\n        \"KEYLIST\",\n        \"KURTOSIS\",\n        \"LABELS\",\n        \"LASTACTIVITY\",\n        \"LASTBUCKET\",\n        \"LASTSORT\",\n        \"LASTTICK\",\n        \"LBOUNDS\",\n        \"LFLATMAP\",\n        \"LIMIT\",\n        \"LINEOFF\",\n        \"LINEON\",\n        \"LIST->\",\n        \"LMAP\",\n        \"LOAD\",\n        \"LOCATIONOFFSET\",\n        \"LOCATIONS\",\n        \"LOCSTRINGS\",\n        \"LOG\",\n        \"LOG10\",\n        \"LOG1P\",\n        \"LOGEVENT->\",\n        \"LOGMSG\",\n        \"LOWESS\",\n        \"LR\",\n        \"LSORT\",\n        \"LTTB\",\n        \"MACROBUCKETIZER\",\n        \"MACROCONFIG\",\n        \"MACROCONFIGDEFAULT\",\n        \"MACROCONFIGSECRET\",\n        \"MACROFILLER\",\n        \"MACROTTL\",\n        \"MAKEGTS\",\n        \"MAN\",\n        \"MAP\",\n        \"MAP->\",\n        \"MAPID\",\n        \"MARK\",\n        \"MAT->\",\n        \"MATCH\",\n        \"MATCHER\",\n        \"MAX\",\n        \"MAXBUCKETS\",\n        \"MAXDEPTH\",\n        \"MAXGEOCELLS\",\n        \"MAXGTS\",\n        \"MAXJSON\",\n        \"MAXLONG\",\n        \"MAXLOOP\",\n        \"MAXOPS\",\n        \"MAXPIXELS\",\n        \"MAXRECURSION\",\n        \"MAXSYMBOLS\",\n        \"MAXURLFETCHCOUNT\",\n        \"MAXURLFETCHSIZE\",\n        \"MD5\",\n        \"MERGE\",\n        \"META\",\n        \"METADIFF\",\n        \"METAOFF\",\n        \"METAON\",\n        \"METASET\",\n        \"METASORT\",\n        \"MIN\",\n        \"MINLONG\",\n        \"MINREV\",\n        \"MMAP\",\n        \"MODE\",\n        \"MONOTONIC\",\n        \"MOTIONSPLIT\",\n        \"MSORT\",\n        \"MSTU\",\n        \"MULTIPLYEXACT\",\n        \"MUSIGMA\",\n        \"MUTEX\",\n        \"MVELEVATIONS\",\n        \"MVHHCODES\",\n        \"MVINDEXSPLIT\",\n        \"MVLOCATIONS\",\n        \"MVTICKS\",\n        \"MVTICKSPLIT\",\n        \"MVVALUES\",\n        \"NAME\",\n        \"NBOUNDS\",\n        \"NDEBUGON\",\n        \"NEGATEEXACT\",\n        \"NEWENCODER\",\n        \"NEWGTS\",\n        \"NEXTAFTER\",\n        \"NEXTDOWN\",\n        \"NEXTUP\",\n        \"NOLOG\",\n        \"NONEMPTY\",\n        \"NONNULL\",\n        \"NOOP\",\n        \"NORMALIZE\",\n        \"NOT\",\n        \"NOTAFTER\",\n        \"NOTBEFORE\",\n        \"NOTIMINGS\",\n        \"NOW\",\n        \"NPDF\",\n        \"NPEEK\",\n        \"NSUMSUMSQ\",\n        \"ONLYBUCKETS\",\n        \"OPB64->\",\n        \"OPB64TOHEX\",\n        \"OPS\",\n        \"OPTDTW\",\n        \"OPTIMIZE\",\n        \"OR\",\n        \"PACK\",\n        \"PAPPLY\",\n        \"PARSE\",\n        \"PARSESELECTOR\",\n        \"PARSEVALUE\",\n        \"PARTITION\",\n        \"PATTERNDETECTION\",\n        \"PATTERNS\",\n        \"PEEK\",\n        \"PEEKN\",\n        \"PERMUTE\",\n        \"PFILTER\",\n        \"PGraphics\",\n        \"PI\",\n        \"PICK\",\n        \"PICKLE->\",\n        \"PIGSCHEMA\",\n        \"PIVOT\",\n        \"PIVOTSTRICT\",\n        \"POPR\",\n        \"PREDUCE\",\n        \"PRNG\",\n        \"PROB\",\n        \"PROBABILITY\",\n        \"PSTACK\",\n        \"PUSHR\",\n        \"PUT\",\n        \"Palpha\",\n        \"Parc\",\n        \"Pbackground\",\n        \"PbeginContour\",\n        \"PbeginShape\",\n        \"Pbezier\",\n        \"PbezierDetail\",\n        \"PbezierPoint\",\n        \"PbezierTangent\",\n        \"PbezierVertex\",\n        \"Pblend\",\n        \"PblendMode\",\n        \"Pblue\",\n        \"Pbox\",\n        \"Pbrightness\",\n        \"Pclear\",\n        \"Pclip\",\n        \"Pcolor\",\n        \"PcolorMode\",\n        \"Pconstrain\",\n        \"Pcopy\",\n        \"PcreateFont\",\n        \"Pcurve\",\n        \"PcurveDetail\",\n        \"PcurvePoint\",\n        \"PcurveTangent\",\n        \"PcurveTightness\",\n        \"PcurveVertex\",\n        \"Pdecode\",\n        \"Pdist\",\n        \"Pellipse\",\n        \"PellipseMode\",\n        \"Pencode\",\n        \"PendContour\",\n        \"PendShape\",\n        \"Pfill\",\n        \"Pfilter\",\n        \"Pget\",\n        \"Pgreen\",\n        \"Phue\",\n        \"Pimage\",\n        \"PimageMode\",\n        \"Plerp\",\n        \"PlerpColor\",\n        \"Pline\",\n        \"PloadShape\",\n        \"Pmag\",\n        \"Pmap\",\n        \"Pmask\",\n        \"PnoClip\",\n        \"PnoFill\",\n        \"PnoStroke\",\n        \"PnoTint\",\n        \"Pnorm\",\n        \"Ppixels\",\n        \"Ppoint\",\n        \"PpopMatrix\",\n        \"PpopStyle\",\n        \"PpushMatrix\",\n        \"PpushStyle\",\n        \"Pquad\",\n        \"PquadraticVertex\",\n        \"Prect\",\n        \"PrectMode\",\n        \"Pred\",\n        \"PresetMatrix\",\n        \"Protate\",\n        \"Psaturation\",\n        \"Pscale\",\n        \"Pset\",\n        \"Pshape\",\n        \"PshapeMode\",\n        \"PshearX\",\n        \"PshearY\",\n        \"Psize\",\n        \"Psphere\",\n        \"PsphereDetail\",\n        \"Pstroke\",\n        \"PstrokeCap\",\n        \"PstrokeJoin\",\n        \"PstrokeWeight\",\n        \"Ptext\",\n        \"PtextAlign\",\n        \"PtextAscent\",\n        \"PtextDescent\",\n        \"PtextFont\",\n        \"PtextLeading\",\n        \"PtextMode\",\n        \"PtextSize\",\n        \"PtextWidth\",\n        \"Ptint\",\n        \"PtoImage\",\n        \"Ptranslate\",\n        \"Ptriangle\",\n        \"PupdatePixels\",\n        \"Pvertex\",\n        \"Q->\",\n        \"QCONJUGATE\",\n        \"QDIVIDE\",\n        \"QMULTIPLY\",\n        \"QROTATE\",\n        \"QROTATION\",\n        \"QUANTIZE\",\n        \"RAND\",\n        \"RANDOM\",\n        \"RANDPDF\",\n        \"RANGE\",\n        \"RANGECOMPACT\",\n        \"RAWDTW\",\n        \"REDEFS\",\n        \"REDUCE\",\n        \"RELABEL\",\n        \"REMOVE\",\n        \"REMOVETICK\",\n        \"RENAME\",\n        \"REOPTALT\",\n        \"REPLACE\",\n        \"REPLACEALL\",\n        \"REPORT\",\n        \"RESET\",\n        \"RESETS\",\n        \"RESHAPE\",\n        \"RESTORE\",\n        \"REV\",\n        \"REVBITS\",\n        \"REVERSE\",\n        \"REXEC\",\n        \"REXECZ\",\n        \"RINT\",\n        \"RLOWESS\",\n        \"ROLL\",\n        \"ROLLD\",\n        \"ROT\",\n        \"ROTATIONQ\",\n        \"ROUND\",\n        \"RSADECRYPT\",\n        \"RSAENCRYPT\",\n        \"RSAGEN\",\n        \"RSAPRIVATE\",\n        \"RSAPUBLIC\",\n        \"RSASIGN\",\n        \"RSAVERIFY\",\n        \"RSORT\",\n        \"RTFM\",\n        \"RUN\",\n        \"RUNNERNONCE\",\n        \"RUNR\",\n        \"RVALUESORT\",\n        \"SAVE\",\n        \"SCALB\",\n        \"SECTION\",\n        \"SECURE\",\n        \"SECUREKEY\",\n        \"SENSISION.DUMP\",\n        \"SENSISION.DUMPEVENTS\",\n        \"SENSISION.EVENT\",\n        \"SENSISION.GET\",\n        \"SENSISION.SET\",\n        \"SENSISION.UPDATE\",\n        \"SET\",\n        \"SET->\",\n        \"SETATTRIBUTES\",\n        \"SETMACROCONFIG\",\n        \"SETVALUE\",\n        \"SHA1\",\n        \"SHA1HMAC\",\n        \"SHA256\",\n        \"SHA256HMAC\",\n        \"SHAPE\",\n        \"SHMLOAD\",\n        \"SHMSTORE\",\n        \"SHOW\",\n        \"SHRINK\",\n        \"SHUFFLE\",\n        \"SIGNUM\",\n        \"SIN\",\n        \"SINGLEEXPONENTIALSMOOTHING\",\n        \"SINH\",\n        \"SIZE\",\n        \"SKEWNESS\",\n        \"SMARTPARSE\",\n        \"SNAPSHOT\",\n        \"SNAPSHOTALL\",\n        \"SNAPSHOTALLTOMARK\",\n        \"SNAPSHOTCOPY\",\n        \"SNAPSHOTCOPYALL\",\n        \"SNAPSHOTCOPYALLTOMARK\",\n        \"SNAPSHOTCOPYN\",\n        \"SNAPSHOTCOPYTOMARK\",\n        \"SNAPSHOTN\",\n        \"SNAPSHOTTOMARK\",\n        \"SORT\",\n        \"SORTBY\",\n        \"SORTWITH\",\n        \"SPLIT\",\n        \"SQRT\",\n        \"SRAND\",\n        \"SRANDPDF\",\n        \"STACKATTRIBUTE\",\n        \"STACKPSSECRET\",\n        \"STACKTOLIST\",\n        \"STANDARDIZE\",\n        \"STDERR\",\n        \"STDOUT\",\n        \"STL\",\n        \"STLESDTEST\",\n        \"STOP\",\n        \"STORE\",\n        \"STRICTPARTITION\",\n        \"STRINGFORMAT\",\n        \"STU\",\n        \"SUBLIST\",\n        \"SUBMAP\",\n        \"SUBSTRING\",\n        \"SUBTRACTEXACT\",\n        \"SWAP\",\n        \"SYMBOLS\",\n        \"SYNC\",\n        \"T\",\n        \"TAN\",\n        \"TANH\",\n        \"TDESCRIBE\",\n        \"TEMPLATE\",\n        \"THRESHOLDTEST\",\n        \"TICKINDEX\",\n        \"TICKLIST\",\n        \"TICKS\",\n        \"TIMEBOX\",\n        \"TIMECLIP\",\n        \"TIMED\",\n        \"TIMEMODULO\",\n        \"TIMEOFF\",\n        \"TIMEON\",\n        \"TIMESCALE\",\n        \"TIMESHIFT\",\n        \"TIMESPLIT\",\n        \"TIMINGS\",\n        \"TLTTB\",\n        \"TOBIN\",\n        \"TOBITS\",\n        \"TOBOOLEAN\",\n        \"TODEGREES\",\n        \"TODOUBLE\",\n        \"TOHEX\",\n        \"TOINTEXACT\",\n        \"TOKENDUMP\",\n        \"TOKENGEN\",\n        \"TOKENINFO\",\n        \"TOKENSECRET\",\n        \"TOLONG\",\n        \"TOLOWER\",\n        \"TORADIANS\",\n        \"TOSELECTOR\",\n        \"TOSTRING\",\n        \"TOTIMESTAMP\",\n        \"TOUPPER\",\n        \"TR\",\n        \"TRANSPOSE\",\n        \"TRIM\",\n        \"TSELEMENTS\",\n        \"TSELEMENTS->\",\n        \"TYPEOF\",\n        \"ULP\",\n        \"UNBUCKETIZE\",\n        \"UNBUCKETIZE.CALENDAR\",\n        \"UNGZIP\",\n        \"UNION\",\n        \"UNIQUE\",\n        \"UNLIST\",\n        \"UNMAP\",\n        \"UNPACK\",\n        \"UNSECURE\",\n        \"UNSET\",\n        \"UNWRAP\",\n        \"UNWRAPEMPTY\",\n        \"UNWRAPENCODER\",\n        \"UNWRAPSIZE\",\n        \"UPDATE\",\n        \"UPDATEOFF\",\n        \"UPDATEON\",\n        \"URLDECODE\",\n        \"URLENCODE\",\n        \"URLFETCH\",\n        \"UUID\",\n        \"V->\",\n        \"VALUEDEDUP\",\n        \"VALUEHISTOGRAM\",\n        \"VALUELIST\",\n        \"VALUES\",\n        \"VALUESORT\",\n        \"VALUESPLIT\",\n        \"VARINT->\",\n        \"VARS\",\n        \"VEC->\",\n        \"WEBCALL\",\n        \"WF.ADDREPO\",\n        \"WF.GETREPOS\",\n        \"WF.SETREPOS\",\n        \"WFOFF\",\n        \"WFON\",\n        \"WRAP\",\n        \"WRAPFAST\",\n        \"WRAPMV\",\n        \"WRAPMV!\",\n        \"WRAPOPT\",\n        \"WRAPRAW\",\n        \"WRAPRAWOPT\",\n        \"WSINFO\",\n        \"WSKILL\",\n        \"WSKILLSESSION\",\n        \"WSNAME\",\n        \"WSPS\",\n        \"WSSESSION\",\n        \"WSSTACK\",\n        \"WSSTOP\",\n        \"WSSTOPSESSION\",\n        \"Z->\",\n        \"ZDISCORDS\",\n        \"ZDTW\",\n        \"ZIP\",\n        \"ZPATTERNDETECTION\",\n        \"ZPATTERNS\",\n        \"ZSCORE\",\n        \"ZSCORETEST\",\n        \"[\",\n        \"[[\",\n        \"[[]]\",\n        \"[]\",\n        \"]\",\n        \"]]\",\n        \"^\",\n        \"bucketizer.and\",\n        \"bucketizer.or\",\n        \"d\",\n        \"e\",\n        \"filler.interpolate\",\n        \"filler.next\",\n        \"filler.previous\",\n        \"filler.trend\",\n        \"filter.latencies\",\n        \"h\",\n        \"m\",\n        \"mapper.and\",\n        \"mapper.finite\",\n        \"mapper.geo.approximate\",\n        \"mapper.geo.clear\",\n        \"mapper.geo.fence\",\n        \"mapper.geo.outside\",\n        \"mapper.geo.within\",\n        \"mapper.hdist\",\n        \"mapper.median\",\n        \"mapper.median.forbid-nulls\",\n        \"mapper.mod\",\n        \"mapper.npdf\",\n        \"mapper.or\",\n        \"mapper.percentile\",\n        \"mapper.truecourse\",\n        \"max.tick.sliding.window\",\n        \"max.time.sliding.window\",\n        \"ms\",\n        \"ns\",\n        \"op.add\",\n        \"op.add.ignore-nulls\",\n        \"op.and\",\n        \"op.and.ignore-nulls\",\n        \"op.div\",\n        \"op.eq\",\n        \"op.ge\",\n        \"op.gt\",\n        \"op.le\",\n        \"op.lt\",\n        \"op.mask\",\n        \"op.mul\",\n        \"op.mul.ignore-nulls\",\n        \"op.ne\",\n        \"op.negmask\",\n        \"op.or\",\n        \"op.or.ignore-nulls\",\n        \"op.sub\",\n        \"pi\",\n        \"ps\",\n        \"reducer.and\",\n        \"reducer.and.exclude-nulls\",\n        \"s\",\n        \"us\",\n        \"w\",\n        \"{\",\n        \"{}\",\n        \"|\",\n        \"||\",\n        \"}\",\n        \"~\",\n        \"~=\"\n    ],\n    \"constants\": [\n        \"E\",\n        \"F\",\n        \"MAXLONG\",\n        \"MINLONG\",\n        \"NULL\",\n        \"NaN\",\n        \"PI\",\n        \"T\",\n        \"e\",\n        \"pi\"\n    ],\n    \"functions\": [\n        \"BUCKETIZE\",\n        \"BUCKETIZE.CALENDAR\",\n        \"FILTER\",\n        \"MACROBUCKETIZER\",\n        \"MACROFILTER\",\n        \"MACROMAPPER\",\n        \"MACROREDUCER\",\n        \"MAP\",\n        \"PFILTER\",\n        \"PREDUCE\",\n        \"REDUCE\",\n        \"STRICTMAPPER\",\n        \"STRICTREDUCER\",\n        \"UNBUCKETIZE.CALENDAR\",\n        \"bucketizer.and\",\n        \"bucketizer.count\",\n        \"bucketizer.count.exclude-nulls\",\n        \"bucketizer.count.include-nulls\",\n        \"bucketizer.count.nonnull\",\n        \"bucketizer.first\",\n        \"bucketizer.join\",\n        \"bucketizer.join.forbid-nulls\",\n        \"bucketizer.last\",\n        \"bucketizer.mad\",\n        \"bucketizer.max\",\n        \"bucketizer.max.forbid-nulls\",\n        \"bucketizer.mean\",\n        \"bucketizer.mean.circular\",\n        \"bucketizer.mean.circular.exclude-nulls\",\n        \"bucketizer.mean.exclude-nulls\",\n        \"bucketizer.median\",\n        \"bucketizer.median.forbid-nulls\",\n        \"bucketizer.min\",\n        \"bucketizer.min.forbid-nulls\",\n        \"bucketizer.or\",\n        \"bucketizer.percentile\",\n        \"bucketizer.rms\",\n        \"bucketizer.sd\",\n        \"bucketizer.sd.forbid-nulls\",\n        \"bucketizer.sum\",\n        \"bucketizer.sum.forbid-nulls\",\n        \"filter.all.eq\",\n        \"filter.all.ge\",\n        \"filter.all.gt\",\n        \"filter.all.le\",\n        \"filter.all.lt\",\n        \"filter.all.ne\",\n        \"filter.any.eq\",\n        \"filter.any.ge\",\n        \"filter.any.gt\",\n        \"filter.any.le\",\n        \"filter.any.lt\",\n        \"filter.any.ne\",\n        \"filter.byattr\",\n        \"filter.byclass\",\n        \"filter.bylabels\",\n        \"filter.bylabelsattr\",\n        \"filter.bymetadata\",\n        \"filter.byselector\",\n        \"filter.bysize\",\n        \"filter.last.eq\",\n        \"filter.last.ge\",\n        \"filter.last.gt\",\n        \"filter.last.le\",\n        \"filter.last.lt\",\n        \"filter.last.ne\",\n        \"filter.latencies\",\n        \"mapper.abs\",\n        \"mapper.add\",\n        \"mapper.and\",\n        \"mapper.ceil\",\n        \"mapper.count\",\n        \"mapper.count.exclude-nulls\",\n        \"mapper.count.include-nulls\",\n        \"mapper.count.nonnull\",\n        \"mapper.day\",\n        \"mapper.delta\",\n        \"mapper.dotproduct\",\n        \"mapper.dotproduct.positive\",\n        \"mapper.dotproduct.sigmoid\",\n        \"mapper.dotproduct.tanh\",\n        \"mapper.eq\",\n        \"mapper.eq.elev\",\n        \"mapper.eq.hhcode\",\n        \"mapper.eq.lat\",\n        \"mapper.eq.lon\",\n        \"mapper.eq.tick\",\n        \"mapper.exp\",\n        \"mapper.finite\",\n        \"mapper.first\",\n        \"mapper.floor\",\n        \"mapper.ge\",\n        \"mapper.ge.elev\",\n        \"mapper.ge.hhcode\",\n        \"mapper.ge.lat\",\n        \"mapper.ge.lon\",\n        \"mapper.ge.tick\",\n        \"mapper.geo.approximate\",\n        \"mapper.geo.clear\",\n        \"mapper.geo.fence\",\n        \"mapper.geo.outside\",\n        \"mapper.geo.within\",\n        \"mapper.gt\",\n        \"mapper.gt.elev\",\n        \"mapper.gt.hhcode\",\n        \"mapper.gt.lat\",\n        \"mapper.gt.lon\",\n        \"mapper.gt.tick\",\n        \"mapper.hdist\",\n        \"mapper.highest\",\n        \"mapper.hour\",\n        \"mapper.hspeed\",\n        \"mapper.join\",\n        \"mapper.join.forbid-nulls\",\n        \"mapper.kernel.cosine\",\n        \"mapper.kernel.epanechnikov\",\n        \"mapper.kernel.gaussian\",\n        \"mapper.kernel.logistic\",\n        \"mapper.kernel.quartic\",\n        \"mapper.kernel.silverman\",\n        \"mapper.kernel.triangular\",\n        \"mapper.kernel.tricube\",\n        \"mapper.kernel.triweight\",\n        \"mapper.kernel.uniform\",\n        \"mapper.last\",\n        \"mapper.le\",\n        \"mapper.le.elev\",\n        \"mapper.le.hhcode\",\n        \"mapper.le.lat\",\n        \"mapper.le.lon\",\n        \"mapper.le.tick\",\n        \"mapper.log\",\n        \"mapper.lowest\",\n        \"mapper.lt\",\n        \"mapper.lt.elev\",\n        \"mapper.lt.hhcode\",\n        \"mapper.lt.lat\",\n        \"mapper.lt.lon\",\n        \"mapper.lt.tick\",\n        \"mapper.mad\",\n        \"mapper.max\",\n        \"mapper.max.forbid-nulls\",\n        \"mapper.max.x\",\n        \"mapper.mean\",\n        \"mapper.mean.circular\",\n        \"mapper.mean.circular.exclude-nulls\",\n        \"mapper.mean.exclude-nulls\",\n        \"mapper.median\",\n        \"mapper.median.forbid-nulls\",\n        \"mapper.min\",\n        \"mapper.min.forbid-nulls\",\n        \"mapper.min.x\",\n        \"mapper.minute\",\n        \"mapper.mod\",\n        \"mapper.month\",\n        \"mapper.mul\",\n        \"mapper.ne\",\n        \"mapper.ne.elev\",\n        \"mapper.ne.hhcode\",\n        \"mapper.ne.lat\",\n        \"mapper.ne.lon\",\n        \"mapper.ne.tick\",\n        \"mapper.npdf\",\n        \"mapper.or\",\n        \"mapper.parsedouble\",\n        \"mapper.percentile\",\n        \"mapper.pow\",\n        \"mapper.product\",\n        \"mapper.rate\",\n        \"mapper.replace\",\n        \"mapper.rms\",\n        \"mapper.round\",\n        \"mapper.sd\",\n        \"mapper.sd.forbid-nulls\",\n        \"mapper.second\",\n        \"mapper.sigmoid\",\n        \"mapper.sqrt\",\n        \"mapper.sum\",\n        \"mapper.sum.forbid-nulls\",\n        \"mapper.tanh\",\n        \"mapper.tick\",\n        \"mapper.toboolean\",\n        \"mapper.todouble\",\n        \"mapper.tolong\",\n        \"mapper.tostring\",\n        \"mapper.truecourse\",\n        \"mapper.var\",\n        \"mapper.var.forbid-nulls\",\n        \"mapper.vdist\",\n        \"mapper.vspeed\",\n        \"mapper.weekday\",\n        \"mapper.year\",\n        \"max.tick.sliding.window\",\n        \"max.time.sliding.window\",\n        \"reducer.and\",\n        \"reducer.and.exclude-nulls\",\n        \"reducer.argmax\",\n        \"reducer.argmin\",\n        \"reducer.count\",\n        \"reducer.count.exclude-nulls\",\n        \"reducer.count.include-nulls\",\n        \"reducer.count.nonnull\",\n        \"reducer.join\",\n        \"reducer.join.forbid-nulls\",\n        \"reducer.join.nonnull\",\n        \"reducer.join.urlencoded\",\n        \"reducer.mad\",\n        \"reducer.max\",\n        \"reducer.max.forbid-nulls\",\n        \"reducer.max.nonnull\",\n        \"reducer.mean\",\n        \"reducer.mean.circular\",\n        \"reducer.mean.circular.exclude-nulls\",\n        \"reducer.mean.exclude-nulls\",\n        \"reducer.median\",\n        \"reducer.median.forbid-nulls\",\n        \"reducer.min\",\n        \"reducer.min.forbid-nulls\",\n        \"reducer.min.nonnull\",\n        \"reducer.or\",\n        \"reducer.or.exclude-nulls\",\n        \"reducer.percentile\",\n        \"reducer.product\",\n        \"reducer.rms\",\n        \"reducer.rms.exclude-nulls\",\n        \"reducer.sd\",\n        \"reducer.sd.forbid-nulls\",\n        \"reducer.shannonentropy.0\",\n        \"reducer.shannonentropy.1\",\n        \"reducer.sum\",\n        \"reducer.sum.forbid-nulls\",\n        \"reducer.sum.nonnull\",\n        \"reducer.var\",\n        \"reducer.var.forbid-nulls\"\n    ],\n    \"control\": [\n        \"BREAK\",\n        \"CHECKMACRO\",\n        \"CONTINUE\",\n        \"CUDF\",\n        \"DEFINED\",\n        \"DEFINEDMACRO\",\n        \"EVAL\",\n        \"FAIL\",\n        \"FOR\",\n        \"FOREACH\",\n        \"FORSTEP\",\n        \"IFT\",\n        \"IFTE\",\n        \"MSGFAIL\",\n        \"NRETURN\",\n        \"RETHROW\",\n        \"RETURN\",\n        \"SWITCH\",\n        \"TRY\",\n        \"UDF\",\n        \"UNTIL\",\n        \"WHILE\"\n    ],\n    \"operators\": [\n        \"!\",\n        \"!=\",\n        \"%\",\n        \"&\",\n        \"&&\",\n        \"*\",\n        \"**\",\n        \"+\",\n        \"+!\",\n        \"-\",\n        \"/\",\n        \"<\",\n        \"<<\",\n        \"<=\",\n        \"==\",\n        \">\",\n        \">=\",\n        \">>\",\n        \">>>\",\n        \"AND\",\n        \"NOT\",\n        \"OR\",\n        \"^\",\n        \"|\",\n        \"||\",\n        \"~\",\n        \"~=\"\n    ],\n    \"escapes\": \"\\\\\\\\(?:[abfnrtv\\\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})\",\n    \"tokenizer\": {\n        \"root\": [\n            [\n                \"\\\\@[A-Za-z0-9._\\\\/]+\",\n                \"variable\"\n            ],\n            [\n                \"\\\\$[A-Za-z0-9._\\\\/]+\",\n                \"variable\"\n            ],\n            [\n                \"true|false\",\n                \"number\"\n            ],\n            [\n                \"[A-Za-z_][.\\\\w$]*\",\n                {\n                    \"cases\": {\n                        \"@constants\": \"regexp\",\n                        \"@keywords\": \"keyword\",\n                        \"@functions\": \"type\",\n                        \"@control\": \"metatag\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                \"[{}()[\\\\]]\",\n                \"@brackets\"\n            ],\n            [\n                \"\\\\d*\\\\.\\\\d+([eE][-+]?\\\\d+)?[fFdD]?\",\n                \"number.float\"\n            ],\n            [\n                \"0[xX][0-9a-fA-F_]*[0-9a-fA-F][Ll]?\",\n                \"number.hex\"\n            ],\n            [\n                \"0[0-7_]*[0-7][Ll]?\",\n                \"number.octal\"\n            ],\n            [\n                \"0[bB][0-1_]*[0-1][Ll]?\",\n                \"number.binary\"\n            ],\n            [\n                \"\\\\d+[lL]?\",\n                \"number\"\n            ],\n            {\n                \"include\": \"@whitespace\"\n            },\n            [\n                \"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*$\",\n                \"string.invalid\"\n            ],\n            [\n                \"\\\"\",\n                \"string\",\n                \"@string\"\n            ],\n            [\n                \"'([^'\\\\\\\\]|\\\\\\\\.)*$\",\n                \"string.invalid\"\n            ],\n            [\n                \"'\",\n                \"string\",\n                \"@string2\"\n            ],\n            [\n                \"<'\",\n                \"string\",\n                \"@string3\"\n            ]\n        ],\n        \"whitespace\": [\n            [\n                \"[ \\\\t\\\\r\\\\n]+\",\n                \"white\"\n            ],\n            [\n                \"\\\\/\\\\*\",\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                \"\\\\/\\\\/.*$\",\n                \"comment\"\n            ]\n        ],\n        \"comment\": [\n            [\n                \"[^\\\\/*]+\",\n                \"comment\"\n            ],\n            [\n                \"\\\\/\\\\*\",\n                \"comment.invalid\"\n            ],\n            [\n                \"\\\\*/\",\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                \"[\\\\/*]\",\n                \"comment\"\n            ]\n        ],\n        \"string\": [\n            [\n                \"[^\\\\\\\"]+\",\n                \"string\"\n            ],\n            [\n                \"@escapes\",\n                \"string.escape\"\n            ],\n            [\n                \"\\\\.\",\n                \"string.escape.invalid\"\n            ],\n            [\n                \"\\\"\",\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        \"string2\": [\n            [\n                \"[^\\\\']+\",\n                \"string\"\n            ],\n            [\n                \"@escapes\",\n                \"string.escape\"\n            ],\n            [\n                \"\\\\.\",\n                \"string.escape.invalid\"\n            ],\n            [\n                \"'\",\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        \"string3\": [\n            [\n                \"[^\\\\(<')]+\",\n                \"string\"\n            ],\n            [\n                \"'>\",\n                \"string\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n      }","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {WSCompletionItemProvider} from './WSCompletionItemProvider';\nimport {languages} from 'monaco-editor';\nimport {Monarch} from '../../../model/monarch';\nimport {WSLanguageConfiguration} from './WSLanguageConfiguration';\nimport {WSHoverProvider} from './WSHoverProvider';\nimport {FLoWSCompletionItemProvider} from './FLoWSCompletionItemProvider';\nimport {FLoWSHoverProvider} from './FLoWSHoverProvider';\nimport {FLoWSLanguageConfiguration} from './FLoWSLanguageConfiguration';\nimport {EditorUtils} from './editorUtils';\nimport registerCompletionItemProvider = languages.registerCompletionItemProvider;\nimport setMonarchTokensProvider = languages.setMonarchTokensProvider;\nimport getLanguages = languages.getLanguages;\nimport register = languages.register;\nimport setLanguageConfiguration = languages.setLanguageConfiguration;\nimport registerHoverProvider = languages.registerHoverProvider;\nimport {MonarchFlows} from '../../../model/monarchFlows';\n\nexport class ProviderRegistrar {\n\n  static register() {\n    // WarpScript\n    if (!getLanguages().find(l => l.id === EditorUtils.WARPSCRIPT_LANGUAGE)) {\n      register({id: EditorUtils.WARPSCRIPT_LANGUAGE});\n      setLanguageConfiguration(EditorUtils.WARPSCRIPT_LANGUAGE, new WSLanguageConfiguration().getConfiguration());\n      setMonarchTokensProvider(EditorUtils.WARPSCRIPT_LANGUAGE, Monarch.rules);\n      registerCompletionItemProvider(EditorUtils.WARPSCRIPT_LANGUAGE, new WSCompletionItemProvider());\n      registerHoverProvider(EditorUtils.WARPSCRIPT_LANGUAGE, new WSHoverProvider());\n    }\n    // Flows\n    if (!getLanguages().find(l => l.id === EditorUtils.FLOWS_LANGUAGE)) {\n      register({id: EditorUtils.FLOWS_LANGUAGE});\n      setLanguageConfiguration(EditorUtils.FLOWS_LANGUAGE, new FLoWSLanguageConfiguration().getConfiguration());\n      setMonarchTokensProvider(EditorUtils.FLOWS_LANGUAGE, MonarchFlows.rules);\n      registerCompletionItemProvider(EditorUtils.FLOWS_LANGUAGE, new FLoWSCompletionItemProvider());\n      registerHoverProvider(EditorUtils.FLOWS_LANGUAGE, new FLoWSHoverProvider());\n    }\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n/* tslint:disable:no-string-literal */\nimport {editor, Range} from 'monaco-editor';\nimport {Utils} from '../../model/utils';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport {Config} from '../../model/config';\nimport {Logger} from '../../model/logger';\nimport {BubblingEvents} from '../../model/bubblingEvent';\nimport WarpScriptParser, {DocGenerationParams, SpecialCommentCommands} from '../../model/warpScriptParser';\nimport {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {catchError} from 'rxjs/operators';\nimport {Observable, of, Subscription} from 'rxjs';\nimport {ProviderRegistrar} from './providers/ProviderRegistrar';\nimport {EditorUtils} from './providers/editorUtils';\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\nimport create = editor.create;\nimport IEditorOptions = editor.IEditorOptions;\n\n@Component({\n  selector: 'warpview-editor',\n  templateUrl: './warp-view-editor.component.html',\n  styleUrls: ['./warp-view-editor.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class WarpViewEditorComponent implements OnInit, OnDestroy, AfterViewInit {\n\n  @Input() url = '';\n  @Input() lang: 'warpscript' | 'flows' = 'warpscript';\n\n  @Input() set debug(debug: boolean | string) {\n    if (typeof debug === 'string') {\n      debug = 'true' === debug;\n    }\n    this._debug = debug;\n    this.LOG.setDebug(debug);\n  }\n\n  get debug() {\n    return this._debug;\n  }\n\n  @Input()\n  set theme(newValue: string) {\n    this.LOG.debug(['themeHandler'], 'The new value of theme is: ', newValue);\n    if ('dark' === newValue) {\n      this.monacoTheme = 'vs-dark';\n    } else {\n      this.monacoTheme = 'vs';\n    }\n    this.LOG.debug(['themeHandler'], 'The new value of theme is: ', this.monacoTheme);\n    this._theme = newValue;\n    if (editor) {\n      editor.setTheme(this.monacoTheme);\n    }\n  }\n\n  get theme(): string {\n    return this._theme;\n  }\n\n  @Input('warpscript')\n  set warpscript(newValue: string) {\n    this.LOG.debug(['warpscriptHandler'], 'The new value of warpscript is: ', newValue);\n    if (this.ed) {\n      this.ed.setValue(newValue);\n    }\n    this._warpscript = newValue;\n    this.loading = false;\n  }\n\n  get warpscript(): string {\n    return this._warpscript;\n  }\n\n  @Input('showDataviz')\n  get showDataviz(): boolean {\n    return this._showDataviz;\n  }\n\n  set showDataviz(value: boolean) {\n    this._showDataviz = '' + value !== 'false';\n  }\n\n  private _showExecute = true;\n  @Input('showExecute')\n  get showExecute(): boolean {\n    return this._showExecute;\n  }\n\n  set showExecute(value: boolean) {\n    this._showExecute = '' + value !== 'false';\n  }\n\n  @Input('showResult')\n  get showResult(): boolean {\n    return this._showResult;\n  }\n\n  set showResult(value: boolean) {\n    this._showResult = '' + value !== 'false';\n  }\n\n  @Input('config') set config(config: Config | string) {\n    let conf = (typeof config === 'string') ? JSON.parse(config || '{}') : config || {};\n    this.innerConfig = Utils.mergeDeep(this.innerConfig, conf);\n    this.LOG.debug(['config'], this.innerConfig, conf);\n    if (this.ed) {\n      this.LOG.debug(['config'], this.innerConfig);\n      this.ed.updateOptions(this.setOptions());\n    }\n  }\n\n  get config(): Config | string {\n    return this.innerConfig;\n  }\n\n  @Input('displayMessages')\n  get displayMessages(): boolean {\n    return this._displayMessages;\n  }\n\n  set displayMessages(value: boolean) {\n    this._displayMessages = '' + value !== 'false';\n  }\n\n  @Input('widthPx')\n  get widthPx(): number {\n    return this._widthPx;\n  }\n\n  set widthPx(value: number) {\n    this._widthPx = parseInt('' + value, 10);\n  }\n\n  @Input('heightLine')\n  get heightLine(): number {\n    return this._heightLine;\n  }\n\n  set heightLine(value: number) {\n    this._heightLine = parseInt('' + value, 10);\n  }\n\n  @Input('heightPx')\n  get heightPx(): number {\n    return this._heightPx;\n  }\n\n  set heightPx(value: number) {\n    this._heightPx = parseInt('' + value, 10);\n  }\n\n  @Input('imageTab')\n  get imageTab(): boolean {\n    return this._imageTab;\n  }\n\n  set imageTab(value: boolean) {\n    this._imageTab = '' + value !== 'false';\n  }\n\n  @Input('initialSize')\n  get initialSize(): { w?: number, h?: number, name?: string, p?: number } | string {\n    return this._initialSize;\n  }\n\n  set initialSize(value: { w?: number, h?: number, name?: string, p?: number } | string) {\n    this._initialSize = typeof value === 'string' ? JSON.parse(value) : value;\n  }\n\n  @Output('warpViewEditorStatusEvent') warpViewEditorStatusEvent = new EventEmitter<any>();\n  @Output('warpViewEditorErrorEvent') warpViewEditorErrorEvent = new EventEmitter<any>();\n  @Output('warpViewEditorWarpscriptChanged') warpViewEditorWarpscriptChanged = new EventEmitter<any>();\n  @Output('warpViewEditorWarpscriptResult') warpViewEditorWarpscriptResult = new EventEmitter<any>();\n  @Output('warpViewEditorLoaded') warpViewEditorLoaded = new EventEmitter<any>();\n  @Output('warpViewEditorSize') warpViewEditorSize = new EventEmitter<any>();\n  @Output('warpViewEditorBreakPoint') warpViewEditorBreakPoint = new EventEmitter<any>();\n  @Output('warpViewEditorCtrlClick') warpViewEditorCtrlClick = new EventEmitter<any>();\n  @Output('warpViewEditorDatavizRequested') warpViewEditorDatavizRequested = new EventEmitter<any>();\n\n  @ViewChild('wrapper', {static: true}) wrapper: ElementRef<HTMLDivElement>;\n  @ViewChild('editor', {static: true}) editor: ElementRef<HTMLDivElement>;\n  @ViewChild('buttons', {static: true}) buttons: ElementRef<HTMLDivElement>;\n  @ViewChild('content', {static: true}) contentWrapper: ElementRef<HTMLDivElement>;\n\n  result: string;\n  status: { message: string, ops: number, elapsed: number, fetched: number };\n  error: string;\n  loading = false;\n  selectedResultTab = -1;\n  lastKnownWS: string;\n  headers = this.getItems();\n  innerConfig = new Config();\n  ro: ResizeObserver;\n  // tslint:disable-next-line:variable-name\n  _theme = 'light';\n  // tslint:disable-next-line:variable-name\n  _warpscript: string;\n  // tslint:disable-next-line:variable-name\n  _debug = false;\n  _displayMessages = true;\n  _showDataviz = false;\n  private _heightPx: number;\n  private _heightLine: number;\n  private _showResult = true;\n  private _imageTab = false;\n  private _widthPx: number;\n  private _initialSize: { w?: number, h?: number, name?: string, p?: number };\n  private static MIN_HEIGHT = 250;\n  private LOG: Logger;\n  private ed: IStandaloneCodeEditor;\n  private monacoTheme = 'vs';\n  private innerCode: string;\n  private breakpoints = {};\n  private decoration = [];\n  private previousParentHeight = -1;\n  private previousParentWidth = -1;\n  private request: Subscription;\n  private resizeWatcherInt: any;\n\n  constructor(private el: ElementRef, private http: HttpClient) {\n    this.LOG = new Logger(WarpViewEditorComponent, this._debug);\n  }\n\n  // noinspection JSUnusedGlobalSymbols\n  ngOnInit() {\n    this.LOG.debug(['ngOnInit'], 'innerConfig: ', this.innerConfig);\n    if ('dark' === this._theme) {\n      this.monacoTheme = 'vs-dark';\n    }\n    this.LOG.debug(['ngOnInit'], 'ngOnInit theme is: ', this._theme);\n    (self as any).MonacoEnvironment = {\n      getWorkerUrl: () => URL.createObjectURL(new Blob([`\n\tself.MonacoEnvironment = {\n\t\tbaseUrl: 'https://unpkg.com/monaco-editor@0.18.1/min/'\n\t};\n\timportScripts('https://unpkg.com/monaco-editor@0.18.1/min/vs/base/worker/workerMain.js');\n`], {type: 'text/javascript'}))\n    };\n    ProviderRegistrar.register();\n  }\n\n  resizeWatcher() {\n    const editorParentWidth = this.editor.nativeElement.parentElement.clientWidth;\n    const editorParentHeight = this.editor.nativeElement.parentElement.clientHeight\n      - parseInt(window.getComputedStyle(this.editor.nativeElement.parentElement).getPropertyValue('padding-top'), 10)\n      - parseInt(window.getComputedStyle(this.editor.nativeElement.parentElement).getPropertyValue('padding-bottom'), 10);\n\n    let warpviewParentHeight = this.el.nativeElement.parentElement.clientHeight\n      - parseInt(window.getComputedStyle(this.el.nativeElement.parentElement).getPropertyValue('padding-top'), 10)\n      - parseInt(window.getComputedStyle(this.el.nativeElement.parentElement).getPropertyValue('padding-bottom'), 10);\n    warpviewParentHeight = Math.max(warpviewParentHeight, WarpViewEditorComponent.MIN_HEIGHT);\n    // fix the 5px editor height in chrome by setting the wrapper height at element level\n    if (Math.abs(this.wrapper.nativeElement.clientHeight - warpviewParentHeight) > 30) {\n      this.wrapper.nativeElement.style.height = warpviewParentHeight + 'px';\n    }\n    // watch for editor parent' size change\n    if (editorParentHeight !== this.previousParentHeight || editorParentWidth !== this.previousParentWidth) {\n      this.previousParentHeight = editorParentHeight;\n      this.previousParentWidth = editorParentWidth;\n      const editorH = Math.floor(editorParentHeight) - (this.buttons ? this.buttons.nativeElement.clientHeight : 0);\n      const editorW = Math.floor(this.editor.nativeElement.parentElement.clientWidth);\n      this.ed.layout({height: editorH, width: editorW});\n      this.editor.nativeElement.style.overflow = 'hidden';\n    }\n  }\n\n  setOptions(): IEditorOptions {\n    return {\n      quickSuggestionsDelay: this.innerConfig.editor.quickSuggestionsDelay,\n      quickSuggestions: this.innerConfig.editor.quickSuggestions,\n      suggestOnTriggerCharacters: this.innerConfig.editor.quickSuggestions,\n      // monaco auto layout is ok if parent has a fixed size, not 100% or a calc ( % px ) formula.\n      automaticLayout: !!this._heightPx,\n      hover: {enabled: this.innerConfig.hover},\n      readOnly: this.innerConfig.readOnly,\n      fixedOverflowWidgets: true,\n      folding: true,\n      glyphMargin: this.innerConfig.editor.enableDebug\n    };\n  }\n\n  ngAfterViewInit(): void {\n    this.LOG.debug(['ngAfterViewInit'], 'height', this._heightPx);\n    if (!!this._heightPx) {\n      // if height-px is set, size is fixed.\n      this.el.nativeElement.style.height = this._heightPx + 'px';\n      this.wrapper.nativeElement.style.height = this._heightPx + 'px';\n      this.resize(true);\n    } else {\n      // compute the layout manually in a 200ms timer\n      this.resizeWatcherInt = setInterval(this.resizeWatcher.bind(this), 200);\n    }\n    try {\n      this.innerCode = this.contentWrapper.nativeElement.textContent;\n      // add blank lines when needed\n      for (let i = this.innerCode.split('\\n').length; i < this.innerConfig.editor.minLineNumber; i++) {\n        this.innerCode += '\\n';\n      }\n      // trim spaces and line breaks at the beginning (side effect of angular)\n      let firstIndex = 0;\n      while (this.innerCode[firstIndex] === ' ' || this.innerCode[firstIndex] === '\\n') {\n        firstIndex++;\n      }\n      this.innerCode = this.innerCode.substring(firstIndex);\n      this.LOG.debug(['ngAfterViewInit'], 'warpscript', this._warpscript);\n      this.LOG.debug(['ngAfterViewInit'], 'inner: ', this.innerCode.split('\\n'));\n      this.LOG.debug(['ngAfterViewInit'], 'innerConfig: ', this.innerConfig);\n      const edOpts: IEditorOptions = this.setOptions();\n      this.lastKnownWS = this._warpscript || this.innerCode;\n      editor.setTheme(this.monacoTheme);\n      this.LOG.debug(['ngAfterViewInit'], 'edOpts: ', edOpts);\n      this.ed = create(this.editor.nativeElement, edOpts);\n      this.ed.setValue(this.lastKnownWS);\n      editor.setModelLanguage(this.ed.getModel(), this.lang);\n\n      if (this.innerConfig.editor.enableDebug) {\n        this.ed.onMouseDown(e => {\n          if (e.event.leftButton) {\n            if (e.target.type === 2 || e.target.type === 3 || e.target.type === 4) {\n              this.toggleBreakPoint(e.target.position.lineNumber);\n            }\n          }\n        });\n      }\n      this.ed.getModel().updateOptions({tabSize: this.innerConfig.editor.tabSize});\n      if (this.ed) {\n        this.warpViewEditorLoaded.emit('loaded');\n        // angular events does not bubble up outside angular component.\n        BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorLoaded', 'loaded');\n        this.LOG.debug(['ngAfterViewInit'], 'loaded');\n        this.ed.getModel().onDidChangeContent((event) => {\n          if (this.lastKnownWS !== this.ed.getValue()) {\n            this.LOG.debug(['ngAfterViewInit'], 'ws changed', event);\n            this.warpViewEditorWarpscriptChanged.emit(this.ed.getValue());\n            BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorWarpscriptChanged', this.ed.getValue());\n          }\n        });\n        // manage the ctrl click, create an event with the statement, the endpoint, the warpfleet repos.\n        this.ed.onMouseDown(e => {\n          if ((!this.isMac() && !!e.event.ctrlKey) || (this.isMac() && !!e.event.metaKey)) {\n            // ctrl click on which word ?\n            const name: string = (this.ed.getModel().getWordAtPosition(e.target.range.getStartPosition()) || {word: undefined}).word;\n            // parse the warpscript\n            const ws: string = this.ed.getValue();\n            const specialHeaders: SpecialCommentCommands = WarpScriptParser.extractSpecialComments(ws);\n            const repos: string[] = [];\n            const statements: string[] = WarpScriptParser.parseWarpScriptStatements(ws);\n            statements.forEach((st, i) => {\n              if (st === 'WF.ADDREPO' && i > 0) {\n                const previousStatement = statements[i - 1];\n                if (\n                  (previousStatement.startsWith('\"') && previousStatement.endsWith('\"'))\n                  || (previousStatement.startsWith('\\'') && previousStatement.endsWith('\\''))\n                ) {\n                  // this is a valid string.\n                  repos.push(previousStatement.substring(1, previousStatement.length - 1));\n                }\n              }\n            });\n            const docParams: DocGenerationParams = {\n              endpoint: specialHeaders.endpoint || this.url,\n              macroName: name,\n              wfRepos: repos\n            };\n            this.warpViewEditorCtrlClick.emit(docParams);\n            BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorCtrlClick', docParams);\n          }\n        });\n      }\n    } catch (e) {\n      this.LOG.error(['ngAfterViewInit'], 'componentDidLoad', e);\n    }\n  }\n\n  ngOnDestroy() {\n    this.LOG.debug(['ngOnDestroy'], 'Component removed from the DOM');\n    if (this.resizeWatcherInt) {\n      clearInterval(this.resizeWatcherInt);\n    }\n    if (this.ed) {\n      this.ed.dispose();\n    }\n    if (this.ro) {\n      this.ro.disconnect();\n    }\n    if (this.request) {\n      this.request.unsubscribe();\n    }\n  }\n\n  @Input()\n  public abort(session?: string) {\n    if (this.request) {\n      // BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorErrorEvent', this.error);\n      if (!!session) {\n        const specialHeaders: SpecialCommentCommands = WarpScriptParser.extractSpecialComments(this.ed.getValue());\n        const executionUrl = specialHeaders.endpoint || this.url;\n        this.http.post<HttpResponse<string>>(executionUrl, `<% '${session}' 'WSKILLSESSION' EVAL %> <% -1 %> <% %> TRY`, {\n          // @ts-ignore\n          observe: 'response',\n          // @ts-ignore\n          responseType: 'text',\n          'Accept': 'application/json',\n        })\n          .pipe(catchError(this.handleError<HttpResponse<string>>(undefined)))\n          .subscribe((res: HttpResponse<string>) => {\n            if (!!res) {\n              this.LOG.debug(['abort'], 'response', res.body);\n              const r = JSON.parse(res.body);\n              if (!!r[0]) {\n                if (r[0] === 0) {\n                  this.sendError('It appears that your Warp 10 is running on multiple backend');\n                } else if (r[0] === -1) {\n                  this.sendError(`Unable to WSABORT on ${executionUrl}. Did you activate StackPSWarpScriptExtension?`);\n                }\n                this.sendStatus({\n                  message: `${WarpViewEditorComponent.getLabel(this.lang)} aborted.`,\n                  ops: parseInt(res.headers.get('x-warp10-ops'), 10),\n                  elapsed: parseInt(res.headers.get('x-warp10-elapsed'), 10),\n                  fetched: parseInt(res.headers.get('x-warp10-fetched'), 10),\n                });\n              } else {\n                this.sendError(`An error occurs for session: ${session}`);\n              }\n            }\n            this.request.unsubscribe();\n            delete this.request;\n            this.loading = false;\n          });\n      } else {\n        this.sendStatus({\n          message: `${WarpViewEditorComponent.getLabel(this.lang)} aborted.`,\n          ops: 0,\n          elapsed: 0,\n          fetched: 0,\n        });\n        this.request.unsubscribe();\n        delete this.request;\n        this.loading = false;\n      }\n    }\n  }\n\n  @Input()\n  public highlight(line: number) {\n    const currentKey = 'hl-' + line;\n    Object.keys(this.breakpoints).forEach(k => {\n      if (k.startsWith('hl')) {\n        delete this.breakpoints[k];\n      }\n    });\n    this.breakpoints[currentKey] = {\n      range: new Range(line, 1, line, 1),\n      options: {\n        isWholeLine: true,\n        className: 'warpviewContentClass'\n      }\n    };\n    this.decoration = this.ed.deltaDecorations(this.decoration, Utils.toArray(this.breakpoints));\n  }\n\n  private toggleBreakPoint(line: number) {\n    const currentKey = 'bp-' + line;\n    if (this.breakpoints[currentKey]) {\n      delete this.breakpoints[currentKey];\n    } else {\n      this.breakpoints[currentKey] = {\n        range: new Range(line, 1, line, 1),\n        options: {\n          isWholeLine: true,\n          glyphMarginClassName: 'warpviewGlyphMarginClass'\n        }\n      };\n    }\n    this.warpViewEditorBreakPoint.emit(this.breakpoints);\n    BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorBreakPoint', this.breakpoints);\n    this.decoration = this.ed.deltaDecorations(this.decoration, Utils.toArray(this.breakpoints));\n  }\n\n  private handleError<T>(result?: T) {\n    return (error: HttpErrorResponse): Observable<T> => {\n      this.LOG.error(['handleError'], {e: error});\n      if (error.status === 0) {\n        this.error = `Unable to reach ${error.url}`;\n      } else {\n        if(error.headers.get('X-Warp10-Error-Message') && error.headers.get('X-Warp10-Error-Line')) {\n          this.error =  'line #' + error.headers.get('X-Warp10-Error-Line') + ': ' + error.headers.get('X-Warp10-Error-Message');\n        } else {\n          this.error = error.statusText;\n        }\n      }\n      this.warpViewEditorErrorEvent.emit(this.error);\n      BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorErrorEvent', this.error);\n      this.loading = false;\n      return of(result as T);\n    };\n  }\n\n  @Input()\n  public execute(session?) {\n    if (this.ed) {\n      this.result = undefined;\n      this.status = undefined;\n      this.error = undefined;\n      this.LOG.debug(['execute'], 'this.ed.getValue()', session, this.ed.getValue());\n      this.loading = true;\n      // parse comments to look for inline url or preview modifiers\n      const specialHeaders: SpecialCommentCommands = WarpScriptParser.extractSpecialComments(this.ed.getValue());\n      const previewType = specialHeaders.displayPreviewOpt || 'none';\n      if (previewType === 'I') {\n        this.selectedResultTab = 2; // select image tab.\n      } else if (this.selectedResultTab === 2) {\n        this.selectedResultTab = 0; // on next execution, select results tab.\n      }\n      const executionUrl = specialHeaders.endpoint || this.url;\n      // Get Warp10 version\n      // @ts-ignore\n\n      let headers = {'Content-Type': 'text/plain;charset=UTF-8'};\n      if (!!session) {\n        headers['X-Warp10-WarpScriptSession'] = session;\n      }\n      let code = this.ed.getValue().replace(/ /gi, ' ');\n      if (EditorUtils.FLOWS_LANGUAGE === this.lang) {\n        code = `<'\n${code}\n'>\nFLOWS\n`;\n      }\n      this.request = this.http.post<HttpResponse<string>>(executionUrl, code, {\n        // @ts-ignore\n        observe: 'response',\n        // @ts-ignore\n        responseType: 'text',\n        headers\n      })\n        .pipe(catchError(this.handleError<HttpResponse<string>>(undefined)))\n        .subscribe((res: HttpResponse<string>) => {\n          if (!!res) {\n            this.LOG.debug(['execute'], 'response', res.body);\n            this.warpViewEditorWarpscriptResult.emit(res.body);\n            BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorWarpscriptResult', res.body);\n            this.sendStatus({\n              message: `Your script execution took\n ${EditorUtils.formatElapsedTime(parseInt(res.headers.get('x-warp10-elapsed'), 10))}\n serverside, fetched\n ${res.headers.get('x-warp10-fetched')} datapoints and performed\n ${res.headers.get('x-warp10-ops')}  ${WarpViewEditorComponent.getLabel(this.lang)} operations.`,\n              ops: parseInt(res.headers.get('x-warp10-ops'), 10),\n              elapsed: parseInt(res.headers.get('x-warp10-elapsed'), 10),\n              fetched: parseInt(res.headers.get('x-warp10-fetched'), 10),\n            });\n            try {\n              this.result = res.body;\n            } catch (e) {\n              if (e.name && e.message && e.at && e.text) {\n                this.error = `${e.name}: ${e.message} at char ${e.at} => ${e.text}`;\n              } else {\n                this.error = e.toString();\n              }\n              this.result = res.body;\n              this.LOG.error(['execute 1'], this.error);\n              this.sendError(this.error);\n            }\n          }\n          this.loading = false;\n        });\n    } else {\n      this.loading = false;\n      this.LOG.error(['execute'], 'no active editor');\n    }\n  }\n\n  requestDataviz() {\n    this.warpViewEditorDatavizRequested.emit(this.result);\n    BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorDatavizRequested', this.result);\n  }\n\n  @HostListener('document:resize', ['$event'])\n  @HostListener('resized', ['$event'])\n  onResized($event) {\n    this.LOG.debug(['onResized'], $event.detail.editor);\n    this.warpViewEditorSize.emit($event.detail.editor);\n  }\n\n  isMac() {\n    return navigator.platform.toUpperCase().indexOf('MAC') >= 0;\n  }\n\n  onKeyDown($event) {\n    this.LOG.debug(['onKeyDown'], $event);\n    if ((!this.isMac() && !!$event.ctrlKey) || (this.isMac() && !!$event.metaKey)) {\n      Array.from(this.editor.nativeElement.getElementsByClassName('mtk8'))\n        .concat(Array.from(this.editor.nativeElement.getElementsByClassName('mtk22')))\n        .concat(Array.from(this.editor.nativeElement.getElementsByClassName('mtk23')))\n        .forEach(e => {\n          if (!e.textContent.startsWith('$')) {\n            (e as HTMLElement).classList.add('mouseOver');\n          }\n        });\n    }\n  }\n\n  onKeyUp($event) {\n    this.LOG.debug(['onKeyUp'], $event);\n    Array.from(this.editor.nativeElement.getElementsByClassName('mtk8'))\n      .concat(Array.from(this.editor.nativeElement.getElementsByClassName('mtk22')))\n      .concat(Array.from(this.editor.nativeElement.getElementsByClassName('mtk23')))\n      .forEach(e => (e as HTMLElement).classList.remove('mouseOver'));\n  }\n\n  @Input()\n  public resize(initial: boolean) {\n    window.setTimeout(() => {\n      if (initial && (!!this._heightPx)) {\n        this.editor.nativeElement.style.height = `calc(100% - ${this.buttons ?\n          this.buttons.nativeElement.clientHeight\n          : 100}px )`;\n      }\n      if (initial) {\n        this.warpViewEditorLoaded.emit();\n        BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorLoaded', 'loaded');\n        this.LOG.debug(['resize'], 'loaded');\n      }\n    }, initial ? 500 : 100);\n  }\n\n  getItems() {\n    const headers = [];\n    if (this._showResult) {\n      headers.push({name: 'editor', size: this._initialSize ? this._initialSize.p || 50 : 50});\n      headers.push({name: 'result', size: this._initialSize ? 100 - this._initialSize.p || 50 : 50});\n    } else {\n      headers.push({name: 'editor', size: 100});\n    }\n    return headers;\n  }\n\n  responsiveStyle() {\n    return {height: '100%', width: '100%', overflow: 'hidden'};\n  }\n\n  private sendError(error: string) {\n    this.error = error;\n    BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorErrorEvent', this.error);\n    this.warpViewEditorErrorEvent.emit(this.error);\n  }\n\n  private sendStatus(status: { elapsed: number; ops: number; message: string; fetched: number }) {\n    this.status = {...status};\n    BubblingEvents.emitBubblingEvent(this.el, 'warpViewEditorStatusEvent', this.status);\n    this.warpViewEditorStatusEvent.emit(this.status);\n  }\n\n  private static getLabel(lang: 'warpscript' | 'flows') {\n    switch (lang) {\n      case 'flows': return 'FLoWS';\n      case 'warpscript': return 'WarpScript';\n    }\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\nimport {Injectable} from '@angular/core';\n\n@Injectable()\nexport class GTSLib {\n\n  color = ['#4D4D4D', '#5DA5DA', '#FAA43A', '#60BD68', '#F17CB0', '#B2912F', '#B276B2', '#DECF3F', '#F15854', '#607D8B'];\n\n  getColor(i) {\n    return this.color[i % this.color.length];\n  }\n\n  unique(arr) {\n    const u = {};\n    const a = [];\n    for (let i = 0, l = arr.length; i < l; ++i) {\n      if (!u.hasOwnProperty(arr[i])) {\n        a.push(arr[i]);\n        u[arr[i]] = 1;\n      }\n    }\n    return a;\n  }\n\n  hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16)\n    ] : null;\n  }\n\n  transparentize(color, alpha: number): string {\n    return 'rgba(' + this.hexToRgb(color).concat(alpha).join(',') + ')';\n  }\n\n  isArray(value) {\n    return value && typeof value === 'object' && value instanceof Array && typeof value.length === 'number'\n      && typeof value.splice === 'function' && !(value.propertyIsEnumerable('length'));\n  }\n\n  isEmbeddedImage(item) {\n    return !(typeof item !== 'string' || !/^data:image/.test(item));\n  }\n\n  isEmbeddedImageObject(item) {\n    return !((item === null) || (item.image === null) ||\n      (item.caption === null) || !this.isEmbeddedImage(item.image));\n  }\n\n  gtsFromJSON(json, id) {\n    return {\n      gts: {\n        c: json.c,\n        l: json.l,\n        a: json.a,\n        v: json.v,\n        id,\n      },\n    };\n  }\n\n  gtsFromJSONList(jsonList, prefixId) {\n    const gtsList = [];\n    let id;\n    jsonList.forEach((item, i) => {\n      let gts = item;\n      if (item.gts) {\n        gts = item.gts;\n      }\n      if ((prefixId !== undefined) && (prefixId !== '')) {\n        id = prefixId + '-' + i;\n      } else {\n        id = '' + i;\n      }\n      if (this.isArray(gts)) {\n        gtsList.push(this.gtsFromJSONList(gts, id));\n      }\n      if (this.isGts(gts)) {\n        gtsList.push(this.gtsFromJSON(gts, id));\n      }\n      if (this.isEmbeddedImage(gts)) {\n        gtsList.push({\n          image: gts,\n          caption: 'Image',\n          id,\n        });\n      }\n      if (this.isEmbeddedImageObject(gts)) {\n        gtsList.push({\n          image: gts.image,\n          caption: gts.caption,\n          id,\n        });\n      }\n    });\n    return {\n      content: gtsList,\n    };\n  }\n\n  flatDeep(arr1) {\n    // tslint:disable-next-line:only-arrow-functions\n    return arr1.reduce((acc, val) => {\n      if (Array.isArray(val)) {\n        acc.concat(this.flatDeep(val));\n      } else {\n        acc.concat(val);\n      }\n    }, []);\n  }\n\n  isGts(item) {\n    return !(!item || item.c === null || item.l === null ||\n      item.a === null || item.v === null || !this.isArray(item.v));\n  }\n\n  isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n  }\n\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n// adapted from Canop's JSON,parseMore https://github.com/Canop/JSON.parseMore/\nimport BigNumber from 'bignumber.js';\n\nexport class JsonLib {\n  at;\t // The index of the current character\n  ch;\t // The current character\n  escapee = {\n    '\"': '\"',\n    '\\\\': '\\\\',\n    '/': '/',\n    b: '\\b',\n    f: '\\f',\n    n: '\\n',\n    r: '\\r',\n    t: '\\t'\n  };\n  text;\n\n  private error(m) {\n    throw {\n      name: 'SyntaxError',\n      message: m,\n      at: this.at,\n      text: this.text\n    };\n  }\n\n  private next() {\n    return this.ch = this.text.charAt(this.at++);\n  }\n\n  private check(c) {\n    if (c !== this.ch) {\n      this.error('Expected \\'' + c + '\\' instead of \\'' + this.ch + '\\'');\n    }\n    this.ch = this.text.charAt(this.at++);\n  }\n\n  private number() {\n    let string = '';\n    if (this.ch === '-') {\n      string = '-';\n      this.check('-');\n    }\n    if (this.ch === 'I') {\n      this.check('I');\n      this.check('n');\n      this.check('f');\n      this.check('i');\n      this.check('n');\n      this.check('i');\n      this.check('t');\n      this.check('y');\n      return -Infinity;\n    }\n    while (this.ch >= '0' && this.ch <= '9') {\n      string += this.ch;\n      this.next();\n    }\n    if (this.ch === '.') {\n      string += '.';\n      while (this.next() && this.ch >= '0' && this.ch <= '9') {\n        string += this.ch;\n      }\n    }\n    if (this.ch === 'e' || this.ch === 'E') {\n      string += this.ch;\n      this.next();\n      if (this.ch === '-' || this.ch === '+') {\n        string += this.ch;\n        this.next();\n      }\n      while (this.ch >= '0' && this.ch <= '9') {\n        string += this.ch;\n        this.next();\n      }\n    }\n    return this.testBigInt(string);\n  }\n\n  private testBigInt(str: string) {\n    if(str.replace('-', '').split('.')[0].length > 16) {\n      return new BigNumber(str);\n    }else {\n      return +str;\n    }\n  }\n\n  private string() {\n    let hex;\n    let string = '';\n    let uffff;\n    if (this.ch === '\"') {\n      while (this.next()) {\n        if (this.ch === '\"') {\n          this.next();\n          return string;\n        }\n        if (this.ch === '\\\\') {\n          this.next();\n          if (this.ch === 'u') {\n            uffff = 0;\n            for (let i = 0; i < 4; i++) {\n              hex = parseInt(this.next(), 16);\n              if (!isFinite(hex)) {\n                break;\n              }\n              uffff = uffff * 16 + hex;\n            }\n            string += String.fromCharCode(uffff);\n          } else if (this.escapee[this.ch]) {\n            string += this.escapee[this.ch];\n          } else {\n            break;\n          }\n        } else {\n          string += this.ch;\n        }\n      }\n    }\n    this.error('Bad string');\n  }\n\n  private white() { // Skip whitespace.\n    while (this.ch && this.ch <= ' ') {\n      this.next();\n    }\n  }\n\n  private word() {\n    switch (this.ch) {\n      case 't':\n        this.check('t');\n        this.check('r');\n        this.check('u');\n        this.check('e');\n        return true;\n      case 'f':\n        this.check('f');\n        this.check('a');\n        this.check('l');\n        this.check('s');\n        this.check('e');\n        return false;\n      case 'n':\n        this.check('n');\n        this.check('u');\n        this.check('l');\n        this.check('l');\n        return null;\n      case 'N':\n        this.check('N');\n        this.check('a');\n        this.check('N');\n        return NaN;\n      case 'I':\n        this.check('I');\n        this.check('n');\n        this.check('f');\n        this.check('i');\n        this.check('n');\n        this.check('i');\n        this.check('t');\n        this.check('y');\n        return Infinity;\n    }\n    this.error('Unexpected \\'' + this.ch + '\\'');\n  }\n\n  private array() {\n    const array = [];\n    if (this.ch === '[') {\n      this.check('[');\n      this.white();\n      if (this.ch === ']') {\n        this.check(']');\n        return array;   // empty array\n      }\n      while (this.ch) {\n        array.push(this.value());\n        this.white();\n        if (this.ch === ']') {\n          this.check(']');\n          return array;\n        }\n        this.check(',');\n        this.white();\n      }\n    }\n    this.error('Bad array');\n  }\n\n  private object() {\n    let key;\n    const object = {};\n    if (this.ch === '{') {\n      this.check('{');\n      this.white();\n      if (this.ch === '}') {\n        this.check('}');\n        return object;   // empty object\n      }\n      while (this.ch) {\n        key = this.string();\n        this.white();\n        this.check(':');\n        if (Object.hasOwnProperty.call(object, key)) {\n          this.error('Duplicate key \"' + key + '\"');\n        }\n        object[key] = this.value();\n        this.white();\n        if (this.ch === '}') {\n          this.check('}');\n          return object;\n        }\n        this.check(',');\n        this.white();\n      }\n    }\n    this.error('Bad object');\n  }\n\n  private value() {\n    this.white();\n    switch (this.ch) {\n      case '{':\n        return this.object();\n      case '[':\n        return this.array();\n      case '\"':\n        return this.string();\n      case '-':\n        return this.number();\n      default:\n        return this.ch >= '0' && this.ch <= '9' ? this.number() : this.word();\n    }\n  }\n\n  public parse(source, reviver) {\n    let result;\n    this.text = source;\n    this.at = 0;\n    this.ch = ' ';\n    result = this.value();\n    this.white();\n    if (this.ch) {\n      this.error('Syntax error');\n    }\n    return typeof reviver === 'function'\n      ? (function walk(holder, key) {\n        let k;\n        let v;\n        const value = holder[key];\n        if (value && typeof value === 'object') {\n          for (k in value) {\n            if (Object.prototype.hasOwnProperty.call(value, k)) {\n              v = walk(value, k);\n              if (v !== undefined) {\n                value[k] = v;\n              } else {\n                delete value[k];\n              }\n            }\n          }\n        }\n        return reviver.call(holder, key, value);\n      }({'': result}, ''))\n      : result;\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {GTSLib} from '../../model/gts.lib';\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {Logger} from '../../model/logger';\nimport {JsonLib} from '../../model/jsonLib';\n\n@Component({\n  selector: 'warpview-image-result',\n  templateUrl: './warp-view-image-result.html',\n  styleUrls: ['./warp-view-image-result.scss'],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class WarpViewImageResult {\n\n  @Input() set debug(debug: boolean | string) {\n    if (typeof debug === 'string') {\n      debug = 'true' === debug;\n    }\n    this._debug = debug;\n    this.LOG.setDebug(debug);\n  }\n\n  get debug() {\n    return this._debug;\n  }\n\n  @Input() set result(res: string) {\n    this._res = res;\n    this._result = new JsonLib().parse(res || '[]', undefined);\n    this.loading = true;\n    this.LOG.debug(['isArray'], 'The new value of result is: ', res);\n    if (res && this.gtsLib.isArray(this._result)) {\n      this.imageList = this._result.filter((v: any) => {\n        return ((typeof (v) === 'string') && (String(v).startsWith('data:image/png;base64,')));\n      });\n    } else {\n      this.imageList = [];\n    }\n    this.loading = false;\n  }\n\n  get result(): string {\n    return this._res;\n  }\n\n  @Input() set theme(newValue: string) {\n    this._theme = newValue;\n  }\n\n  get theme(): string {\n    return this._theme;\n  }\n\n  @Input() config: object = {};\n\n\n  // tslint:disable-next-line:variable-name\n  _result: any[];\n  _res: string;\n  // tslint:disable-next-line:variable-name\n  _theme = 'light';\n  // tslint:disable-next-line:variable-name\n  _debug = false;\n  loading = false;\n  imageList: string[] = [];\n  private LOG: Logger;\n\n  constructor(private gtsLib: GTSLib) {\n    this.LOG = new Logger(WarpViewImageResult, this._debug);\n  }\n\n  isArray(arr: any) {\n    return this.gtsLib.isArray(arr);\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {GTSLib} from '../../model/gts.lib';\nimport {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {JsonLib} from '../../model/jsonLib';\n\n@Component({\n  selector: 'warpview-result',\n  templateUrl: './warp-view-result.html',\n  styleUrls: ['./warp-view-result.scss'],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class WarpViewResult {\n\n  @Input() theme = 'light';\n  @Input() config: object = {};\n  @Input() loading = false;\n  _res: string;\n  _result: any[];\n  _resultStr: any[];\n\n  @Input()\n  get result(): string {\n    return this._res;\n  };\n\n  set result(res: string) {\n    this._res = res;\n    this._result = new JsonLib().parse(res || '[]', undefined);\n    this._resultStr = (this._result || []).map(l => {\n      const lstr = JSON.stringify(l);\n      if (lstr.startsWith('[') || lstr.startsWith('{')) {\n        return lstr;\n      } else {\n        return l;\n      }\n    });\n  }\n\n  constructor(private gtsLib: GTSLib) {\n  }\n\n  isArray(arr: any) {\n    return this.gtsLib.isArray(arr);\n  }\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class EditorConfig {\n  quickSuggestionsDelay? = 10;\n  quickSuggestions? = true;\n  tabSize? = 2;\n  minLineNumber? = 10;\n  enableDebug? = false;\n  rawResultsReadOnly? = true;\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nimport {Utils} from '../../model/utils';\nimport {AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {editor} from 'monaco-editor';\nimport {Logger} from '../../model/logger';\nimport {Config} from '../../model/config';\nimport {EditorConfig} from '../../model/editorConfig';\nimport IStandaloneCodeEditor = editor.IStandaloneCodeEditor;\nimport setTheme = editor.setTheme;\nimport create = editor.create;\nimport IEditorOptions = editor.IEditorOptions;\n\n@Component({\n  selector: 'warpview-raw-result',\n  templateUrl: './warp-view-raw-result.component.html',\n  styleUrls: ['./warp-view-raw-result.component.scss'],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class WarpViewRawResultComponent implements OnInit, AfterViewInit {\n  @ViewChild('editor', {static: true}) editor: ElementRef;\n\n  @Input() set debug(debug: boolean | string) {\n    if (typeof debug === 'string') {\n      debug = 'true' === debug;\n    }\n    this._debug = debug;\n    this.LOG.setDebug(debug);\n  }\n\n  get debug() {\n    return this._debug;\n  }\n\n  @Input() set theme(newValue: string) {\n    this.LOG.debug(['WarpViewRawResult'], 'The new value of theme is: ', newValue);\n    if ('dark' === newValue) {\n      this.monacoTheme = 'vs-dark';\n    } else {\n      this.monacoTheme = 'vs';\n    }\n    this.LOG.debug(['WarpViewRawResult'], 'The new value of theme is: ', this.monacoTheme);\n    this._theme = newValue;\n    setTheme(this.monacoTheme);\n  }\n\n  get theme(): string {\n    return this._theme;\n  }\n\n  @Input() set result(newValue: string) {\n    this.loading = true;\n    this._result = newValue;\n    this.LOG.debug(['WarpViewRawResult'], 'The new value of result is: ', newValue);\n    this.buildEditor(this._result || '');\n    this.loading = false;\n  }\n\n  get result(): string {\n    return this._result;\n  }\n\n  @Input('config') set config(config: Config | string) {\n    let conf = (typeof config === 'string') ? JSON.parse(config || '{}') : config || {};\n    this._config = Utils.mergeDeep(this._config, conf);\n    this.LOG.debug(['config'], this._config, conf);\n    if (this.resEd) {\n      this.LOG.debug(['config'], this._config);\n      this.resEd.updateOptions(this.setOptions());\n    }\n  }\n\n  get config(): Config | string {\n    return this._config;\n  }\n\n  @Input() heightLine: number;\n  @Input() heightPx: number;\n\n  loading = false;\n  // tslint:disable-next-line:variable-name\n  _theme = 'light';\n  // tslint:disable-next-line:variable-name\n  _result: string;\n  // tslint:disable-next-line:variable-name\n  _config: Config = {\n    editor: new EditorConfig(),\n    messageClass: '',\n    errorClass: ''\n  };\n  // tslint:disable-next-line:variable-name\n  _debug = false;\n\n  private LOG: Logger;\n\n  private LINE_HEIGHT = 18;\n  private CONTAINER_GUTTER = 10;\n  private resEd: IStandaloneCodeEditor;\n  private monacoTheme = 'vs';\n\n  constructor() {\n    this.LOG = new Logger(WarpViewRawResultComponent, this._debug);\n  }\n\n  ngOnInit() {\n    this._config = Utils.mergeDeep(this._config, this.config);\n    if ('dark' === this.theme) {\n      this.monacoTheme = 'vs-dark';\n    }\n    this.LOG.debug(['ngOnInit'], this.result);\n  }\n\n  buildEditor(json: string) {\n    this.LOG.debug(['buildEditor'], 'buildEditor', json, this._config);\n    if (!this.resEd && json) {\n      this.resEd = create(this.editor.nativeElement, this.setOptions());\n    }\n    if(!!this.resEd) {\n      this.resEd.setValue(json || '');\n    }\n    this.loading = false;\n  }\n\n  adjustHeight() {\n    if (this.editor) {\n      const el = this.editor.nativeElement;\n      const codeContainer = el.getElementsByClassName('view-lines')[0] as HTMLElement;\n      const containerHeight = codeContainer.offsetHeight;\n      let prevLineCount = 0;\n      if (!containerHeight) {\n        // dom hasn't finished settling down. wait a bit more.\n        setTimeout(() => this.adjustHeight(), 0);\n      } else {\n        setTimeout(() => {\n          const height =\n            codeContainer.childElementCount > prevLineCount\n              ? codeContainer.offsetHeight // unfold\n              : codeContainer.childElementCount * this.LINE_HEIGHT + this.CONTAINER_GUTTER; // fold\n          prevLineCount = codeContainer.childElementCount;\n          el.style.height = height + 'px';\n          this.resEd.layout();\n        }, 0);\n      }\n    }\n  }\n\n  ngAfterViewInit() {\n    this.LOG.debug(['ngAfterViewInit'], this._result);\n    this.loading = true;\n    this.buildEditor(JSON.stringify(this._result));\n    this.loading = false;\n  }\n\n  private setOptions(): IEditorOptions {\n    return {\n      value: '',\n      language: 'json',\n      minimap: {enabled: true},\n      automaticLayout: true,\n      scrollBeyondLastLine: false,\n      theme: this.monacoTheme,\n      readOnly: !!this._config.editor.rawResultsReadOnly,\n      fixedOverflowWidgets: true,\n      lineNumbers: 'on',\n      wordWrap: 'on'\n    } as IEditorOptions;\n  }\n}\n","/*\n *  Copyright 2020  SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n */\n\nimport {CUSTOM_ELEMENTS_SCHEMA, NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport {WarpViewEditorComponent} from './elements/warp-view-editor/warp-view-editor.component';\nimport {WarpViewImageResult} from './elements/warp-view-image-result/warp-view-image-result';\nimport {WarpViewRawResultComponent} from './elements/warp-view-raw-result/warp-view-raw-result.component';\nimport {WarpViewResult} from './elements/warp-view-result/warp-view-result';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {GTSLib} from './model/gts.lib';\n\n@NgModule({\n  declarations: [\n    WarpViewEditorComponent,\n    WarpViewImageResult,\n    WarpViewResult,\n    WarpViewRawResultComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  exports: [\n    WarpViewEditorComponent,\n    WarpViewImageResult,\n    WarpViewResult,\n    WarpViewRawResultComponent\n  ],\n  providers: [GTSLib],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  entryComponents: [\n    WarpViewEditorComponent,\n    WarpViewImageResult,\n    WarpViewResult,\n    WarpViewRawResultComponent\n  ],\n})\nexport class WarpViewEditorAngularModule {\n}\n","/*\n *  Copyright 2020 SenX S.A.S.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nexport class ButtonConfig {\n  class: string;\n  label?: string;\n}\n"]}