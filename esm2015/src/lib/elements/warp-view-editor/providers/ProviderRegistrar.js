/*
 *  Copyright 2020 SenX S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
import { WSCompletionItemProvider } from './WSCompletionItemProvider';
import { languages } from 'monaco-editor';
import { Monarch } from '../../../model/monarch';
import { WSLanguageConfiguration } from './WSLanguageConfiguration';
import { WSHoverProvider } from './WSHoverProvider';
import { FLoWSCompletionItemProvider } from './FLoWSCompletionItemProvider';
import { FLoWSHoverProvider } from './FLoWSHoverProvider';
import { FLoWSLanguageConfiguration } from './FLoWSLanguageConfiguration';
import { EditorUtils } from './editorUtils';
var registerCompletionItemProvider = languages.registerCompletionItemProvider;
var setMonarchTokensProvider = languages.setMonarchTokensProvider;
var getLanguages = languages.getLanguages;
var register = languages.register;
var setLanguageConfiguration = languages.setLanguageConfiguration;
var registerHoverProvider = languages.registerHoverProvider;
import { MonarchFlows } from '../../../model/monarchFlows';
export class ProviderRegistrar {
    static register() {
        // WarpScript
        if (!getLanguages().find(l => l.id === EditorUtils.WARPSCRIPT_LANGUAGE)) {
            register({ id: EditorUtils.WARPSCRIPT_LANGUAGE });
            setLanguageConfiguration(EditorUtils.WARPSCRIPT_LANGUAGE, new WSLanguageConfiguration().getConfiguration());
            setMonarchTokensProvider(EditorUtils.WARPSCRIPT_LANGUAGE, Monarch.rules);
            registerCompletionItemProvider(EditorUtils.WARPSCRIPT_LANGUAGE, new WSCompletionItemProvider());
            registerHoverProvider(EditorUtils.WARPSCRIPT_LANGUAGE, new WSHoverProvider());
        }
        // Flows
        if (!getLanguages().find(l => l.id === EditorUtils.FLOWS_LANGUAGE)) {
            register({ id: EditorUtils.FLOWS_LANGUAGE });
            setLanguageConfiguration(EditorUtils.FLOWS_LANGUAGE, new FLoWSLanguageConfiguration().getConfiguration());
            setMonarchTokensProvider(EditorUtils.FLOWS_LANGUAGE, MonarchFlows.rules);
            registerCompletionItemProvider(EditorUtils.FLOWS_LANGUAGE, new FLoWSCompletionItemProvider());
            registerHoverProvider(EditorUtils.FLOWS_LANGUAGE, new FLoWSHoverProvider());
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXJSZWdpc3RyYXIuanMiLCJzb3VyY2VSb290IjoiL2hvbWUveGF2aWVyL3dvcmtzcGFjZS93YXJwdmlldy1lZGl0b3IvcHJvamVjdHMvd2FycHZpZXctZWRpdG9yLW5nLyIsInNvdXJjZXMiOlsic3JjL2xpYi9lbGVtZW50cy93YXJwLXZpZXctZWRpdG9yL3Byb3ZpZGVycy9Qcm92aWRlclJlZ2lzdHJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRztBQUVILE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDRCQUE0QixDQUFDO0FBQ3BFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQy9DLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUMxRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUMsMEJBQTBCLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFDLElBQU8sOEJBQThCLEdBQUcsU0FBUyxDQUFDLDhCQUE4QixDQUFDO0FBQ2pGLElBQU8sd0JBQXdCLEdBQUcsU0FBUyxDQUFDLHdCQUF3QixDQUFDO0FBQ3JFLElBQU8sWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLENBQUM7QUFDN0MsSUFBTyxRQUFRLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUNyQyxJQUFPLHdCQUF3QixHQUFHLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQztBQUNyRSxJQUFPLHFCQUFxQixHQUFHLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFFekQsTUFBTSxPQUFPLGlCQUFpQjtJQUU1QixNQUFNLENBQUMsUUFBUTtRQUNiLGFBQWE7UUFDYixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxXQUFXLENBQUMsbUJBQW1CLENBQUMsRUFBRTtZQUN2RSxRQUFRLENBQUMsRUFBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLG1CQUFtQixFQUFDLENBQUMsQ0FBQztZQUNoRCx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsSUFBSSx1QkFBdUIsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztZQUM1Ryx3QkFBd0IsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pFLDhCQUE4QixDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLHdCQUF3QixFQUFFLENBQUMsQ0FBQztZQUNoRyxxQkFBcUIsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxlQUFlLEVBQUUsQ0FBQyxDQUFDO1NBQy9FO1FBQ0QsUUFBUTtRQUNSLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLFdBQVcsQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUNsRSxRQUFRLENBQUMsRUFBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLGNBQWMsRUFBQyxDQUFDLENBQUM7WUFDM0Msd0JBQXdCLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxJQUFJLDBCQUEwQixFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1lBQzFHLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pFLDhCQUE4QixDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsSUFBSSwyQkFBMkIsRUFBRSxDQUFDLENBQUM7WUFDOUYscUJBQXFCLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxJQUFJLGtCQUFrQixFQUFFLENBQUMsQ0FBQztTQUM3RTtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgU2VuWCBTLkEuUy5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmltcG9ydCB7V1NDb21wbGV0aW9uSXRlbVByb3ZpZGVyfSBmcm9tICcuL1dTQ29tcGxldGlvbkl0ZW1Qcm92aWRlcic7XG5pbXBvcnQge2xhbmd1YWdlc30gZnJvbSAnbW9uYWNvLWVkaXRvcic7XG5pbXBvcnQge01vbmFyY2h9IGZyb20gJy4uLy4uLy4uL21vZGVsL21vbmFyY2gnO1xuaW1wb3J0IHtXU0xhbmd1YWdlQ29uZmlndXJhdGlvbn0gZnJvbSAnLi9XU0xhbmd1YWdlQ29uZmlndXJhdGlvbic7XG5pbXBvcnQge1dTSG92ZXJQcm92aWRlcn0gZnJvbSAnLi9XU0hvdmVyUHJvdmlkZXInO1xuaW1wb3J0IHtGTG9XU0NvbXBsZXRpb25JdGVtUHJvdmlkZXJ9IGZyb20gJy4vRkxvV1NDb21wbGV0aW9uSXRlbVByb3ZpZGVyJztcbmltcG9ydCB7RkxvV1NIb3ZlclByb3ZpZGVyfSBmcm9tICcuL0ZMb1dTSG92ZXJQcm92aWRlcic7XG5pbXBvcnQge0ZMb1dTTGFuZ3VhZ2VDb25maWd1cmF0aW9ufSBmcm9tICcuL0ZMb1dTTGFuZ3VhZ2VDb25maWd1cmF0aW9uJztcbmltcG9ydCB7RWRpdG9yVXRpbHN9IGZyb20gJy4vZWRpdG9yVXRpbHMnO1xuaW1wb3J0IHJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlciA9IGxhbmd1YWdlcy5yZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXI7XG5pbXBvcnQgc2V0TW9uYXJjaFRva2Vuc1Byb3ZpZGVyID0gbGFuZ3VhZ2VzLnNldE1vbmFyY2hUb2tlbnNQcm92aWRlcjtcbmltcG9ydCBnZXRMYW5ndWFnZXMgPSBsYW5ndWFnZXMuZ2V0TGFuZ3VhZ2VzO1xuaW1wb3J0IHJlZ2lzdGVyID0gbGFuZ3VhZ2VzLnJlZ2lzdGVyO1xuaW1wb3J0IHNldExhbmd1YWdlQ29uZmlndXJhdGlvbiA9IGxhbmd1YWdlcy5zZXRMYW5ndWFnZUNvbmZpZ3VyYXRpb247XG5pbXBvcnQgcmVnaXN0ZXJIb3ZlclByb3ZpZGVyID0gbGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcjtcbmltcG9ydCB7TW9uYXJjaEZsb3dzfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9tb25hcmNoRmxvd3MnO1xuXG5leHBvcnQgY2xhc3MgUHJvdmlkZXJSZWdpc3RyYXIge1xuXG4gIHN0YXRpYyByZWdpc3RlcigpIHtcbiAgICAvLyBXYXJwU2NyaXB0XG4gICAgaWYgKCFnZXRMYW5ndWFnZXMoKS5maW5kKGwgPT4gbC5pZCA9PT0gRWRpdG9yVXRpbHMuV0FSUFNDUklQVF9MQU5HVUFHRSkpIHtcbiAgICAgIHJlZ2lzdGVyKHtpZDogRWRpdG9yVXRpbHMuV0FSUFNDUklQVF9MQU5HVUFHRX0pO1xuICAgICAgc2V0TGFuZ3VhZ2VDb25maWd1cmF0aW9uKEVkaXRvclV0aWxzLldBUlBTQ1JJUFRfTEFOR1VBR0UsIG5ldyBXU0xhbmd1YWdlQ29uZmlndXJhdGlvbigpLmdldENvbmZpZ3VyYXRpb24oKSk7XG4gICAgICBzZXRNb25hcmNoVG9rZW5zUHJvdmlkZXIoRWRpdG9yVXRpbHMuV0FSUFNDUklQVF9MQU5HVUFHRSwgTW9uYXJjaC5ydWxlcyk7XG4gICAgICByZWdpc3RlckNvbXBsZXRpb25JdGVtUHJvdmlkZXIoRWRpdG9yVXRpbHMuV0FSUFNDUklQVF9MQU5HVUFHRSwgbmV3IFdTQ29tcGxldGlvbkl0ZW1Qcm92aWRlcigpKTtcbiAgICAgIHJlZ2lzdGVySG92ZXJQcm92aWRlcihFZGl0b3JVdGlscy5XQVJQU0NSSVBUX0xBTkdVQUdFLCBuZXcgV1NIb3ZlclByb3ZpZGVyKCkpO1xuICAgIH1cbiAgICAvLyBGbG93c1xuICAgIGlmICghZ2V0TGFuZ3VhZ2VzKCkuZmluZChsID0+IGwuaWQgPT09IEVkaXRvclV0aWxzLkZMT1dTX0xBTkdVQUdFKSkge1xuICAgICAgcmVnaXN0ZXIoe2lkOiBFZGl0b3JVdGlscy5GTE9XU19MQU5HVUFHRX0pO1xuICAgICAgc2V0TGFuZ3VhZ2VDb25maWd1cmF0aW9uKEVkaXRvclV0aWxzLkZMT1dTX0xBTkdVQUdFLCBuZXcgRkxvV1NMYW5ndWFnZUNvbmZpZ3VyYXRpb24oKS5nZXRDb25maWd1cmF0aW9uKCkpO1xuICAgICAgc2V0TW9uYXJjaFRva2Vuc1Byb3ZpZGVyKEVkaXRvclV0aWxzLkZMT1dTX0xBTkdVQUdFLCBNb25hcmNoRmxvd3MucnVsZXMpO1xuICAgICAgcmVnaXN0ZXJDb21wbGV0aW9uSXRlbVByb3ZpZGVyKEVkaXRvclV0aWxzLkZMT1dTX0xBTkdVQUdFLCBuZXcgRkxvV1NDb21wbGV0aW9uSXRlbVByb3ZpZGVyKCkpO1xuICAgICAgcmVnaXN0ZXJIb3ZlclByb3ZpZGVyKEVkaXRvclV0aWxzLkZMT1dTX0xBTkdVQUdFLCBuZXcgRkxvV1NIb3ZlclByb3ZpZGVyKCkpO1xuICAgIH1cbiAgfVxufVxuIl19