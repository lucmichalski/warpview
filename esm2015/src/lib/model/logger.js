/*
 *  Copyright 2020 SenX S.A.S.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
export class Logger {
    constructor(className, isDebug = false) {
        this.isDebug = false;
        this.className = className.name;
        this.isDebug = isDebug;
    }
    setDebug(debug) {
        this.isDebug = debug;
    }
    log(level, methods, args) {
        let logChain = [];
        logChain.push(`[${this.className}] ${methods.join(' - ')}`);
        logChain = logChain.concat(args);
        switch (level) {
            case LEVEL.DEBUG: {
                if (this.isDebug) {
                    // tslint:disable-next-line:no-console
                    console.debug(...logChain);
                }
                break;
            }
            case LEVEL.ERROR: {
                console.error(...logChain);
                break;
            }
            case LEVEL.INFO: {
                console.log(...logChain);
                break;
            }
            case LEVEL.WARN: {
                console.warn(...logChain);
                break;
            }
            default: {
                if (this.isDebug) {
                    console.log(...logChain);
                }
            }
        }
    }
    debug(methods, ...args) {
        this.log(LEVEL.DEBUG, methods, args);
    }
    error(methods, ...args) {
        this.log(LEVEL.ERROR, methods, args);
    }
    warn(methods, ...args) {
        this.log(LEVEL.WARN, methods, args);
    }
    info(methods, ...args) {
        this.log(LEVEL.INFO, methods, args);
    }
}
/**
 *
 */
export var LEVEL;
(function (LEVEL) {
    LEVEL[LEVEL["DEBUG"] = 0] = "DEBUG";
    LEVEL[LEVEL["ERROR"] = 1] = "ERROR";
    LEVEL[LEVEL["WARN"] = 2] = "WARN";
    LEVEL[LEVEL["INFO"] = 3] = "INFO";
})(LEVEL || (LEVEL = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3hhdmllci93b3Jrc3BhY2Uvd2FycHZpZXctZWRpdG9yL3Byb2plY3RzL3dhcnB2aWV3LWVkaXRvci1uZy8iLCJzb3VyY2VzIjpbInNyYy9saWIvbW9kZWwvbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsTUFBTSxPQUFPLE1BQU07SUFLakIsWUFBWSxTQUFjLEVBQUUsVUFBbUIsS0FBSztRQUZwRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBR2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBYztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQVksRUFBRSxPQUFjLEVBQUUsSUFBVztRQUMzQyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUQsUUFBUSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakMsUUFBUSxLQUFLLEVBQUU7WUFDYixLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNoQixzQ0FBc0M7b0JBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztpQkFDNUI7Z0JBQ0QsTUFBTTthQUNQO1lBQ0QsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDM0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUN6QixNQUFNO2FBQ1A7WUFDRCxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDZixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7Z0JBQzFCLE1BQU07YUFDUDtZQUNELE9BQU8sQ0FBQyxDQUFDO2dCQUNQLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2lCQUMxQjthQUNGO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQVc7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQVc7UUFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQVc7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWMsRUFBRSxHQUFHLElBQVc7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLEtBRVg7QUFGRCxXQUFZLEtBQUs7SUFDZixtQ0FBSyxDQUFBO0lBQUUsbUNBQUssQ0FBQTtJQUFFLGlDQUFJLENBQUE7SUFBRSxpQ0FBSSxDQUFBO0FBQzFCLENBQUMsRUFGVyxLQUFLLEtBQUwsS0FBSyxRQUVoQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgQ29weXJpZ2h0IDIwMjAgU2VuWCBTLkEuUy5cbiAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqICB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqICBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmV4cG9ydCBjbGFzcyBMb2dnZXIge1xuXG4gIGNsYXNzTmFtZTogc3RyaW5nO1xuICBpc0RlYnVnID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoY2xhc3NOYW1lOiBhbnksIGlzRGVidWc6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgIHRoaXMuY2xhc3NOYW1lID0gY2xhc3NOYW1lLm5hbWU7XG4gICAgdGhpcy5pc0RlYnVnID0gaXNEZWJ1ZztcbiAgfVxuXG4gIHNldERlYnVnKGRlYnVnOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0RlYnVnID0gZGVidWc7XG4gIH1cblxuICBsb2cobGV2ZWw6IExFVkVMLCBtZXRob2RzOiBhbnlbXSwgYXJnczogYW55W10pIHtcbiAgICBsZXQgbG9nQ2hhaW4gPSBbXTtcbiAgICBsb2dDaGFpbi5wdXNoKGBbJHt0aGlzLmNsYXNzTmFtZX1dICR7bWV0aG9kcy5qb2luKCcgLSAnKX1gKTtcbiAgICBsb2dDaGFpbiA9IGxvZ0NoYWluLmNvbmNhdChhcmdzKTtcbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlIExFVkVMLkRFQlVHOiB7XG4gICAgICAgIGlmICh0aGlzLmlzRGVidWcpIHtcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUuZGVidWcoLi4ubG9nQ2hhaW4pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBMRVZFTC5FUlJPUjoge1xuICAgICAgICBjb25zb2xlLmVycm9yKC4uLmxvZ0NoYWluKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIExFVkVMLklORk86IHtcbiAgICAgICAgY29uc29sZS5sb2coLi4ubG9nQ2hhaW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgTEVWRUwuV0FSTjoge1xuICAgICAgICBjb25zb2xlLndhcm4oLi4ubG9nQ2hhaW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgaWYgKHRoaXMuaXNEZWJ1Zykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKC4uLmxvZ0NoYWluKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRlYnVnKG1ldGhvZHM6IGFueVtdLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKExFVkVMLkRFQlVHLCBtZXRob2RzLCBhcmdzKTtcbiAgfVxuXG4gIGVycm9yKG1ldGhvZHM6IGFueVtdLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKExFVkVMLkVSUk9SLCBtZXRob2RzLCBhcmdzKTtcbiAgfVxuXG4gIHdhcm4obWV0aG9kczogYW55W10sIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5sb2coTEVWRUwuV0FSTiwgbWV0aG9kcywgYXJncyk7XG4gIH1cblxuICBpbmZvKG1ldGhvZHM6IGFueVtdLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMubG9nKExFVkVMLklORk8sIG1ldGhvZHMsIGFyZ3MpO1xuICB9XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGVudW0gTEVWRUwge1xuICBERUJVRywgRVJST1IsIFdBUk4sIElORk9cbn1cbiJdfQ==